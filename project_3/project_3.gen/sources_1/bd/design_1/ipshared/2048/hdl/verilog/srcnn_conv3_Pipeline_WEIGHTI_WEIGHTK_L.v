// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_WEIGHTI_WEIGHTK_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RFIFONUM,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        conv3_weights,
        conv3_weights_cast,
        weight_buffer_0_address0,
        weight_buffer_0_ce0,
        weight_buffer_0_we0,
        weight_buffer_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [63:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [63:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [12:0] m_axi_weights_RFIFONUM;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [63:0] conv3_weights;
input  [1:0] conv3_weights_cast;
output  [9:0] weight_buffer_0_address0;
output   weight_buffer_0_ce0;
output   weight_buffer_0_we0;
output  [15:0] weight_buffer_0_d0;

reg ap_idle;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg weight_buffer_0_ce0;
reg weight_buffer_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln119_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weights_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    weights_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln119_reg_571;
reg   [0:0] icmp_ln119_reg_571_pp0_iter1_reg;
wire   [0:0] icmp_ln120_fu_209_p2;
reg   [0:0] icmp_ln120_reg_575;
reg   [0:0] icmp_ln120_reg_575_pp0_iter1_reg;
wire   [5:0] select_ln119_1_fu_215_p3;
reg   [5:0] select_ln119_1_reg_583;
reg   [5:0] select_ln119_1_reg_583_pp0_iter1_reg;
reg   [5:0] select_ln119_1_reg_583_pp0_iter2_reg;
wire   [2:0] select_ln120_fu_312_p3;
reg   [2:0] select_ln120_reg_594;
wire   [2:0] select_ln120_1_fu_320_p3;
reg   [2:0] select_ln120_1_reg_599;
wire   [4:0] select_ln120_2_fu_340_p3;
reg   [4:0] select_ln120_2_reg_609;
wire   [9:0] empty_203_fu_421_p2;
reg   [9:0] empty_203_reg_614;
reg   [9:0] empty_203_reg_614_pp0_iter4_reg;
reg   [9:0] empty_203_reg_614_pp0_iter5_reg;
reg   [9:0] empty_203_reg_614_pp0_iter6_reg;
reg   [9:0] empty_203_reg_614_pp0_iter7_reg;
reg   [9:0] empty_203_reg_614_pp0_iter8_reg;
reg   [9:0] empty_203_reg_614_pp0_iter9_reg;
reg   [9:0] empty_203_reg_614_pp0_iter10_reg;
reg   [9:0] empty_203_reg_614_pp0_iter11_reg;
reg   [9:0] empty_203_reg_614_pp0_iter12_reg;
wire   [0:0] empty_205_fu_450_p1;
reg   [0:0] empty_205_reg_619;
reg   [0:0] empty_205_reg_619_pp0_iter4_reg;
reg   [0:0] empty_205_reg_619_pp0_iter5_reg;
reg   [0:0] empty_205_reg_619_pp0_iter6_reg;
reg   [0:0] empty_205_reg_619_pp0_iter7_reg;
reg   [0:0] empty_205_reg_619_pp0_iter8_reg;
reg   [0:0] empty_205_reg_619_pp0_iter9_reg;
reg   [0:0] empty_205_reg_619_pp0_iter10_reg;
reg   [0:0] empty_205_reg_619_pp0_iter11_reg;
reg   [0:0] empty_205_reg_619_pp0_iter12_reg;
reg   [63:0] weights_addr_reg_624;
reg   [31:0] weights_addr_read_reg_630;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] p_cast3_fu_479_p1;
wire  signed [63:0] p_cast6_cast_fu_469_p1;
reg   [2:0] loop_index_i_fu_100;
wire   [2:0] empty_210_fu_348_p2;
wire    ap_loop_init;
reg   [2:0] k_fu_104;
reg   [5:0] indvar_flatten_fu_108;
wire   [5:0] select_ln120_3_fu_233_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [5:0] bin_fu_112;
reg   [5:0] ap_sig_allocacmp_bin_load;
reg   [9:0] indvar_flatten20_fu_116;
wire   [9:0] add_ln119_1_fu_191_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten20_load;
wire   [5:0] add_ln119_fu_203_p2;
wire   [5:0] add_ln120_1_fu_227_p2;
wire   [4:0] shl_ln1_fu_259_p3;
wire   [0:0] exitcond2847_fu_289_p2;
wire   [0:0] xor_ln119_fu_284_p2;
wire   [2:0] select_ln119_fu_270_p3;
wire   [0:0] and_ln119_fu_295_p2;
wire   [0:0] or_ln120_fu_307_p2;
wire   [2:0] add_ln120_fu_301_p2;
wire   [4:0] shl_ln122_mid1_fu_332_p3;
wire   [4:0] select_ln119_2_fu_277_p3;
wire   [7:0] tmp_6_fu_367_p3;
wire   [8:0] tmp_6_cast_fu_374_p1;
wire   [8:0] select_ln119_1_cast_fu_364_p1;
wire   [8:0] empty_fu_378_p2;
wire   [8:0] select_ln120_1_cast_fu_384_p1;
wire   [8:0] empty_200_fu_387_p2;
wire   [7:0] empty_201_fu_397_p1;
wire   [9:0] p_shl_fu_401_p3;
wire   [9:0] p_cast_fu_393_p1;
wire   [9:0] empty_202_fu_409_p2;
wire   [9:0] select_ln120_cast_fu_418_p1;
wire   [9:0] grp_fu_517_p3;
wire   [9:0] select_ln120_3_cast_fu_415_p1;
(* use_dsp48 = "no" *) wire   [9:0] add_ln122_fu_427_p2;
wire   [9:0] empty_204_fu_432_p2;
wire   [10:0] tmp_s_fu_438_p3;
wire   [63:0] p_cast27_fu_446_p1;
wire   [63:0] empty_206_fu_454_p2;
wire   [61:0] p_cast6_fu_459_p4;
wire   [1:0] p_cast5_fu_483_p3;
wire   [1:0] empty_207_fu_490_p2;
wire   [4:0] tmp_1_fu_495_p3;
wire   [31:0] p_cast28_fu_503_p1;
wire   [31:0] empty_208_fu_507_p2;
wire   [5:0] grp_fu_517_p0;
wire   [4:0] grp_fu_517_p1;
wire   [2:0] grp_fu_517_p2;
reg    grp_fu_517_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_517_p00;
wire   [9:0] grp_fu_517_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mac_muladd_6ns_5ns_3ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
mac_muladd_6ns_5ns_3ns_10_4_1_U386(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_517_p0),
    .din1(grp_fu_517_p1),
    .din2(grp_fu_517_p2),
    .ce(grp_fu_517_ce),
    .dout(grp_fu_517_p3)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln119_fu_185_p2 == 1'd0))) begin
            bin_fu_112 <= select_ln119_1_fu_215_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            bin_fu_112 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln119_fu_185_p2 == 1'd0))) begin
            indvar_flatten20_fu_116 <= add_ln119_1_fu_191_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_116 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln119_fu_185_p2 == 1'd0))) begin
            indvar_flatten_fu_108 <= select_ln120_3_fu_233_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_fu_104 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln119_reg_571_pp0_iter1_reg == 1'd0))) begin
            k_fu_104 <= select_ln120_1_fu_320_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            loop_index_i_fu_100 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln119_reg_571_pp0_iter1_reg == 1'd0))) begin
            loop_index_i_fu_100 <= empty_210_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_203_reg_614 <= empty_203_fu_421_p2;
        empty_203_reg_614_pp0_iter10_reg <= empty_203_reg_614_pp0_iter9_reg;
        empty_203_reg_614_pp0_iter11_reg <= empty_203_reg_614_pp0_iter10_reg;
        empty_203_reg_614_pp0_iter12_reg <= empty_203_reg_614_pp0_iter11_reg;
        empty_203_reg_614_pp0_iter4_reg <= empty_203_reg_614;
        empty_203_reg_614_pp0_iter5_reg <= empty_203_reg_614_pp0_iter4_reg;
        empty_203_reg_614_pp0_iter6_reg <= empty_203_reg_614_pp0_iter5_reg;
        empty_203_reg_614_pp0_iter7_reg <= empty_203_reg_614_pp0_iter6_reg;
        empty_203_reg_614_pp0_iter8_reg <= empty_203_reg_614_pp0_iter7_reg;
        empty_203_reg_614_pp0_iter9_reg <= empty_203_reg_614_pp0_iter8_reg;
        empty_205_reg_619 <= empty_205_fu_450_p1;
        empty_205_reg_619_pp0_iter10_reg <= empty_205_reg_619_pp0_iter9_reg;
        empty_205_reg_619_pp0_iter11_reg <= empty_205_reg_619_pp0_iter10_reg;
        empty_205_reg_619_pp0_iter12_reg <= empty_205_reg_619_pp0_iter11_reg;
        empty_205_reg_619_pp0_iter4_reg <= empty_205_reg_619;
        empty_205_reg_619_pp0_iter5_reg <= empty_205_reg_619_pp0_iter4_reg;
        empty_205_reg_619_pp0_iter6_reg <= empty_205_reg_619_pp0_iter5_reg;
        empty_205_reg_619_pp0_iter7_reg <= empty_205_reg_619_pp0_iter6_reg;
        empty_205_reg_619_pp0_iter8_reg <= empty_205_reg_619_pp0_iter7_reg;
        empty_205_reg_619_pp0_iter9_reg <= empty_205_reg_619_pp0_iter8_reg;
        select_ln119_1_reg_583_pp0_iter2_reg <= select_ln119_1_reg_583_pp0_iter1_reg;
        weights_addr_read_reg_630 <= m_axi_weights_RDATA;
        weights_addr_reg_624 <= p_cast6_cast_fu_469_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln119_reg_571 <= icmp_ln119_fu_185_p2;
        icmp_ln119_reg_571_pp0_iter1_reg <= icmp_ln119_reg_571;
        icmp_ln120_reg_575_pp0_iter1_reg <= icmp_ln120_reg_575;
        select_ln119_1_reg_583_pp0_iter1_reg <= select_ln119_1_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln120_reg_575 <= icmp_ln120_fu_209_p2;
        select_ln119_1_reg_583 <= select_ln119_1_fu_215_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_reg_571_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln120_1_reg_599 <= select_ln120_1_fu_320_p3;
        select_ln120_2_reg_609[4 : 2] <= select_ln120_2_fu_340_p3[4 : 2];
        select_ln120_reg_594 <= select_ln120_fu_312_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln119_reg_571_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bin_load = 6'd0;
    end else begin
        ap_sig_allocacmp_bin_load = bin_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_116;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_517_ce = 1'b1;
    end else begin
        grp_fu_517_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_ce0 = 1'b1;
    end else begin
        weight_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_we0 = 1'b1;
    end else begin
        weight_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln119_1_fu_191_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 10'd1);

assign add_ln119_fu_203_p2 = (ap_sig_allocacmp_bin_load + 6'd1);

assign add_ln120_1_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln120_fu_301_p2 = (select_ln119_fu_270_p3 + 3'd1);

assign add_ln122_fu_427_p2 = (grp_fu_517_p3 + select_ln120_3_cast_fu_415_p1);

assign and_ln119_fu_295_p2 = (xor_ln119_fu_284_p2 & exitcond2847_fu_289_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_weights_RVALID == 1'b0)) | ((m_axi_weights_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_weights_RVALID == 1'b0)) | ((m_axi_weights_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = (m_axi_weights_RVALID == 1'b0);
end

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_200_fu_387_p2 = (empty_fu_378_p2 + select_ln120_1_cast_fu_384_p1);

assign empty_201_fu_397_p1 = empty_200_fu_387_p2[7:0];

assign empty_202_fu_409_p2 = (p_shl_fu_401_p3 + p_cast_fu_393_p1);

assign empty_203_fu_421_p2 = (empty_202_fu_409_p2 + select_ln120_cast_fu_418_p1);

assign empty_204_fu_432_p2 = (add_ln122_fu_427_p2 + select_ln120_cast_fu_418_p1);

assign empty_205_fu_450_p1 = empty_204_fu_432_p2[0:0];

assign empty_206_fu_454_p2 = (p_cast27_fu_446_p1 + conv3_weights);

assign empty_207_fu_490_p2 = (p_cast5_fu_483_p3 + conv3_weights_cast);

assign empty_208_fu_507_p2 = weights_addr_read_reg_630 >> p_cast28_fu_503_p1;

assign empty_210_fu_348_p2 = (select_ln120_fu_312_p3 + 3'd1);

assign empty_fu_378_p2 = (tmp_6_cast_fu_374_p1 + select_ln119_1_cast_fu_364_p1);

assign exitcond2847_fu_289_p2 = ((loop_index_i_fu_100 == 3'd5) ? 1'b1 : 1'b0);

assign grp_fu_517_p0 = grp_fu_517_p00;

assign grp_fu_517_p00 = select_ln119_1_fu_215_p3;

assign grp_fu_517_p1 = 10'd25;

assign grp_fu_517_p2 = grp_fu_517_p20;

assign grp_fu_517_p20 = select_ln120_1_fu_320_p3;

assign icmp_ln119_fu_185_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_209_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd25) ? 1'b1 : 1'b0);

assign m_axi_weights_ARADDR = weights_addr_reg_624;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd1;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 64'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign or_ln120_fu_307_p2 = (icmp_ln120_reg_575_pp0_iter1_reg | and_ln119_fu_295_p2);

assign p_cast27_fu_446_p1 = tmp_s_fu_438_p3;

assign p_cast28_fu_503_p1 = tmp_1_fu_495_p3;

assign p_cast3_fu_479_p1 = empty_203_reg_614_pp0_iter12_reg;

assign p_cast5_fu_483_p3 = {{empty_205_reg_619_pp0_iter12_reg}, {1'd0}};

assign p_cast6_cast_fu_469_p1 = $signed(p_cast6_fu_459_p4);

assign p_cast6_fu_459_p4 = {{empty_206_fu_454_p2[63:2]}};

assign p_cast_fu_393_p1 = empty_200_fu_387_p2;

assign p_shl_fu_401_p3 = {{empty_201_fu_397_p1}, {2'd0}};

assign select_ln119_1_cast_fu_364_p1 = select_ln119_1_reg_583_pp0_iter2_reg;

assign select_ln119_1_fu_215_p3 = ((icmp_ln120_fu_209_p2[0:0] == 1'b1) ? add_ln119_fu_203_p2 : ap_sig_allocacmp_bin_load);

assign select_ln119_2_fu_277_p3 = ((icmp_ln120_reg_575_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : shl_ln1_fu_259_p3);

assign select_ln119_fu_270_p3 = ((icmp_ln120_reg_575_pp0_iter1_reg[0:0] == 1'b1) ? 3'd0 : k_fu_104);

assign select_ln120_1_cast_fu_384_p1 = select_ln120_1_reg_599;

assign select_ln120_1_fu_320_p3 = ((and_ln119_fu_295_p2[0:0] == 1'b1) ? add_ln120_fu_301_p2 : select_ln119_fu_270_p3);

assign select_ln120_2_fu_340_p3 = ((and_ln119_fu_295_p2[0:0] == 1'b1) ? shl_ln122_mid1_fu_332_p3 : select_ln119_2_fu_277_p3);

assign select_ln120_3_cast_fu_415_p1 = select_ln120_2_reg_609;

assign select_ln120_3_fu_233_p3 = ((icmp_ln120_fu_209_p2[0:0] == 1'b1) ? 6'd1 : add_ln120_1_fu_227_p2);

assign select_ln120_cast_fu_418_p1 = select_ln120_reg_594;

assign select_ln120_fu_312_p3 = ((or_ln120_fu_307_p2[0:0] == 1'b1) ? 3'd0 : loop_index_i_fu_100);

assign shl_ln122_mid1_fu_332_p3 = {{add_ln120_fu_301_p2}, {2'd0}};

assign shl_ln1_fu_259_p3 = {{k_fu_104}, {2'd0}};

assign tmp_1_fu_495_p3 = {{empty_207_fu_490_p2}, {3'd0}};

assign tmp_6_cast_fu_374_p1 = tmp_6_fu_367_p3;

assign tmp_6_fu_367_p3 = {{select_ln119_1_reg_583_pp0_iter2_reg}, {2'd0}};

assign tmp_s_fu_438_p3 = {{empty_204_fu_432_p2}, {1'd0}};

assign weight_buffer_0_address0 = p_cast3_fu_479_p1;

assign weight_buffer_0_d0 = empty_208_fu_507_p2[15:0];

assign xor_ln119_fu_284_p2 = (icmp_ln120_reg_575_pp0_iter1_reg ^ 1'd1);

always @ (posedge ap_clk) begin
    select_ln120_2_reg_609[1:0] <= 2'b00;
end

endmodule //srcnn_conv3_Pipeline_WEIGHTI_WEIGHTK_L
