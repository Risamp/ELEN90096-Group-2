-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=534814340,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=1420,HLS_SYN_LUT=2394,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv1_output_ftmap_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal conv1_output_ftmap_ce0 : STD_LOGIC;
    signal conv1_output_ftmap_we0 : STD_LOGIC;
    signal conv1_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_ftmap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_ftmap_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv2_output_ftmap_ce0 : STD_LOGIC;
    signal conv2_output_ftmap_we0 : STD_LOGIC;
    signal conv2_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_ftmap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal sext_ln35_fu_582_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_reg_1665 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln35_fu_598_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_reg_1670 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln18_fu_610_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_reg_1678 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln18_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_reg_1695 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_22_fu_650_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_22_reg_1700 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln22_fu_656_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_reg_1705 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_reg_1713 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv1_output_ftmap_addr_reg_1718 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln23_fu_690_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_reg_1723 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_reg_1731 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_2_fu_731_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln35_2_reg_1736 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln26_fu_743_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_reg_1744 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln35_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln35_reg_1749 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln26_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln27_fu_848_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_reg_1762 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln27_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_weights_load_reg_1772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_ftmap_load_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitcast_ln35_1_fu_931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_1020_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_reg_1792 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_8_fu_1024_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_1797 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln17_fu_1038_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln17_reg_1805 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln17_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_fu_1053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal h_3_cast19_fu_1057_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal h_3_cast19_reg_1832 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal empty_29_fu_1086_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_29_reg_1837 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln21_1_fu_1098_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_1_reg_1845 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_3_cast20_fu_1108_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal w_3_cast20_reg_1850 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal conv2_output_ftmap_addr_reg_1855 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln22_2_fu_1132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_2_reg_1863 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln33_fu_1221_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln33_reg_1881 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv2_weights_load_reg_1886 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_1_fu_1227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sub_ln34_fu_1297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln34_reg_1896 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln21_fu_1303_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_reg_1901 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_fu_1313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_reg_1909 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ftmap_addr_reg_1914 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln22_1_fu_1333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_1_reg_1919 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_1_fu_1343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_1_reg_1927 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln34_fu_1353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln25_fu_1357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_reg_1937 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal add_ln25_fu_1367_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln25_reg_1945 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln26_fu_1432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_reg_1950 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln25_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_fu_1436_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_reg_1955 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal add_ln26_1_fu_1446_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_1_reg_1963 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln33_fu_1511_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln33_reg_1968 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln26_1_fu_1440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln33_1_fu_1643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln33_1_reg_1986 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv3_weights_load_reg_1991 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_2_fu_1649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal h_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln23_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_319 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln22_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f1h_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal add42_lcssa_lcssa29_i_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1w_reg_351 : STD_LOGIC_VECTOR (3 downto 0);
    signal add42_lcssa28_i_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_4_reg_374 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_2_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_3_reg_385 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln21_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n1_1_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_add4227_i_phi_fu_410_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4227_i_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal icmp_ln21_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f3h_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal add42_lcssa_lcssa21_i_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal f3w_reg_449 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_1_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add42_lcssa20_i_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal n2_1_reg_472 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_33_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast29_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_5_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_6_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast32_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_6_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_7_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_2_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_11_fu_1577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_14_fu_1632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n1_fu_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal n2_fu_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_1_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_1_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_495_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_5_fu_564_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_fu_572_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal n1_cast_fu_560_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_fu_594_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n1_cast14_fu_556_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast_fu_625_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_20_fu_629_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_21_fu_638_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_642_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast16_fu_634_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal w_cast_fu_676_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_23_fu_680_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln35_1_fu_706_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_1_fu_710_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln35_fu_719_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_723_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_2_fu_715_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_749_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_755_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_24_fu_759_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln84_fu_778_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yPixelClamped_1_fu_802_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_814_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_3_fu_810_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_4_fu_828_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln35_3_fu_832_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln31_fu_854_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln31_fu_860_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_1_fu_864_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_883_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_869_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_2_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_2_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_4_fu_891_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_1_fu_905_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln35_1_fu_913_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_4_fu_917_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln42_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_939_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_949_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_1_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1002_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_1010_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal n2_cast_fu_998_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_25_fu_1014_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln17_fu_989_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_3_cast_fu_1061_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_27_fu_1065_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_28_fu_1074_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_fu_1078_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_cast18_fu_1070_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal w_3_cast_fu_1112_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_30_fu_1116_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_11_fu_1146_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_5_fu_1154_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_4_fu_1142_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln34_1_fu_1158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_1_fu_1164_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln34_1_fu_1168_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln34_fu_1177_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_fu_1181_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln34_2_fu_1173_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln34_2_fu_1189_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln34_2_fu_1195_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln34_3_fu_1138_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_3_fu_1205_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln41_fu_1231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1235_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_1245_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_1_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1289_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_1285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_1_fu_1319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_fu_1323_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_1373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp4_cast_fu_1379_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_32_fu_1383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_1402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1388_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_1_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_2_fu_1410_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yPixelClamped_2_fu_1424_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_1452_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln30_fu_1458_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_fu_1462_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_1481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_3_fu_1475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_3_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_6_fu_1489_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_2_fu_1503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_1523_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_10_fu_1531_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_9_fu_1519_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln34_3_fu_1535_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln34_3_fu_1541_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_4_fu_1545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_fu_1554_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_1558_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln34_4_fu_1550_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln34_4_fu_1566_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_5_fu_1572_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_18_fu_1582_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_12_fu_1590_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_8_fu_1515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_6_fu_1594_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_7_fu_1600_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln34_2_fu_1609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_1613_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln34_13_fu_1605_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_8_fu_1621_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_9_fu_1627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln33_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv1_output_ftmap_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_ftmap_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_output_ftmap_U : component srcnn_conv1_output_ftmap_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4161600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_output_ftmap_address0,
        ce0 => conv1_output_ftmap_ce0,
        we0 => conv1_output_ftmap_we0,
        d0 => conv1_output_ftmap_d0,
        q0 => conv1_output_ftmap_q0);

    conv2_output_ftmap_U : component srcnn_conv2_output_ftmap_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2080800,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_output_ftmap_address0,
        ce0 => conv2_output_ftmap_ce0,
        we0 => conv2_output_ftmap_we0,
        d0 => conv2_output_ftmap_d0,
        q0 => conv2_output_ftmap_q0);

    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_495_p0,
        din1 => grp_fu_495_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U2 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_505_p0,
        din1 => grp_fu_505_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_532,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_509_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add4227_i_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                add4227_i_reg_407 <= conv2_output_ftmap_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                add4227_i_reg_407 <= grp_fu_495_p2;
            end if; 
        end if;
    end process;

    add42_lcssa20_i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_1361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                add42_lcssa20_i_reg_460 <= add42_lcssa_lcssa21_i_reg_439;
            elsif (((icmp_ln33_1_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                add42_lcssa20_i_reg_460 <= empty_33_reg_483;
            end if; 
        end if;
    end process;

    add42_lcssa28_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                add42_lcssa28_i_reg_362 <= add42_lcssa_lcssa29_i_reg_341;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                add42_lcssa28_i_reg_362 <= grp_fu_495_p2;
            end if; 
        end if;
    end process;

    add42_lcssa_lcssa21_i_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                add42_lcssa_lcssa21_i_reg_439 <= bitcast_ln34_fu_1353_p1;
            elsif (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                add42_lcssa_lcssa21_i_reg_439 <= add42_lcssa20_i_reg_460;
            end if; 
        end if;
    end process;

    add42_lcssa_lcssa29_i_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                add42_lcssa_lcssa29_i_reg_341 <= conv1_output_ftmap_q0;
            elsif (((icmp_ln27_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                add42_lcssa_lcssa29_i_reg_341 <= add42_lcssa28_i_reg_362;
            end if; 
        end if;
    end process;

    empty_33_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                empty_33_reg_483 <= add42_lcssa20_i_reg_460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                empty_33_reg_483 <= grp_fu_495_p2;
            end if; 
        end if;
    end process;

    f1h_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                f1h_reg_330 <= ap_const_lv4_0;
            elsif (((icmp_ln27_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                f1h_reg_330 <= add_ln26_reg_1744;
            end if; 
        end if;
    end process;

    f1w_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                f1w_reg_351 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                f1w_reg_351 <= add_ln27_reg_1762;
            end if; 
        end if;
    end process;

    f3h_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                f3h_reg_428 <= ap_const_lv3_0;
            elsif (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                f3h_reg_428 <= add_ln25_reg_1945;
            end if; 
        end if;
    end process;

    f3w_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_1361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                f3w_reg_449 <= ap_const_lv3_0;
            elsif (((icmp_ln33_1_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                f3w_reg_449 <= add_ln26_1_reg_1963;
            end if; 
        end if;
    end process;

    h_1_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_1032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                h_1_fu_164 <= ap_const_lv8_0;
            elsif (((icmp_ln22_1_fu_1337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                h_1_fu_164 <= add_ln21_reg_1909;
            end if; 
        end if;
    end process;

    h_4_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                h_4_reg_374 <= ap_const_lv8_0;
            elsif (((icmp_ln22_2_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                h_4_reg_374 <= add_ln21_1_reg_1845;
            end if; 
        end if;
    end process;

    h_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                h_reg_307 <= ap_const_lv8_0;
            elsif (((icmp_ln23_fu_694_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                h_reg_307 <= add_ln22_reg_1713;
            end if; 
        end if;
    end process;

    n1_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                n1_1_reg_396 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                n1_1_reg_396 <= add_ln33_reg_1881;
            end if; 
        end if;
    end process;

    n1_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n1_fu_156 <= ap_const_lv7_0;
            elsif (((icmp_ln22_fu_660_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n1_fu_156 <= add_ln18_reg_1678;
            end if; 
        end if;
    end process;

    n2_1_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                n2_1_reg_472 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                n2_1_reg_472 <= add_ln33_1_reg_1986;
            end if; 
        end if;
    end process;

    n2_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_604_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n2_fu_160 <= ap_const_lv6_0;
            elsif (((icmp_ln21_1_fu_1092_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                n2_fu_160 <= add_ln17_reg_1805;
            end if; 
        end if;
    end process;

    w_1_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_1307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                w_1_reg_417 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                w_1_reg_417 <= add_ln22_1_reg_1927;
            end if; 
        end if;
    end process;

    w_3_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_1_fu_1092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                w_3_reg_385 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                w_3_reg_385 <= add_ln22_2_reg_1863;
            end if; 
        end if;
    end process;

    w_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_660_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_reg_319 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                w_reg_319 <= add_ln23_reg_1731;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln17_reg_1805 <= add_ln17_fu_1038_p2;
                sext_ln34_reg_1792 <= sext_ln34_fu_1020_p1;
                    tmp_8_reg_1797(10 downto 6) <= tmp_8_fu_1024_p3(10 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln18_reg_1678 <= add_ln18_fu_610_p2;
                add_ln35_reg_1670 <= add_ln35_fu_598_p2;
                sext_ln35_reg_1665 <= sext_ln35_fu_582_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln21_1_reg_1845 <= add_ln21_1_fu_1098_p2;
                empty_29_reg_1837 <= empty_29_fu_1086_p2;
                    h_3_cast19_reg_1832(7 downto 0) <= h_3_cast19_fu_1057_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln21_reg_1909 <= add_ln21_fu_1313_p2;
                sub_ln34_reg_1896 <= sub_ln34_fu_1297_p2;
                    zext_ln21_reg_1901(7 downto 0) <= zext_ln21_fu_1303_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln22_1_reg_1927 <= add_ln22_1_fu_1343_p2;
                output_ftmap_addr_reg_1914 <= zext_ln34_2_fu_1328_p1(16 - 1 downto 0);
                    zext_ln22_1_reg_1919(7 downto 0) <= zext_ln22_1_fu_1333_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln22_2_reg_1863 <= add_ln22_2_fu_1132_p2;
                conv2_output_ftmap_addr_reg_1855 <= p_cast32_fu_1121_p1(21 - 1 downto 0);
                    w_3_cast20_reg_1850(7 downto 0) <= w_3_cast20_fu_1108_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln22_reg_1713 <= add_ln22_fu_666_p2;
                empty_22_reg_1700 <= empty_22_fu_650_p2;
                    zext_ln22_reg_1705(7 downto 0) <= zext_ln22_fu_656_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_1731 <= add_ln23_fu_700_p2;
                conv1_output_ftmap_addr_reg_1718 <= p_cast29_fu_685_p1(22 - 1 downto 0);
                    zext_ln23_reg_1723(7 downto 0) <= zext_ln23_fu_690_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln25_reg_1945 <= add_ln25_fu_1367_p2;
                    zext_ln25_reg_1937(2 downto 0) <= zext_ln25_fu_1357_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln26_1_reg_1963 <= add_ln26_1_fu_1446_p2;
                    zext_ln26_reg_1955(2 downto 0) <= zext_ln26_fu_1436_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln26_reg_1744 <= add_ln26_fu_743_p2;
                add_ln35_2_reg_1736 <= add_ln35_2_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln27_reg_1762 <= add_ln27_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln33_1_reg_1986 <= add_ln33_1_fu_1643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln33_reg_1881 <= add_ln33_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv1_weights_load_reg_1772 <= conv1_weights_q0;
                input_ftmap_load_reg_1777 <= input_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                conv2_weights_load_reg_1886 <= conv2_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                conv3_weights_load_reg_1991 <= conv3_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_19_reg_1695 <= empty_19_fu_621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                empty_26_reg_1827 <= empty_26_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_1032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                empty_31_reg_1822 <= empty_31_fu_1044_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_514 <= conv1_output_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_520 <= grp_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_532 <= grp_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_537 <= conv2_output_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_1361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                sext_ln26_reg_1950 <= sext_ln26_fu_1432_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                sext_ln33_reg_1968 <= sext_ln33_fu_1511_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sub_ln35_reg_1749 <= sub_ln35_fu_822_p2;
            end if;
        end if;
    end process;
    zext_ln22_reg_1705(9 downto 8) <= "00";
    zext_ln23_reg_1723(9 downto 8) <= "00";
    tmp_8_reg_1797(5 downto 0) <= "000000";
    h_3_cast19_reg_1832(16 downto 8) <= "000000000";
    w_3_cast20_reg_1850(21 downto 8) <= "00000000000000";
    zext_ln21_reg_1901(9 downto 8) <= "00";
    zext_ln22_1_reg_1919(9 downto 8) <= "00";
    zext_ln25_reg_1937(8 downto 3) <= "000000";
    zext_ln26_reg_1955(9 downto 3) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_604_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln26_fu_737_p2, ap_CS_fsm_state8, icmp_ln27_fu_842_p2, ap_CS_fsm_state22, icmp_ln17_fu_1032_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state44, icmp_ln25_fu_1361_p2, ap_CS_fsm_state45, icmp_ln26_1_fu_1440_p2, ap_CS_fsm_state46, icmp_ln23_fu_694_p2, icmp_ln22_fu_660_p2, icmp_ln22_2_fu_1126_p2, icmp_ln21_1_fu_1092_p2, icmp_ln21_fu_1307_p2, icmp_ln33_1_fu_1637_p2, icmp_ln22_1_fu_1337_p2, icmp_ln33_fu_1215_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_604_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln22_fu_660_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_694_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln26_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln27_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln17_fu_1032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln21_1_fu_1092_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln22_2_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln33_fu_1215_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln21_fu_1307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln22_1_fu_1337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln25_fu_1361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln26_1_fu_1440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln33_1_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_1038_p2 <= std_logic_vector(unsigned(n2_fu_160) + unsigned(ap_const_lv6_1));
    add_ln18_fu_610_p2 <= std_logic_vector(unsigned(n1_fu_156) + unsigned(ap_const_lv7_1));
    add_ln21_1_fu_1098_p2 <= std_logic_vector(unsigned(h_4_reg_374) + unsigned(ap_const_lv8_1));
    add_ln21_fu_1313_p2 <= std_logic_vector(unsigned(h_1_fu_164) + unsigned(ap_const_lv8_1));
    add_ln22_1_fu_1343_p2 <= std_logic_vector(unsigned(w_1_reg_417) + unsigned(ap_const_lv8_1));
    add_ln22_2_fu_1132_p2 <= std_logic_vector(unsigned(w_3_reg_385) + unsigned(ap_const_lv8_1));
    add_ln22_fu_666_p2 <= std_logic_vector(unsigned(h_reg_307) + unsigned(ap_const_lv8_1));
    add_ln23_fu_700_p2 <= std_logic_vector(unsigned(w_reg_319) + unsigned(ap_const_lv8_1));
    add_ln25_fu_1367_p2 <= std_logic_vector(unsigned(f3h_reg_428) + unsigned(ap_const_lv3_1));
    add_ln26_1_fu_1446_p2 <= std_logic_vector(unsigned(f3w_reg_449) + unsigned(ap_const_lv3_1));
    add_ln26_fu_743_p2 <= std_logic_vector(unsigned(f1h_reg_330) + unsigned(ap_const_lv4_1));
    add_ln27_fu_848_p2 <= std_logic_vector(unsigned(f1w_reg_351) + unsigned(ap_const_lv4_1));
    add_ln30_1_fu_1462_p2 <= std_logic_vector(signed(sext_ln30_fu_1458_p1) + signed(zext_ln22_1_reg_1919));
    add_ln30_fu_1452_p2 <= std_logic_vector(unsigned(f3w_reg_449) + unsigned(ap_const_lv3_6));
    add_ln31_1_fu_864_p2 <= std_logic_vector(signed(sext_ln31_fu_860_p1) + signed(zext_ln23_reg_1723));
    add_ln31_fu_854_p2 <= std_logic_vector(unsigned(f1w_reg_351) + unsigned(ap_const_lv4_C));
    add_ln33_1_fu_1643_p2 <= std_logic_vector(unsigned(n2_1_reg_472) + unsigned(ap_const_lv6_1));
    add_ln33_fu_1221_p2 <= std_logic_vector(unsigned(n1_1_reg_396) + unsigned(ap_const_lv7_1));
    add_ln34_1_fu_1168_p2 <= std_logic_vector(signed(sext_ln34_1_fu_1164_p1) + signed(h_3_cast19_reg_1832));
    add_ln34_2_fu_1195_p2 <= std_logic_vector(unsigned(sub_ln34_2_fu_1189_p2) + unsigned(w_3_cast20_reg_1850));
    add_ln34_3_fu_1205_p2 <= std_logic_vector(unsigned(tmp_8_reg_1797) + unsigned(zext_ln34_3_fu_1138_p1));
    add_ln34_4_fu_1545_p2 <= std_logic_vector(signed(sext_ln34_3_fu_1541_p1) + signed(sext_ln26_reg_1950));
    add_ln34_5_fu_1572_p2 <= std_logic_vector(unsigned(sub_ln34_4_fu_1566_p2) + unsigned(sext_ln33_reg_1968));
    add_ln34_6_fu_1594_p2 <= std_logic_vector(unsigned(zext_ln34_12_fu_1590_p1) + unsigned(zext_ln34_8_fu_1515_p1));
    add_ln34_7_fu_1600_p2 <= std_logic_vector(unsigned(add_ln34_6_fu_1594_p2) + unsigned(zext_ln25_reg_1937));
    add_ln34_8_fu_1621_p2 <= std_logic_vector(unsigned(p_shl4_fu_1613_p3) + unsigned(zext_ln34_13_fu_1605_p1));
    add_ln34_9_fu_1627_p2 <= std_logic_vector(unsigned(add_ln34_8_fu_1621_p2) + unsigned(zext_ln26_reg_1955));
    add_ln34_fu_1323_p2 <= std_logic_vector(unsigned(sub_ln34_reg_1896) + unsigned(zext_ln34_1_fu_1319_p1));
    add_ln35_1_fu_710_p2 <= std_logic_vector(unsigned(add_ln35_reg_1670) + unsigned(zext_ln35_1_fu_706_p1));
    add_ln35_2_fu_731_p2 <= std_logic_vector(unsigned(p_shl3_fu_723_p3) + unsigned(zext_ln35_2_fu_715_p1));
    add_ln35_3_fu_832_p2 <= std_logic_vector(unsigned(add_ln35_2_reg_1736) + unsigned(zext_ln35_4_fu_828_p1));
    add_ln35_4_fu_917_p2 <= std_logic_vector(unsigned(sub_ln35_reg_1749) + unsigned(sext_ln35_1_fu_913_p1));
    add_ln35_fu_598_p2 <= std_logic_vector(unsigned(zext_ln35_fu_594_p1) + unsigned(n1_cast14_fu_556_p1));
    add_ln84_fu_782_p2 <= std_logic_vector(signed(sext_ln84_fu_778_p1) + signed(h_reg_307));
    and_ln41_fu_1267_p2 <= (or_ln41_fu_1261_p2 and grp_fu_509_p2);
    and_ln42_fu_971_p2 <= (or_ln42_fu_965_p2 and grp_fu_509_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state41, icmp_ln21_fu_1307_p2)
    begin
        if (((icmp_ln21_fu_1307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_add4227_i_phi_fu_410_p4 <= add4227_i_reg_407;

    ap_ready_assign_proc : process(ap_CS_fsm_state41, icmp_ln21_fu_1307_p2)
    begin
        if (((icmp_ln21_fu_1307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_1_fu_1227_p1 <= conv2_weights_load_reg_1886;
    bitcast_ln34_2_fu_1649_p1 <= conv3_weights_load_reg_1991;
    bitcast_ln34_fu_1353_p1 <= output_ftmap_q0;
    bitcast_ln35_1_fu_931_p1 <= input_ftmap_load_reg_1777;
    bitcast_ln35_fu_927_p1 <= conv1_weights_load_reg_1772;
    bitcast_ln41_fu_1231_p1 <= reg_532;
    bitcast_ln42_fu_935_p1 <= reg_532;
    conv1_biases_address0 <= zext_ln18_fu_551_p1(6 - 1 downto 0);

    conv1_biases_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_biases_ce0 <= ap_const_logic_1;
        else 
            conv1_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ftmap_address0_assign_proc : process(conv1_output_ftmap_addr_reg_1718, ap_CS_fsm_state5, ap_CS_fsm_state27, ap_CS_fsm_state21, p_cast29_fu_685_p1, zext_ln34_6_fu_1200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv1_output_ftmap_address0 <= zext_ln34_6_fu_1200_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_ftmap_address0 <= conv1_output_ftmap_addr_reg_1718;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_output_ftmap_address0 <= p_cast29_fu_685_p1(22 - 1 downto 0);
        else 
            conv1_output_ftmap_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            conv1_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_ftmap_d0 <= 
        ap_const_lv32_0 when (and_ln42_fu_971_p2(0) = '1') else 
        reg_532;

    conv1_output_ftmap_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_ftmap_we0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_weights_address0 <= zext_ln35_5_fu_837_p1(13 - 1 downto 0);

    conv1_weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_weights_ce0 <= ap_const_logic_1;
        else 
            conv1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_biases_address0 <= zext_ln17_fu_993_p1(5 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_ftmap_address0_assign_proc : process(ap_CS_fsm_state25, conv2_output_ftmap_addr_reg_1855, ap_CS_fsm_state46, ap_CS_fsm_state40, p_cast32_fu_1121_p1, zext_ln34_11_fu_1577_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv2_output_ftmap_address0 <= zext_ln34_11_fu_1577_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            conv2_output_ftmap_address0 <= conv2_output_ftmap_addr_reg_1855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_output_ftmap_address0 <= p_cast32_fu_1121_p1(21 - 1 downto 0);
        else 
            conv2_output_ftmap_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state46, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            conv2_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv2_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_output_ftmap_d0 <= 
        ap_const_lv32_0 when (and_ln41_fu_1267_p2(0) = '1') else 
        reg_532;

    conv2_output_ftmap_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            conv2_output_ftmap_we0 <= ap_const_logic_1;
        else 
            conv2_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weights_address0 <= zext_ln34_7_fu_1210_p1(11 - 1 downto 0);

    conv2_weights_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv2_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_weights_address0 <= zext_ln34_14_fu_1632_p1(10 - 1 downto 0);

    conv3_weights_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv3_weights_ce0 <= ap_const_logic_1;
        else 
            conv3_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_621_p1 <= conv1_biases_q0;
    empty_20_fu_629_p2 <= std_logic_vector(signed(sext_ln35_reg_1665) + signed(h_cast_fu_625_p1));
    empty_21_fu_638_p1 <= empty_20_fu_629_p2(14 - 1 downto 0);
    empty_22_fu_650_p2 <= std_logic_vector(unsigned(p_shl2_fu_642_p3) - unsigned(p_cast16_fu_634_p1));
    empty_23_fu_680_p2 <= std_logic_vector(unsigned(empty_22_reg_1700) + unsigned(w_cast_fu_676_p1));
    empty_24_fu_759_p2 <= std_logic_vector(signed(tmp_cast_fu_755_p1) + signed(zext_ln22_reg_1705));
    empty_25_fu_1014_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_1010_p1) - unsigned(n2_cast_fu_998_p1));
    empty_26_fu_1053_p1 <= conv2_biases_q0;
    empty_27_fu_1065_p2 <= std_logic_vector(signed(sext_ln34_reg_1792) + signed(h_3_cast_fu_1061_p1));
    empty_28_fu_1074_p1 <= empty_27_fu_1065_p2(13 - 1 downto 0);
    empty_29_fu_1086_p2 <= std_logic_vector(unsigned(p_shl6_fu_1078_p3) - unsigned(p_cast18_fu_1070_p1));
    empty_30_fu_1116_p2 <= std_logic_vector(unsigned(empty_29_reg_1837) + unsigned(w_3_cast_fu_1112_p1));
    empty_31_fu_1044_p1 <= conv3_biases;
    empty_32_fu_1383_p2 <= std_logic_vector(signed(tmp4_cast_fu_1379_p1) + signed(zext_ln21_reg_1901));
    empty_fu_576_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_572_p1) - unsigned(n1_cast_fu_560_p1));

    grp_fu_495_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state27, ap_CS_fsm_state44, add42_lcssa_lcssa29_i_reg_341, add42_lcssa28_i_reg_362, ap_phi_mux_add4227_i_phi_fu_410_p4, add4227_i_reg_407, add42_lcssa_lcssa21_i_reg_439, empty_33_reg_483, ap_CS_fsm_state13, ap_CS_fsm_state32, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_495_p0 <= empty_33_reg_483;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_495_p0 <= add42_lcssa_lcssa21_i_reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_495_p0 <= add4227_i_reg_407;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_495_p0 <= ap_phi_mux_add4227_i_phi_fu_410_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_495_p0 <= add42_lcssa28_i_reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_495_p0 <= add42_lcssa_lcssa29_i_reg_341;
        else 
            grp_fu_495_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_495_p1_assign_proc : process(reg_520, empty_19_reg_1695, ap_CS_fsm_state7, empty_31_reg_1822, empty_26_reg_1827, ap_CS_fsm_state27, ap_CS_fsm_state44, ap_CS_fsm_state13, ap_CS_fsm_state32, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_495_p1 <= empty_31_reg_1822;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_495_p1 <= empty_26_reg_1827;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_495_p1 <= reg_520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_495_p1 <= empty_19_reg_1695;
        else 
            grp_fu_495_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_505_p0_assign_proc : process(bitcast_ln35_fu_927_p1, ap_CS_fsm_state10, bitcast_ln34_1_fu_1227_p1, ap_CS_fsm_state29, bitcast_ln34_2_fu_1649_p1, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_505_p0 <= bitcast_ln34_2_fu_1649_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_505_p0 <= bitcast_ln34_1_fu_1227_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_505_p0 <= bitcast_ln35_fu_927_p1;
        else 
            grp_fu_505_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_505_p1_assign_proc : process(reg_514, reg_537, ap_CS_fsm_state10, bitcast_ln35_1_fu_931_p1, ap_CS_fsm_state29, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_505_p1 <= reg_537;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_505_p1 <= reg_514;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_505_p1 <= bitcast_ln35_1_fu_931_p1;
        else 
            grp_fu_505_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_3_cast19_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_4_reg_374),17));
    h_3_cast_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_4_reg_374),16));
    h_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_307),17));
    icmp_ln17_fu_1032_p2 <= "1" when (n2_fu_160 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_604_p2 <= "1" when (n1_fu_156 = ap_const_lv7_40) else "0";
    icmp_ln21_1_fu_1092_p2 <= "1" when (h_4_reg_374 = ap_const_lv8_FF) else "0";
    icmp_ln21_fu_1307_p2 <= "1" when (h_1_fu_164 = ap_const_lv8_FF) else "0";
    icmp_ln22_1_fu_1337_p2 <= "1" when (w_1_reg_417 = ap_const_lv8_FF) else "0";
    icmp_ln22_2_fu_1126_p2 <= "1" when (w_3_reg_385 = ap_const_lv8_FF) else "0";
    icmp_ln22_fu_660_p2 <= "1" when (h_reg_307 = ap_const_lv8_FF) else "0";
    icmp_ln23_fu_694_p2 <= "1" when (w_reg_319 = ap_const_lv8_FF) else "0";
    icmp_ln25_fu_1361_p2 <= "1" when (f3h_reg_428 = ap_const_lv3_5) else "0";
    icmp_ln26_1_fu_1440_p2 <= "1" when (f3w_reg_449 = ap_const_lv3_5) else "0";
    icmp_ln26_fu_737_p2 <= "1" when (f1h_reg_330 = ap_const_lv4_9) else "0";
    icmp_ln27_fu_842_p2 <= "1" when (f1w_reg_351 = ap_const_lv4_9) else "0";
    icmp_ln33_1_fu_1637_p2 <= "1" when (n2_1_reg_472 = ap_const_lv6_20) else "0";
    icmp_ln33_fu_1215_p2 <= "1" when (n1_1_reg_396 = ap_const_lv7_40) else "0";
    icmp_ln41_1_fu_1255_p2 <= "1" when (trunc_ln41_fu_1245_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_1249_p2 <= "0" when (tmp_3_fu_1235_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_1_fu_959_p2 <= "1" when (trunc_ln42_fu_949_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_953_p2 <= "0" when (tmp_1_fu_939_p4 = ap_const_lv8_FF) else "1";
    icmp_ln84_1_fu_1396_p2 <= "1" when (signed(empty_32_fu_1383_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_2_fu_877_p2 <= "1" when (signed(add_ln31_1_fu_864_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_3_fu_1475_p2 <= "1" when (signed(add_ln30_1_fu_1462_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_fu_772_p2 <= "1" when (signed(empty_24_fu_759_p2) > signed(ap_const_lv10_FE)) else "0";
    input_ftmap_address0 <= zext_ln35_6_fu_922_p1(16 - 1 downto 0);

    input_ftmap_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_ftmap_ce0 <= ap_const_logic_1;
        else 
            input_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n1_cast14_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_fu_156),11));
    n1_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_fu_156),16));
    n2_cast_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_160),15));
    or_ln41_fu_1261_p2 <= (icmp_ln41_fu_1249_p2 or icmp_ln41_1_fu_1255_p2);
    or_ln42_fu_965_p2 <= (icmp_ln42_fu_953_p2 or icmp_ln42_1_fu_959_p2);
    or_ln83_1_fu_1418_p2 <= (tmp_12_fu_1388_p3 or icmp_ln84_1_fu_1396_p2);
    or_ln83_2_fu_899_p2 <= (tmp_14_fu_869_p3 or icmp_ln84_2_fu_877_p2);
    or_ln83_3_fu_1497_p2 <= (tmp_17_fu_1467_p3 or icmp_ln84_3_fu_1475_p2);
    or_ln83_fu_796_p2 <= (tmp_9_fu_764_p3 or icmp_ln84_fu_772_p2);

    output_ftmap_address0_assign_proc : process(output_ftmap_addr_reg_1914, ap_CS_fsm_state42, ap_CS_fsm_state58, zext_ln34_2_fu_1328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            output_ftmap_address0 <= output_ftmap_addr_reg_1914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_ftmap_address0 <= zext_ln34_2_fu_1328_p1(16 - 1 downto 0);
        else 
            output_ftmap_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_ftmap_ce0 <= ap_const_logic_1;
        else 
            output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_ftmap_d0 <= reg_532;

    output_ftmap_we0_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            output_ftmap_we0 <= ap_const_logic_1;
        else 
            output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast16_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_20_fu_629_p2),22));

        p_cast18_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_27_fu_1065_p2),21));

    p_cast29_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_23_fu_680_p2),64));
    p_cast32_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_fu_1116_p2),64));
    p_shl2_fu_642_p3 <= (empty_21_fu_638_p1 & ap_const_lv8_0);
    p_shl3_fu_723_p3 <= (trunc_ln35_fu_719_p1 & ap_const_lv3_0);
    p_shl4_fu_1613_p3 <= (trunc_ln34_2_fu_1609_p1 & ap_const_lv2_0);
    p_shl6_fu_1078_p3 <= (empty_28_fu_1074_p1 & ap_const_lv8_0);
    p_shl7_fu_1181_p3 <= (trunc_ln34_fu_1177_p1 & ap_const_lv8_0);
    p_shl_fu_1558_p3 <= (trunc_ln34_1_fu_1554_p1 & ap_const_lv8_0);
    select_ln83_2_fu_1410_p3 <= 
        ap_const_lv10_0 when (tmp_13_fu_1402_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_4_fu_891_p3 <= 
        ap_const_lv10_0 when (tmp_15_fu_883_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_6_fu_1489_p3 <= 
        ap_const_lv10_0 when (tmp_19_fu_1481_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_fu_788_p3 <= 
        ap_const_lv8_0 when (tmp_9_fu_764_p3(0) = '1') else 
        ap_const_lv8_FE;
        sext_ln26_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(yPixelClamped_2_fu_1424_p3),16));

        sext_ln30_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_fu_1452_p2),10));

        sext_ln31_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_fu_854_p2),10));

        sext_ln33_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_2_fu_1503_p3),21));

        sext_ln34_1_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln34_1_fu_1158_p2),17));

        sext_ln34_2_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_fu_1168_p2),22));

        sext_ln34_3_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln34_3_fu_1535_p2),16));

        sext_ln34_4_fu_1550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_4_fu_1545_p2),21));

        sext_ln34_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_25_fu_1014_p2),16));

        sext_ln35_1_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_1_fu_905_p3),16));

        sext_ln35_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_576_p2),17));

        sext_ln84_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_749_p2),8));

    sub_ln34_1_fu_1158_p2 <= std_logic_vector(unsigned(zext_ln34_5_fu_1154_p1) - unsigned(zext_ln34_4_fu_1142_p1));
    sub_ln34_2_fu_1189_p2 <= std_logic_vector(unsigned(p_shl7_fu_1181_p3) - unsigned(sext_ln34_2_fu_1173_p1));
    sub_ln34_3_fu_1535_p2 <= std_logic_vector(unsigned(zext_ln34_10_fu_1531_p1) - unsigned(zext_ln34_9_fu_1519_p1));
    sub_ln34_4_fu_1566_p2 <= std_logic_vector(unsigned(p_shl_fu_1558_p3) - unsigned(sext_ln34_4_fu_1550_p1));
    sub_ln34_fu_1297_p2 <= std_logic_vector(unsigned(tmp_s_fu_1289_p3) - unsigned(zext_ln34_fu_1285_p1));
    sub_ln35_fu_822_p2 <= std_logic_vector(unsigned(tmp_10_fu_814_p3) - unsigned(zext_ln35_3_fu_810_p1));
        tmp4_cast_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_1373_p2),10));

    tmp4_fu_1373_p2 <= std_logic_vector(unsigned(f3h_reg_428) + unsigned(ap_const_lv3_6));
    tmp_10_fu_814_p3 <= (yPixelClamped_1_fu_802_p3 & ap_const_lv8_0);
    tmp_11_fu_1146_p3 <= (n1_1_reg_396 & ap_const_lv8_0);
    tmp_12_fu_1388_p3 <= empty_32_fu_1383_p2(9 downto 9);
    tmp_13_fu_1402_p3 <= empty_32_fu_1383_p2(9 downto 9);
    tmp_14_fu_869_p3 <= add_ln31_1_fu_864_p2(9 downto 9);
    tmp_15_fu_883_p3 <= add_ln31_1_fu_864_p2(9 downto 9);
    tmp_16_fu_1523_p3 <= (n2_1_reg_472 & ap_const_lv8_0);
    tmp_17_fu_1467_p3 <= add_ln30_1_fu_1462_p2(9 downto 9);
    tmp_18_fu_1582_p3 <= (n2_1_reg_472 & ap_const_lv2_0);
    tmp_19_fu_1481_p3 <= add_ln30_1_fu_1462_p2(9 downto 9);
    tmp_1_fu_939_p4 <= bitcast_ln42_fu_935_p1(30 downto 23);
    tmp_3_fu_1235_p4 <= bitcast_ln41_fu_1231_p1(30 downto 23);
    tmp_5_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_564_p3),16));
    tmp_5_fu_564_p3 <= (n1_fu_156 & ap_const_lv8_0);
    tmp_6_fu_586_p3 <= (n1_fu_156 & ap_const_lv3_0);
    tmp_7_cast_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1002_p3),15));
    tmp_7_fu_1002_p3 <= (n2_fu_160 & ap_const_lv8_0);
    tmp_8_fu_1024_p3 <= (trunc_ln17_fu_989_p1 & ap_const_lv6_0);
    tmp_9_fu_764_p3 <= empty_24_fu_759_p2(9 downto 9);
        tmp_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_749_p2),10));

    tmp_fu_749_p2 <= std_logic_vector(unsigned(f1h_reg_330) + unsigned(ap_const_lv4_C));
    tmp_s_fu_1289_p3 <= (h_1_fu_164 & ap_const_lv8_0);
    trunc_ln17_fu_989_p1 <= n2_fu_160(5 - 1 downto 0);
    trunc_ln34_1_fu_1554_p1 <= add_ln34_4_fu_1545_p2(13 - 1 downto 0);
    trunc_ln34_2_fu_1609_p1 <= add_ln34_7_fu_1600_p2(8 - 1 downto 0);
    trunc_ln34_fu_1177_p1 <= add_ln34_1_fu_1168_p2(14 - 1 downto 0);
    trunc_ln35_fu_719_p1 <= add_ln35_1_fu_710_p2(10 - 1 downto 0);
    trunc_ln41_fu_1245_p1 <= bitcast_ln41_fu_1231_p1(23 - 1 downto 0);
    trunc_ln42_fu_949_p1 <= bitcast_ln42_fu_935_p1(23 - 1 downto 0);
    w_3_cast20_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_3_reg_385),22));
    w_3_cast_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_3_reg_385),21));
    w_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_319),22));
    xPixelClamped_1_fu_905_p3 <= 
        select_ln83_4_fu_891_p3 when (or_ln83_2_fu_899_p2(0) = '1') else 
        add_ln31_1_fu_864_p2;
    xPixelClamped_2_fu_1503_p3 <= 
        select_ln83_6_fu_1489_p3 when (or_ln83_3_fu_1497_p2(0) = '1') else 
        add_ln30_1_fu_1462_p2;
    yPixelClamped_1_fu_802_p3 <= 
        select_ln83_fu_788_p3 when (or_ln83_fu_796_p2(0) = '1') else 
        add_ln84_fu_782_p2;
    yPixelClamped_2_fu_1424_p3 <= 
        select_ln83_2_fu_1410_p3 when (or_ln83_1_fu_1418_p2(0) = '1') else 
        empty_32_fu_1383_p2;
    zext_ln17_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_160),64));
    zext_ln18_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_fu_156),64));
    zext_ln21_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_fu_164),10));
    zext_ln22_1_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_1_reg_417),10));
    zext_ln22_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_307),10));
    zext_ln23_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_319),10));
    zext_ln25_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f3h_reg_428),9));
    zext_ln26_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f3w_reg_449),10));
    zext_ln34_10_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1523_p3),15));
    zext_ln34_11_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_5_fu_1572_p2),64));
    zext_ln34_12_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1582_p3),9));
    zext_ln34_13_fu_1605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_7_fu_1600_p2),10));
    zext_ln34_14_fu_1632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_9_fu_1627_p2),64));
    zext_ln34_1_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_1_reg_417),16));
    zext_ln34_2_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_1323_p2),64));
    zext_ln34_3_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_1_reg_396),11));
    zext_ln34_4_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_1_reg_396),16));
    zext_ln34_5_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1146_p3),16));
    zext_ln34_6_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_2_fu_1195_p2),64));
    zext_ln34_7_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_3_fu_1205_p2),64));
    zext_ln34_8_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_472),9));
    zext_ln34_9_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_472),15));
    zext_ln34_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_fu_164),16));
    zext_ln35_1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1h_reg_330),11));
    zext_ln35_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_710_p2),13));
    zext_ln35_3_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yPixelClamped_1_fu_802_p3),16));
    zext_ln35_4_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1w_reg_351),13));
    zext_ln35_5_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_3_fu_832_p2),64));
    zext_ln35_6_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_4_fu_917_p2),64));
    zext_ln35_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_586_p3),11));
end behav;
