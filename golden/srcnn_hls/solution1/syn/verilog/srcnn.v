// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=534814340,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=1420,HLS_SYN_LUT=2394,HLS_VERSION=2023_1}" *)

module srcnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        conv3_biases,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0,
        output_ftmap_q0
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_state2 = 58'd2;
parameter    ap_ST_fsm_state3 = 58'd4;
parameter    ap_ST_fsm_state4 = 58'd8;
parameter    ap_ST_fsm_state5 = 58'd16;
parameter    ap_ST_fsm_state6 = 58'd32;
parameter    ap_ST_fsm_state7 = 58'd64;
parameter    ap_ST_fsm_state8 = 58'd128;
parameter    ap_ST_fsm_state9 = 58'd256;
parameter    ap_ST_fsm_state10 = 58'd512;
parameter    ap_ST_fsm_state11 = 58'd1024;
parameter    ap_ST_fsm_state12 = 58'd2048;
parameter    ap_ST_fsm_state13 = 58'd4096;
parameter    ap_ST_fsm_state14 = 58'd8192;
parameter    ap_ST_fsm_state15 = 58'd16384;
parameter    ap_ST_fsm_state16 = 58'd32768;
parameter    ap_ST_fsm_state17 = 58'd65536;
parameter    ap_ST_fsm_state18 = 58'd131072;
parameter    ap_ST_fsm_state19 = 58'd262144;
parameter    ap_ST_fsm_state20 = 58'd524288;
parameter    ap_ST_fsm_state21 = 58'd1048576;
parameter    ap_ST_fsm_state22 = 58'd2097152;
parameter    ap_ST_fsm_state23 = 58'd4194304;
parameter    ap_ST_fsm_state24 = 58'd8388608;
parameter    ap_ST_fsm_state25 = 58'd16777216;
parameter    ap_ST_fsm_state26 = 58'd33554432;
parameter    ap_ST_fsm_state27 = 58'd67108864;
parameter    ap_ST_fsm_state28 = 58'd134217728;
parameter    ap_ST_fsm_state29 = 58'd268435456;
parameter    ap_ST_fsm_state30 = 58'd536870912;
parameter    ap_ST_fsm_state31 = 58'd1073741824;
parameter    ap_ST_fsm_state32 = 58'd2147483648;
parameter    ap_ST_fsm_state33 = 58'd4294967296;
parameter    ap_ST_fsm_state34 = 58'd8589934592;
parameter    ap_ST_fsm_state35 = 58'd17179869184;
parameter    ap_ST_fsm_state36 = 58'd34359738368;
parameter    ap_ST_fsm_state37 = 58'd68719476736;
parameter    ap_ST_fsm_state38 = 58'd137438953472;
parameter    ap_ST_fsm_state39 = 58'd274877906944;
parameter    ap_ST_fsm_state40 = 58'd549755813888;
parameter    ap_ST_fsm_state41 = 58'd1099511627776;
parameter    ap_ST_fsm_state42 = 58'd2199023255552;
parameter    ap_ST_fsm_state43 = 58'd4398046511104;
parameter    ap_ST_fsm_state44 = 58'd8796093022208;
parameter    ap_ST_fsm_state45 = 58'd17592186044416;
parameter    ap_ST_fsm_state46 = 58'd35184372088832;
parameter    ap_ST_fsm_state47 = 58'd70368744177664;
parameter    ap_ST_fsm_state48 = 58'd140737488355328;
parameter    ap_ST_fsm_state49 = 58'd281474976710656;
parameter    ap_ST_fsm_state50 = 58'd562949953421312;
parameter    ap_ST_fsm_state51 = 58'd1125899906842624;
parameter    ap_ST_fsm_state52 = 58'd2251799813685248;
parameter    ap_ST_fsm_state53 = 58'd4503599627370496;
parameter    ap_ST_fsm_state54 = 58'd9007199254740992;
parameter    ap_ST_fsm_state55 = 58'd18014398509481984;
parameter    ap_ST_fsm_state56 = 58'd36028797018963968;
parameter    ap_ST_fsm_state57 = 58'd72057594037927936;
parameter    ap_ST_fsm_state58 = 58'd144115188075855872;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
input  [31:0] conv3_biases;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;
input  [31:0] output_ftmap_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_ftmap_ce0;
reg conv1_weights_ce0;
reg conv1_biases_ce0;
reg conv2_weights_ce0;
reg conv2_biases_ce0;
reg conv3_weights_ce0;
reg[15:0] output_ftmap_address0;
reg output_ftmap_ce0;
reg output_ftmap_we0;

(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [21:0] conv1_output_ftmap_address0;
reg    conv1_output_ftmap_ce0;
reg    conv1_output_ftmap_we0;
wire   [31:0] conv1_output_ftmap_d0;
wire   [31:0] conv1_output_ftmap_q0;
reg   [20:0] conv2_output_ftmap_address0;
reg    conv2_output_ftmap_ce0;
reg    conv2_output_ftmap_we0;
wire   [31:0] conv2_output_ftmap_d0;
wire   [31:0] conv2_output_ftmap_q0;
reg   [31:0] reg_514;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_505_p2;
reg   [31:0] reg_520;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state50;
wire   [31:0] grp_fu_495_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state54;
reg   [31:0] reg_532;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state57;
reg   [31:0] reg_537;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state47;
wire  signed [16:0] sext_ln35_fu_582_p1;
reg  signed [16:0] sext_ln35_reg_1665;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln35_fu_598_p2;
reg   [10:0] add_ln35_reg_1670;
wire   [6:0] add_ln18_fu_610_p2;
reg   [6:0] add_ln18_reg_1678;
wire   [0:0] icmp_ln18_fu_604_p2;
wire   [31:0] empty_19_fu_621_p1;
reg   [31:0] empty_19_reg_1695;
wire    ap_CS_fsm_state3;
wire   [21:0] empty_22_fu_650_p2;
reg   [21:0] empty_22_reg_1700;
wire    ap_CS_fsm_state4;
wire   [9:0] zext_ln22_fu_656_p1;
reg   [9:0] zext_ln22_reg_1705;
wire   [7:0] add_ln22_fu_666_p2;
reg   [7:0] add_ln22_reg_1713;
reg   [21:0] conv1_output_ftmap_addr_reg_1718;
wire    ap_CS_fsm_state5;
wire   [9:0] zext_ln23_fu_690_p1;
reg   [9:0] zext_ln23_reg_1723;
wire   [7:0] add_ln23_fu_700_p2;
reg   [7:0] add_ln23_reg_1731;
wire   [12:0] add_ln35_2_fu_731_p2;
reg   [12:0] add_ln35_2_reg_1736;
wire    ap_CS_fsm_state7;
wire   [3:0] add_ln26_fu_743_p2;
reg   [3:0] add_ln26_reg_1744;
wire   [15:0] sub_ln35_fu_822_p2;
reg   [15:0] sub_ln35_reg_1749;
wire   [0:0] icmp_ln26_fu_737_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] add_ln27_fu_848_p2;
reg   [3:0] add_ln27_reg_1762;
wire   [0:0] icmp_ln27_fu_842_p2;
reg   [31:0] conv1_weights_load_reg_1772;
wire    ap_CS_fsm_state9;
reg   [31:0] input_ftmap_load_reg_1777;
wire   [31:0] bitcast_ln35_fu_927_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] bitcast_ln35_1_fu_931_p1;
wire  signed [15:0] sext_ln34_fu_1020_p1;
reg  signed [15:0] sext_ln34_reg_1792;
wire    ap_CS_fsm_state22;
wire   [10:0] tmp_8_fu_1024_p3;
reg   [10:0] tmp_8_reg_1797;
wire   [5:0] add_ln17_fu_1038_p2;
reg   [5:0] add_ln17_reg_1805;
wire   [0:0] icmp_ln17_fu_1032_p2;
wire   [31:0] empty_31_fu_1044_p1;
reg   [31:0] empty_31_reg_1822;
wire   [31:0] empty_26_fu_1053_p1;
reg   [31:0] empty_26_reg_1827;
wire    ap_CS_fsm_state23;
wire   [16:0] h_3_cast19_fu_1057_p1;
reg   [16:0] h_3_cast19_reg_1832;
wire    ap_CS_fsm_state24;
wire   [20:0] empty_29_fu_1086_p2;
reg   [20:0] empty_29_reg_1837;
wire   [7:0] add_ln21_1_fu_1098_p2;
reg   [7:0] add_ln21_1_reg_1845;
wire   [21:0] w_3_cast20_fu_1108_p1;
reg   [21:0] w_3_cast20_reg_1850;
wire    ap_CS_fsm_state25;
reg   [20:0] conv2_output_ftmap_addr_reg_1855;
wire   [7:0] add_ln22_2_fu_1132_p2;
reg   [7:0] add_ln22_2_reg_1863;
wire    ap_CS_fsm_state27;
wire   [6:0] add_ln33_fu_1221_p2;
reg   [6:0] add_ln33_reg_1881;
reg   [31:0] conv2_weights_load_reg_1886;
wire   [31:0] bitcast_ln34_1_fu_1227_p1;
wire    ap_CS_fsm_state29;
wire   [15:0] sub_ln34_fu_1297_p2;
reg   [15:0] sub_ln34_reg_1896;
wire    ap_CS_fsm_state41;
wire   [9:0] zext_ln21_fu_1303_p1;
reg   [9:0] zext_ln21_reg_1901;
wire   [7:0] add_ln21_fu_1313_p2;
reg   [7:0] add_ln21_reg_1909;
reg   [15:0] output_ftmap_addr_reg_1914;
wire    ap_CS_fsm_state42;
wire   [9:0] zext_ln22_1_fu_1333_p1;
reg   [9:0] zext_ln22_1_reg_1919;
wire   [7:0] add_ln22_1_fu_1343_p2;
reg   [7:0] add_ln22_1_reg_1927;
wire   [31:0] bitcast_ln34_fu_1353_p1;
wire    ap_CS_fsm_state43;
wire   [8:0] zext_ln25_fu_1357_p1;
reg   [8:0] zext_ln25_reg_1937;
wire    ap_CS_fsm_state44;
wire   [2:0] add_ln25_fu_1367_p2;
reg   [2:0] add_ln25_reg_1945;
wire  signed [15:0] sext_ln26_fu_1432_p1;
reg  signed [15:0] sext_ln26_reg_1950;
wire   [0:0] icmp_ln25_fu_1361_p2;
wire   [9:0] zext_ln26_fu_1436_p1;
reg   [9:0] zext_ln26_reg_1955;
wire    ap_CS_fsm_state45;
wire   [2:0] add_ln26_1_fu_1446_p2;
reg   [2:0] add_ln26_1_reg_1963;
wire  signed [20:0] sext_ln33_fu_1511_p1;
reg  signed [20:0] sext_ln33_reg_1968;
wire   [0:0] icmp_ln26_1_fu_1440_p2;
wire    ap_CS_fsm_state46;
wire   [5:0] add_ln33_1_fu_1643_p2;
reg   [5:0] add_ln33_1_reg_1986;
reg   [31:0] conv3_weights_load_reg_1991;
wire   [31:0] bitcast_ln34_2_fu_1649_p1;
wire    ap_CS_fsm_state48;
reg   [7:0] h_reg_307;
wire   [0:0] icmp_ln23_fu_694_p2;
reg   [7:0] w_reg_319;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln22_fu_660_p2;
reg   [3:0] f1h_reg_330;
reg   [31:0] add42_lcssa_lcssa29_i_reg_341;
reg   [3:0] f1w_reg_351;
reg   [31:0] add42_lcssa28_i_reg_362;
reg   [7:0] h_4_reg_374;
wire   [0:0] icmp_ln22_2_fu_1126_p2;
reg   [7:0] w_3_reg_385;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln21_1_fu_1092_p2;
reg   [6:0] n1_1_reg_396;
wire   [31:0] ap_phi_mux_add4227_i_phi_fu_410_p4;
reg   [31:0] add4227_i_reg_407;
reg   [7:0] w_1_reg_417;
wire    ap_CS_fsm_state58;
wire   [0:0] icmp_ln21_fu_1307_p2;
reg   [2:0] f3h_reg_428;
reg   [31:0] add42_lcssa_lcssa21_i_reg_439;
reg   [2:0] f3w_reg_449;
wire   [0:0] icmp_ln33_1_fu_1637_p2;
reg   [31:0] add42_lcssa20_i_reg_460;
reg   [5:0] n2_1_reg_472;
reg   [31:0] empty_33_reg_483;
wire   [63:0] zext_ln18_fu_551_p1;
wire   [63:0] p_cast29_fu_685_p1;
wire   [63:0] zext_ln35_5_fu_837_p1;
wire   [63:0] zext_ln35_6_fu_922_p1;
wire   [63:0] zext_ln17_fu_993_p1;
wire   [63:0] p_cast32_fu_1121_p1;
wire   [63:0] zext_ln34_6_fu_1200_p1;
wire   [63:0] zext_ln34_7_fu_1210_p1;
wire   [63:0] zext_ln34_2_fu_1328_p1;
wire   [63:0] zext_ln34_11_fu_1577_p1;
wire   [63:0] zext_ln34_14_fu_1632_p1;
reg   [6:0] n1_fu_156;
reg   [5:0] n2_fu_160;
reg   [7:0] h_1_fu_164;
wire   [0:0] icmp_ln22_1_fu_1337_p2;
reg   [31:0] grp_fu_495_p0;
reg   [31:0] grp_fu_495_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state51;
reg   [31:0] grp_fu_505_p0;
reg   [31:0] grp_fu_505_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state39;
wire   [14:0] tmp_5_fu_564_p3;
wire   [15:0] tmp_5_cast_fu_572_p1;
wire   [15:0] n1_cast_fu_560_p1;
wire   [15:0] empty_fu_576_p2;
wire   [9:0] tmp_6_fu_586_p3;
wire   [10:0] zext_ln35_fu_594_p1;
wire   [10:0] n1_cast14_fu_556_p1;
wire   [16:0] h_cast_fu_625_p1;
wire  signed [16:0] empty_20_fu_629_p2;
wire   [13:0] empty_21_fu_638_p1;
wire   [21:0] p_shl2_fu_642_p3;
wire  signed [21:0] p_cast16_fu_634_p1;
wire   [21:0] w_cast_fu_676_p1;
wire   [21:0] empty_23_fu_680_p2;
wire   [10:0] zext_ln35_1_fu_706_p1;
wire   [10:0] add_ln35_1_fu_710_p2;
wire   [9:0] trunc_ln35_fu_719_p1;
wire   [12:0] p_shl3_fu_723_p3;
wire   [12:0] zext_ln35_2_fu_715_p1;
wire  signed [3:0] tmp_fu_749_p2;
wire  signed [9:0] tmp_cast_fu_755_p1;
wire   [9:0] empty_24_fu_759_p2;
wire  signed [7:0] sext_ln84_fu_778_p1;
wire   [0:0] tmp_9_fu_764_p3;
wire   [0:0] icmp_ln84_fu_772_p2;
wire   [0:0] or_ln83_fu_796_p2;
wire   [7:0] select_ln83_fu_788_p3;
wire   [7:0] add_ln84_fu_782_p2;
wire   [7:0] yPixelClamped_1_fu_802_p3;
wire   [15:0] tmp_10_fu_814_p3;
wire   [15:0] zext_ln35_3_fu_810_p1;
wire   [12:0] zext_ln35_4_fu_828_p1;
wire   [12:0] add_ln35_3_fu_832_p2;
wire   [3:0] add_ln31_fu_854_p2;
wire  signed [9:0] sext_ln31_fu_860_p1;
wire   [9:0] add_ln31_1_fu_864_p2;
wire   [0:0] tmp_15_fu_883_p3;
wire   [0:0] tmp_14_fu_869_p3;
wire   [0:0] icmp_ln84_2_fu_877_p2;
wire   [0:0] or_ln83_2_fu_899_p2;
wire   [9:0] select_ln83_4_fu_891_p3;
wire   [9:0] xPixelClamped_1_fu_905_p3;
wire  signed [15:0] sext_ln35_1_fu_913_p1;
wire   [15:0] add_ln35_4_fu_917_p2;
wire   [31:0] bitcast_ln42_fu_935_p1;
wire   [7:0] tmp_1_fu_939_p4;
wire   [22:0] trunc_ln42_fu_949_p1;
wire   [0:0] icmp_ln42_1_fu_959_p2;
wire   [0:0] icmp_ln42_fu_953_p2;
wire   [0:0] or_ln42_fu_965_p2;
wire   [0:0] grp_fu_509_p2;
wire   [0:0] and_ln42_fu_971_p2;
wire   [13:0] tmp_7_fu_1002_p3;
wire   [14:0] tmp_7_cast_fu_1010_p1;
wire   [14:0] n2_cast_fu_998_p1;
wire   [14:0] empty_25_fu_1014_p2;
wire   [4:0] trunc_ln17_fu_989_p1;
wire   [15:0] h_3_cast_fu_1061_p1;
wire  signed [15:0] empty_27_fu_1065_p2;
wire   [12:0] empty_28_fu_1074_p1;
wire   [20:0] p_shl6_fu_1078_p3;
wire  signed [20:0] p_cast18_fu_1070_p1;
wire   [20:0] w_3_cast_fu_1112_p1;
wire   [20:0] empty_30_fu_1116_p2;
wire   [14:0] tmp_11_fu_1146_p3;
wire   [15:0] zext_ln34_5_fu_1154_p1;
wire   [15:0] zext_ln34_4_fu_1142_p1;
wire   [15:0] sub_ln34_1_fu_1158_p2;
wire  signed [16:0] sext_ln34_1_fu_1164_p1;
wire  signed [16:0] add_ln34_1_fu_1168_p2;
wire   [13:0] trunc_ln34_fu_1177_p1;
wire   [21:0] p_shl7_fu_1181_p3;
wire  signed [21:0] sext_ln34_2_fu_1173_p1;
wire   [21:0] sub_ln34_2_fu_1189_p2;
wire   [21:0] add_ln34_2_fu_1195_p2;
wire   [10:0] zext_ln34_3_fu_1138_p1;
wire   [10:0] add_ln34_3_fu_1205_p2;
wire   [31:0] bitcast_ln41_fu_1231_p1;
wire   [7:0] tmp_3_fu_1235_p4;
wire   [22:0] trunc_ln41_fu_1245_p1;
wire   [0:0] icmp_ln41_1_fu_1255_p2;
wire   [0:0] icmp_ln41_fu_1249_p2;
wire   [0:0] or_ln41_fu_1261_p2;
wire   [0:0] and_ln41_fu_1267_p2;
wire   [15:0] tmp_s_fu_1289_p3;
wire   [15:0] zext_ln34_fu_1285_p1;
wire   [15:0] zext_ln34_1_fu_1319_p1;
wire   [15:0] add_ln34_fu_1323_p2;
wire   [2:0] tmp4_fu_1373_p2;
wire  signed [9:0] tmp4_cast_fu_1379_p1;
wire   [9:0] empty_32_fu_1383_p2;
wire   [0:0] tmp_13_fu_1402_p3;
wire   [0:0] tmp_12_fu_1388_p3;
wire   [0:0] icmp_ln84_1_fu_1396_p2;
wire   [0:0] or_ln83_1_fu_1418_p2;
wire   [9:0] select_ln83_2_fu_1410_p3;
wire   [9:0] yPixelClamped_2_fu_1424_p3;
wire   [2:0] add_ln30_fu_1452_p2;
wire  signed [9:0] sext_ln30_fu_1458_p1;
wire   [9:0] add_ln30_1_fu_1462_p2;
wire   [0:0] tmp_19_fu_1481_p3;
wire   [0:0] tmp_17_fu_1467_p3;
wire   [0:0] icmp_ln84_3_fu_1475_p2;
wire   [0:0] or_ln83_3_fu_1497_p2;
wire   [9:0] select_ln83_6_fu_1489_p3;
wire   [9:0] xPixelClamped_2_fu_1503_p3;
wire   [13:0] tmp_16_fu_1523_p3;
wire   [14:0] zext_ln34_10_fu_1531_p1;
wire   [14:0] zext_ln34_9_fu_1519_p1;
wire   [14:0] sub_ln34_3_fu_1535_p2;
wire  signed [15:0] sext_ln34_3_fu_1541_p1;
wire  signed [15:0] add_ln34_4_fu_1545_p2;
wire   [12:0] trunc_ln34_1_fu_1554_p1;
wire   [20:0] p_shl_fu_1558_p3;
wire  signed [20:0] sext_ln34_4_fu_1550_p1;
wire   [20:0] sub_ln34_4_fu_1566_p2;
wire   [20:0] add_ln34_5_fu_1572_p2;
wire   [7:0] tmp_18_fu_1582_p3;
wire   [8:0] zext_ln34_12_fu_1590_p1;
wire   [8:0] zext_ln34_8_fu_1515_p1;
wire   [8:0] add_ln34_6_fu_1594_p2;
wire   [8:0] add_ln34_7_fu_1600_p2;
wire   [7:0] trunc_ln34_2_fu_1609_p1;
wire   [9:0] p_shl4_fu_1613_p3;
wire   [9:0] zext_ln34_13_fu_1605_p1;
wire   [9:0] add_ln34_8_fu_1621_p2;
wire   [9:0] add_ln34_9_fu_1627_p2;
wire   [0:0] icmp_ln33_fu_1215_p2;
reg   [57:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 58'd1;
end

srcnn_conv1_output_ftmap_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4161600 ),
    .AddressWidth( 22 ))
conv1_output_ftmap_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_output_ftmap_address0),
    .ce0(conv1_output_ftmap_ce0),
    .we0(conv1_output_ftmap_we0),
    .d0(conv1_output_ftmap_d0),
    .q0(conv1_output_ftmap_q0)
);

srcnn_conv2_output_ftmap_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2080800 ),
    .AddressWidth( 21 ))
conv2_output_ftmap_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_output_ftmap_address0),
    .ce0(conv2_output_ftmap_ce0),
    .we0(conv2_output_ftmap_we0),
    .d0(conv2_output_ftmap_d0),
    .q0(conv2_output_ftmap_q0)
);

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_495_p0),
    .din1(grp_fu_495_p1),
    .ce(1'b1),
    .dout(grp_fu_495_p2)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_505_p0),
    .din1(grp_fu_505_p1),
    .ce(1'b1),
    .dout(grp_fu_505_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_532),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_509_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add4227_i_reg_407 <= conv2_output_ftmap_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        add4227_i_reg_407 <= grp_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        add42_lcssa20_i_reg_460 <= add42_lcssa_lcssa21_i_reg_439;
    end else if (((icmp_ln33_1_fu_1637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        add42_lcssa20_i_reg_460 <= empty_33_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add42_lcssa28_i_reg_362 <= add42_lcssa_lcssa29_i_reg_341;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        add42_lcssa28_i_reg_362 <= grp_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add42_lcssa_lcssa21_i_reg_439 <= bitcast_ln34_fu_1353_p1;
    end else if (((icmp_ln26_1_fu_1440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        add42_lcssa_lcssa21_i_reg_439 <= add42_lcssa20_i_reg_460;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add42_lcssa_lcssa29_i_reg_341 <= conv1_output_ftmap_q0;
    end else if (((icmp_ln27_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        add42_lcssa_lcssa29_i_reg_341 <= add42_lcssa28_i_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_1_fu_1440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        empty_33_reg_483 <= add42_lcssa20_i_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        empty_33_reg_483 <= grp_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f1h_reg_330 <= 4'd0;
    end else if (((icmp_ln27_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        f1h_reg_330 <= add_ln26_reg_1744;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        f1w_reg_351 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        f1w_reg_351 <= add_ln27_reg_1762;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        f3h_reg_428 <= 3'd0;
    end else if (((icmp_ln26_1_fu_1440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        f3h_reg_428 <= add_ln25_reg_1945;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        f3w_reg_449 <= 3'd0;
    end else if (((icmp_ln33_1_fu_1637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        f3w_reg_449 <= add_ln26_1_reg_1963;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        h_1_fu_164 <= 8'd0;
    end else if (((icmp_ln22_1_fu_1337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        h_1_fu_164 <= add_ln21_reg_1909;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        h_4_reg_374 <= 8'd0;
    end else if (((icmp_ln22_2_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        h_4_reg_374 <= add_ln21_1_reg_1845;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_307 <= 8'd0;
    end else if (((icmp_ln23_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        h_reg_307 <= add_ln22_reg_1713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        n1_1_reg_396 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        n1_1_reg_396 <= add_ln33_reg_1881;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n1_fu_156 <= 7'd0;
    end else if (((icmp_ln22_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        n1_fu_156 <= add_ln18_reg_1678;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_1_fu_1440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        n2_1_reg_472 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        n2_1_reg_472 <= add_ln33_1_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_604_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        n2_fu_160 <= 6'd0;
    end else if (((icmp_ln21_1_fu_1092_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        n2_fu_160 <= add_ln17_reg_1805;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        w_1_reg_417 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        w_1_reg_417 <= add_ln22_1_reg_1927;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_1_fu_1092_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        w_3_reg_385 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        w_3_reg_385 <= add_ln22_2_reg_1863;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_reg_319 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        w_reg_319 <= add_ln23_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln17_reg_1805 <= add_ln17_fu_1038_p2;
        sext_ln34_reg_1792 <= sext_ln34_fu_1020_p1;
        tmp_8_reg_1797[10 : 6] <= tmp_8_fu_1024_p3[10 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_1678 <= add_ln18_fu_610_p2;
        add_ln35_reg_1670 <= add_ln35_fu_598_p2;
        sext_ln35_reg_1665 <= sext_ln35_fu_582_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        add_ln21_1_reg_1845 <= add_ln21_1_fu_1098_p2;
        empty_29_reg_1837 <= empty_29_fu_1086_p2;
        h_3_cast19_reg_1832[7 : 0] <= h_3_cast19_fu_1057_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln21_reg_1909 <= add_ln21_fu_1313_p2;
        sub_ln34_reg_1896 <= sub_ln34_fu_1297_p2;
        zext_ln21_reg_1901[7 : 0] <= zext_ln21_fu_1303_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        add_ln22_1_reg_1927 <= add_ln22_1_fu_1343_p2;
        output_ftmap_addr_reg_1914 <= zext_ln34_2_fu_1328_p1;
        zext_ln22_1_reg_1919[7 : 0] <= zext_ln22_1_fu_1333_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln22_2_reg_1863 <= add_ln22_2_fu_1132_p2;
        conv2_output_ftmap_addr_reg_1855 <= p_cast32_fu_1121_p1;
        w_3_cast20_reg_1850[7 : 0] <= w_3_cast20_fu_1108_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln22_reg_1713 <= add_ln22_fu_666_p2;
        empty_22_reg_1700 <= empty_22_fu_650_p2;
        zext_ln22_reg_1705[7 : 0] <= zext_ln22_fu_656_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_1731 <= add_ln23_fu_700_p2;
        conv1_output_ftmap_addr_reg_1718 <= p_cast29_fu_685_p1;
        zext_ln23_reg_1723[7 : 0] <= zext_ln23_fu_690_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        add_ln25_reg_1945 <= add_ln25_fu_1367_p2;
        zext_ln25_reg_1937[2 : 0] <= zext_ln25_fu_1357_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln26_1_reg_1963 <= add_ln26_1_fu_1446_p2;
        zext_ln26_reg_1955[2 : 0] <= zext_ln26_fu_1436_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln26_reg_1744 <= add_ln26_fu_743_p2;
        add_ln35_2_reg_1736 <= add_ln35_2_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln27_reg_1762 <= add_ln27_fu_848_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln33_1_reg_1986 <= add_ln33_1_fu_1643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln33_reg_1881 <= add_ln33_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv1_weights_load_reg_1772 <= conv1_weights_q0;
        input_ftmap_load_reg_1777 <= input_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        conv2_weights_load_reg_1886 <= conv2_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        conv3_weights_load_reg_1991 <= conv3_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_19_reg_1695 <= empty_19_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        empty_26_reg_1827 <= empty_26_fu_1053_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        empty_31_reg_1822 <= empty_31_fu_1044_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_514 <= conv1_output_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_520 <= grp_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_532 <= grp_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_537 <= conv2_output_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        sext_ln26_reg_1950 <= sext_ln26_fu_1432_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_1_fu_1440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        sext_ln33_reg_1968 <= sext_ln33_fu_1511_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sub_ln35_reg_1749 <= sub_ln35_fu_822_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln21_fu_1307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_1307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_biases_ce0 = 1'b1;
    end else begin
        conv1_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_output_ftmap_address0 = zext_ln34_6_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv1_output_ftmap_address0 = conv1_output_ftmap_addr_reg_1718;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv1_output_ftmap_address0 = p_cast29_fu_685_p1;
    end else begin
        conv1_output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state5))) begin
        conv1_output_ftmap_ce0 = 1'b1;
    end else begin
        conv1_output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv1_output_ftmap_we0 = 1'b1;
    end else begin
        conv1_output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_weights_ce0 = 1'b1;
    end else begin
        conv1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv2_biases_ce0 = 1'b1;
    end else begin
        conv2_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        conv2_output_ftmap_address0 = zext_ln34_11_fu_1577_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        conv2_output_ftmap_address0 = conv2_output_ftmap_addr_reg_1855;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        conv2_output_ftmap_address0 = p_cast32_fu_1121_p1;
    end else begin
        conv2_output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state25))) begin
        conv2_output_ftmap_ce0 = 1'b1;
    end else begin
        conv2_output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        conv2_output_ftmap_we0 = 1'b1;
    end else begin
        conv2_output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        conv3_weights_ce0 = 1'b1;
    end else begin
        conv3_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_495_p0 = empty_33_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_495_p0 = add42_lcssa_lcssa21_i_reg_439;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_495_p0 = add4227_i_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_495_p0 = ap_phi_mux_add4227_i_phi_fu_410_p4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_495_p0 = add42_lcssa28_i_reg_362;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_495_p0 = add42_lcssa_lcssa29_i_reg_341;
    end else begin
        grp_fu_495_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_495_p1 = empty_31_reg_1822;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_495_p1 = empty_26_reg_1827;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_495_p1 = reg_520;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_495_p1 = empty_19_reg_1695;
    end else begin
        grp_fu_495_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_505_p0 = bitcast_ln34_2_fu_1649_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_505_p0 = bitcast_ln34_1_fu_1227_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_505_p0 = bitcast_ln35_fu_927_p1;
    end else begin
        grp_fu_505_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_505_p1 = reg_537;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_505_p1 = reg_514;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_505_p1 = bitcast_ln35_1_fu_931_p1;
    end else begin
        grp_fu_505_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_ftmap_ce0 = 1'b1;
    end else begin
        input_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        output_ftmap_address0 = output_ftmap_addr_reg_1914;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        output_ftmap_address0 = zext_ln34_2_fu_1328_p1;
    end else begin
        output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state42))) begin
        output_ftmap_ce0 = 1'b1;
    end else begin
        output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        output_ftmap_we0 = 1'b1;
    end else begin
        output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_604_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln22_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln26_fu_737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln27_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln17_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln21_1_fu_1092_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln22_2_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln33_fu_1215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln21_fu_1307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((icmp_ln22_1_fu_1337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln25_fu_1361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln26_1_fu_1440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln33_1_fu_1637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_1038_p2 = (n2_fu_160 + 6'd1);

assign add_ln18_fu_610_p2 = (n1_fu_156 + 7'd1);

assign add_ln21_1_fu_1098_p2 = (h_4_reg_374 + 8'd1);

assign add_ln21_fu_1313_p2 = (h_1_fu_164 + 8'd1);

assign add_ln22_1_fu_1343_p2 = (w_1_reg_417 + 8'd1);

assign add_ln22_2_fu_1132_p2 = (w_3_reg_385 + 8'd1);

assign add_ln22_fu_666_p2 = (h_reg_307 + 8'd1);

assign add_ln23_fu_700_p2 = (w_reg_319 + 8'd1);

assign add_ln25_fu_1367_p2 = (f3h_reg_428 + 3'd1);

assign add_ln26_1_fu_1446_p2 = (f3w_reg_449 + 3'd1);

assign add_ln26_fu_743_p2 = (f1h_reg_330 + 4'd1);

assign add_ln27_fu_848_p2 = (f1w_reg_351 + 4'd1);

assign add_ln30_1_fu_1462_p2 = ($signed(sext_ln30_fu_1458_p1) + $signed(zext_ln22_1_reg_1919));

assign add_ln30_fu_1452_p2 = ($signed(f3w_reg_449) + $signed(3'd6));

assign add_ln31_1_fu_864_p2 = ($signed(sext_ln31_fu_860_p1) + $signed(zext_ln23_reg_1723));

assign add_ln31_fu_854_p2 = ($signed(f1w_reg_351) + $signed(4'd12));

assign add_ln33_1_fu_1643_p2 = (n2_1_reg_472 + 6'd1);

assign add_ln33_fu_1221_p2 = (n1_1_reg_396 + 7'd1);

assign add_ln34_1_fu_1168_p2 = ($signed(sext_ln34_1_fu_1164_p1) + $signed(h_3_cast19_reg_1832));

assign add_ln34_2_fu_1195_p2 = (sub_ln34_2_fu_1189_p2 + w_3_cast20_reg_1850);

assign add_ln34_3_fu_1205_p2 = (tmp_8_reg_1797 + zext_ln34_3_fu_1138_p1);

assign add_ln34_4_fu_1545_p2 = ($signed(sext_ln34_3_fu_1541_p1) + $signed(sext_ln26_reg_1950));

assign add_ln34_5_fu_1572_p2 = ($signed(sub_ln34_4_fu_1566_p2) + $signed(sext_ln33_reg_1968));

assign add_ln34_6_fu_1594_p2 = (zext_ln34_12_fu_1590_p1 + zext_ln34_8_fu_1515_p1);

assign add_ln34_7_fu_1600_p2 = (add_ln34_6_fu_1594_p2 + zext_ln25_reg_1937);

assign add_ln34_8_fu_1621_p2 = (p_shl4_fu_1613_p3 + zext_ln34_13_fu_1605_p1);

assign add_ln34_9_fu_1627_p2 = (add_ln34_8_fu_1621_p2 + zext_ln26_reg_1955);

assign add_ln34_fu_1323_p2 = (sub_ln34_reg_1896 + zext_ln34_1_fu_1319_p1);

assign add_ln35_1_fu_710_p2 = (add_ln35_reg_1670 + zext_ln35_1_fu_706_p1);

assign add_ln35_2_fu_731_p2 = (p_shl3_fu_723_p3 + zext_ln35_2_fu_715_p1);

assign add_ln35_3_fu_832_p2 = (add_ln35_2_reg_1736 + zext_ln35_4_fu_828_p1);

assign add_ln35_4_fu_917_p2 = ($signed(sub_ln35_reg_1749) + $signed(sext_ln35_1_fu_913_p1));

assign add_ln35_fu_598_p2 = (zext_ln35_fu_594_p1 + n1_cast14_fu_556_p1);

assign add_ln84_fu_782_p2 = ($signed(sext_ln84_fu_778_p1) + $signed(h_reg_307));

assign and_ln41_fu_1267_p2 = (or_ln41_fu_1261_p2 & grp_fu_509_p2);

assign and_ln42_fu_971_p2 = (or_ln42_fu_965_p2 & grp_fu_509_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_add4227_i_phi_fu_410_p4 = add4227_i_reg_407;

assign bitcast_ln34_1_fu_1227_p1 = conv2_weights_load_reg_1886;

assign bitcast_ln34_2_fu_1649_p1 = conv3_weights_load_reg_1991;

assign bitcast_ln34_fu_1353_p1 = output_ftmap_q0;

assign bitcast_ln35_1_fu_931_p1 = input_ftmap_load_reg_1777;

assign bitcast_ln35_fu_927_p1 = conv1_weights_load_reg_1772;

assign bitcast_ln41_fu_1231_p1 = reg_532;

assign bitcast_ln42_fu_935_p1 = reg_532;

assign conv1_biases_address0 = zext_ln18_fu_551_p1;

assign conv1_output_ftmap_d0 = ((and_ln42_fu_971_p2[0:0] == 1'b1) ? 32'd0 : reg_532);

assign conv1_weights_address0 = zext_ln35_5_fu_837_p1;

assign conv2_biases_address0 = zext_ln17_fu_993_p1;

assign conv2_output_ftmap_d0 = ((and_ln41_fu_1267_p2[0:0] == 1'b1) ? 32'd0 : reg_532);

assign conv2_weights_address0 = zext_ln34_7_fu_1210_p1;

assign conv3_weights_address0 = zext_ln34_14_fu_1632_p1;

assign empty_19_fu_621_p1 = conv1_biases_q0;

assign empty_20_fu_629_p2 = ($signed(sext_ln35_reg_1665) + $signed(h_cast_fu_625_p1));

assign empty_21_fu_638_p1 = empty_20_fu_629_p2[13:0];

assign empty_22_fu_650_p2 = ($signed(p_shl2_fu_642_p3) - $signed(p_cast16_fu_634_p1));

assign empty_23_fu_680_p2 = (empty_22_reg_1700 + w_cast_fu_676_p1);

assign empty_24_fu_759_p2 = ($signed(tmp_cast_fu_755_p1) + $signed(zext_ln22_reg_1705));

assign empty_25_fu_1014_p2 = (tmp_7_cast_fu_1010_p1 - n2_cast_fu_998_p1);

assign empty_26_fu_1053_p1 = conv2_biases_q0;

assign empty_27_fu_1065_p2 = ($signed(sext_ln34_reg_1792) + $signed(h_3_cast_fu_1061_p1));

assign empty_28_fu_1074_p1 = empty_27_fu_1065_p2[12:0];

assign empty_29_fu_1086_p2 = ($signed(p_shl6_fu_1078_p3) - $signed(p_cast18_fu_1070_p1));

assign empty_30_fu_1116_p2 = (empty_29_reg_1837 + w_3_cast_fu_1112_p1);

assign empty_31_fu_1044_p1 = conv3_biases;

assign empty_32_fu_1383_p2 = ($signed(tmp4_cast_fu_1379_p1) + $signed(zext_ln21_reg_1901));

assign empty_fu_576_p2 = (tmp_5_cast_fu_572_p1 - n1_cast_fu_560_p1);

assign h_3_cast19_fu_1057_p1 = h_4_reg_374;

assign h_3_cast_fu_1061_p1 = h_4_reg_374;

assign h_cast_fu_625_p1 = h_reg_307;

assign icmp_ln17_fu_1032_p2 = ((n2_fu_160 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_604_p2 = ((n1_fu_156 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_1092_p2 = ((h_4_reg_374 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1307_p2 = ((h_1_fu_164 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_1337_p2 = ((w_1_reg_417 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_1126_p2 = ((w_3_reg_385 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_660_p2 = ((h_reg_307 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_694_p2 = ((w_reg_319 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1361_p2 = ((f3h_reg_428 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln26_1_fu_1440_p2 = ((f3w_reg_449 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_737_p2 = ((f1h_reg_330 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_842_p2 = ((f1w_reg_351 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_1637_p2 = ((n2_1_reg_472 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_1215_p2 = ((n1_1_reg_396 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_1255_p2 = ((trunc_ln41_fu_1245_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_1249_p2 = ((tmp_3_fu_1235_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_959_p2 = ((trunc_ln42_fu_949_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_953_p2 = ((tmp_1_fu_939_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_1396_p2 = (($signed(empty_32_fu_1383_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln84_2_fu_877_p2 = (($signed(add_ln31_1_fu_864_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln84_3_fu_1475_p2 = (($signed(add_ln30_1_fu_1462_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_772_p2 = (($signed(empty_24_fu_759_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = zext_ln35_6_fu_922_p1;

assign n1_cast14_fu_556_p1 = n1_fu_156;

assign n1_cast_fu_560_p1 = n1_fu_156;

assign n2_cast_fu_998_p1 = n2_fu_160;

assign or_ln41_fu_1261_p2 = (icmp_ln41_fu_1249_p2 | icmp_ln41_1_fu_1255_p2);

assign or_ln42_fu_965_p2 = (icmp_ln42_fu_953_p2 | icmp_ln42_1_fu_959_p2);

assign or_ln83_1_fu_1418_p2 = (tmp_12_fu_1388_p3 | icmp_ln84_1_fu_1396_p2);

assign or_ln83_2_fu_899_p2 = (tmp_14_fu_869_p3 | icmp_ln84_2_fu_877_p2);

assign or_ln83_3_fu_1497_p2 = (tmp_17_fu_1467_p3 | icmp_ln84_3_fu_1475_p2);

assign or_ln83_fu_796_p2 = (tmp_9_fu_764_p3 | icmp_ln84_fu_772_p2);

assign output_ftmap_d0 = reg_532;

assign p_cast16_fu_634_p1 = empty_20_fu_629_p2;

assign p_cast18_fu_1070_p1 = empty_27_fu_1065_p2;

assign p_cast29_fu_685_p1 = empty_23_fu_680_p2;

assign p_cast32_fu_1121_p1 = empty_30_fu_1116_p2;

assign p_shl2_fu_642_p3 = {{empty_21_fu_638_p1}, {8'd0}};

assign p_shl3_fu_723_p3 = {{trunc_ln35_fu_719_p1}, {3'd0}};

assign p_shl4_fu_1613_p3 = {{trunc_ln34_2_fu_1609_p1}, {2'd0}};

assign p_shl6_fu_1078_p3 = {{empty_28_fu_1074_p1}, {8'd0}};

assign p_shl7_fu_1181_p3 = {{trunc_ln34_fu_1177_p1}, {8'd0}};

assign p_shl_fu_1558_p3 = {{trunc_ln34_1_fu_1554_p1}, {8'd0}};

assign select_ln83_2_fu_1410_p3 = ((tmp_13_fu_1402_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_4_fu_891_p3 = ((tmp_15_fu_883_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_6_fu_1489_p3 = ((tmp_19_fu_1481_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_fu_788_p3 = ((tmp_9_fu_764_p3[0:0] == 1'b1) ? 8'd0 : 8'd254);

assign sext_ln26_fu_1432_p1 = $signed(yPixelClamped_2_fu_1424_p3);

assign sext_ln30_fu_1458_p1 = $signed(add_ln30_fu_1452_p2);

assign sext_ln31_fu_860_p1 = $signed(add_ln31_fu_854_p2);

assign sext_ln33_fu_1511_p1 = $signed(xPixelClamped_2_fu_1503_p3);

assign sext_ln34_1_fu_1164_p1 = $signed(sub_ln34_1_fu_1158_p2);

assign sext_ln34_2_fu_1173_p1 = add_ln34_1_fu_1168_p2;

assign sext_ln34_3_fu_1541_p1 = $signed(sub_ln34_3_fu_1535_p2);

assign sext_ln34_4_fu_1550_p1 = add_ln34_4_fu_1545_p2;

assign sext_ln34_fu_1020_p1 = $signed(empty_25_fu_1014_p2);

assign sext_ln35_1_fu_913_p1 = $signed(xPixelClamped_1_fu_905_p3);

assign sext_ln35_fu_582_p1 = $signed(empty_fu_576_p2);

assign sext_ln84_fu_778_p1 = tmp_fu_749_p2;

assign sub_ln34_1_fu_1158_p2 = (zext_ln34_5_fu_1154_p1 - zext_ln34_4_fu_1142_p1);

assign sub_ln34_2_fu_1189_p2 = ($signed(p_shl7_fu_1181_p3) - $signed(sext_ln34_2_fu_1173_p1));

assign sub_ln34_3_fu_1535_p2 = (zext_ln34_10_fu_1531_p1 - zext_ln34_9_fu_1519_p1);

assign sub_ln34_4_fu_1566_p2 = ($signed(p_shl_fu_1558_p3) - $signed(sext_ln34_4_fu_1550_p1));

assign sub_ln34_fu_1297_p2 = (tmp_s_fu_1289_p3 - zext_ln34_fu_1285_p1);

assign sub_ln35_fu_822_p2 = (tmp_10_fu_814_p3 - zext_ln35_3_fu_810_p1);

assign tmp4_cast_fu_1379_p1 = $signed(tmp4_fu_1373_p2);

assign tmp4_fu_1373_p2 = ($signed(f3h_reg_428) + $signed(3'd6));

assign tmp_10_fu_814_p3 = {{yPixelClamped_1_fu_802_p3}, {8'd0}};

assign tmp_11_fu_1146_p3 = {{n1_1_reg_396}, {8'd0}};

assign tmp_12_fu_1388_p3 = empty_32_fu_1383_p2[32'd9];

assign tmp_13_fu_1402_p3 = empty_32_fu_1383_p2[32'd9];

assign tmp_14_fu_869_p3 = add_ln31_1_fu_864_p2[32'd9];

assign tmp_15_fu_883_p3 = add_ln31_1_fu_864_p2[32'd9];

assign tmp_16_fu_1523_p3 = {{n2_1_reg_472}, {8'd0}};

assign tmp_17_fu_1467_p3 = add_ln30_1_fu_1462_p2[32'd9];

assign tmp_18_fu_1582_p3 = {{n2_1_reg_472}, {2'd0}};

assign tmp_19_fu_1481_p3 = add_ln30_1_fu_1462_p2[32'd9];

assign tmp_1_fu_939_p4 = {{bitcast_ln42_fu_935_p1[30:23]}};

assign tmp_3_fu_1235_p4 = {{bitcast_ln41_fu_1231_p1[30:23]}};

assign tmp_5_cast_fu_572_p1 = tmp_5_fu_564_p3;

assign tmp_5_fu_564_p3 = {{n1_fu_156}, {8'd0}};

assign tmp_6_fu_586_p3 = {{n1_fu_156}, {3'd0}};

assign tmp_7_cast_fu_1010_p1 = tmp_7_fu_1002_p3;

assign tmp_7_fu_1002_p3 = {{n2_fu_160}, {8'd0}};

assign tmp_8_fu_1024_p3 = {{trunc_ln17_fu_989_p1}, {6'd0}};

assign tmp_9_fu_764_p3 = empty_24_fu_759_p2[32'd9];

assign tmp_cast_fu_755_p1 = tmp_fu_749_p2;

assign tmp_fu_749_p2 = ($signed(f1h_reg_330) + $signed(4'd12));

assign tmp_s_fu_1289_p3 = {{h_1_fu_164}, {8'd0}};

assign trunc_ln17_fu_989_p1 = n2_fu_160[4:0];

assign trunc_ln34_1_fu_1554_p1 = add_ln34_4_fu_1545_p2[12:0];

assign trunc_ln34_2_fu_1609_p1 = add_ln34_7_fu_1600_p2[7:0];

assign trunc_ln34_fu_1177_p1 = add_ln34_1_fu_1168_p2[13:0];

assign trunc_ln35_fu_719_p1 = add_ln35_1_fu_710_p2[9:0];

assign trunc_ln41_fu_1245_p1 = bitcast_ln41_fu_1231_p1[22:0];

assign trunc_ln42_fu_949_p1 = bitcast_ln42_fu_935_p1[22:0];

assign w_3_cast20_fu_1108_p1 = w_3_reg_385;

assign w_3_cast_fu_1112_p1 = w_3_reg_385;

assign w_cast_fu_676_p1 = w_reg_319;

assign xPixelClamped_1_fu_905_p3 = ((or_ln83_2_fu_899_p2[0:0] == 1'b1) ? select_ln83_4_fu_891_p3 : add_ln31_1_fu_864_p2);

assign xPixelClamped_2_fu_1503_p3 = ((or_ln83_3_fu_1497_p2[0:0] == 1'b1) ? select_ln83_6_fu_1489_p3 : add_ln30_1_fu_1462_p2);

assign yPixelClamped_1_fu_802_p3 = ((or_ln83_fu_796_p2[0:0] == 1'b1) ? select_ln83_fu_788_p3 : add_ln84_fu_782_p2);

assign yPixelClamped_2_fu_1424_p3 = ((or_ln83_1_fu_1418_p2[0:0] == 1'b1) ? select_ln83_2_fu_1410_p3 : empty_32_fu_1383_p2);

assign zext_ln17_fu_993_p1 = n2_fu_160;

assign zext_ln18_fu_551_p1 = n1_fu_156;

assign zext_ln21_fu_1303_p1 = h_1_fu_164;

assign zext_ln22_1_fu_1333_p1 = w_1_reg_417;

assign zext_ln22_fu_656_p1 = h_reg_307;

assign zext_ln23_fu_690_p1 = w_reg_319;

assign zext_ln25_fu_1357_p1 = f3h_reg_428;

assign zext_ln26_fu_1436_p1 = f3w_reg_449;

assign zext_ln34_10_fu_1531_p1 = tmp_16_fu_1523_p3;

assign zext_ln34_11_fu_1577_p1 = add_ln34_5_fu_1572_p2;

assign zext_ln34_12_fu_1590_p1 = tmp_18_fu_1582_p3;

assign zext_ln34_13_fu_1605_p1 = add_ln34_7_fu_1600_p2;

assign zext_ln34_14_fu_1632_p1 = add_ln34_9_fu_1627_p2;

assign zext_ln34_1_fu_1319_p1 = w_1_reg_417;

assign zext_ln34_2_fu_1328_p1 = add_ln34_fu_1323_p2;

assign zext_ln34_3_fu_1138_p1 = n1_1_reg_396;

assign zext_ln34_4_fu_1142_p1 = n1_1_reg_396;

assign zext_ln34_5_fu_1154_p1 = tmp_11_fu_1146_p3;

assign zext_ln34_6_fu_1200_p1 = add_ln34_2_fu_1195_p2;

assign zext_ln34_7_fu_1210_p1 = add_ln34_3_fu_1205_p2;

assign zext_ln34_8_fu_1515_p1 = n2_1_reg_472;

assign zext_ln34_9_fu_1519_p1 = n2_1_reg_472;

assign zext_ln34_fu_1285_p1 = h_1_fu_164;

assign zext_ln35_1_fu_706_p1 = f1h_reg_330;

assign zext_ln35_2_fu_715_p1 = add_ln35_1_fu_710_p2;

assign zext_ln35_3_fu_810_p1 = yPixelClamped_1_fu_802_p3;

assign zext_ln35_4_fu_828_p1 = f1w_reg_351;

assign zext_ln35_5_fu_837_p1 = add_ln35_3_fu_832_p2;

assign zext_ln35_6_fu_922_p1 = add_ln35_4_fu_917_p2;

assign zext_ln35_fu_594_p1 = tmp_6_fu_586_p3;

always @ (posedge ap_clk) begin
    zext_ln22_reg_1705[9:8] <= 2'b00;
    zext_ln23_reg_1723[9:8] <= 2'b00;
    tmp_8_reg_1797[5:0] <= 6'b000000;
    h_3_cast19_reg_1832[16:8] <= 9'b000000000;
    w_3_cast20_reg_1850[21:8] <= 14'b00000000000000;
    zext_ln21_reg_1901[9:8] <= 2'b00;
    zext_ln22_1_reg_1919[9:8] <= 2'b00;
    zext_ln25_reg_1937[8:3] <= 6'b000000;
    zext_ln26_reg_1955[9:3] <= 7'b0000000;
end

endmodule //srcnn
