// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_buffer_tile_c2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_fm_buffer_address0,
        input_fm_buffer_ce0,
        input_fm_buffer_we0,
        input_fm_buffer_d0,
        tx0,
        ty0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_q0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] input_fm_buffer_address0;
output   input_fm_buffer_ce0;
output   input_fm_buffer_we0;
output  [31:0] input_fm_buffer_d0;
input  [7:0] tx0;
input  [7:0] ty0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_q0;
output  [18:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0;
input  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[18:0] input_fm_buffer_address0;
reg input_fm_buffer_ce0;
reg input_fm_buffer_we0;
reg[31:0] input_fm_buffer_d0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] add_ln110_1_fu_297_p2;
reg   [12:0] add_ln110_1_reg_549;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln110_fu_313_p2;
reg   [6:0] add_ln110_reg_557;
wire  signed [12:0] sext_ln110_fu_341_p1;
reg  signed [12:0] sext_ln110_reg_562;
wire   [0:0] icmp_ln110_fu_307_p2;
reg   [2:0] trunc_ln_reg_567;
wire   [18:0] mul_ln111_fu_368_p2;
reg   [18:0] mul_ln111_reg_572;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln111_fu_380_p2;
reg   [6:0] add_ln111_reg_580;
wire   [18:0] sub_ln119_1_fu_420_p2;
reg   [18:0] sub_ln119_1_reg_585;
wire   [0:0] icmp_ln111_fu_374_p2;
reg   [18:0] input_fm_buffer_addr_1_reg_590;
wire    ap_CS_fsm_state5;
wire   [6:0] add_ln112_fu_454_p2;
reg   [6:0] add_ln112_reg_598;
wire   [0:0] icmp_ln112_fu_448_p2;
reg   [6:0] by_reg_229;
reg   [6:0] bx_reg_240;
wire    ap_CS_fsm_state6;
wire   [63:0] p_cast_fu_271_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond214_fu_259_p2;
wire   [63:0] zext_ln119_5_fu_443_p1;
wire   [63:0] zext_ln119_7_fu_478_p1;
reg   [18:0] empty_fu_80;
wire   [18:0] empty_68_fu_265_p2;
reg   [12:0] phi_mul_fu_84;
reg   [6:0] nin_fu_88;
wire   [31:0] tmp_fu_490_p10;
wire   [2:0] trunc_ln110_fu_303_p1;
wire   [10:0] tmp_2_fu_323_p3;
wire   [11:0] zext_ln119_1_fu_331_p1;
wire   [11:0] zext_ln119_fu_319_p1;
wire   [11:0] sub_ln119_fu_335_p2;
wire   [12:0] zext_ln119_2_fu_355_p1;
wire   [12:0] add_ln119_fu_359_p2;
wire   [12:0] mul_ln111_fu_368_p0;
wire   [7:0] mul_ln111_fu_368_p1;
wire   [7:0] zext_ln41_fu_386_p1;
wire   [7:0] yClamped_fu_390_p2;
wire   [12:0] zext_ln119_3_fu_395_p1;
wire  signed [12:0] add_ln119_1_fu_399_p2;
wire   [10:0] trunc_ln119_fu_408_p1;
wire   [18:0] p_shl1_fu_412_p3;
wire  signed [18:0] sext_ln119_fu_404_p1;
wire   [18:0] zext_ln119_4_fu_434_p1;
wire   [18:0] add_ln119_2_fu_438_p2;
wire   [7:0] zext_ln41_1_fu_460_p1;
wire   [7:0] xClamped_fu_464_p2;
wire   [18:0] zext_ln119_6_fu_469_p1;
wire   [18:0] add_ln119_3_fu_473_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire   [18:0] mul_ln111_fu_368_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

srcnn_mul_13ns_8ns_19_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 19 ))
mul_13ns_8ns_19_1_1_U34(
    .din0(mul_ln111_fu_368_p0),
    .din1(mul_ln111_fu_368_p1),
    .dout(mul_ln111_fu_368_p2)
);

srcnn_mux_8_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_8_3_32_1_1_U35(
    .din0(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_q0),
    .din1(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_q0),
    .din2(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_q0),
    .din3(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_q0),
    .din4(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_q0),
    .din5(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_q0),
    .din6(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_q0),
    .din7(srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_q0),
    .din8(trunc_ln_reg_567),
    .dout(tmp_fu_490_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln111_fu_374_p2 == 1'd0))) begin
        bx_reg_240 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        bx_reg_240 <= add_ln112_reg_598;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        by_reg_229 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln112_fu_448_p2 == 1'd1))) begin
        by_reg_229 <= add_ln111_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_80 <= 19'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond214_fu_259_p2 == 1'd0))) begin
        empty_fu_80 <= empty_68_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond214_fu_259_p2 == 1'd1))) begin
        nin_fu_88 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln111_fu_374_p2 == 1'd1))) begin
        nin_fu_88 <= add_ln110_reg_557;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond214_fu_259_p2 == 1'd1))) begin
        phi_mul_fu_84 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln111_fu_374_p2 == 1'd1))) begin
        phi_mul_fu_84 <= add_ln110_1_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln110_1_reg_549 <= add_ln110_1_fu_297_p2;
        add_ln110_reg_557 <= add_ln110_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln111_reg_580 <= add_ln111_fu_380_p2;
        mul_ln111_reg_572 <= mul_ln111_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln112_reg_598 <= add_ln112_fu_454_p2;
        input_fm_buffer_addr_1_reg_590 <= zext_ln119_5_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln110_reg_562 <= sext_ln110_fu_341_p1;
        trunc_ln_reg_567 <= {{nin_fu_88[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln111_fu_374_p2 == 1'd0))) begin
        sub_ln119_1_reg_585 <= sub_ln119_1_fu_420_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln110_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_fm_buffer_address0 = p_cast_fu_271_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_fm_buffer_d0 = tmp_fu_490_p10;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state2) & (exitcond214_fu_259_p2 == 1'd0)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond214_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln110_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln111_fu_374_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln112_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln110_1_fu_297_p2 = (phi_mul_fu_84 + 13'd85);

assign add_ln110_fu_313_p2 = (nin_fu_88 + 7'd1);

assign add_ln111_fu_380_p2 = (by_reg_229 + 7'd1);

assign add_ln112_fu_454_p2 = (bx_reg_240 + 7'd1);

assign add_ln119_1_fu_399_p2 = ($signed(sext_ln110_reg_562) + $signed(zext_ln119_3_fu_395_p1));

assign add_ln119_2_fu_438_p2 = (mul_ln111_reg_572 + zext_ln119_4_fu_434_p1);

assign add_ln119_3_fu_473_p2 = (sub_ln119_1_reg_585 + zext_ln119_6_fu_469_p1);

assign add_ln119_fu_359_p2 = (phi_mul_fu_84 + zext_ln119_2_fu_355_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_68_fu_265_p2 = (empty_fu_80 + 19'd1);

assign exitcond214_fu_259_p2 = ((empty_fu_80 == 19'd462400) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_307_p2 = ((nin_fu_88 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_374_p2 = ((by_reg_229 == 7'd85) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_448_p2 = ((bx_reg_240 == 7'd85) ? 1'b1 : 1'b0);

assign mul_ln111_fu_368_p0 = mul_ln111_fu_368_p00;

assign mul_ln111_fu_368_p00 = add_ln119_fu_359_p2;

assign mul_ln111_fu_368_p1 = 19'd85;

assign p_cast_fu_271_p1 = empty_fu_80;

assign p_shl1_fu_412_p3 = {{trunc_ln119_fu_408_p1}, {8'd0}};

assign sext_ln110_fu_341_p1 = $signed(sub_ln119_fu_335_p2);

assign sext_ln119_fu_404_p1 = add_ln119_1_fu_399_p2;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_address0 = zext_ln119_7_fu_478_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_address0 = zext_ln119_7_fu_478_p1;

assign sub_ln119_1_fu_420_p2 = ($signed(p_shl1_fu_412_p3) - $signed(sext_ln119_fu_404_p1));

assign sub_ln119_fu_335_p2 = (zext_ln119_1_fu_331_p1 - zext_ln119_fu_319_p1);

assign tmp_2_fu_323_p3 = {{trunc_ln110_fu_303_p1}, {8'd0}};

assign trunc_ln110_fu_303_p1 = nin_fu_88[2:0];

assign trunc_ln119_fu_408_p1 = add_ln119_1_fu_399_p2[10:0];

assign xClamped_fu_464_p2 = (zext_ln41_1_fu_460_p1 + tx0);

assign yClamped_fu_390_p2 = (zext_ln41_fu_386_p1 + ty0);

assign zext_ln119_1_fu_331_p1 = tmp_2_fu_323_p3;

assign zext_ln119_2_fu_355_p1 = by_reg_229;

assign zext_ln119_3_fu_395_p1 = yClamped_fu_390_p2;

assign zext_ln119_4_fu_434_p1 = bx_reg_240;

assign zext_ln119_5_fu_443_p1 = add_ln119_2_fu_438_p2;

assign zext_ln119_6_fu_469_p1 = xClamped_fu_464_p2;

assign zext_ln119_7_fu_478_p1 = add_ln119_3_fu_473_p2;

assign zext_ln119_fu_319_p1 = trunc_ln110_fu_303_p1;

assign zext_ln41_1_fu_460_p1 = bx_reg_240;

assign zext_ln41_fu_386_p1 = by_reg_229;

endmodule //srcnn_load_buffer_tile_c2
