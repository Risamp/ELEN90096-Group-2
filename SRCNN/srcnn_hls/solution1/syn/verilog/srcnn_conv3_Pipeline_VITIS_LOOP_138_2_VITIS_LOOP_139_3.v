// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_VITIS_LOOP_138_2_VITIS_LOOP_139_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        select_ln31_1,
        conv3_biases_0_0_val,
        ti_cast20,
        p_shl1,
        output_ftmap,
        output_fm_buffer_0_address0,
        output_fm_buffer_0_ce0,
        output_fm_buffer_0_q0,
        grp_fu_479_p_din0,
        grp_fu_479_p_din1,
        grp_fu_479_p_opcode,
        grp_fu_479_p_dout0,
        grp_fu_479_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 19'd1;
parameter    ap_ST_fsm_pp0_stage1 = 19'd2;
parameter    ap_ST_fsm_pp0_stage2 = 19'd4;
parameter    ap_ST_fsm_pp0_stage3 = 19'd8;
parameter    ap_ST_fsm_pp0_stage4 = 19'd16;
parameter    ap_ST_fsm_pp0_stage5 = 19'd32;
parameter    ap_ST_fsm_pp0_stage6 = 19'd64;
parameter    ap_ST_fsm_pp0_stage7 = 19'd128;
parameter    ap_ST_fsm_pp0_stage8 = 19'd256;
parameter    ap_ST_fsm_pp0_stage9 = 19'd512;
parameter    ap_ST_fsm_pp0_stage10 = 19'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 19'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 19'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 19'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 19'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 19'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 19'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [7:0] select_ln31_1;
input  [31:0] conv3_biases_0_0_val;
input  [3:0] ti_cast20;
input  [7:0] p_shl1;
input  [63:0] output_ftmap;
output  [8:0] output_fm_buffer_0_address0;
output   output_fm_buffer_0_ce0;
input  [31:0] output_fm_buffer_0_q0;
output  [31:0] grp_fu_479_p_din0;
output  [31:0] grp_fu_479_p_din1;
output  [1:0] grp_fu_479_p_opcode;
input  [31:0] grp_fu_479_p_dout0;
output   grp_fu_479_p_ce;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;
reg output_fm_buffer_0_ce0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state20_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln138_fu_251_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln138_reg_494;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
reg    gmem_blk_n_B;
wire    ap_block_pp0_stage0;
reg   [31:0] reg_181;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln138_fu_278_p3;
reg   [4:0] select_ln138_reg_498;
reg   [63:0] gmem_addr_reg_508;
reg   [31:0] output_fm_buffer_0_load_reg_515;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] gmem_addr_read_reg_520;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
wire   [31:0] bitcast_ln141_fu_449_p1;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln141_8_fu_374_p1;
wire  signed [63:0] sext_ln141_fu_429_p1;
wire    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage14_01001;
reg   [4:0] tx_fu_100;
wire   [4:0] add_ln139_fu_458_p2;
wire    ap_block_pp0_stage18_11001;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_tx_load;
reg   [4:0] ty_fu_104;
wire   [4:0] select_ln138_1_fu_286_p3;
reg   [4:0] ap_sig_allocacmp_ty_2;
reg   [8:0] indvar_flatten280_fu_108;
wire   [8:0] add_ln138_1_fu_257_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten280_load;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage10;
wire   [7:0] zext_ln138_fu_211_p1;
wire   [7:0] empty_fu_215_p2;
wire   [17:0] shl_ln_fu_221_p3;
wire   [9:0] shl_ln141_1_fu_233_p3;
wire   [18:0] zext_ln141_fu_229_p1;
wire   [18:0] zext_ln141_1_fu_241_p1;
wire   [0:0] icmp_ln139_fu_272_p2;
wire   [4:0] add_ln138_fu_266_p2;
wire   [8:0] tmp_6_fu_298_p3;
wire   [8:0] zext_ln141_2_fu_294_p1;
wire   [7:0] zext_ln138_1_fu_312_p1;
wire   [7:0] p_mid1278_fu_316_p2;
wire   [17:0] shl_ln141_mid1_fu_322_p3;
wire   [9:0] shl_ln141_1_mid1_fu_334_p3;
wire   [18:0] zext_ln141_3_fu_330_p1;
wire   [18:0] zext_ln141_5_fu_342_p1;
wire   [18:0] sub_ln141_1_fu_346_p2;
wire   [18:0] sub_ln141_fu_245_p2;
wire   [18:0] select_ln138_2_fu_352_p3;
wire   [8:0] add_ln141_4_fu_306_p2;
wire   [8:0] zext_ln141_7_fu_364_p1;
wire   [8:0] add_ln141_5_fu_368_p2;
wire   [4:0] ti_cast20_cast_fu_186_p1;
wire   [4:0] add_ln141_fu_379_p2;
wire   [7:0] zext_ln141_4_fu_385_p1;
wire   [7:0] add_ln141_1_fu_389_p2;
wire   [9:0] shl_ln141_2_fu_395_p3;
wire   [63:0] zext_ln141_6_fu_403_p1;
wire   [63:0] add_ln141_3_fu_407_p2;
wire  signed [63:0] sext_ln138_fu_360_p1;
wire   [63:0] add_ln141_2_fu_413_p2;
wire   [61:0] trunc_ln_fu_419_p4;
wire    ap_block_pp0_stage18;
reg    grp_fu_177_ce;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage12;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage10_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln138_fu_251_p2 == 1'd0))) begin
            indvar_flatten280_fu_108 <= add_ln138_1_fu_257_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten280_fu_108 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_fu_100 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        tx_fu_100 <= add_ln139_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln138_fu_251_p2 == 1'd0))) begin
            ty_fu_104 <= select_ln138_1_fu_286_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ty_fu_104 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        gmem_addr_read_reg_520 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln138_fu_251_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_508 <= sext_ln141_fu_429_p1;
        select_ln138_reg_498 <= select_ln138_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln138_reg_494 <= icmp_ln138_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_fm_buffer_0_load_reg_515 <= output_fm_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001)))) begin
        reg_181 <= grp_fu_479_p_dout0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln138_fu_251_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten280_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten280_load = indvar_flatten280_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_tx_load = 5'd0;
    end else begin
        ap_sig_allocacmp_tx_load = tx_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ty_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_ty_2 = ty_fu_104;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage13))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage14))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)))) begin
        grp_fu_177_ce = 1'b1;
    end else begin
        grp_fu_177_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_177_p0 = bitcast_ln141_fu_449_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_177_p0 = output_fm_buffer_0_load_reg_515;
        end else begin
            grp_fu_177_p0 = 'bx;
        end
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_177_p1 = reg_181;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_177_p1 = conv3_biases_0_0_val;
        end else begin
            grp_fu_177_p1 = 'bx;
        end
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln138_reg_494 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_fm_buffer_0_ce0 = 1'b1;
    end else begin
        output_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln138_1_fu_257_p2 = (ap_sig_allocacmp_indvar_flatten280_load + 9'd1);

assign add_ln138_fu_266_p2 = (ap_sig_allocacmp_ty_2 + 5'd1);

assign add_ln139_fu_458_p2 = (select_ln138_reg_498 + 5'd1);

assign add_ln141_1_fu_389_p2 = (zext_ln141_4_fu_385_p1 + p_shl1);

assign add_ln141_2_fu_413_p2 = ($signed(add_ln141_3_fu_407_p2) + $signed(sext_ln138_fu_360_p1));

assign add_ln141_3_fu_407_p2 = (zext_ln141_6_fu_403_p1 + output_ftmap);

assign add_ln141_4_fu_306_p2 = (tmp_6_fu_298_p3 + zext_ln141_2_fu_294_p1);

assign add_ln141_5_fu_368_p2 = (add_ln141_4_fu_306_p2 + zext_ln141_7_fu_364_p1);

assign add_ln141_fu_379_p2 = (ti_cast20_cast_fu_186_p1 + select_ln138_fu_278_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln138_reg_494 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln138_reg_494 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln138_reg_494 == 1'd0));
end

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln138_reg_494 == 1'd0));
end

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_gmem_WREADY == 1'b0) & (icmp_ln138_reg_494 == 1'd0));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter1 = (m_axi_gmem_BVALID == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln138_reg_494 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln141_fu_449_p1 = gmem_addr_read_reg_520;

assign empty_fu_215_p2 = (zext_ln138_fu_211_p1 + select_ln31_1);

assign grp_fu_479_p_ce = grp_fu_177_ce;

assign grp_fu_479_p_din0 = grp_fu_177_p0;

assign grp_fu_479_p_din1 = grp_fu_177_p1;

assign grp_fu_479_p_opcode = 2'd0;

assign icmp_ln138_fu_251_p2 = ((ap_sig_allocacmp_indvar_flatten280_load == 9'd289) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_272_p2 = ((ap_sig_allocacmp_tx_load == 5'd17) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = gmem_addr_reg_508;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_508;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = reg_181;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign output_fm_buffer_0_address0 = zext_ln141_8_fu_374_p1;

assign p_mid1278_fu_316_p2 = (zext_ln138_1_fu_312_p1 + select_ln31_1);

assign select_ln138_1_fu_286_p3 = ((icmp_ln139_fu_272_p2[0:0] == 1'b1) ? add_ln138_fu_266_p2 : ap_sig_allocacmp_ty_2);

assign select_ln138_2_fu_352_p3 = ((icmp_ln139_fu_272_p2[0:0] == 1'b1) ? sub_ln141_1_fu_346_p2 : sub_ln141_fu_245_p2);

assign select_ln138_fu_278_p3 = ((icmp_ln139_fu_272_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_tx_load);

assign sext_ln138_fu_360_p1 = $signed(select_ln138_2_fu_352_p3);

assign sext_ln141_fu_429_p1 = $signed(trunc_ln_fu_419_p4);

assign shl_ln141_1_fu_233_p3 = {{empty_fu_215_p2}, {2'd0}};

assign shl_ln141_1_mid1_fu_334_p3 = {{p_mid1278_fu_316_p2}, {2'd0}};

assign shl_ln141_2_fu_395_p3 = {{add_ln141_1_fu_389_p2}, {2'd0}};

assign shl_ln141_mid1_fu_322_p3 = {{p_mid1278_fu_316_p2}, {10'd0}};

assign shl_ln_fu_221_p3 = {{empty_fu_215_p2}, {10'd0}};

assign sub_ln141_1_fu_346_p2 = (zext_ln141_3_fu_330_p1 - zext_ln141_5_fu_342_p1);

assign sub_ln141_fu_245_p2 = (zext_ln141_fu_229_p1 - zext_ln141_1_fu_241_p1);

assign ti_cast20_cast_fu_186_p1 = ti_cast20;

assign tmp_6_fu_298_p3 = {{select_ln138_1_fu_286_p3}, {4'd0}};

assign trunc_ln_fu_419_p4 = {{add_ln141_2_fu_413_p2[63:2]}};

assign zext_ln138_1_fu_312_p1 = add_ln138_fu_266_p2;

assign zext_ln138_fu_211_p1 = ap_sig_allocacmp_ty_2;

assign zext_ln141_1_fu_241_p1 = shl_ln141_1_fu_233_p3;

assign zext_ln141_2_fu_294_p1 = select_ln138_1_fu_286_p3;

assign zext_ln141_3_fu_330_p1 = shl_ln141_mid1_fu_322_p3;

assign zext_ln141_4_fu_385_p1 = add_ln141_fu_379_p2;

assign zext_ln141_5_fu_342_p1 = shl_ln141_1_mid1_fu_334_p3;

assign zext_ln141_6_fu_403_p1 = shl_ln141_2_fu_395_p3;

assign zext_ln141_7_fu_364_p1 = select_ln138_fu_278_p3;

assign zext_ln141_8_fu_374_p1 = add_ln141_5_fu_368_p2;

assign zext_ln141_fu_229_p1 = shl_ln_fu_221_p3;

endmodule //srcnn_conv3_Pipeline_VITIS_LOOP_138_2_VITIS_LOOP_139_3
