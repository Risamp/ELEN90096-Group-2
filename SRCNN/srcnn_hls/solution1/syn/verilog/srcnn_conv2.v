// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv2_weights,
        conv2_biases,
        output_ftmap,
        grp_fu_597_p_din0,
        grp_fu_597_p_din1,
        grp_fu_597_p_opcode,
        grp_fu_597_p_dout0,
        grp_fu_597_p_ce,
        grp_fu_601_p_din0,
        grp_fu_601_p_din1,
        grp_fu_601_p_dout0,
        grp_fu_601_p_ce,
        grp_fu_605_p_din0,
        grp_fu_605_p_din1,
        grp_fu_605_p_opcode,
        grp_fu_605_p_dout0,
        grp_fu_605_p_ce
);

parameter    ap_ST_fsm_state1 = 108'd1;
parameter    ap_ST_fsm_state2 = 108'd2;
parameter    ap_ST_fsm_state3 = 108'd4;
parameter    ap_ST_fsm_state4 = 108'd8;
parameter    ap_ST_fsm_state5 = 108'd16;
parameter    ap_ST_fsm_state6 = 108'd32;
parameter    ap_ST_fsm_state7 = 108'd64;
parameter    ap_ST_fsm_state8 = 108'd128;
parameter    ap_ST_fsm_state9 = 108'd256;
parameter    ap_ST_fsm_state10 = 108'd512;
parameter    ap_ST_fsm_state11 = 108'd1024;
parameter    ap_ST_fsm_state12 = 108'd2048;
parameter    ap_ST_fsm_state13 = 108'd4096;
parameter    ap_ST_fsm_state14 = 108'd8192;
parameter    ap_ST_fsm_state15 = 108'd16384;
parameter    ap_ST_fsm_state16 = 108'd32768;
parameter    ap_ST_fsm_state17 = 108'd65536;
parameter    ap_ST_fsm_state18 = 108'd131072;
parameter    ap_ST_fsm_state19 = 108'd262144;
parameter    ap_ST_fsm_state20 = 108'd524288;
parameter    ap_ST_fsm_state21 = 108'd1048576;
parameter    ap_ST_fsm_state22 = 108'd2097152;
parameter    ap_ST_fsm_state23 = 108'd4194304;
parameter    ap_ST_fsm_state24 = 108'd8388608;
parameter    ap_ST_fsm_state25 = 108'd16777216;
parameter    ap_ST_fsm_state26 = 108'd33554432;
parameter    ap_ST_fsm_state27 = 108'd67108864;
parameter    ap_ST_fsm_state28 = 108'd134217728;
parameter    ap_ST_fsm_state29 = 108'd268435456;
parameter    ap_ST_fsm_state30 = 108'd536870912;
parameter    ap_ST_fsm_state31 = 108'd1073741824;
parameter    ap_ST_fsm_state32 = 108'd2147483648;
parameter    ap_ST_fsm_state33 = 108'd4294967296;
parameter    ap_ST_fsm_state34 = 108'd8589934592;
parameter    ap_ST_fsm_state35 = 108'd17179869184;
parameter    ap_ST_fsm_state36 = 108'd34359738368;
parameter    ap_ST_fsm_state37 = 108'd68719476736;
parameter    ap_ST_fsm_state38 = 108'd137438953472;
parameter    ap_ST_fsm_state39 = 108'd274877906944;
parameter    ap_ST_fsm_state40 = 108'd549755813888;
parameter    ap_ST_fsm_state41 = 108'd1099511627776;
parameter    ap_ST_fsm_state42 = 108'd2199023255552;
parameter    ap_ST_fsm_state43 = 108'd4398046511104;
parameter    ap_ST_fsm_state44 = 108'd8796093022208;
parameter    ap_ST_fsm_state45 = 108'd17592186044416;
parameter    ap_ST_fsm_state46 = 108'd35184372088832;
parameter    ap_ST_fsm_state47 = 108'd70368744177664;
parameter    ap_ST_fsm_state48 = 108'd140737488355328;
parameter    ap_ST_fsm_state49 = 108'd281474976710656;
parameter    ap_ST_fsm_state50 = 108'd562949953421312;
parameter    ap_ST_fsm_state51 = 108'd1125899906842624;
parameter    ap_ST_fsm_state52 = 108'd2251799813685248;
parameter    ap_ST_fsm_state53 = 108'd4503599627370496;
parameter    ap_ST_fsm_state54 = 108'd9007199254740992;
parameter    ap_ST_fsm_state55 = 108'd18014398509481984;
parameter    ap_ST_fsm_state56 = 108'd36028797018963968;
parameter    ap_ST_fsm_state57 = 108'd72057594037927936;
parameter    ap_ST_fsm_state58 = 108'd144115188075855872;
parameter    ap_ST_fsm_state59 = 108'd288230376151711744;
parameter    ap_ST_fsm_state60 = 108'd576460752303423488;
parameter    ap_ST_fsm_state61 = 108'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 108'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 108'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 108'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 108'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 108'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 108'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 108'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 108'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 108'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 108'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 108'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 108'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 108'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 108'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 108'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 108'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 108'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 108'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 108'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 108'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 108'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 108'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 108'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 108'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 108'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 108'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 108'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 108'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 108'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 108'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 108'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 108'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 108'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 108'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 108'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 108'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 108'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 108'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 108'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 108'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 108'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 108'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 108'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 108'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 108'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 108'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 108'd162259276829213363391578010288128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv2_weights;
input  [63:0] conv2_biases;
input  [63:0] output_ftmap;
output  [31:0] grp_fu_597_p_din0;
output  [31:0] grp_fu_597_p_din1;
output  [1:0] grp_fu_597_p_opcode;
input  [31:0] grp_fu_597_p_dout0;
output   grp_fu_597_p_ce;
output  [31:0] grp_fu_601_p_din0;
output  [31:0] grp_fu_601_p_din1;
input  [31:0] grp_fu_601_p_dout0;
output   grp_fu_601_p_ce;
output  [31:0] grp_fu_605_p_din0;
output  [31:0] grp_fu_605_p_din1;
output  [4:0] grp_fu_605_p_opcode;
input  [0:0] grp_fu_605_p_dout0;
output   grp_fu_605_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg[31:0] m_axi_gmem_ARLEN;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [107:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] input_fm_buffer_1_address0;
reg    input_fm_buffer_1_ce0;
reg    input_fm_buffer_1_we0;
reg   [31:0] input_fm_buffer_1_d0;
wire   [31:0] input_fm_buffer_1_q0;
reg   [11:0] input_fm_buffer_1_address1;
reg    input_fm_buffer_1_ce1;
wire   [31:0] input_fm_buffer_1_q1;
reg   [13:0] output_fm_buffer_address0;
reg    output_fm_buffer_ce0;
reg    output_fm_buffer_we0;
reg   [31:0] output_fm_buffer_d0;
wire   [31:0] output_fm_buffer_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state95;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state101;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state102;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state107;
reg   [31:0] reg_563;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state41;
reg   [31:0] reg_569;
reg   [31:0] reg_575;
reg   [31:0] reg_580;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state99;
wire  signed [62:0] sext_ln30_fu_598_p1;
reg  signed [62:0] sext_ln30_reg_1600;
wire   [3:0] add_ln30_fu_616_p2;
reg   [3:0] add_ln30_reg_1608;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_1_fu_622_p3;
reg   [7:0] tmp_1_reg_1613;
wire   [0:0] icmp_ln30_fu_610_p2;
wire   [3:0] add_ln31_fu_636_p2;
reg   [3:0] add_ln31_reg_1622;
wire    ap_CS_fsm_state3;
wire   [4:0] ti_cast15_fu_642_p1;
reg   [4:0] ti_cast15_reg_1627;
wire   [0:0] icmp_ln31_fu_630_p2;
wire   [7:0] tmp_4_fu_646_p3;
reg   [7:0] tmp_4_reg_1632;
wire   [3:0] add_ln38_fu_664_p2;
reg   [3:0] add_ln38_reg_1640;
wire    ap_CS_fsm_state4;
wire   [11:0] empty_69_fu_676_p2;
wire    ap_CS_fsm_state5;
wire   [2:0] trunc_ln96_fu_687_p1;
reg   [2:0] trunc_ln96_reg_1653;
wire   [0:0] exitcond12_fu_670_p2;
wire   [5:0] shl_ln_fu_691_p3;
reg   [5:0] shl_ln_reg_1658;
wire   [8:0] zext_ln98_fu_707_p1;
reg   [8:0] zext_ln98_reg_1663;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln98_fu_721_p2;
reg   [3:0] add_ln98_reg_1671;
wire   [24:0] zext_ln99_fu_742_p1;
reg   [24:0] zext_ln99_reg_1676;
wire   [0:0] icmp_ln98_fu_715_p2;
wire   [63:0] zext_ln52_fu_753_p1;
reg   [63:0] zext_ln52_reg_1681;
wire   [11:0] add_ln107_5_fu_782_p2;
reg   [11:0] add_ln107_5_reg_1686;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln99_fu_798_p2;
reg   [4:0] add_ln99_reg_1694;
reg   [63:0] gmem_addr_8_reg_1699;
wire   [0:0] icmp_ln99_fu_792_p2;
reg   [11:0] input_fm_buffer_1_addr_1_reg_1705;
wire    ap_CS_fsm_state16;
wire   [4:0] add_ln100_fu_917_p2;
reg   [4:0] add_ln100_reg_1713;
reg   [31:0] gmem_addr_8_read_reg_1718;
wire   [10:0] empty_76_fu_943_p2;
reg   [10:0] empty_76_reg_1723;
wire    ap_CS_fsm_state19;
wire   [5:0] add_ln52_fu_955_p2;
reg   [5:0] add_ln52_reg_1731;
reg   [63:0] gmem_addr_7_reg_1736;
wire   [0:0] icmp_ln52_fu_949_p2;
reg   [31:0] gmem_addr_7_read_reg_1742;
reg   [31:0] gmem_addr_7_read_1_reg_1747;
wire   [31:0] empty_82_fu_1007_p1;
reg   [31:0] empty_82_reg_1752;
reg   [31:0] gmem_addr_7_read_3_reg_1757;
reg   [31:0] gmem_addr_7_read_4_reg_1762;
wire   [31:0] empty_85_fu_1011_p1;
reg   [31:0] empty_85_reg_1767;
reg   [31:0] gmem_addr_7_read_6_reg_1772;
wire   [31:0] empty_80_fu_1015_p1;
reg   [31:0] empty_80_reg_1777;
wire   [31:0] empty_81_fu_1018_p1;
reg   [31:0] empty_81_reg_1782;
wire   [31:0] empty_83_fu_1021_p1;
reg   [31:0] empty_83_reg_1787;
wire   [31:0] empty_84_fu_1024_p1;
reg   [31:0] empty_84_reg_1792;
wire   [31:0] empty_86_fu_1027_p1;
reg   [31:0] empty_86_reg_1797;
wire   [31:0] empty_87_fu_1030_p1;
reg   [31:0] empty_87_reg_1802;
wire   [9:0] add_ln69_fu_1054_p2;
reg   [9:0] add_ln69_reg_1807;
wire    ap_CS_fsm_state36;
wire   [9:0] add_ln69_1_fu_1068_p2;
reg   [9:0] add_ln69_1_reg_1812;
wire   [10:0] add_ln69_2_fu_1074_p2;
reg   [10:0] add_ln69_2_reg_1817;
wire   [10:0] add_ln69_3_fu_1080_p2;
reg   [10:0] add_ln69_3_reg_1822;
wire   [10:0] add_ln69_4_fu_1086_p2;
reg   [10:0] add_ln69_4_reg_1827;
wire   [10:0] add_ln69_5_fu_1092_p2;
reg   [10:0] add_ln69_5_reg_1832;
wire   [11:0] add_ln69_6_fu_1098_p2;
reg   [11:0] add_ln69_6_reg_1837;
wire   [11:0] add_ln69_7_fu_1104_p2;
reg   [11:0] add_ln69_7_reg_1842;
wire   [13:0] empty_90_fu_1131_p2;
reg   [13:0] empty_90_reg_1847;
wire   [4:0] add_ln54_fu_1143_p2;
reg   [4:0] add_ln54_reg_1855;
wire    ap_CS_fsm_state37;
reg   [11:0] input_fm_buffer_1_addr_4_reg_1870;
reg   [11:0] input_fm_buffer_1_addr_5_reg_1875;
reg   [11:0] input_fm_buffer_1_addr_6_reg_1880;
reg   [11:0] input_fm_buffer_1_addr_7_reg_1885;
reg   [11:0] input_fm_buffer_1_addr_8_reg_1890;
reg   [11:0] input_fm_buffer_1_addr_9_reg_1895;
reg   [13:0] output_fm_buffer_addr_2_reg_1900;
wire   [4:0] add_ln55_fu_1261_p2;
reg   [4:0] add_ln55_reg_1908;
reg   [31:0] input_fm_buffer_1_load_2_reg_1913;
wire    ap_CS_fsm_state39;
reg   [31:0] input_fm_buffer_1_load_3_reg_1918;
reg   [31:0] input_fm_buffer_1_load_4_reg_1923;
wire    ap_CS_fsm_state40;
reg   [31:0] input_fm_buffer_1_load_5_reg_1928;
reg   [31:0] mul_reg_1933;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] mul50_1_reg_1938;
reg   [31:0] mul50_2_reg_1943;
wire    ap_CS_fsm_state42;
reg   [31:0] mul50_3_reg_1948;
reg   [31:0] mul50_4_reg_1953;
wire    ap_CS_fsm_state43;
reg   [31:0] mul50_5_reg_1958;
reg   [31:0] mul50_6_reg_1963;
wire    ap_CS_fsm_state44;
reg   [31:0] mul50_7_reg_1968;
wire   [22:0] add_ln120_1_fu_1267_p2;
reg   [22:0] add_ln120_1_reg_1973;
wire    ap_CS_fsm_state75;
wire   [10:0] add_ln124_8_fu_1289_p2;
reg   [10:0] add_ln124_8_reg_1978;
wire   [5:0] add_ln120_fu_1305_p2;
reg   [5:0] add_ln120_reg_1986;
reg   [63:0] gmem_addr_reg_1991;
wire   [0:0] icmp_ln120_fu_1299_p2;
wire   [63:0] add_ln124_6_fu_1330_p2;
reg   [63:0] add_ln124_6_reg_1997;
wire   [31:0] empty_93_fu_1335_p1;
reg   [31:0] empty_93_reg_2002;
wire   [13:0] add_ln124_10_fu_1364_p2;
reg   [13:0] add_ln124_10_reg_2007;
wire    ap_CS_fsm_state85;
wire   [4:0] add_ln121_fu_1380_p2;
reg   [4:0] add_ln121_reg_2015;
wire   [18:0] sub_ln124_fu_1415_p2;
reg   [18:0] sub_ln124_reg_2020;
wire   [0:0] icmp_ln121_fu_1374_p2;
wire    ap_CS_fsm_state86;
wire   [4:0] add_ln122_fu_1441_p2;
reg   [4:0] add_ln122_reg_2033;
reg   [63:0] gmem_addr_6_reg_2038;
wire   [0:0] icmp_ln122_fu_1435_p2;
reg   [31:0] gmem_addr_6_read_reg_2045;
wire   [31:0] bitcast_ln124_fu_1507_p1;
wire    ap_CS_fsm_state96;
wire   [31:0] select_ln125_fu_1553_p3;
reg   [31:0] select_ln125_reg_2055;
wire   [13:0] empty_96_fu_1567_p2;
wire    ap_CS_fsm_state108;
reg   [3:0] ti_reg_390;
wire   [0:0] exitcond6823_fu_1561_p2;
reg   [3:0] tn_reg_402;
reg   [11:0] empty_reg_414;
wire   [0:0] icmp_ln38_fu_658_p2;
reg   [3:0] nin_reg_425;
reg   [4:0] by_reg_436;
wire   [0:0] icmp_ln100_fu_911_p2;
reg   [4:0] bx_reg_447;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state15;
reg   [5:0] nout_1_reg_458;
wire   [0:0] icmp_ln54_fu_1137_p2;
reg   [4:0] ty_3_reg_469;
wire   [0:0] icmp_ln55_fu_1255_p2;
reg   [4:0] tx_3_reg_480;
wire    ap_CS_fsm_state74;
reg   [5:0] nout_reg_491;
reg   [22:0] phi_mul_reg_502;
reg   [4:0] ty_reg_513;
reg   [4:0] tx_reg_524;
reg   [13:0] empty_95_reg_535;
wire   [63:0] p_cast105_fu_682_p1;
wire   [63:0] zext_ln107_6_fu_906_p1;
wire   [63:0] zext_ln69_9_fu_1170_p1;
wire   [63:0] zext_ln69_10_fu_1180_p1;
wire   [63:0] zext_ln69_11_fu_1190_p1;
wire   [63:0] zext_ln69_12_fu_1200_p1;
wire   [63:0] zext_ln69_13_fu_1210_p1;
wire   [63:0] zext_ln69_14_fu_1220_p1;
wire   [63:0] zext_ln69_15_fu_1230_p1;
wire   [63:0] zext_ln69_16_fu_1240_p1;
wire   [63:0] p_cast120_fu_1250_p1;
wire   [63:0] zext_ln124_13_fu_1430_p1;
wire   [63:0] p_cast109_fu_1573_p1;
wire  signed [63:0] sext_ln100_fu_887_p1;
wire  signed [63:0] p_cast16_cast_fu_997_p1;
wire  signed [63:0] p_cast22_fu_1316_p1;
wire  signed [63:0] sext_ln124_fu_1497_p1;
reg   [3:0] tj_fu_192;
wire   [31:0] bitcast_ln107_fu_923_p1;
reg   [31:0] grp_fu_546_p0;
reg   [31:0] grp_fu_546_p1;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state88;
reg   [31:0] grp_fu_550_p0;
reg   [31:0] grp_fu_550_p1;
reg   [31:0] grp_fu_554_p0;
reg   [31:0] grp_fu_554_p1;
wire    ap_CS_fsm_state100;
wire   [61:0] trunc_ln_fu_588_p4;
wire   [7:0] or_ln_fu_699_p3;
wire   [5:0] zext_ln98_1_fu_711_p1;
wire   [5:0] empty_70_fu_727_p2;
wire   [5:0] empty_71_fu_736_p0;
wire   [18:0] empty_71_fu_736_p1;
wire   [23:0] empty_71_fu_736_p2;
wire   [7:0] tmp_s_fu_746_p3;
wire   [8:0] zext_ln107_fu_757_p1;
wire   [8:0] add_ln107_fu_761_p2;
wire   [7:0] trunc_ln107_fu_770_p1;
wire   [11:0] p_shl3_fu_774_p3;
wire   [11:0] zext_ln107_4_fu_766_p1;
wire   [7:0] zext_ln99_3_fu_788_p1;
wire   [7:0] empty_72_fu_804_p2;
wire   [17:0] p_shl4_fu_809_p3;
wire   [9:0] p_shl5_fu_821_p3;
wire   [18:0] p_shl4_cast_fu_817_p1;
wire   [18:0] p_shl5_cast_fu_829_p1;
wire   [18:0] empty_73_fu_833_p2;
wire   [9:0] tmp_fu_843_p4;
wire  signed [24:0] p_cast20_fu_839_p1;
wire   [24:0] tmp2_fu_857_p2;
wire  signed [63:0] tmp2_cast_fu_862_p1;
wire   [63:0] tmp1_fu_866_p2;
wire   [63:0] tmp_cast_fu_853_p1;
wire   [63:0] empty_74_fu_871_p2;
wire   [61:0] trunc_ln8_fu_877_p4;
wire   [11:0] zext_ln107_5_fu_897_p1;
wire   [11:0] add_ln107_6_fu_901_p2;
wire   [9:0] tmp_6_fu_931_p3;
wire   [10:0] tmp_11_cast_fu_939_p1;
wire   [10:0] nout_1_cast_fu_927_p1;
wire   [4:0] empty_77_fu_961_p1;
wire   [12:0] tmp_7_fu_965_p3;
wire   [63:0] p_cast34_fu_973_p1;
wire   [63:0] tmp3_fu_977_p2;
wire   [63:0] empty_78_fu_982_p2;
wire   [61:0] p_cast_fu_987_p4;
wire   [8:0] tmp_8_fu_1042_p3;
wire   [9:0] zext_ln69_2_fu_1050_p1;
wire   [9:0] zext_ln69_1_fu_1038_p1;
wire   [10:0] zext_ln69_4_fu_1064_p1;
wire   [11:0] zext_ln69_3_fu_1060_p1;
wire   [10:0] zext_ln69_fu_1034_p1;
wire   [10:0] empty_88_fu_1110_p2;
wire   [9:0] empty_89_fu_1119_p1;
wire   [13:0] p_shl7_fu_1123_p3;
wire   [13:0] p_cast99_fu_1115_p1;
wire   [9:0] zext_ln69_8_fu_1161_p1;
wire   [9:0] add_ln69_8_fu_1165_p2;
wire   [9:0] add_ln69_9_fu_1175_p2;
wire   [10:0] zext_ln69_7_fu_1157_p1;
wire   [10:0] add_ln69_10_fu_1185_p2;
wire   [10:0] add_ln69_11_fu_1195_p2;
wire   [10:0] add_ln69_12_fu_1205_p2;
wire   [10:0] add_ln69_13_fu_1215_p2;
wire   [11:0] zext_ln69_6_fu_1153_p1;
wire   [11:0] add_ln69_14_fu_1225_p2;
wire   [11:0] add_ln69_15_fu_1235_p2;
wire   [13:0] zext_ln69_5_fu_1149_p1;
wire   [13:0] empty_91_fu_1245_p2;
wire   [9:0] tmp_5_fu_1277_p3;
wire   [10:0] zext_ln124_9_fu_1285_p1;
wire   [10:0] zext_ln124_fu_1273_p1;
wire   [62:0] zext_ln120_fu_1295_p1;
wire   [62:0] empty_92_fu_1311_p2;
wire   [63:0] zext_ln121_fu_1326_p1;
wire   [10:0] zext_ln124_10_fu_1339_p1;
wire   [10:0] add_ln124_9_fu_1343_p2;
wire   [9:0] trunc_ln124_fu_1352_p1;
wire   [13:0] p_shl1_fu_1356_p3;
wire   [13:0] zext_ln124_11_fu_1348_p1;
wire   [7:0] zext_ln121_1_fu_1370_p1;
wire   [7:0] empty_94_fu_1386_p2;
wire   [17:0] shl_ln4_fu_1391_p3;
wire   [9:0] shl_ln124_3_fu_1403_p3;
wire   [18:0] zext_ln124_5_fu_1399_p1;
wire   [18:0] zext_ln124_6_fu_1411_p1;
wire   [13:0] zext_ln124_12_fu_1421_p1;
wire   [13:0] add_ln124_11_fu_1425_p2;
wire   [4:0] add_ln124_fu_1447_p2;
wire   [7:0] zext_ln124_7_fu_1452_p1;
wire   [7:0] add_ln124_4_fu_1456_p2;
wire   [9:0] shl_ln124_4_fu_1461_p3;
wire   [18:0] zext_ln124_8_fu_1469_p1;
wire   [18:0] add_ln124_7_fu_1473_p2;
wire  signed [63:0] sext_ln124_1_fu_1478_p1;
wire   [63:0] add_ln124_5_fu_1482_p2;
wire   [61:0] trunc_ln6_fu_1487_p4;
wire   [31:0] bitcast_ln124_2_fu_1511_p1;
wire   [7:0] tmp_2_fu_1515_p4;
wire   [22:0] trunc_ln125_fu_1525_p1;
wire   [0:0] icmp_ln125_1_fu_1535_p2;
wire   [0:0] icmp_ln125_fu_1529_p2;
wire   [0:0] or_ln125_fu_1541_p2;
wire   [0:0] and_ln125_fu_1547_p2;
reg    grp_fu_558_ce;
reg   [107:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
reg    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
reg    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
reg    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
reg    ap_ST_fsm_state101_blk;
reg    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
reg    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire   [23:0] empty_71_fu_736_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 108'd1;
end

srcnn_conv2_input_fm_buffer_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2312 ),
    .AddressWidth( 12 ))
input_fm_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_1_address0),
    .ce0(input_fm_buffer_1_ce0),
    .we0(input_fm_buffer_1_we0),
    .d0(input_fm_buffer_1_d0),
    .q0(input_fm_buffer_1_q0),
    .address1(input_fm_buffer_1_address1),
    .ce1(input_fm_buffer_1_ce1),
    .q1(input_fm_buffer_1_q1)
);

srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 9248 ),
    .AddressWidth( 14 ))
output_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_address0),
    .ce0(output_fm_buffer_ce0),
    .we0(output_fm_buffer_we0),
    .d0(output_fm_buffer_d0),
    .q0(output_fm_buffer_q0)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_554_p0),
    .din1(grp_fu_554_p1),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

srcnn_mul_6ns_19ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 24 ))
mul_6ns_19ns_24_1_1_U17(
    .din0(empty_71_fu_736_p0),
    .din1(empty_71_fu_736_p1),
    .dout(empty_71_fu_736_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bx_reg_447 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        bx_reg_447 <= add_ln100_reg_1713;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_715_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        by_reg_436 <= 5'd0;
    end else if (((icmp_ln100_fu_911_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        by_reg_436 <= add_ln99_reg_1694;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_1299_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        empty_95_reg_535 <= 14'd0;
    end else if (((exitcond6823_fu_1561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state108))) begin
        empty_95_reg_535 <= empty_96_fu_1567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_reg_414 <= empty_69_fu_676_p2;
    end else if (((icmp_ln38_fu_658_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_414 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nin_reg_425 <= 4'd0;
    end else if (((icmp_ln99_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        nin_reg_425 <= add_ln98_reg_1671;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_715_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nout_1_reg_458 <= 6'd0;
    end else if (((icmp_ln54_fu_1137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        nout_1_reg_458 <= add_ln52_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_658_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nout_reg_491 <= 6'd0;
    end else if (((icmp_ln121_fu_1374_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
        nout_reg_491 <= add_ln120_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_658_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_502 <= 23'd0;
    end else if (((icmp_ln121_fu_1374_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
        phi_mul_reg_502 <= add_ln120_1_reg_1973;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        reg_563 <= input_fm_buffer_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        reg_563 <= input_fm_buffer_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        reg_569 <= input_fm_buffer_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        reg_569 <= input_fm_buffer_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_390 <= 4'd0;
    end else if (((exitcond6823_fu_1561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state108))) begin
        ti_reg_390 <= add_ln31_reg_1622;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tj_fu_192 <= 4'd0;
    end else if (((icmp_ln31_fu_630_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_192 <= add_ln30_reg_1608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tn_reg_402 <= 4'd0;
    end else if (((icmp_ln52_fu_949_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        tn_reg_402 <= add_ln38_reg_1640;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_1137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        tx_3_reg_480 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tx_3_reg_480 <= add_ln55_reg_1908;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        tx_reg_524 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state107) & (m_axi_gmem_BVALID == 1'b1))) begin
        tx_reg_524 <= add_ln122_reg_2033;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1))) begin
        ty_3_reg_469 <= 5'd0;
    end else if (((icmp_ln55_fu_1255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ty_3_reg_469 <= add_ln54_reg_1855;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) & (m_axi_gmem_RVALID == 1'b1))) begin
        ty_reg_513 <= 5'd0;
    end else if (((icmp_ln122_fu_1435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        ty_reg_513 <= add_ln121_reg_2015;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln100_reg_1713 <= add_ln100_fu_917_p2;
        input_fm_buffer_1_addr_1_reg_1705 <= zext_ln107_6_fu_906_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln107_5_reg_1686 <= add_ln107_5_fu_782_p2;
        add_ln99_reg_1694 <= add_ln99_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln120_1_reg_1973 <= add_ln120_1_fu_1267_p2;
        add_ln120_reg_1986 <= add_ln120_fu_1305_p2;
        add_ln124_8_reg_1978 <= add_ln124_8_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        add_ln121_reg_2015 <= add_ln121_fu_1380_p2;
        add_ln124_10_reg_2007 <= add_ln124_10_fu_1364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        add_ln122_reg_2033 <= add_ln122_fu_1441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_1299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        add_ln124_6_reg_1997 <= add_ln124_6_fu_1330_p2;
        gmem_addr_reg_1991 <= p_cast22_fu_1316_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln30_reg_1608 <= add_ln30_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln31_reg_1622 <= add_ln31_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln38_reg_1640 <= add_ln38_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln52_reg_1731 <= add_ln52_fu_955_p2;
        empty_76_reg_1723 <= empty_76_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln54_reg_1855 <= add_ln54_fu_1143_p2;
        add_ln69_1_reg_1812 <= add_ln69_1_fu_1068_p2;
        add_ln69_2_reg_1817 <= add_ln69_2_fu_1074_p2;
        add_ln69_3_reg_1822 <= add_ln69_3_fu_1080_p2;
        add_ln69_4_reg_1827 <= add_ln69_4_fu_1086_p2;
        add_ln69_5_reg_1832 <= add_ln69_5_fu_1092_p2;
        add_ln69_6_reg_1837 <= add_ln69_6_fu_1098_p2;
        add_ln69_7_reg_1842 <= add_ln69_7_fu_1104_p2;
        add_ln69_reg_1807 <= add_ln69_fu_1054_p2;
        empty_90_reg_1847 <= empty_90_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln55_reg_1908 <= add_ln55_fu_1261_p2;
        input_fm_buffer_1_addr_4_reg_1870[10 : 0] <= zext_ln69_11_fu_1190_p1[10 : 0];
        input_fm_buffer_1_addr_5_reg_1875[10 : 0] <= zext_ln69_12_fu_1200_p1[10 : 0];
        input_fm_buffer_1_addr_6_reg_1880[10 : 0] <= zext_ln69_13_fu_1210_p1[10 : 0];
        input_fm_buffer_1_addr_7_reg_1885[10 : 0] <= zext_ln69_14_fu_1220_p1[10 : 0];
        input_fm_buffer_1_addr_8_reg_1890 <= zext_ln69_15_fu_1230_p1;
        input_fm_buffer_1_addr_9_reg_1895 <= zext_ln69_16_fu_1240_p1;
        output_fm_buffer_addr_2_reg_1900 <= p_cast120_fu_1250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln98_reg_1671 <= add_ln98_fu_721_p2;
        zext_ln98_reg_1663[7 : 0] <= zext_ln98_fu_707_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        empty_80_reg_1777 <= empty_80_fu_1015_p1;
        empty_81_reg_1782 <= empty_81_fu_1018_p1;
        empty_83_reg_1787 <= empty_83_fu_1021_p1;
        empty_84_reg_1792 <= empty_84_fu_1024_p1;
        empty_86_reg_1797 <= empty_86_fu_1027_p1;
        empty_87_reg_1802 <= empty_87_fu_1030_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        empty_82_reg_1752 <= empty_82_fu_1007_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        empty_85_reg_1767 <= empty_85_fu_1011_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        empty_93_reg_2002 <= empty_93_fu_1335_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        gmem_addr_6_read_reg_2045 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        gmem_addr_6_reg_2038 <= sext_ln124_fu_1497_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_addr_7_read_1_reg_1747 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        gmem_addr_7_read_3_reg_1757 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_addr_7_read_4_reg_1762 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem_addr_7_read_6_reg_1772 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_addr_7_read_reg_1742 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        gmem_addr_7_reg_1736 <= p_cast16_cast_fu_997_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_addr_8_read_reg_1718 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        gmem_addr_8_reg_1699 <= sext_ln100_fu_887_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        input_fm_buffer_1_load_2_reg_1913 <= input_fm_buffer_1_q0;
        input_fm_buffer_1_load_3_reg_1918 <= input_fm_buffer_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        input_fm_buffer_1_load_4_reg_1923 <= input_fm_buffer_1_q0;
        input_fm_buffer_1_load_5_reg_1928 <= input_fm_buffer_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        mul50_1_reg_1938 <= grp_fu_554_p2;
        mul_reg_1933 <= grp_fu_601_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        mul50_2_reg_1943 <= grp_fu_601_p_dout0;
        mul50_3_reg_1948 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        mul50_4_reg_1953 <= grp_fu_601_p_dout0;
        mul50_5_reg_1958 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        mul50_6_reg_1963 <= grp_fu_601_p_dout0;
        mul50_7_reg_1968 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state87))) begin
        reg_575 <= output_fm_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_580 <= grp_fu_597_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        select_ln125_reg_2055 <= select_ln125_fu_1553_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln30_reg_1600 <= sext_ln30_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        shl_ln_reg_1658[5 : 3] <= shl_ln_fu_691_p3[5 : 3];
        trunc_ln96_reg_1653 <= trunc_ln96_fu_687_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        sub_ln124_reg_2020[18 : 2] <= sub_ln124_fu_1415_p2[18 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ti_cast15_reg_1627[3 : 0] <= ti_cast15_fu_642_p1[3 : 0];
        tmp_4_reg_1632[7 : 4] <= tmp_4_fu_646_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_1613 <= tmp_1_fu_622_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_715_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln52_reg_1681[7 : 5] <= zext_ln52_fu_753_p1[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_715_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln99_reg_1676[23 : 0] <= zext_ln99_fu_742_p1[23 : 0];
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state101_blk = 1'b1;
    end else begin
        ap_ST_fsm_state101_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state102_blk = 1'b1;
    end else begin
        ap_ST_fsm_state102_blk = 1'b0;
    end
end

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state107_blk = 1'b1;
    end else begin
        ap_ST_fsm_state107_blk = 1'b0;
    end
end

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state84_blk = 1'b1;
    end else begin
        ap_ST_fsm_state84_blk = 1'b0;
    end
end

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state87_blk = 1'b1;
    end else begin
        ap_ST_fsm_state87_blk = 1'b0;
    end
end

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state95_blk = 1'b1;
    end else begin
        ap_ST_fsm_state95_blk = 1'b0;
    end
end

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln30_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_546_p0 = bitcast_ln124_fu_1507_p1;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_fu_546_p0 = reg_580;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_546_p0 = reg_575;
    end else begin
        grp_fu_546_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_546_p1 = reg_580;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_546_p1 = empty_93_reg_2002;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_546_p1 = mul50_7_reg_1968;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_546_p1 = mul50_6_reg_1963;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_546_p1 = mul50_5_reg_1958;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_546_p1 = mul50_4_reg_1953;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_546_p1 = mul50_3_reg_1948;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_546_p1 = mul50_2_reg_1943;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_546_p1 = mul50_1_reg_1938;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_546_p1 = mul_reg_1933;
    end else begin
        grp_fu_546_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_550_p0 = empty_86_reg_1797;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_550_p0 = empty_84_reg_1792;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_550_p0 = empty_82_reg_1752;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_550_p0 = empty_80_reg_1777;
    end else begin
        grp_fu_550_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_550_p1 = input_fm_buffer_1_load_4_reg_1923;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_550_p1 = input_fm_buffer_1_load_2_reg_1913;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_550_p1 = reg_563;
    end else begin
        grp_fu_550_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_554_p0 = empty_87_reg_1802;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_554_p0 = empty_85_reg_1767;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_554_p0 = empty_83_reg_1787;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_554_p0 = empty_81_reg_1782;
    end else begin
        grp_fu_554_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_554_p1 = input_fm_buffer_1_load_5_reg_1928;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_554_p1 = input_fm_buffer_1_load_3_reg_1918;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_554_p1 = reg_569;
    end else begin
        grp_fu_554_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state100) | ((1'b1 == ap_CS_fsm_state101) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        grp_fu_558_ce = 1'b1;
    end else begin
        grp_fu_558_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_8_reg_1890;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_6_reg_1880;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_4_reg_1870;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        input_fm_buffer_1_address0 = zext_ln69_10_fu_1180_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_1_reg_1705;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_fm_buffer_1_address0 = p_cast105_fu_682_p1;
    end else begin
        input_fm_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        input_fm_buffer_1_address1 = input_fm_buffer_1_addr_9_reg_1895;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        input_fm_buffer_1_address1 = input_fm_buffer_1_addr_7_reg_1885;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        input_fm_buffer_1_address1 = input_fm_buffer_1_addr_5_reg_1875;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        input_fm_buffer_1_address1 = zext_ln69_9_fu_1170_p1;
    end else begin
        input_fm_buffer_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state38))) begin
        input_fm_buffer_1_ce0 = 1'b1;
    end else begin
        input_fm_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        input_fm_buffer_1_ce1 = 1'b1;
    end else begin
        input_fm_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        input_fm_buffer_1_d0 = bitcast_ln107_fu_923_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_fm_buffer_1_d0 = 32'd0;
    end else begin
        input_fm_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((exitcond12_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_fm_buffer_1_we0 = 1'b1;
    end else begin
        input_fm_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state87)) begin
            m_axi_gmem_ARADDR = gmem_addr_6_reg_2038;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1991;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            m_axi_gmem_ARADDR = gmem_addr_7_reg_1736;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            m_axi_gmem_ARADDR = gmem_addr_8_reg_1699;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state87) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state20) & (m_axi_gmem_ARREADY == 1'b1))) begin
        m_axi_gmem_ARLEN = 32'd8;
    end else if (((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1))) begin
        m_axi_gmem_ARLEN = 32'd17;
    end else begin
        m_axi_gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state87) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) & (m_axi_gmem_AWREADY == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state95) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state84) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) & (m_axi_gmem_WREADY == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        output_fm_buffer_address0 = p_cast109_fu_1573_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        output_fm_buffer_address0 = zext_ln124_13_fu_1430_p1;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state40))) begin
        output_fm_buffer_address0 = output_fm_buffer_addr_2_reg_1900;
    end else begin
        output_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state40))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        output_fm_buffer_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        output_fm_buffer_d0 = reg_580;
    end else begin
        output_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((exitcond6823_fu_1561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state108)))) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln31_fu_630_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln38_fu_658_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond12_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln98_fu_715_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln99_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln100_fu_911_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln52_fu_949_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln54_fu_1137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln55_fu_1255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln120_fu_1299_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((icmp_ln121_fu_1374_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln122_fu_1435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((1'b1 == ap_CS_fsm_state87) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((1'b1 == ap_CS_fsm_state95) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((1'b1 == ap_CS_fsm_state101) & (m_axi_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            if (((1'b1 == ap_CS_fsm_state102) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (((1'b1 == ap_CS_fsm_state107) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state108 : begin
            if (((exitcond6823_fu_1561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_917_p2 = (bx_reg_447 + 5'd1);

assign add_ln107_5_fu_782_p2 = (p_shl3_fu_774_p3 + zext_ln107_4_fu_766_p1);

assign add_ln107_6_fu_901_p2 = (add_ln107_5_reg_1686 + zext_ln107_5_fu_897_p1);

assign add_ln107_fu_761_p2 = (zext_ln98_reg_1663 + zext_ln107_fu_757_p1);

assign add_ln120_1_fu_1267_p2 = (phi_mul_reg_502 + 23'd260100);

assign add_ln120_fu_1305_p2 = (nout_reg_491 + 6'd1);

assign add_ln121_fu_1380_p2 = (ty_reg_513 + 5'd1);

assign add_ln122_fu_1441_p2 = (tx_reg_524 + 5'd1);

assign add_ln124_10_fu_1364_p2 = (p_shl1_fu_1356_p3 + zext_ln124_11_fu_1348_p1);

assign add_ln124_11_fu_1425_p2 = (add_ln124_10_reg_2007 + zext_ln124_12_fu_1421_p1);

assign add_ln124_4_fu_1456_p2 = (zext_ln124_7_fu_1452_p1 + tmp_4_reg_1632);

assign add_ln124_5_fu_1482_p2 = ($signed(sext_ln124_1_fu_1478_p1) + $signed(add_ln124_6_reg_1997));

assign add_ln124_6_fu_1330_p2 = (zext_ln121_fu_1326_p1 + output_ftmap);

assign add_ln124_7_fu_1473_p2 = (sub_ln124_reg_2020 + zext_ln124_8_fu_1469_p1);

assign add_ln124_8_fu_1289_p2 = (zext_ln124_9_fu_1285_p1 + zext_ln124_fu_1273_p1);

assign add_ln124_9_fu_1343_p2 = (add_ln124_8_reg_1978 + zext_ln124_10_fu_1339_p1);

assign add_ln124_fu_1447_p2 = (ti_cast15_reg_1627 + tx_reg_524);

assign add_ln30_fu_616_p2 = (tj_fu_192 + 4'd1);

assign add_ln31_fu_636_p2 = (ti_reg_390 + 4'd1);

assign add_ln38_fu_664_p2 = (tn_reg_402 + 4'd1);

assign add_ln52_fu_955_p2 = (nout_1_reg_458 + 6'd1);

assign add_ln54_fu_1143_p2 = (ty_3_reg_469 + 5'd1);

assign add_ln55_fu_1261_p2 = (tx_3_reg_480 + 5'd1);

assign add_ln69_10_fu_1185_p2 = (add_ln69_2_reg_1817 + zext_ln69_7_fu_1157_p1);

assign add_ln69_11_fu_1195_p2 = (add_ln69_3_reg_1822 + zext_ln69_7_fu_1157_p1);

assign add_ln69_12_fu_1205_p2 = (add_ln69_4_reg_1827 + zext_ln69_7_fu_1157_p1);

assign add_ln69_13_fu_1215_p2 = (add_ln69_5_reg_1832 + zext_ln69_7_fu_1157_p1);

assign add_ln69_14_fu_1225_p2 = (add_ln69_6_reg_1837 + zext_ln69_6_fu_1153_p1);

assign add_ln69_15_fu_1235_p2 = (add_ln69_7_reg_1842 + zext_ln69_6_fu_1153_p1);

assign add_ln69_1_fu_1068_p2 = (add_ln69_fu_1054_p2 + 10'd289);

assign add_ln69_2_fu_1074_p2 = (zext_ln69_4_fu_1064_p1 + 11'd578);

assign add_ln69_3_fu_1080_p2 = (zext_ln69_4_fu_1064_p1 + 11'd867);

assign add_ln69_4_fu_1086_p2 = ($signed(zext_ln69_4_fu_1064_p1) + $signed(11'd1156));

assign add_ln69_5_fu_1092_p2 = ($signed(zext_ln69_4_fu_1064_p1) + $signed(11'd1445));

assign add_ln69_6_fu_1098_p2 = (zext_ln69_3_fu_1060_p1 + 12'd1734);

assign add_ln69_7_fu_1104_p2 = (zext_ln69_3_fu_1060_p1 + 12'd2023);

assign add_ln69_8_fu_1165_p2 = (add_ln69_reg_1807 + zext_ln69_8_fu_1161_p1);

assign add_ln69_9_fu_1175_p2 = (add_ln69_1_reg_1812 + zext_ln69_8_fu_1161_p1);

assign add_ln69_fu_1054_p2 = (zext_ln69_2_fu_1050_p1 + zext_ln69_1_fu_1038_p1);

assign add_ln98_fu_721_p2 = (nin_reg_425 + 4'd1);

assign add_ln99_fu_798_p2 = (by_reg_436 + 5'd1);

assign and_ln125_fu_1547_p2 = (or_ln125_fu_1541_p2 & grp_fu_605_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign bitcast_ln107_fu_923_p1 = gmem_addr_8_read_reg_1718;

assign bitcast_ln124_2_fu_1511_p1 = reg_580;

assign bitcast_ln124_fu_1507_p1 = gmem_addr_6_read_reg_2045;

assign empty_69_fu_676_p2 = (empty_reg_414 + 12'd1);

assign empty_70_fu_727_p2 = (zext_ln98_1_fu_711_p1 + shl_ln_reg_1658);

assign empty_71_fu_736_p0 = empty_71_fu_736_p00;

assign empty_71_fu_736_p00 = empty_70_fu_727_p2;

assign empty_71_fu_736_p1 = 24'd260100;

assign empty_72_fu_804_p2 = (zext_ln99_3_fu_788_p1 + tmp_1_reg_1613);

assign empty_73_fu_833_p2 = (p_shl4_cast_fu_817_p1 - p_shl5_cast_fu_829_p1);

assign empty_74_fu_871_p2 = (tmp1_fu_866_p2 + tmp_cast_fu_853_p1);

assign empty_76_fu_943_p2 = (tmp_11_cast_fu_939_p1 + nout_1_cast_fu_927_p1);

assign empty_77_fu_961_p1 = nout_1_reg_458[4:0];

assign empty_78_fu_982_p2 = (tmp3_fu_977_p2 + zext_ln52_reg_1681);

assign empty_80_fu_1015_p1 = gmem_addr_7_read_reg_1742;

assign empty_81_fu_1018_p1 = gmem_addr_7_read_1_reg_1747;

assign empty_82_fu_1007_p1 = m_axi_gmem_RDATA;

assign empty_83_fu_1021_p1 = gmem_addr_7_read_3_reg_1757;

assign empty_84_fu_1024_p1 = gmem_addr_7_read_4_reg_1762;

assign empty_85_fu_1011_p1 = m_axi_gmem_RDATA;

assign empty_86_fu_1027_p1 = gmem_addr_7_read_6_reg_1772;

assign empty_87_fu_1030_p1 = m_axi_gmem_RDATA;

assign empty_88_fu_1110_p2 = (empty_76_reg_1723 + zext_ln69_fu_1034_p1);

assign empty_89_fu_1119_p1 = empty_88_fu_1110_p2[9:0];

assign empty_90_fu_1131_p2 = (p_shl7_fu_1123_p3 + p_cast99_fu_1115_p1);

assign empty_91_fu_1245_p2 = (empty_90_reg_1847 + zext_ln69_5_fu_1149_p1);

assign empty_92_fu_1311_p2 = ($signed(zext_ln120_fu_1295_p1) + $signed(sext_ln30_reg_1600));

assign empty_93_fu_1335_p1 = m_axi_gmem_RDATA;

assign empty_94_fu_1386_p2 = (zext_ln121_1_fu_1370_p1 + tmp_1_reg_1613);

assign empty_96_fu_1567_p2 = (empty_95_reg_535 + 14'd1);

assign exitcond12_fu_670_p2 = ((empty_reg_414 == 12'd2312) ? 1'b1 : 1'b0);

assign exitcond6823_fu_1561_p2 = ((empty_95_reg_535 == 14'd9248) ? 1'b1 : 1'b0);

assign grp_fu_597_p_ce = 1'b1;

assign grp_fu_597_p_din0 = grp_fu_546_p0;

assign grp_fu_597_p_din1 = grp_fu_546_p1;

assign grp_fu_597_p_opcode = 2'd0;

assign grp_fu_601_p_ce = 1'b1;

assign grp_fu_601_p_din0 = grp_fu_550_p0;

assign grp_fu_601_p_din1 = grp_fu_550_p1;

assign grp_fu_605_p_ce = grp_fu_558_ce;

assign grp_fu_605_p_din0 = reg_580;

assign grp_fu_605_p_din1 = 32'd0;

assign grp_fu_605_p_opcode = 5'd4;

assign icmp_ln100_fu_911_p2 = ((bx_reg_447 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_1299_p2 = ((nout_reg_491 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_1374_p2 = ((ty_reg_513 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_1435_p2 = ((tx_reg_524 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln125_1_fu_1535_p2 = ((trunc_ln125_fu_1525_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_1529_p2 = ((tmp_2_fu_1515_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_610_p2 = ((tj_fu_192 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_630_p2 = ((ti_reg_390 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_658_p2 = ((tn_reg_402 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_949_p2 = ((nout_1_reg_458 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1137_p2 = ((ty_3_reg_469 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1255_p2 = ((tx_3_reg_480 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_715_p2 = ((nin_reg_425 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_792_p2 = ((by_reg_436 == 5'd17) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_6_reg_2038;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln125_reg_2055;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign nout_1_cast_fu_927_p1 = nout_1_reg_458;

assign or_ln125_fu_1541_p2 = (icmp_ln125_fu_1529_p2 | icmp_ln125_1_fu_1535_p2);

assign or_ln_fu_699_p3 = {{nin_reg_425}, {nin_reg_425}};

assign p_cast105_fu_682_p1 = empty_reg_414;

assign p_cast109_fu_1573_p1 = empty_95_reg_535;

assign p_cast120_fu_1250_p1 = empty_91_fu_1245_p2;

assign p_cast16_cast_fu_997_p1 = $signed(p_cast_fu_987_p4);

assign p_cast20_fu_839_p1 = $signed(empty_73_fu_833_p2);

assign p_cast22_fu_1316_p1 = $signed(empty_92_fu_1311_p2);

assign p_cast34_fu_973_p1 = tmp_7_fu_965_p3;

assign p_cast99_fu_1115_p1 = empty_88_fu_1110_p2;

assign p_cast_fu_987_p4 = {{empty_78_fu_982_p2[63:2]}};

assign p_shl1_fu_1356_p3 = {{trunc_ln124_fu_1352_p1}, {4'd0}};

assign p_shl3_fu_774_p3 = {{trunc_ln107_fu_770_p1}, {4'd0}};

assign p_shl4_cast_fu_817_p1 = p_shl4_fu_809_p3;

assign p_shl4_fu_809_p3 = {{empty_72_fu_804_p2}, {10'd0}};

assign p_shl5_cast_fu_829_p1 = p_shl5_fu_821_p3;

assign p_shl5_fu_821_p3 = {{empty_72_fu_804_p2}, {2'd0}};

assign p_shl7_fu_1123_p3 = {{empty_89_fu_1119_p1}, {4'd0}};

assign select_ln125_fu_1553_p3 = ((and_ln125_fu_1547_p2[0:0] == 1'b1) ? 32'd0 : bitcast_ln124_2_fu_1511_p1);

assign sext_ln100_fu_887_p1 = $signed(trunc_ln8_fu_877_p4);

assign sext_ln124_1_fu_1478_p1 = $signed(add_ln124_7_fu_1473_p2);

assign sext_ln124_fu_1497_p1 = $signed(trunc_ln6_fu_1487_p4);

assign sext_ln30_fu_598_p1 = $signed(trunc_ln_fu_588_p4);

assign shl_ln124_3_fu_1403_p3 = {{empty_94_fu_1386_p2}, {2'd0}};

assign shl_ln124_4_fu_1461_p3 = {{add_ln124_4_fu_1456_p2}, {2'd0}};

assign shl_ln4_fu_1391_p3 = {{empty_94_fu_1386_p2}, {10'd0}};

assign shl_ln_fu_691_p3 = {{trunc_ln96_fu_687_p1}, {3'd0}};

assign sub_ln124_fu_1415_p2 = (zext_ln124_5_fu_1399_p1 - zext_ln124_6_fu_1411_p1);

assign ti_cast15_fu_642_p1 = ti_reg_390;

assign tmp1_fu_866_p2 = ($signed(tmp2_cast_fu_862_p1) + $signed(input_ftmap));

assign tmp2_cast_fu_862_p1 = $signed(tmp2_fu_857_p2);

assign tmp2_fu_857_p2 = ($signed(zext_ln99_reg_1676) + $signed(p_cast20_fu_839_p1));

assign tmp3_fu_977_p2 = (p_cast34_fu_973_p1 + conv2_weights);

assign tmp_11_cast_fu_939_p1 = tmp_6_fu_931_p3;

assign tmp_1_fu_622_p3 = {{tj_fu_192}, {tj_fu_192}};

assign tmp_2_fu_1515_p4 = {{bitcast_ln124_2_fu_1511_p1[30:23]}};

assign tmp_4_fu_646_p3 = {{ti_reg_390}, {4'd0}};

assign tmp_5_fu_1277_p3 = {{nout_reg_491}, {4'd0}};

assign tmp_6_fu_931_p3 = {{nout_1_reg_458}, {4'd0}};

assign tmp_7_fu_965_p3 = {{empty_77_fu_961_p1}, {8'd0}};

assign tmp_8_fu_1042_p3 = {{ty_3_reg_469}, {4'd0}};

assign tmp_cast_fu_853_p1 = tmp_fu_843_p4;

assign tmp_fu_843_p4 = {{{ti_reg_390}, {ti_reg_390}}, {2'd0}};

assign tmp_s_fu_746_p3 = {{trunc_ln96_reg_1653}, {5'd0}};

assign trunc_ln107_fu_770_p1 = add_ln107_fu_761_p2[7:0];

assign trunc_ln124_fu_1352_p1 = add_ln124_9_fu_1343_p2[9:0];

assign trunc_ln125_fu_1525_p1 = bitcast_ln124_2_fu_1511_p1[22:0];

assign trunc_ln6_fu_1487_p4 = {{add_ln124_5_fu_1482_p2[63:2]}};

assign trunc_ln8_fu_877_p4 = {{empty_74_fu_871_p2[63:2]}};

assign trunc_ln96_fu_687_p1 = tn_reg_402[2:0];

assign trunc_ln_fu_588_p4 = {{conv2_biases[63:2]}};

assign zext_ln107_4_fu_766_p1 = add_ln107_fu_761_p2;

assign zext_ln107_5_fu_897_p1 = bx_reg_447;

assign zext_ln107_6_fu_906_p1 = add_ln107_6_fu_901_p2;

assign zext_ln107_fu_757_p1 = by_reg_436;

assign zext_ln120_fu_1295_p1 = nout_reg_491;

assign zext_ln121_1_fu_1370_p1 = ty_reg_513;

assign zext_ln121_fu_1326_p1 = phi_mul_reg_502;

assign zext_ln124_10_fu_1339_p1 = ty_reg_513;

assign zext_ln124_11_fu_1348_p1 = add_ln124_9_fu_1343_p2;

assign zext_ln124_12_fu_1421_p1 = tx_reg_524;

assign zext_ln124_13_fu_1430_p1 = add_ln124_11_fu_1425_p2;

assign zext_ln124_5_fu_1399_p1 = shl_ln4_fu_1391_p3;

assign zext_ln124_6_fu_1411_p1 = shl_ln124_3_fu_1403_p3;

assign zext_ln124_7_fu_1452_p1 = add_ln124_fu_1447_p2;

assign zext_ln124_8_fu_1469_p1 = shl_ln124_4_fu_1461_p3;

assign zext_ln124_9_fu_1285_p1 = tmp_5_fu_1277_p3;

assign zext_ln124_fu_1273_p1 = nout_reg_491;

assign zext_ln52_fu_753_p1 = tmp_s_fu_746_p3;

assign zext_ln69_10_fu_1180_p1 = add_ln69_9_fu_1175_p2;

assign zext_ln69_11_fu_1190_p1 = add_ln69_10_fu_1185_p2;

assign zext_ln69_12_fu_1200_p1 = add_ln69_11_fu_1195_p2;

assign zext_ln69_13_fu_1210_p1 = add_ln69_12_fu_1205_p2;

assign zext_ln69_14_fu_1220_p1 = add_ln69_13_fu_1215_p2;

assign zext_ln69_15_fu_1230_p1 = add_ln69_14_fu_1225_p2;

assign zext_ln69_16_fu_1240_p1 = add_ln69_15_fu_1235_p2;

assign zext_ln69_1_fu_1038_p1 = ty_3_reg_469;

assign zext_ln69_2_fu_1050_p1 = tmp_8_fu_1042_p3;

assign zext_ln69_3_fu_1060_p1 = add_ln69_fu_1054_p2;

assign zext_ln69_4_fu_1064_p1 = add_ln69_fu_1054_p2;

assign zext_ln69_5_fu_1149_p1 = tx_3_reg_480;

assign zext_ln69_6_fu_1153_p1 = tx_3_reg_480;

assign zext_ln69_7_fu_1157_p1 = tx_3_reg_480;

assign zext_ln69_8_fu_1161_p1 = tx_3_reg_480;

assign zext_ln69_9_fu_1170_p1 = add_ln69_8_fu_1165_p2;

assign zext_ln69_fu_1034_p1 = ty_3_reg_469;

assign zext_ln98_1_fu_711_p1 = nin_reg_425;

assign zext_ln98_fu_707_p1 = or_ln_fu_699_p3;

assign zext_ln99_3_fu_788_p1 = by_reg_436;

assign zext_ln99_fu_742_p1 = empty_71_fu_736_p2;

always @ (posedge ap_clk) begin
    ti_cast15_reg_1627[4] <= 1'b0;
    tmp_4_reg_1632[3:0] <= 4'b0000;
    shl_ln_reg_1658[2:0] <= 3'b000;
    zext_ln98_reg_1663[8] <= 1'b0;
    zext_ln99_reg_1676[24] <= 1'b0;
    zext_ln52_reg_1681[4:0] <= 5'b00000;
    zext_ln52_reg_1681[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    input_fm_buffer_1_addr_4_reg_1870[11] <= 1'b0;
    input_fm_buffer_1_addr_5_reg_1875[11] <= 1'b0;
    input_fm_buffer_1_addr_6_reg_1880[11] <= 1'b0;
    input_fm_buffer_1_addr_7_reg_1885[11] <= 1'b0;
    sub_ln124_reg_2020[1:0] <= 2'b00;
end

endmodule //srcnn_conv2
