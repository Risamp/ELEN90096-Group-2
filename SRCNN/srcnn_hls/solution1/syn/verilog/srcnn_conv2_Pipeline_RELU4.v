// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_Pipeline_RELU4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln111_2,
        sext_ln108,
        sext_ln111,
        output_fm_buffer_address0,
        output_fm_buffer_ce0,
        output_fm_buffer_we0,
        output_fm_buffer_d0,
        output_fm_buffer_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] sub_ln111_2;
input  [29:0] sext_ln108;
input  [29:0] sext_ln111;
output  [11:0] output_fm_buffer_address0;
output   output_fm_buffer_ce0;
output   output_fm_buffer_we0;
output  [31:0] output_fm_buffer_d0;
input  [31:0] output_fm_buffer_q0;

reg ap_idle;
reg[11:0] output_fm_buffer_address0;
reg output_fm_buffer_ce0;
reg output_fm_buffer_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln108_fu_95_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire  signed [30:0] sext_ln111_cast_fu_79_p1;
reg  signed [30:0] sext_ln111_cast_reg_169;
wire  signed [31:0] sext_ln108_cast_fu_83_p1;
reg  signed [31:0] sext_ln108_cast_reg_174;
reg   [11:0] output_fm_buffer_addr_reg_182;
wire   [63:0] zext_ln111_1_fu_117_p1;
reg   [7:0] bw_2_fu_44;
wire   [7:0] add_ln108_fu_101_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_bw;
wire   [11:0] zext_ln111_fu_107_p1;
wire   [11:0] add_ln111_fu_111_p2;
wire   [30:0] trunc_ln111_fu_127_p1;
wire   [31:0] add_ln111_1_fu_131_p2;
wire   [0:0] tmp_fu_141_p3;
wire   [30:0] add_ln113_fu_136_p2;
wire   [30:0] select_ln113_fu_149_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln108_fu_95_p2 == 1'd0)) begin
            bw_2_fu_44 <= add_ln108_fu_101_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            bw_2_fu_44 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        output_fm_buffer_addr_reg_182 <= zext_ln111_1_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sext_ln108_cast_reg_174 <= sext_ln108_cast_fu_83_p1;
        sext_ln111_cast_reg_169 <= sext_ln111_cast_fu_79_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln108_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_bw = 8'd0;
    end else begin
        ap_sig_allocacmp_bw = bw_2_fu_44;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_fm_buffer_address0 = output_fm_buffer_addr_reg_182;
    end else if (((icmp_ln108_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        output_fm_buffer_address0 = zext_ln111_1_fu_117_p1;
    end else begin
        output_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln108_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln108_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln108_fu_101_p2 = (ap_sig_allocacmp_bw + 8'd1);

assign add_ln111_1_fu_131_p2 = ($signed(output_fm_buffer_q0) + $signed(sext_ln108_cast_reg_174));

assign add_ln111_fu_111_p2 = (sub_ln111_2 + zext_ln111_fu_107_p1);

assign add_ln113_fu_136_p2 = ($signed(trunc_ln111_fu_127_p1) + $signed(sext_ln111_cast_reg_169));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln108_fu_95_p2 = ((ap_sig_allocacmp_bw == 8'd255) ? 1'b1 : 1'b0);

assign output_fm_buffer_d0 = select_ln113_fu_149_p3;

assign select_ln113_fu_149_p3 = ((tmp_fu_141_p3[0:0] == 1'b1) ? 31'd0 : add_ln113_fu_136_p2);

assign sext_ln108_cast_fu_83_p1 = $signed(sext_ln108);

assign sext_ln111_cast_fu_79_p1 = $signed(sext_ln111);

assign tmp_fu_141_p3 = add_ln111_1_fu_131_p2[32'd31];

assign trunc_ln111_fu_127_p1 = output_fm_buffer_q0[30:0];

assign zext_ln111_1_fu_117_p1 = add_ln111_fu_111_p2;

assign zext_ln111_fu_107_p1 = ap_sig_allocacmp_bw;

endmodule //srcnn_conv2_Pipeline_RELU4
