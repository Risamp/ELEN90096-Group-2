// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_KR_KC (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_fm_buffer_0_load_1,
        add_ln53_1,
        select_ln42_2,
        add_ln53,
        zext_ln43_1,
        p_out,
        p_out_ap_vld,
        weight_buffer_0_address0,
        weight_buffer_0_ce0,
        weight_buffer_0_q0,
        input_fm_buffer_address0,
        input_fm_buffer_ce0,
        input_fm_buffer_q0,
        grp_fu_1675_p_din0,
        grp_fu_1675_p_din1,
        grp_fu_1675_p_opcode,
        grp_fu_1675_p_dout0,
        grp_fu_1675_p_ce,
        grp_fu_1679_p_din0,
        grp_fu_1679_p_din1,
        grp_fu_1679_p_dout0,
        grp_fu_1679_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] output_fm_buffer_0_load_1;
input  [8:0] add_ln53_1;
input  [2:0] select_ln42_2;
input  [9:0] add_ln53;
input  [7:0] zext_ln43_1;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [9:0] weight_buffer_0_address0;
output   weight_buffer_0_ce0;
input  [31:0] weight_buffer_0_q0;
output  [16:0] input_fm_buffer_address0;
output   input_fm_buffer_ce0;
input  [31:0] input_fm_buffer_q0;
output  [31:0] grp_fu_1675_p_din0;
output  [31:0] grp_fu_1675_p_din1;
output  [1:0] grp_fu_1675_p_opcode;
input  [31:0] grp_fu_1675_p_dout0;
output   grp_fu_1675_p_ce;
output  [31:0] grp_fu_1679_p_din0;
output  [31:0] grp_fu_1679_p_din1;
input  [31:0] grp_fu_1679_p_dout0;
output   grp_fu_1679_p_ce;

reg ap_idle;
reg p_out_ap_vld;
reg weight_buffer_0_ce0;
reg input_fm_buffer_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_state12_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln45_reg_390;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] zext_ln43_1_cast_fu_155_p1;
reg   [8:0] zext_ln43_1_cast_reg_385;
wire   [0:0] icmp_ln45_fu_186_p2;
reg   [0:0] icmp_ln45_reg_390_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_390_pp0_iter2_reg;
wire   [2:0] select_ln45_fu_216_p3;
reg   [2:0] select_ln45_reg_394;
wire   [2:0] select_ln45_1_fu_224_p3;
reg   [2:0] select_ln45_1_reg_400;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] weight_buffer_0_load_reg_420;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] input_fm_buffer_load_reg_425;
reg   [31:0] mul_reg_430;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln53_4_fu_318_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln53_6_fu_323_p1;
reg   [31:0] empty_fu_68;
reg   [31:0] ap_sig_allocacmp_p_load;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [2:0] kc_fu_72;
wire   [2:0] add_ln46_fu_246_p2;
reg   [2:0] ap_sig_allocacmp_kc_load;
reg   [2:0] kr_fu_76;
reg   [2:0] ap_sig_allocacmp_kr_load;
reg   [4:0] indvar_flatten20_fu_80;
wire   [4:0] add_ln45_2_fu_192_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten20_load;
wire    ap_block_pp0_stage2_01001;
wire   [0:0] icmp_ln46_fu_210_p2;
wire   [2:0] add_ln45_fu_204_p2;
wire   [3:0] zext_ln45_fu_232_p1;
wire   [3:0] select_ln42_2_cast_fu_159_p1;
wire   [3:0] add_ln45_1_fu_236_p2;
wire   [8:0] zext_ln46_1_fu_267_p1;
wire   [8:0] add_ln51_fu_270_p2;
wire   [8:0] zext_ln53_fu_279_p1;
wire   [8:0] add_ln53_2_fu_282_p2;
wire   [7:0] trunc_ln53_fu_291_p1;
wire   [9:0] p_shl2_fu_295_p3;
wire   [9:0] zext_ln53_1_fu_287_p1;
wire   [9:0] add_ln53_3_fu_303_p2;
wire   [9:0] zext_ln53_3_fu_309_p1;
wire   [9:0] add_ln53_5_fu_312_p2;
wire   [16:0] grp_fu_340_p4;
wire   [3:0] grp_fu_340_p1;
wire   [8:0] grp_fu_340_p2;
wire   [8:0] grp_fu_340_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire   [9:0] grp_fu_340_p10;
wire   [16:0] grp_fu_340_p30;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_ama_addmuladd_10ns_4ns_9ns_9ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 17 ))
ama_addmuladd_10ns_4ns_9ns_9ns_17_4_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln53),
    .din1(grp_fu_340_p1),
    .din2(grp_fu_340_p2),
    .din3(grp_fu_340_p3),
    .ce(1'b1),
    .dout(grp_fu_340_p4)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        empty_fu_68 <= output_fm_buffer_0_load_1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        empty_fu_68 <= grp_fu_1675_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln45_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten20_fu_80 <= add_ln45_2_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_80 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln45_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kc_fu_72 <= add_ln46_fu_246_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kc_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln45_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kr_fu_76 <= select_ln45_1_fu_224_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            kr_fu_76 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_390 <= icmp_ln45_fu_186_p2;
        icmp_ln45_reg_390_pp0_iter1_reg <= icmp_ln45_reg_390;
        icmp_ln45_reg_390_pp0_iter2_reg <= icmp_ln45_reg_390_pp0_iter1_reg;
        zext_ln43_1_cast_reg_385[7 : 0] <= zext_ln43_1_cast_fu_155_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_fm_buffer_load_reg_425 <= input_fm_buffer_q0;
        mul_reg_430 <= grp_fu_1679_p_dout0;
        weight_buffer_0_load_reg_420 <= weight_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_186_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln45_1_reg_400 <= select_ln45_1_fu_224_p3;
        select_ln45_reg_394 <= select_ln45_fu_216_p3;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_390 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_kc_load = 3'd0;
    end else begin
        ap_sig_allocacmp_kc_load = kc_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_kr_load = 3'd0;
    end else begin
        ap_sig_allocacmp_kr_load = kr_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_p_load = grp_fu_1675_p_dout0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_390_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_0_ce0 = 1'b1;
    end else begin
        weight_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_1_fu_236_p2 = (zext_ln45_fu_232_p1 + select_ln42_2_cast_fu_159_p1);

assign add_ln45_2_fu_192_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 5'd1);

assign add_ln45_fu_204_p2 = (ap_sig_allocacmp_kr_load + 3'd1);

assign add_ln46_fu_246_p2 = (select_ln45_fu_216_p3 + 3'd1);

assign add_ln51_fu_270_p2 = (zext_ln46_1_fu_267_p1 + zext_ln43_1_cast_reg_385);

assign add_ln53_2_fu_282_p2 = (add_ln53_1 + zext_ln53_fu_279_p1);

assign add_ln53_3_fu_303_p2 = (p_shl2_fu_295_p3 + zext_ln53_1_fu_287_p1);

assign add_ln53_5_fu_312_p2 = (add_ln53_3_fu_303_p2 + zext_ln53_3_fu_309_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign grp_fu_1675_p_ce = 1'b1;

assign grp_fu_1675_p_din0 = ap_sig_allocacmp_p_load;

assign grp_fu_1675_p_din1 = mul_reg_430;

assign grp_fu_1675_p_opcode = 2'd0;

assign grp_fu_1679_p_ce = 1'b1;

assign grp_fu_1679_p_din0 = weight_buffer_0_load_reg_420;

assign grp_fu_1679_p_din1 = input_fm_buffer_load_reg_425;

assign grp_fu_340_p1 = grp_fu_340_p10;

assign grp_fu_340_p10 = add_ln45_1_fu_236_p2;

assign grp_fu_340_p2 = 17'd259;

assign grp_fu_340_p3 = grp_fu_340_p30;

assign grp_fu_340_p30 = add_ln51_fu_270_p2;

assign icmp_ln45_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_210_p2 = ((ap_sig_allocacmp_kc_load == 3'd5) ? 1'b1 : 1'b0);

assign input_fm_buffer_address0 = zext_ln53_6_fu_323_p1;

assign p_out = empty_fu_68;

assign p_shl2_fu_295_p3 = {{trunc_ln53_fu_291_p1}, {2'd0}};

assign select_ln42_2_cast_fu_159_p1 = select_ln42_2;

assign select_ln45_1_fu_224_p3 = ((icmp_ln46_fu_210_p2[0:0] == 1'b1) ? add_ln45_fu_204_p2 : ap_sig_allocacmp_kr_load);

assign select_ln45_fu_216_p3 = ((icmp_ln46_fu_210_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_kc_load);

assign trunc_ln53_fu_291_p1 = add_ln53_2_fu_282_p2[7:0];

assign weight_buffer_0_address0 = zext_ln53_4_fu_318_p1;

assign zext_ln43_1_cast_fu_155_p1 = zext_ln43_1;

assign zext_ln45_fu_232_p1 = select_ln45_1_fu_224_p3;

assign zext_ln46_1_fu_267_p1 = select_ln45_reg_394;

assign zext_ln53_1_fu_287_p1 = add_ln53_2_fu_282_p2;

assign zext_ln53_3_fu_309_p1 = select_ln45_reg_394;

assign zext_ln53_4_fu_318_p1 = add_ln53_5_fu_312_p2;

assign zext_ln53_6_fu_323_p1 = grp_fu_340_p4;

assign zext_ln53_fu_279_p1 = select_ln45_1_reg_400;

always @ (posedge ap_clk) begin
    zext_ln43_1_cast_reg_385[8] <= 1'b0;
end

endmodule //srcnn_conv3_Pipeline_KR_KC
