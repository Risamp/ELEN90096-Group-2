// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_IN_K_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_w3_AWVALID,
        m_axi_w3_AWREADY,
        m_axi_w3_AWADDR,
        m_axi_w3_AWID,
        m_axi_w3_AWLEN,
        m_axi_w3_AWSIZE,
        m_axi_w3_AWBURST,
        m_axi_w3_AWLOCK,
        m_axi_w3_AWCACHE,
        m_axi_w3_AWPROT,
        m_axi_w3_AWQOS,
        m_axi_w3_AWREGION,
        m_axi_w3_AWUSER,
        m_axi_w3_WVALID,
        m_axi_w3_WREADY,
        m_axi_w3_WDATA,
        m_axi_w3_WSTRB,
        m_axi_w3_WLAST,
        m_axi_w3_WID,
        m_axi_w3_WUSER,
        m_axi_w3_ARVALID,
        m_axi_w3_ARREADY,
        m_axi_w3_ARADDR,
        m_axi_w3_ARID,
        m_axi_w3_ARLEN,
        m_axi_w3_ARSIZE,
        m_axi_w3_ARBURST,
        m_axi_w3_ARLOCK,
        m_axi_w3_ARCACHE,
        m_axi_w3_ARPROT,
        m_axi_w3_ARQOS,
        m_axi_w3_ARREGION,
        m_axi_w3_ARUSER,
        m_axi_w3_RVALID,
        m_axi_w3_RREADY,
        m_axi_w3_RDATA,
        m_axi_w3_RLAST,
        m_axi_w3_RID,
        m_axi_w3_RFIFONUM,
        m_axi_w3_RUSER,
        m_axi_w3_RRESP,
        m_axi_w3_BVALID,
        m_axi_w3_BREADY,
        m_axi_w3_BRESP,
        m_axi_w3_BID,
        m_axi_w3_BUSER,
        sext_ln118,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_d0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_d0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_d0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_d0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_d0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_address0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_ce0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_we0,
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_w3_AWVALID;
input   m_axi_w3_AWREADY;
output  [63:0] m_axi_w3_AWADDR;
output  [0:0] m_axi_w3_AWID;
output  [31:0] m_axi_w3_AWLEN;
output  [2:0] m_axi_w3_AWSIZE;
output  [1:0] m_axi_w3_AWBURST;
output  [1:0] m_axi_w3_AWLOCK;
output  [3:0] m_axi_w3_AWCACHE;
output  [2:0] m_axi_w3_AWPROT;
output  [3:0] m_axi_w3_AWQOS;
output  [3:0] m_axi_w3_AWREGION;
output  [0:0] m_axi_w3_AWUSER;
output   m_axi_w3_WVALID;
input   m_axi_w3_WREADY;
output  [31:0] m_axi_w3_WDATA;
output  [3:0] m_axi_w3_WSTRB;
output   m_axi_w3_WLAST;
output  [0:0] m_axi_w3_WID;
output  [0:0] m_axi_w3_WUSER;
output   m_axi_w3_ARVALID;
input   m_axi_w3_ARREADY;
output  [63:0] m_axi_w3_ARADDR;
output  [0:0] m_axi_w3_ARID;
output  [31:0] m_axi_w3_ARLEN;
output  [2:0] m_axi_w3_ARSIZE;
output  [1:0] m_axi_w3_ARBURST;
output  [1:0] m_axi_w3_ARLOCK;
output  [3:0] m_axi_w3_ARCACHE;
output  [2:0] m_axi_w3_ARPROT;
output  [3:0] m_axi_w3_ARQOS;
output  [3:0] m_axi_w3_ARREGION;
output  [0:0] m_axi_w3_ARUSER;
input   m_axi_w3_RVALID;
output   m_axi_w3_RREADY;
input  [31:0] m_axi_w3_RDATA;
input   m_axi_w3_RLAST;
input  [0:0] m_axi_w3_RID;
input  [12:0] m_axi_w3_RFIFONUM;
input  [0:0] m_axi_w3_RUSER;
input  [1:0] m_axi_w3_RRESP;
input   m_axi_w3_BVALID;
output   m_axi_w3_BREADY;
input  [1:0] m_axi_w3_BRESP;
input  [0:0] m_axi_w3_BID;
input  [0:0] m_axi_w3_BUSER;
input  [61:0] sext_ln118;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_d0;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_d0;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_d0;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_d0;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_d0;
output  [6:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_address0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_ce0;
output   p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_we0;
output  [31:0] p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_d0;

reg ap_idle;
reg m_axi_w3_RREADY;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_we0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_we0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_we0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_we0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_we0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_ce0;
reg p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln118_reg_598;
reg   [0:0] icmp_ln118_reg_598_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln118_fu_249_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w3_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] k_1_reg_592;
reg   [0:0] icmp_ln118_reg_598_pp0_iter1_reg;
reg   [0:0] icmp_ln118_reg_598_pp0_iter2_reg;
reg   [0:0] icmp_ln118_reg_598_pp0_iter3_reg;
reg   [0:0] icmp_ln118_reg_598_pp0_iter5_reg;
wire   [0:0] icmp_ln119_fu_264_p2;
reg   [0:0] icmp_ln119_reg_602;
reg   [0:0] icmp_ln119_reg_602_pp0_iter1_reg;
reg   [0:0] icmp_ln119_reg_602_pp0_iter2_reg;
reg   [0:0] icmp_ln119_reg_602_pp0_iter3_reg;
reg   [0:0] icmp_ln119_reg_602_pp0_iter4_reg;
reg   [0:0] icmp_ln119_reg_602_pp0_iter5_reg;
wire   [0:0] and_ln118_fu_290_p2;
reg   [0:0] and_ln118_reg_609;
reg   [0:0] and_ln118_reg_609_pp0_iter1_reg;
reg   [0:0] and_ln118_reg_609_pp0_iter2_reg;
reg   [0:0] and_ln118_reg_609_pp0_iter3_reg;
reg   [0:0] and_ln118_reg_609_pp0_iter4_reg;
reg   [0:0] and_ln118_reg_609_pp0_iter5_reg;
wire   [2:0] add_ln119_fu_296_p2;
reg   [2:0] add_ln119_reg_615;
wire   [2:0] select_ln119_fu_308_p3;
reg   [1:0] tmp_reg_626;
wire   [6:0] empty_71_fu_491_p2;
reg   [6:0] empty_71_reg_631;
reg   [6:0] empty_71_reg_631_pp0_iter2_reg;
reg   [6:0] empty_71_reg_631_pp0_iter3_reg;
reg   [6:0] empty_71_reg_631_pp0_iter4_reg;
reg   [6:0] empty_71_reg_631_pp0_iter5_reg;
reg   [31:0] w3_addr_read_reg_636;
wire   [63:0] p_cast2_fu_530_p1;
reg   [2:0] loop_index_i21_fu_96;
wire   [2:0] empty_fu_356_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_loop_index_i21_load;
reg   [2:0] k_fu_100;
wire   [2:0] select_ln119_3_fu_322_p3;
reg   [2:0] ap_sig_allocacmp_k_1;
reg   [5:0] indvar_flatten_fu_104;
wire   [5:0] select_ln119_4_fu_368_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [5:0] bin_fu_108;
wire   [5:0] select_ln118_1_fu_424_p3;
reg   [9:0] indvar_flatten18_fu_112;
wire   [9:0] add_ln118_1_fu_255_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten18_load;
wire   [1:0] select_ln119_2_fu_523_p3;
wire   [1:0] empty_73_fu_539_p1;
wire   [31:0] empty_74_fu_543_p1;
wire   [0:0] exitcond3610292_fu_284_p2;
wire   [0:0] xor_ln118_fu_278_p2;
wire   [2:0] select_ln118_fu_270_p3;
wire   [0:0] or_ln119_fu_302_p2;
wire   [2:0] mul61_fu_334_p0;
wire   [4:0] mul61_fu_334_p1;
wire   [6:0] mul61_fu_334_p2;
wire   [5:0] add_ln119_1_fu_362_p2;
wire   [2:0] mul_ln119_fu_399_p0;
wire   [4:0] mul_ln119_fu_399_p1;
wire   [6:0] mul_ln119_fu_399_p2;
wire   [5:0] add_ln118_fu_418_p2;
wire   [1:0] udiv_ln_cast_fu_405_p4;
wire   [2:0] mul_ln119_1_fu_447_p0;
wire   [4:0] mul_ln119_1_fu_447_p1;
wire   [6:0] mul_ln119_1_fu_447_p2;
wire   [1:0] udiv_ln119_mid1_cast_fu_453_p4;
wire   [1:0] select_ln118_2_fu_437_p3;
wire   [1:0] select_ln119_1_fu_463_p3;
wire   [5:0] empty_69_fu_431_p2;
wire   [5:0] select_ln119_1_cast_fu_470_p1;
wire   [5:0] empty_70_fu_474_p2;
wire   [6:0] tmp_s_fu_480_p3;
wire   [6:0] tmp_21_cast_fu_488_p1;
wire   [1:0] grp_fu_243_p2;
wire   [1:0] trunc_ln119_fu_508_p1;
wire   [1:0] grp_fu_316_p2;
wire   [1:0] trunc_ln119_1_fu_519_p1;
wire   [1:0] select_ln118_3_fu_512_p3;
wire   [1:0] grp_fu_350_p2;
reg    grp_fu_243_ce;
reg    grp_fu_316_ce;
reg    grp_fu_350_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [6:0] mul61_fu_334_p00;
wire   [6:0] mul_ln119_1_fu_447_p00;
wire   [6:0] mul_ln119_fu_399_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_urem_3ns_3ns_2_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_3ns_3ns_2_7_1_U1881(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_k_1),
    .din1(3'd3),
    .ce(grp_fu_243_ce),
    .dout(grp_fu_243_p2)
);

srcnn_urem_3ns_3ns_2_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_3ns_3ns_2_7_1_U1882(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln119_fu_296_p2),
    .din1(3'd3),
    .ce(grp_fu_316_ce),
    .dout(grp_fu_316_p2)
);

srcnn_mul_3ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_3ns_5ns_7_1_1_U1883(
    .din0(mul61_fu_334_p0),
    .din1(mul61_fu_334_p1),
    .dout(mul61_fu_334_p2)
);

srcnn_urem_3ns_3ns_2_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_3ns_3ns_2_7_1_U1884(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln119_fu_308_p3),
    .din1(3'd3),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p2)
);

srcnn_mul_3ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_3ns_5ns_7_1_1_U1885(
    .din0(mul_ln119_fu_399_p0),
    .din1(mul_ln119_fu_399_p1),
    .dout(mul_ln119_fu_399_p2)
);

srcnn_mul_3ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_3ns_5ns_7_1_1_U1886(
    .din0(mul_ln119_1_fu_447_p0),
    .din1(mul_ln119_1_fu_447_p1),
    .dout(mul_ln119_1_fu_447_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bin_fu_108 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln118_reg_598 == 1'd0))) begin
            bin_fu_108 <= select_ln118_1_fu_424_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_249_p2 == 1'd0))) begin
            indvar_flatten18_fu_112 <= add_ln118_1_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_112 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_249_p2 == 1'd0))) begin
            indvar_flatten_fu_104 <= select_ln119_4_fu_368_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_249_p2 == 1'd0))) begin
            k_fu_100 <= select_ln119_3_fu_322_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_100 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_249_p2 == 1'd0))) begin
            loop_index_i21_fu_96 <= empty_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_i21_fu_96 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_249_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln119_reg_615 <= add_ln119_fu_296_p2;
        and_ln118_reg_609 <= and_ln118_fu_290_p2;
        icmp_ln119_reg_602 <= icmp_ln119_fu_264_p2;
        tmp_reg_626 <= {{mul61_fu_334_p2[6:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_reg_609_pp0_iter1_reg <= and_ln118_reg_609;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln118_reg_598 <= icmp_ln118_fu_249_p2;
        icmp_ln118_reg_598_pp0_iter1_reg <= icmp_ln118_reg_598;
        icmp_ln119_reg_602_pp0_iter1_reg <= icmp_ln119_reg_602;
        k_1_reg_592 <= ap_sig_allocacmp_k_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln118_reg_609_pp0_iter2_reg <= and_ln118_reg_609_pp0_iter1_reg;
        and_ln118_reg_609_pp0_iter3_reg <= and_ln118_reg_609_pp0_iter2_reg;
        and_ln118_reg_609_pp0_iter4_reg <= and_ln118_reg_609_pp0_iter3_reg;
        and_ln118_reg_609_pp0_iter5_reg <= and_ln118_reg_609_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        empty_71_reg_631_pp0_iter2_reg <= empty_71_reg_631;
        empty_71_reg_631_pp0_iter3_reg <= empty_71_reg_631_pp0_iter2_reg;
        empty_71_reg_631_pp0_iter4_reg <= empty_71_reg_631_pp0_iter3_reg;
        empty_71_reg_631_pp0_iter5_reg <= empty_71_reg_631_pp0_iter4_reg;
        icmp_ln118_reg_598_pp0_iter2_reg <= icmp_ln118_reg_598_pp0_iter1_reg;
        icmp_ln118_reg_598_pp0_iter3_reg <= icmp_ln118_reg_598_pp0_iter2_reg;
        icmp_ln118_reg_598_pp0_iter4_reg <= icmp_ln118_reg_598_pp0_iter3_reg;
        icmp_ln118_reg_598_pp0_iter5_reg <= icmp_ln118_reg_598_pp0_iter4_reg;
        icmp_ln119_reg_602_pp0_iter2_reg <= icmp_ln119_reg_602_pp0_iter1_reg;
        icmp_ln119_reg_602_pp0_iter3_reg <= icmp_ln119_reg_602_pp0_iter2_reg;
        icmp_ln119_reg_602_pp0_iter4_reg <= icmp_ln119_reg_602_pp0_iter3_reg;
        icmp_ln119_reg_602_pp0_iter5_reg <= icmp_ln119_reg_602_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln118_reg_598 == 1'd0))) begin
        empty_71_reg_631 <= empty_71_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0))) begin
        w3_addr_read_reg_636 <= m_axi_w3_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_loop_index_i21_load = 3'd0;
    end else begin
        ap_sig_allocacmp_loop_index_i21_load = loop_index_i21_fu_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_243_ce = 1'b1;
    end else begin
        grp_fu_243_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_316_ce = 1'b1;
    end else begin
        grp_fu_316_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0))) begin
        m_axi_w3_RREADY = 1'b1;
    end else begin
        m_axi_w3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd0) & (select_ln119_2_fu_523_p3 == 2'd0) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd1) & (select_ln119_2_fu_523_p3 == 2'd0) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd0) & (select_ln119_2_fu_523_p3 == 2'd1) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd1) & (select_ln119_2_fu_523_p3 == 2'd1) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln119_2_fu_523_p3 == 2'd0) & ~(select_ln119_2_fu_523_p3 == 2'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd0) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln119_2_fu_523_p3 == 2'd0) & ~(select_ln119_2_fu_523_p3 == 2'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (empty_73_fu_539_p1 == 2'd1) & (icmp_ln118_reg_598_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0))) begin
        w3_blk_n_R = m_axi_w3_RVALID;
    end else begin
        w3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln118_1_fu_255_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 10'd1);

assign add_ln118_fu_418_p2 = (bin_fu_108 + 6'd1);

assign add_ln119_1_fu_362_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln119_fu_296_p2 = (select_ln118_fu_270_p3 + 3'd1);

assign and_ln118_fu_290_p2 = (xor_ln118_fu_278_p2 & exitcond3610292_fu_284_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_w3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_w3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((m_axi_w3_RVALID == 1'b0) & (icmp_ln118_reg_598_pp0_iter4_reg == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_69_fu_431_p2 = select_ln118_1_fu_424_p3 << 6'd1;

assign empty_70_fu_474_p2 = (empty_69_fu_431_p2 + select_ln119_1_cast_fu_470_p1);

assign empty_71_fu_491_p2 = (tmp_s_fu_480_p3 + tmp_21_cast_fu_488_p1);

assign empty_73_fu_539_p1 = grp_fu_350_p2[1:0];

assign empty_74_fu_543_p1 = w3_addr_read_reg_636;

assign empty_fu_356_p2 = (select_ln119_fu_308_p3 + 3'd1);

assign exitcond3610292_fu_284_p2 = ((ap_sig_allocacmp_loop_index_i21_load == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_249_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_264_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd25) ? 1'b1 : 1'b0);

assign m_axi_w3_ARADDR = 64'd0;

assign m_axi_w3_ARBURST = 2'd0;

assign m_axi_w3_ARCACHE = 4'd0;

assign m_axi_w3_ARID = 1'd0;

assign m_axi_w3_ARLEN = 32'd0;

assign m_axi_w3_ARLOCK = 2'd0;

assign m_axi_w3_ARPROT = 3'd0;

assign m_axi_w3_ARQOS = 4'd0;

assign m_axi_w3_ARREGION = 4'd0;

assign m_axi_w3_ARSIZE = 3'd0;

assign m_axi_w3_ARUSER = 1'd0;

assign m_axi_w3_ARVALID = 1'b0;

assign m_axi_w3_AWADDR = 64'd0;

assign m_axi_w3_AWBURST = 2'd0;

assign m_axi_w3_AWCACHE = 4'd0;

assign m_axi_w3_AWID = 1'd0;

assign m_axi_w3_AWLEN = 32'd0;

assign m_axi_w3_AWLOCK = 2'd0;

assign m_axi_w3_AWPROT = 3'd0;

assign m_axi_w3_AWQOS = 4'd0;

assign m_axi_w3_AWREGION = 4'd0;

assign m_axi_w3_AWSIZE = 3'd0;

assign m_axi_w3_AWUSER = 1'd0;

assign m_axi_w3_AWVALID = 1'b0;

assign m_axi_w3_BREADY = 1'b0;

assign m_axi_w3_WDATA = 32'd0;

assign m_axi_w3_WID = 1'd0;

assign m_axi_w3_WLAST = 1'b0;

assign m_axi_w3_WSTRB = 4'd0;

assign m_axi_w3_WUSER = 1'd0;

assign m_axi_w3_WVALID = 1'b0;

assign mul61_fu_334_p0 = mul61_fu_334_p00;

assign mul61_fu_334_p00 = select_ln119_fu_308_p3;

assign mul61_fu_334_p1 = 7'd11;

assign mul_ln119_1_fu_447_p0 = mul_ln119_1_fu_447_p00;

assign mul_ln119_1_fu_447_p00 = add_ln119_reg_615;

assign mul_ln119_1_fu_447_p1 = 7'd11;

assign mul_ln119_fu_399_p0 = mul_ln119_fu_399_p00;

assign mul_ln119_fu_399_p00 = k_1_reg_592;

assign mul_ln119_fu_399_p1 = 7'd11;

assign or_ln119_fu_302_p2 = (icmp_ln119_fu_264_p2 | and_ln118_fu_290_p2);

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_0_0_d0 = empty_74_fu_543_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_0_1_0_d0 = empty_74_fu_543_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_0_0_d0 = empty_74_fu_543_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_1_1_0_d0 = empty_74_fu_543_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_0_0_d0 = empty_74_fu_543_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_address0 = p_cast2_fu_530_p1;

assign p_ZZ5conv3PA255_A255_fPA32_A5_A5_fPfS1_E13weight_buffer_2_1_0_d0 = empty_74_fu_543_p1;

assign p_cast2_fu_530_p1 = empty_71_reg_631_pp0_iter5_reg;

assign select_ln118_1_fu_424_p3 = ((icmp_ln119_reg_602[0:0] == 1'b1) ? add_ln118_fu_418_p2 : bin_fu_108);

assign select_ln118_2_fu_437_p3 = ((icmp_ln119_reg_602[0:0] == 1'b1) ? 2'd0 : udiv_ln_cast_fu_405_p4);

assign select_ln118_3_fu_512_p3 = ((icmp_ln119_reg_602_pp0_iter5_reg[0:0] == 1'b1) ? 2'd0 : trunc_ln119_fu_508_p1);

assign select_ln118_fu_270_p3 = ((icmp_ln119_fu_264_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_k_1);

assign select_ln119_1_cast_fu_470_p1 = select_ln119_1_fu_463_p3;

assign select_ln119_1_fu_463_p3 = ((and_ln118_reg_609[0:0] == 1'b1) ? udiv_ln119_mid1_cast_fu_453_p4 : select_ln118_2_fu_437_p3);

assign select_ln119_2_fu_523_p3 = ((and_ln118_reg_609_pp0_iter5_reg[0:0] == 1'b1) ? trunc_ln119_1_fu_519_p1 : select_ln118_3_fu_512_p3);

assign select_ln119_3_fu_322_p3 = ((and_ln118_fu_290_p2[0:0] == 1'b1) ? add_ln119_fu_296_p2 : select_ln118_fu_270_p3);

assign select_ln119_4_fu_368_p3 = ((icmp_ln119_fu_264_p2[0:0] == 1'b1) ? 6'd1 : add_ln119_1_fu_362_p2);

assign select_ln119_fu_308_p3 = ((or_ln119_fu_302_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_loop_index_i21_load);

assign tmp_21_cast_fu_488_p1 = tmp_reg_626;

assign tmp_s_fu_480_p3 = {{empty_70_fu_474_p2}, {1'd0}};

assign trunc_ln119_1_fu_519_p1 = grp_fu_316_p2[1:0];

assign trunc_ln119_fu_508_p1 = grp_fu_243_p2[1:0];

assign udiv_ln119_mid1_cast_fu_453_p4 = {{mul_ln119_1_fu_447_p2[6:5]}};

assign udiv_ln_cast_fu_405_p4 = {{mul_ln119_fu_399_p2[6:5]}};

assign xor_ln118_fu_278_p2 = (icmp_ln119_fu_264_p2 ^ 1'd1);

endmodule //srcnn_conv3_Pipeline_IN_K_L
