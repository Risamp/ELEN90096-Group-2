// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv3_weights,
        conv3_biases_0_0_val,
        output_ftmap,
        grp_fu_597_p_din0,
        grp_fu_597_p_din1,
        grp_fu_597_p_opcode,
        grp_fu_597_p_dout0,
        grp_fu_597_p_ce,
        grp_fu_601_p_din0,
        grp_fu_601_p_din1,
        grp_fu_601_p_dout0,
        grp_fu_601_p_ce
);

parameter    ap_ST_fsm_state1 = 68'd1;
parameter    ap_ST_fsm_state2 = 68'd2;
parameter    ap_ST_fsm_state3 = 68'd4;
parameter    ap_ST_fsm_state4 = 68'd8;
parameter    ap_ST_fsm_state5 = 68'd16;
parameter    ap_ST_fsm_state6 = 68'd32;
parameter    ap_ST_fsm_state7 = 68'd64;
parameter    ap_ST_fsm_state8 = 68'd128;
parameter    ap_ST_fsm_state9 = 68'd256;
parameter    ap_ST_fsm_state10 = 68'd512;
parameter    ap_ST_fsm_state11 = 68'd1024;
parameter    ap_ST_fsm_state12 = 68'd2048;
parameter    ap_ST_fsm_state13 = 68'd4096;
parameter    ap_ST_fsm_state14 = 68'd8192;
parameter    ap_ST_fsm_state15 = 68'd16384;
parameter    ap_ST_fsm_state16 = 68'd32768;
parameter    ap_ST_fsm_state17 = 68'd65536;
parameter    ap_ST_fsm_state18 = 68'd131072;
parameter    ap_ST_fsm_state19 = 68'd262144;
parameter    ap_ST_fsm_state20 = 68'd524288;
parameter    ap_ST_fsm_state21 = 68'd1048576;
parameter    ap_ST_fsm_state22 = 68'd2097152;
parameter    ap_ST_fsm_state23 = 68'd4194304;
parameter    ap_ST_fsm_state24 = 68'd8388608;
parameter    ap_ST_fsm_state25 = 68'd16777216;
parameter    ap_ST_fsm_state26 = 68'd33554432;
parameter    ap_ST_fsm_state27 = 68'd67108864;
parameter    ap_ST_fsm_state28 = 68'd134217728;
parameter    ap_ST_fsm_state29 = 68'd268435456;
parameter    ap_ST_fsm_state30 = 68'd536870912;
parameter    ap_ST_fsm_state31 = 68'd1073741824;
parameter    ap_ST_fsm_state32 = 68'd2147483648;
parameter    ap_ST_fsm_state33 = 68'd4294967296;
parameter    ap_ST_fsm_state34 = 68'd8589934592;
parameter    ap_ST_fsm_state35 = 68'd17179869184;
parameter    ap_ST_fsm_state36 = 68'd34359738368;
parameter    ap_ST_fsm_state37 = 68'd68719476736;
parameter    ap_ST_fsm_state38 = 68'd137438953472;
parameter    ap_ST_fsm_state39 = 68'd274877906944;
parameter    ap_ST_fsm_state40 = 68'd549755813888;
parameter    ap_ST_fsm_state41 = 68'd1099511627776;
parameter    ap_ST_fsm_state42 = 68'd2199023255552;
parameter    ap_ST_fsm_state43 = 68'd4398046511104;
parameter    ap_ST_fsm_state44 = 68'd8796093022208;
parameter    ap_ST_fsm_state45 = 68'd17592186044416;
parameter    ap_ST_fsm_state46 = 68'd35184372088832;
parameter    ap_ST_fsm_state47 = 68'd70368744177664;
parameter    ap_ST_fsm_state48 = 68'd140737488355328;
parameter    ap_ST_fsm_state49 = 68'd281474976710656;
parameter    ap_ST_fsm_state50 = 68'd562949953421312;
parameter    ap_ST_fsm_state51 = 68'd1125899906842624;
parameter    ap_ST_fsm_state52 = 68'd2251799813685248;
parameter    ap_ST_fsm_state53 = 68'd4503599627370496;
parameter    ap_ST_fsm_state54 = 68'd9007199254740992;
parameter    ap_ST_fsm_state55 = 68'd18014398509481984;
parameter    ap_ST_fsm_state56 = 68'd36028797018963968;
parameter    ap_ST_fsm_state57 = 68'd72057594037927936;
parameter    ap_ST_fsm_state58 = 68'd144115188075855872;
parameter    ap_ST_fsm_state59 = 68'd288230376151711744;
parameter    ap_ST_fsm_state60 = 68'd576460752303423488;
parameter    ap_ST_fsm_state61 = 68'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 68'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 68'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 68'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 68'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 68'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 68'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 68'd147573952589676412928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv3_weights;
input  [31:0] conv3_biases_0_0_val;
input  [63:0] output_ftmap;
output  [31:0] grp_fu_597_p_din0;
output  [31:0] grp_fu_597_p_din1;
output  [1:0] grp_fu_597_p_opcode;
input  [31:0] grp_fu_597_p_dout0;
output   grp_fu_597_p_ce;
output  [31:0] grp_fu_601_p_din0;
output  [31:0] grp_fu_601_p_din1;
input  [31:0] grp_fu_601_p_dout0;
output   grp_fu_601_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [67:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] input_fm_buffer_address0;
reg    input_fm_buffer_ce0;
reg    input_fm_buffer_we0;
reg   [31:0] input_fm_buffer_d0;
wire   [31:0] input_fm_buffer_q0;
reg   [8:0] output_fm_buffer_0_address0;
reg    output_fm_buffer_0_ce0;
reg    output_fm_buffer_0_we0;
reg   [31:0] output_fm_buffer_0_d0;
wire   [31:0] output_fm_buffer_0_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state9;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state57;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state58;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state62;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state67;
reg   [31:0] reg_535;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state61;
wire   [3:0] add_ln31_fu_554_p2;
reg   [3:0] add_ln31_reg_1402;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_fu_560_p3;
reg   [7:0] tmp_reg_1407;
wire   [0:0] icmp_ln31_fu_548_p2;
wire   [9:0] zext_ln32_fu_568_p1;
reg   [9:0] zext_ln32_reg_1412;
wire   [3:0] add_ln32_fu_578_p2;
reg   [3:0] add_ln32_reg_1420;
wire    ap_CS_fsm_state3;
wire   [7:0] p_shl1_fu_584_p3;
reg   [7:0] p_shl1_reg_1425;
wire   [0:0] icmp_ln32_fu_572_p2;
wire   [4:0] ti_cast17_fu_592_p1;
reg   [4:0] ti_cast17_reg_1430;
wire   [2:0] add_ln39_fu_606_p2;
reg   [2:0] add_ln39_reg_1438;
wire    ap_CS_fsm_state4;
wire   [11:0] empty_59_fu_618_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] shl_ln1_fu_633_p3;
reg   [4:0] shl_ln1_reg_1451;
wire   [0:0] exitcond1_fu_612_p2;
wire   [7:0] add_ln98_1_fu_641_p2;
reg   [7:0] add_ln98_1_reg_1457;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln98_fu_657_p2;
reg   [3:0] add_ln98_reg_1465;
wire   [63:0] add_ln107_fu_682_p2;
reg   [63:0] add_ln107_reg_1470;
wire   [0:0] icmp_ln98_fu_651_p2;
wire   [11:0] mul_ln99_fu_701_p2;
reg   [11:0] mul_ln99_reg_1475;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln99_fu_717_p2;
reg   [4:0] add_ln99_reg_1483;
wire   [19:0] sub_ln107_fu_802_p2;
reg   [19:0] sub_ln107_reg_1488;
wire   [0:0] icmp_ln99_fu_711_p2;
reg   [11:0] input_fm_buffer_addr_1_reg_1493;
wire    ap_CS_fsm_state8;
wire   [4:0] add_ln100_fu_832_p2;
reg   [4:0] add_ln100_reg_1501;
reg   [63:0] gmem_addr_4_reg_1506;
wire   [0:0] icmp_ln100_fu_826_p2;
reg   [31:0] gmem_addr_4_read_reg_1512;
wire   [8:0] empty_62_fu_972_p2;
reg   [8:0] empty_62_reg_1517;
wire    ap_CS_fsm_state19;
wire   [4:0] add_ln54_fu_984_p2;
reg   [4:0] add_ln54_reg_1525;
reg   [8:0] output_fm_buffer_0_addr_2_reg_1530;
wire    ap_CS_fsm_state20;
wire   [4:0] add_ln55_fu_1010_p2;
reg   [4:0] add_ln55_reg_1538;
wire    ap_CS_fsm_state21;
wire   [2:0] add_ln58_fu_1026_p2;
reg   [2:0] add_ln58_reg_1551;
wire    ap_CS_fsm_state22;
wire   [7:0] zext_ln67_fu_1038_p1;
reg   [7:0] zext_ln67_reg_1556;
wire   [0:0] icmp_ln58_fu_1020_p2;
wire   [63:0] zext_ln67_1_fu_1068_p1;
reg   [63:0] zext_ln67_1_reg_1561;
wire   [2:0] add_ln59_fu_1082_p2;
reg   [2:0] add_ln59_reg_1569;
wire    ap_CS_fsm_state23;
wire   [11:0] zext_ln67_3_fu_1094_p1;
reg   [11:0] zext_ln67_3_reg_1574;
wire   [0:0] icmp_ln59_fu_1076_p2;
wire   [11:0] zext_ln66_fu_1106_p1;
reg   [11:0] zext_ln66_reg_1579;
wire   [7:0] add_ln67_7_fu_1110_p2;
reg   [7:0] add_ln67_7_reg_1584;
wire    ap_CS_fsm_state24;
reg   [11:0] input_fm_buffer_addr_2_reg_1589;
wire    ap_CS_fsm_state27;
wire   [3:0] add_ln66_fu_1130_p2;
reg   [3:0] add_ln66_reg_1597;
reg   [63:0] gmem_addr_5_reg_1602;
wire    ap_CS_fsm_state30;
reg   [31:0] gmem_addr_5_read_reg_1608;
reg   [31:0] input_fm_buffer_load_reg_1613;
wire   [31:0] bitcast_ln67_fu_1169_p1;
reg   [31:0] mul_reg_1623;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state46;
wire   [8:0] add_ln124_4_fu_1185_p2;
reg   [8:0] add_ln124_4_reg_1633;
wire    ap_CS_fsm_state47;
wire   [4:0] add_ln121_fu_1201_p2;
reg   [4:0] add_ln121_reg_1641;
wire  signed [63:0] sext_ln122_fu_1242_p1;
reg  signed [63:0] sext_ln122_reg_1646;
wire   [0:0] icmp_ln121_fu_1195_p2;
wire    ap_CS_fsm_state48;
wire   [4:0] add_ln122_fu_1266_p2;
reg   [4:0] add_ln122_reg_1659;
reg   [63:0] gmem_addr_reg_1664;
wire   [0:0] icmp_ln122_fu_1260_p2;
reg   [31:0] output_fm_buffer_0_load_reg_1671;
reg   [31:0] gmem_addr_read_reg_1676;
wire   [31:0] bitcast_ln124_fu_1328_p1;
wire   [8:0] empty_68_fu_1343_p2;
wire    ap_CS_fsm_state68;
reg   [3:0] ti_reg_310;
wire   [0:0] exitcond6713_fu_1337_p2;
reg   [2:0] tn_reg_322;
wire   [0:0] icmp_ln54_fu_978_p2;
reg   [11:0] empty_reg_334;
wire   [0:0] icmp_ln39_fu_600_p2;
reg   [3:0] nin_reg_345;
reg   [7:0] phi_mul_reg_356;
reg   [4:0] by_reg_368;
reg   [4:0] bx_reg_379;
wire    ap_CS_fsm_state18;
reg   [4:0] ty_1_reg_390;
wire   [0:0] icmp_ln55_fu_1004_p2;
reg   [4:0] tx_1_reg_402;
reg   [2:0] ky_reg_414;
reg   [31:0] add57_lcssa_lcssa19_reg_425;
reg   [2:0] kx_reg_436;
wire   [0:0] icmp_ln66_fu_1124_p2;
reg   [31:0] add57_lcssa18_reg_447;
reg   [7:0] phi_mul46_reg_459;
reg   [3:0] nin_1_reg_470;
reg   [31:0] empty_65_reg_481;
reg   [4:0] ty_reg_493;
reg   [4:0] tx_reg_504;
reg   [8:0] empty_67_reg_515;
wire   [63:0] p_cast49_fu_624_p1;
wire   [63:0] zext_ln107_3_fu_817_p1;
wire   [63:0] p_cast54_fu_999_p1;
wire   [63:0] zext_ln67_6_fu_1116_p1;
wire   [63:0] zext_ln124_6_fu_1255_p1;
wire   [63:0] p_cast50_fu_1349_p1;
wire  signed [63:0] sext_ln107_1_fu_946_p1;
wire  signed [63:0] sext_ln67_fu_1159_p1;
wire  signed [63:0] sext_ln124_fu_1318_p1;
reg   [3:0] tj_fu_178;
wire   [31:0] bitcast_ln107_fu_956_p1;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_526_p0;
reg   [31:0] grp_fu_526_p1;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state50;
wire   [1:0] trunc_ln41_fu_629_p1;
wire   [4:0] zext_ln98_fu_647_p1;
wire   [4:0] empty_60_fu_663_p2;
wire   [4:0] mul_ln107_fu_672_p0;
wire   [18:0] mul_ln107_fu_672_p1;
wire   [22:0] mul_ln107_fu_672_p2;
wire   [63:0] zext_ln99_fu_678_p1;
wire   [7:0] zext_ln107_1_fu_687_p1;
wire   [7:0] add_ln107_3_fu_691_p2;
wire   [7:0] mul_ln99_fu_701_p0;
wire   [5:0] mul_ln99_fu_701_p1;
wire   [5:0] zext_ln99_2_fu_707_p1;
wire   [5:0] tmp1_fu_723_p2;
wire  signed [9:0] tmp1_cast_fu_729_p1;
wire   [9:0] empty_61_fu_733_p2;
wire   [0:0] tmp_4_fu_752_p3;
wire   [0:0] tmp_2_fu_738_p3;
wire   [0:0] icmp_ln52_fu_746_p2;
wire   [0:0] or_ln51_fu_768_p2;
wire   [9:0] select_ln51_fu_760_p3;
wire   [9:0] yClamped_fu_774_p3;
wire   [11:0] shl_ln107_1_fu_790_p3;
wire   [19:0] shl_ln2_fu_782_p3;
wire  signed [19:0] sext_ln107_fu_798_p1;
wire   [11:0] zext_ln107_2_fu_808_p1;
wire   [11:0] add_ln107_4_fu_812_p2;
wire   [7:0] tmp4_fu_838_p3;
wire   [5:0] zext_ln100_fu_822_p1;
wire   [5:0] add_ln103_1_fu_850_p2;
wire  signed [9:0] sext_ln103_fu_856_p1;
wire   [9:0] zext_ln103_fu_846_p1;
wire   [9:0] add_ln103_fu_860_p2;
wire   [0:0] tmp_5_fu_866_p3;
wire   [0:0] icmp_ln52_1_fu_874_p2;
wire   [0:0] tmp_6_fu_880_p3;
wire   [0:0] or_ln51_1_fu_888_p2;
wire   [9:0] select_ln51_2_fu_894_p3;
wire   [9:0] select_ln51_3_fu_902_p3;
wire   [11:0] shl_ln107_2_fu_910_p3;
wire  signed [19:0] sext_ln107_2_fu_918_p1;
wire   [19:0] add_ln107_1_fu_922_p2;
wire  signed [63:0] sext_ln107_3_fu_927_p1;
wire   [63:0] add_ln107_2_fu_931_p2;
wire   [61:0] trunc_ln4_fu_936_p4;
wire   [8:0] tmp_3_fu_964_p3;
wire   [8:0] ty_1_cast_fu_960_p1;
wire   [8:0] tx_1_cast_fu_990_p1;
wire   [8:0] empty_63_fu_994_p2;
wire   [4:0] zext_ln58_fu_1016_p1;
wire   [4:0] empty_64_fu_1032_p2;
wire   [4:0] shl_ln67_1_fu_1050_p3;
wire   [6:0] shl_ln3_fu_1042_p3;
wire   [6:0] zext_ln59_fu_1058_p1;
wire   [6:0] add_ln67_1_fu_1062_p2;
wire   [4:0] zext_ln59_1_fu_1072_p1;
wire   [4:0] add_ln63_fu_1088_p2;
wire   [4:0] shl_ln67_2_fu_1098_p3;
wire   [11:0] grp_fu_1354_p4;
wire   [11:0] grp_fu_1363_p4;
wire   [63:0] zext_ln67_4_fu_1136_p1;
wire   [63:0] add_ln67_4_fu_1139_p2;
wire   [63:0] add_ln67_3_fu_1144_p2;
wire   [61:0] trunc_ln5_fu_1149_p4;
wire   [8:0] tmp_1_fu_1177_p3;
wire   [8:0] zext_ln124_fu_1173_p1;
wire   [7:0] zext_ln121_fu_1191_p1;
wire   [7:0] empty_66_fu_1207_p2;
wire   [17:0] shl_ln_fu_1212_p3;
wire   [9:0] shl_ln124_1_fu_1224_p3;
wire   [18:0] zext_ln124_1_fu_1220_p1;
wire   [18:0] zext_ln124_2_fu_1232_p1;
wire   [18:0] sub_ln124_fu_1236_p2;
wire   [8:0] zext_ln124_5_fu_1246_p1;
wire   [8:0] add_ln124_5_fu_1250_p2;
wire   [4:0] add_ln124_fu_1272_p2;
wire   [7:0] zext_ln124_3_fu_1277_p1;
wire   [7:0] add_ln124_1_fu_1281_p2;
wire   [9:0] shl_ln124_2_fu_1286_p3;
wire   [63:0] zext_ln124_4_fu_1294_p1;
wire   [63:0] add_ln124_3_fu_1298_p2;
wire   [63:0] add_ln124_2_fu_1303_p2;
wire   [61:0] trunc_ln_fu_1308_p4;
wire   [4:0] grp_fu_1354_p1;
wire   [4:0] grp_fu_1354_p2;
wire   [4:0] grp_fu_1354_p3;
wire    ap_CS_fsm_state26;
wire   [3:0] grp_fu_1363_p0;
wire   [6:0] grp_fu_1363_p2;
wire   [4:0] grp_fu_1363_p3;
wire    ap_CS_fsm_state29;
reg    grp_fu_526_ce;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
reg   [67:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire   [4:0] grp_fu_1363_p00;
wire   [22:0] mul_ln107_fu_672_p00;
wire   [11:0] mul_ln99_fu_701_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 68'd1;
end

srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 3528 ),
    .AddressWidth( 12 ))
input_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_address0),
    .ce0(input_fm_buffer_ce0),
    .we0(input_fm_buffer_we0),
    .d0(input_fm_buffer_d0),
    .q0(input_fm_buffer_q0)
);

srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 289 ),
    .AddressWidth( 9 ))
output_fm_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_0_address0),
    .ce0(output_fm_buffer_0_ce0),
    .we0(output_fm_buffer_0_we0),
    .d0(output_fm_buffer_0_d0),
    .q0(output_fm_buffer_0_q0)
);

srcnn_mul_5ns_19ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 23 ))
mul_5ns_19ns_23_1_1_U28(
    .din0(mul_ln107_fu_672_p0),
    .din1(mul_ln107_fu_672_p1),
    .dout(mul_ln107_fu_672_p2)
);

srcnn_mul_8ns_6ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mul_8ns_6ns_12_1_1_U29(
    .din0(mul_ln99_fu_701_p0),
    .din1(mul_ln99_fu_701_p1),
    .dout(mul_ln99_fu_701_p2)
);

srcnn_ama_addmuladd_8ns_5ns_5ns_5ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_8ns_5ns_5ns_5ns_12_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul46_reg_459),
    .din1(grp_fu_1354_p1),
    .din2(grp_fu_1354_p2),
    .din3(grp_fu_1354_p3),
    .ce(1'b1),
    .dout(grp_fu_1354_p4)
);

srcnn_ama_addmuladd_4ns_5ns_7ns_5ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_4ns_5ns_7ns_5ns_12_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1363_p0),
    .din1(shl_ln1_reg_1451),
    .din2(grp_fu_1363_p2),
    .din3(grp_fu_1363_p3),
    .ce(1'b1),
    .dout(grp_fu_1363_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_1020_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        add57_lcssa18_reg_447 <= add57_lcssa_lcssa19_reg_425;
    end else if (((icmp_ln66_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        add57_lcssa18_reg_447 <= empty_65_reg_481;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add57_lcssa_lcssa19_reg_425 <= output_fm_buffer_0_q0;
    end else if (((icmp_ln59_fu_1076_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        add57_lcssa_lcssa19_reg_425 <= add57_lcssa18_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        bx_reg_379 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        bx_reg_379 <= add_ln100_reg_1501;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_651_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        by_reg_368 <= 5'd0;
    end else if (((icmp_ln100_fu_826_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        by_reg_368 <= add_ln99_reg_1483;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1076_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        empty_65_reg_481 <= add57_lcssa18_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        empty_65_reg_481 <= grp_fu_597_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        empty_67_reg_515 <= 9'd0;
    end else if (((exitcond6713_fu_1337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
        empty_67_reg_515 <= empty_68_fu_1343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_reg_334 <= empty_59_fu_618_p2;
    end else if (((icmp_ln39_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_334 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_1020_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        kx_reg_436 <= 3'd0;
    end else if (((icmp_ln66_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        kx_reg_436 <= add_ln59_reg_1569;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ky_reg_414 <= 3'd0;
    end else if (((icmp_ln59_fu_1076_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ky_reg_414 <= add_ln58_reg_1551;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1076_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        nin_1_reg_470 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        nin_1_reg_470 <= add_ln66_reg_1597;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_612_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nin_reg_345 <= 4'd0;
    end else if (((icmp_ln99_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        nin_reg_345 <= add_ln98_reg_1465;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1076_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        phi_mul46_reg_459 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        phi_mul46_reg_459 <= add_ln67_7_reg_1584;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_612_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_356 <= 8'd0;
    end else if (((icmp_ln99_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_reg_356 <= add_ln98_1_reg_1457;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_310 <= 4'd0;
    end else if (((exitcond6713_fu_1337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
        ti_reg_310 <= add_ln32_reg_1420;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_178 <= 4'd0;
    end else if (((icmp_ln32_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_178 <= add_ln31_reg_1402;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tn_reg_322 <= 3'd0;
    end else if (((icmp_ln54_fu_978_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        tn_reg_322 <= add_ln39_reg_1438;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_978_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tx_1_reg_402 <= 5'd0;
    end else if (((icmp_ln58_fu_1020_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        tx_1_reg_402 <= add_ln55_reg_1538;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        tx_reg_504 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state67) & (m_axi_gmem_BVALID == 1'b1))) begin
        tx_reg_504 <= add_ln122_reg_1659;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ty_1_reg_390 <= 5'd0;
    end else if (((icmp_ln55_fu_1004_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        ty_1_reg_390 <= add_ln54_reg_1525;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ty_reg_493 <= 5'd0;
    end else if (((icmp_ln122_fu_1260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ty_reg_493 <= add_ln121_reg_1641;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln100_reg_1501 <= add_ln100_fu_832_p2;
        input_fm_buffer_addr_1_reg_1493 <= zext_ln107_3_fu_817_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_651_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln107_reg_1470 <= add_ln107_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        add_ln121_reg_1641 <= add_ln121_fu_1201_p2;
        add_ln124_4_reg_1633 <= add_ln124_4_fu_1185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        add_ln122_reg_1659 <= add_ln122_fu_1266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_1402 <= add_ln31_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_1420 <= add_ln32_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln39_reg_1438 <= add_ln39_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln54_reg_1525 <= add_ln54_fu_984_p2;
        empty_62_reg_1517 <= empty_62_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln55_reg_1538 <= add_ln55_fu_1010_p2;
        output_fm_buffer_0_addr_2_reg_1530 <= p_cast54_fu_999_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln58_reg_1551 <= add_ln58_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln59_reg_1569 <= add_ln59_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln66_reg_1597 <= add_ln66_fu_1130_p2;
        input_fm_buffer_addr_2_reg_1589 <= zext_ln67_6_fu_1116_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        add_ln67_7_reg_1584 <= add_ln67_7_fu_1110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln98_1_reg_1457 <= add_ln98_1_fu_641_p2;
        add_ln98_reg_1465 <= add_ln98_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln99_reg_1483 <= add_ln99_fu_717_p2;
        mul_ln99_reg_1475 <= mul_ln99_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_addr_4_read_reg_1512 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_826_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        gmem_addr_4_reg_1506 <= sext_ln107_1_fu_946_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_addr_5_read_reg_1608 <= m_axi_gmem_RDATA;
        input_fm_buffer_load_reg_1613 <= input_fm_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_addr_5_reg_1602 <= sext_ln67_fu_1159_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_addr_read_reg_1676 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        gmem_addr_reg_1664 <= sext_ln124_fu_1318_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        mul_reg_1623 <= grp_fu_601_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        output_fm_buffer_0_load_reg_1671 <= output_fm_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_shl1_reg_1425[7 : 4] <= p_shl1_fu_584_p3[7 : 4];
        ti_cast17_reg_1430[3 : 0] <= ti_cast17_fu_592_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_535 <= grp_fu_597_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        sext_ln122_reg_1646[63 : 2] <= sext_ln122_fu_1242_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_612_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        shl_ln1_reg_1451[4 : 3] <= shl_ln1_fu_633_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sub_ln107_reg_1488[19 : 2] <= sub_ln107_fu_802_p2[19 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_1407 <= tmp_fu_560_p3;
        zext_ln32_reg_1412[7 : 0] <= zext_ln32_fu_568_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1076_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        zext_ln66_reg_1579[4 : 2] <= zext_ln66_fu_1106_p1[4 : 2];
        zext_ln67_3_reg_1574[4 : 0] <= zext_ln67_3_fu_1094_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_1020_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        zext_ln67_1_reg_1561[6 : 2] <= zext_ln67_1_fu_1068_p1[6 : 2];
        zext_ln67_reg_1556[4 : 0] <= zext_ln67_fu_1038_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln31_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58)))) begin
        grp_fu_526_ce = 1'b1;
    end else begin
        grp_fu_526_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_526_p0 = bitcast_ln124_fu_1328_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_526_p0 = output_fm_buffer_0_load_reg_1671;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_526_p0 = empty_65_reg_481;
    end else begin
        grp_fu_526_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_526_p1 = reg_535;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_526_p1 = conv3_biases_0_0_val;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_526_p1 = mul_reg_1623;
    end else begin
        grp_fu_526_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_2_reg_1589;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_1493;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_fm_buffer_address0 = p_cast49_fu_624_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state5))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        input_fm_buffer_d0 = bitcast_ln107_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((exitcond1_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1664;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            m_axi_gmem_ARADDR = gmem_addr_5_reg_1602;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            m_axi_gmem_ARADDR = gmem_addr_4_reg_1506;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state49) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (m_axi_gmem_WREADY == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        output_fm_buffer_0_address0 = p_cast50_fu_1349_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        output_fm_buffer_0_address0 = zext_ln124_6_fu_1255_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_fm_buffer_0_address0 = output_fm_buffer_0_addr_2_reg_1530;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_fm_buffer_0_address0 = p_cast54_fu_999_p1;
    end else begin
        output_fm_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
        output_fm_buffer_0_ce0 = 1'b1;
    end else begin
        output_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        output_fm_buffer_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_fm_buffer_0_d0 = add57_lcssa_lcssa19_reg_425;
    end else begin
        output_fm_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond6713_fu_1337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68)) | ((icmp_ln58_fu_1020_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)))) begin
        output_fm_buffer_0_we0 = 1'b1;
    end else begin
        output_fm_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln39_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_612_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln98_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln99_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln100_fu_826_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln54_fu_978_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln55_fu_1004_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln58_fu_1020_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln59_fu_1076_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln66_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln121_fu_1195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln122_fu_1260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((exitcond6713_fu_1337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_832_p2 = (bx_reg_379 + 5'd1);

assign add_ln103_1_fu_850_p2 = ($signed(zext_ln100_fu_822_p1) + $signed(6'd62));

assign add_ln103_fu_860_p2 = ($signed(sext_ln103_fu_856_p1) + $signed(zext_ln103_fu_846_p1));

assign add_ln107_1_fu_922_p2 = ($signed(sub_ln107_reg_1488) + $signed(sext_ln107_2_fu_918_p1));

assign add_ln107_2_fu_931_p2 = ($signed(sext_ln107_3_fu_927_p1) + $signed(add_ln107_reg_1470));

assign add_ln107_3_fu_691_p2 = (phi_mul_reg_356 + zext_ln107_1_fu_687_p1);

assign add_ln107_4_fu_812_p2 = (mul_ln99_reg_1475 + zext_ln107_2_fu_808_p1);

assign add_ln107_fu_682_p2 = (zext_ln99_fu_678_p1 + input_ftmap);

assign add_ln121_fu_1201_p2 = (ty_reg_493 + 5'd1);

assign add_ln122_fu_1266_p2 = (tx_reg_504 + 5'd1);

assign add_ln124_1_fu_1281_p2 = (zext_ln124_3_fu_1277_p1 + p_shl1_reg_1425);

assign add_ln124_2_fu_1303_p2 = ($signed(add_ln124_3_fu_1298_p2) + $signed(sext_ln122_reg_1646));

assign add_ln124_3_fu_1298_p2 = (zext_ln124_4_fu_1294_p1 + output_ftmap);

assign add_ln124_4_fu_1185_p2 = (tmp_1_fu_1177_p3 + zext_ln124_fu_1173_p1);

assign add_ln124_5_fu_1250_p2 = (add_ln124_4_reg_1633 + zext_ln124_5_fu_1246_p1);

assign add_ln124_fu_1272_p2 = (ti_cast17_reg_1430 + tx_reg_504);

assign add_ln31_fu_554_p2 = (tj_fu_178 + 4'd1);

assign add_ln32_fu_578_p2 = (ti_reg_310 + 4'd1);

assign add_ln39_fu_606_p2 = (tn_reg_322 + 3'd1);

assign add_ln54_fu_984_p2 = (ty_1_reg_390 + 5'd1);

assign add_ln55_fu_1010_p2 = (tx_1_reg_402 + 5'd1);

assign add_ln58_fu_1026_p2 = (ky_reg_414 + 3'd1);

assign add_ln59_fu_1082_p2 = (kx_reg_436 + 3'd1);

assign add_ln63_fu_1088_p2 = (zext_ln59_1_fu_1072_p1 + tx_1_reg_402);

assign add_ln66_fu_1130_p2 = (nin_1_reg_470 + 4'd1);

assign add_ln67_1_fu_1062_p2 = (shl_ln3_fu_1042_p3 + zext_ln59_fu_1058_p1);

assign add_ln67_3_fu_1144_p2 = (add_ln67_4_fu_1139_p2 + zext_ln67_1_reg_1561);

assign add_ln67_4_fu_1139_p2 = (zext_ln67_4_fu_1136_p1 + conv3_weights);

assign add_ln67_7_fu_1110_p2 = (phi_mul46_reg_459 + 8'd21);

assign add_ln98_1_fu_641_p2 = (phi_mul_reg_356 + 8'd21);

assign add_ln98_fu_657_p2 = (nin_reg_345 + 4'd1);

assign add_ln99_fu_717_p2 = (by_reg_368 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln107_fu_956_p1 = gmem_addr_4_read_reg_1512;

assign bitcast_ln124_fu_1328_p1 = gmem_addr_read_reg_1676;

assign bitcast_ln67_fu_1169_p1 = gmem_addr_5_read_reg_1608;

assign empty_59_fu_618_p2 = (empty_reg_334 + 12'd1);

assign empty_60_fu_663_p2 = (zext_ln98_fu_647_p1 + shl_ln1_reg_1451);

assign empty_61_fu_733_p2 = ($signed(tmp1_cast_fu_729_p1) + $signed(zext_ln32_reg_1412));

assign empty_62_fu_972_p2 = (tmp_3_fu_964_p3 + ty_1_cast_fu_960_p1);

assign empty_63_fu_994_p2 = (empty_62_reg_1517 + tx_1_cast_fu_990_p1);

assign empty_64_fu_1032_p2 = (zext_ln58_fu_1016_p1 + ty_1_reg_390);

assign empty_66_fu_1207_p2 = (zext_ln121_fu_1191_p1 + tmp_reg_1407);

assign empty_68_fu_1343_p2 = (empty_67_reg_515 + 9'd1);

assign exitcond1_fu_612_p2 = ((empty_reg_334 == 12'd3528) ? 1'b1 : 1'b0);

assign exitcond6713_fu_1337_p2 = ((empty_67_reg_515 == 9'd289) ? 1'b1 : 1'b0);

assign grp_fu_1354_p1 = zext_ln67_reg_1556;

assign grp_fu_1354_p2 = 12'd21;

assign grp_fu_1354_p3 = zext_ln67_3_reg_1574;

assign grp_fu_1363_p0 = grp_fu_1363_p00;

assign grp_fu_1363_p00 = nin_1_reg_470;

assign grp_fu_1363_p2 = 12'd100;

assign grp_fu_1363_p3 = zext_ln66_reg_1579;

assign grp_fu_597_p_ce = grp_fu_526_ce;

assign grp_fu_597_p_din0 = grp_fu_526_p0;

assign grp_fu_597_p_din1 = grp_fu_526_p1;

assign grp_fu_597_p_opcode = 2'd0;

assign grp_fu_601_p_ce = 1'b1;

assign grp_fu_601_p_din0 = bitcast_ln67_fu_1169_p1;

assign grp_fu_601_p_din1 = input_fm_buffer_load_reg_1613;

assign icmp_ln100_fu_826_p2 = ((bx_reg_379 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_1195_p2 = ((ty_reg_493 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_1260_p2 = ((tx_reg_504 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_548_p2 = ((tj_fu_178 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_572_p2 = ((ti_reg_310 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_600_p2 = ((tn_reg_322 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_874_p2 = (($signed(add_ln103_fu_860_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_746_p2 = (($signed(empty_61_fu_733_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_978_p2 = ((ty_1_reg_390 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1004_p2 = ((tx_1_reg_402 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1020_p2 = ((ky_reg_414 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1076_p2 = ((kx_reg_436 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1124_p2 = ((nin_1_reg_470 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_651_p2 = ((nin_reg_345 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_711_p2 = ((by_reg_368 == 5'd21) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_1664;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = reg_535;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln107_fu_672_p0 = mul_ln107_fu_672_p00;

assign mul_ln107_fu_672_p00 = empty_60_fu_663_p2;

assign mul_ln107_fu_672_p1 = 23'd260100;

assign mul_ln99_fu_701_p0 = mul_ln99_fu_701_p00;

assign mul_ln99_fu_701_p00 = add_ln107_3_fu_691_p2;

assign mul_ln99_fu_701_p1 = 12'd21;

assign or_ln51_1_fu_888_p2 = (tmp_5_fu_866_p3 | icmp_ln52_1_fu_874_p2);

assign or_ln51_fu_768_p2 = (tmp_2_fu_738_p3 | icmp_ln52_fu_746_p2);

assign p_cast49_fu_624_p1 = empty_reg_334;

assign p_cast50_fu_1349_p1 = empty_67_reg_515;

assign p_cast54_fu_999_p1 = empty_63_fu_994_p2;

assign p_shl1_fu_584_p3 = {{ti_reg_310}, {4'd0}};

assign select_ln51_2_fu_894_p3 = ((tmp_6_fu_880_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_3_fu_902_p3 = ((or_ln51_1_fu_888_p2[0:0] == 1'b1) ? select_ln51_2_fu_894_p3 : add_ln103_fu_860_p2);

assign select_ln51_fu_760_p3 = ((tmp_4_fu_752_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln103_fu_856_p1 = $signed(add_ln103_1_fu_850_p2);

assign sext_ln107_1_fu_946_p1 = $signed(trunc_ln4_fu_936_p4);

assign sext_ln107_2_fu_918_p1 = $signed(shl_ln107_2_fu_910_p3);

assign sext_ln107_3_fu_927_p1 = $signed(add_ln107_1_fu_922_p2);

assign sext_ln107_fu_798_p1 = $signed(shl_ln107_1_fu_790_p3);

assign sext_ln122_fu_1242_p1 = $signed(sub_ln124_fu_1236_p2);

assign sext_ln124_fu_1318_p1 = $signed(trunc_ln_fu_1308_p4);

assign sext_ln67_fu_1159_p1 = $signed(trunc_ln5_fu_1149_p4);

assign shl_ln107_1_fu_790_p3 = {{yClamped_fu_774_p3}, {2'd0}};

assign shl_ln107_2_fu_910_p3 = {{select_ln51_3_fu_902_p3}, {2'd0}};

assign shl_ln124_1_fu_1224_p3 = {{empty_66_fu_1207_p2}, {2'd0}};

assign shl_ln124_2_fu_1286_p3 = {{add_ln124_1_fu_1281_p2}, {2'd0}};

assign shl_ln1_fu_633_p3 = {{trunc_ln41_fu_629_p1}, {3'd0}};

assign shl_ln2_fu_782_p3 = {{yClamped_fu_774_p3}, {10'd0}};

assign shl_ln3_fu_1042_p3 = {{ky_reg_414}, {4'd0}};

assign shl_ln67_1_fu_1050_p3 = {{ky_reg_414}, {2'd0}};

assign shl_ln67_2_fu_1098_p3 = {{kx_reg_436}, {2'd0}};

assign shl_ln_fu_1212_p3 = {{empty_66_fu_1207_p2}, {10'd0}};

assign sub_ln107_fu_802_p2 = ($signed(shl_ln2_fu_782_p3) - $signed(sext_ln107_fu_798_p1));

assign sub_ln124_fu_1236_p2 = (zext_ln124_1_fu_1220_p1 - zext_ln124_2_fu_1232_p1);

assign ti_cast17_fu_592_p1 = ti_reg_310;

assign tmp1_cast_fu_729_p1 = $signed(tmp1_fu_723_p2);

assign tmp1_fu_723_p2 = ($signed(zext_ln99_2_fu_707_p1) + $signed(6'd62));

assign tmp4_fu_838_p3 = {{ti_reg_310}, {ti_reg_310}};

assign tmp_1_fu_1177_p3 = {{ty_reg_493}, {4'd0}};

assign tmp_2_fu_738_p3 = empty_61_fu_733_p2[32'd9];

assign tmp_3_fu_964_p3 = {{ty_1_reg_390}, {4'd0}};

assign tmp_4_fu_752_p3 = empty_61_fu_733_p2[32'd9];

assign tmp_5_fu_866_p3 = add_ln103_fu_860_p2[32'd9];

assign tmp_6_fu_880_p3 = add_ln103_fu_860_p2[32'd9];

assign tmp_fu_560_p3 = {{tj_fu_178}, {tj_fu_178}};

assign trunc_ln41_fu_629_p1 = tn_reg_322[1:0];

assign trunc_ln4_fu_936_p4 = {{add_ln107_2_fu_931_p2[63:2]}};

assign trunc_ln5_fu_1149_p4 = {{add_ln67_3_fu_1144_p2[63:2]}};

assign trunc_ln_fu_1308_p4 = {{add_ln124_2_fu_1303_p2[63:2]}};

assign tx_1_cast_fu_990_p1 = tx_1_reg_402;

assign ty_1_cast_fu_960_p1 = ty_1_reg_390;

assign yClamped_fu_774_p3 = ((or_ln51_fu_768_p2[0:0] == 1'b1) ? select_ln51_fu_760_p3 : empty_61_fu_733_p2);

assign zext_ln100_fu_822_p1 = bx_reg_379;

assign zext_ln103_fu_846_p1 = tmp4_fu_838_p3;

assign zext_ln107_1_fu_687_p1 = by_reg_368;

assign zext_ln107_2_fu_808_p1 = bx_reg_379;

assign zext_ln107_3_fu_817_p1 = add_ln107_4_fu_812_p2;

assign zext_ln121_fu_1191_p1 = ty_reg_493;

assign zext_ln124_1_fu_1220_p1 = shl_ln_fu_1212_p3;

assign zext_ln124_2_fu_1232_p1 = shl_ln124_1_fu_1224_p3;

assign zext_ln124_3_fu_1277_p1 = add_ln124_fu_1272_p2;

assign zext_ln124_4_fu_1294_p1 = shl_ln124_2_fu_1286_p3;

assign zext_ln124_5_fu_1246_p1 = tx_reg_504;

assign zext_ln124_6_fu_1255_p1 = add_ln124_5_fu_1250_p2;

assign zext_ln124_fu_1173_p1 = ty_reg_493;

assign zext_ln32_fu_568_p1 = tmp_fu_560_p3;

assign zext_ln58_fu_1016_p1 = ky_reg_414;

assign zext_ln59_1_fu_1072_p1 = kx_reg_436;

assign zext_ln59_fu_1058_p1 = shl_ln67_1_fu_1050_p3;

assign zext_ln66_fu_1106_p1 = shl_ln67_2_fu_1098_p3;

assign zext_ln67_1_fu_1068_p1 = add_ln67_1_fu_1062_p2;

assign zext_ln67_3_fu_1094_p1 = add_ln63_fu_1088_p2;

assign zext_ln67_4_fu_1136_p1 = grp_fu_1363_p4;

assign zext_ln67_6_fu_1116_p1 = grp_fu_1354_p4;

assign zext_ln67_fu_1038_p1 = empty_64_fu_1032_p2;

assign zext_ln98_fu_647_p1 = nin_reg_345;

assign zext_ln99_2_fu_707_p1 = by_reg_368;

assign zext_ln99_fu_678_p1 = mul_ln107_fu_672_p2;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1412[9:8] <= 2'b00;
    p_shl1_reg_1425[3:0] <= 4'b0000;
    ti_cast17_reg_1430[4] <= 1'b0;
    shl_ln1_reg_1451[2:0] <= 3'b000;
    sub_ln107_reg_1488[1:0] <= 2'b00;
    zext_ln67_reg_1556[7:5] <= 3'b000;
    zext_ln67_1_reg_1561[1:0] <= 2'b00;
    zext_ln67_1_reg_1561[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln67_3_reg_1574[11:5] <= 7'b0000000;
    zext_ln66_reg_1579[1:0] <= 2'b00;
    zext_ln66_reg_1579[11:5] <= 7'b0000000;
    sext_ln122_reg_1646[1:0] <= 2'b00;
end

endmodule //srcnn_conv3
