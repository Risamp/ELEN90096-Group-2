-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_buffer_tile_c2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_fm_buffer_ce0 : OUT STD_LOGIC;
    input_fm_buffer_we0 : OUT STD_LOGIC;
    input_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tx0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ty0 : IN STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_load_buffer_tile_c2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv19_70E40 : STD_LOGIC_VECTOR (18 downto 0) := "1110000111001000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv13_55 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010101";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_55 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001010101";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln110_1_fu_297_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln110_1_reg_549 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln110_fu_313_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln110_reg_557 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln110_fu_341_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln110_reg_562 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln110_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_567 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln111_fu_368_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln111_reg_572 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln111_fu_380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln111_reg_580 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln119_1_fu_420_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln119_1_reg_585 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln111_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_1_reg_590 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln112_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln112_reg_598 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln112_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal by_reg_229 : STD_LOGIC_VECTOR (6 downto 0);
    signal bx_reg_240 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_cast_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond214_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln119_5_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_7_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_80 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_68_fu_265_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal phi_mul_fu_84 : STD_LOGIC_VECTOR (12 downto 0);
    signal nin_fu_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_490_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln110_fu_303_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_323_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln119_1_fu_331_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_fu_319_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln119_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_2_fu_355_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_fu_359_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln111_fu_368_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln111_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal yClamped_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_3_fu_395_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_1_fu_399_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln119_fu_408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_412_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln119_fu_404_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln119_4_fu_434_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln119_2_fu_438_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln41_1_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xClamped_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_6_fu_469_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln119_3_fu_473_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal mul_ln111_fu_368_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_13ns_8ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component srcnn_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_13ns_8ns_19_1_1_U34 : component srcnn_mul_13ns_8ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln111_fu_368_p0,
        din1 => mul_ln111_fu_368_p1,
        dout => mul_ln111_fu_368_p2);

    mux_8_3_32_1_1_U35 : component srcnn_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_q0,
        din1 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_q0,
        din2 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_q0,
        din3 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_q0,
        din4 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_q0,
        din5 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_q0,
        din6 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_q0,
        din7 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_q0,
        din8 => trunc_ln_reg_567,
        dout => tmp_fu_490_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln111_fu_374_p2 = ap_const_lv1_0))) then 
                bx_reg_240 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                bx_reg_240 <= add_ln112_reg_598;
            end if; 
        end if;
    end process;

    by_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                by_reg_229 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln112_fu_448_p2 = ap_const_lv1_1))) then 
                by_reg_229 <= add_ln111_reg_580;
            end if; 
        end if;
    end process;

    empty_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_fu_80 <= ap_const_lv19_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond214_fu_259_p2 = ap_const_lv1_0))) then 
                empty_fu_80 <= empty_68_fu_265_p2;
            end if; 
        end if;
    end process;

    nin_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond214_fu_259_p2 = ap_const_lv1_1))) then 
                nin_fu_88 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln111_fu_374_p2 = ap_const_lv1_1))) then 
                nin_fu_88 <= add_ln110_reg_557;
            end if; 
        end if;
    end process;

    phi_mul_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond214_fu_259_p2 = ap_const_lv1_1))) then 
                phi_mul_fu_84 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln111_fu_374_p2 = ap_const_lv1_1))) then 
                phi_mul_fu_84 <= add_ln110_1_reg_549;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln110_1_reg_549 <= add_ln110_1_fu_297_p2;
                add_ln110_reg_557 <= add_ln110_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln111_reg_580 <= add_ln111_fu_380_p2;
                mul_ln111_reg_572 <= mul_ln111_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln112_reg_598 <= add_ln112_fu_454_p2;
                input_fm_buffer_addr_1_reg_590 <= zext_ln119_5_fu_443_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln110_reg_562 <= sext_ln110_fu_341_p1;
                trunc_ln_reg_567 <= nin_fu_88(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln111_fu_374_p2 = ap_const_lv1_0))) then
                sub_ln119_1_reg_585 <= sub_ln119_1_fu_420_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln110_fu_307_p2, ap_CS_fsm_state4, icmp_ln111_fu_374_p2, ap_CS_fsm_state5, icmp_ln112_fu_448_p2, ap_CS_fsm_state2, exitcond214_fu_259_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond214_fu_259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln110_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln111_fu_374_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln112_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln110_1_fu_297_p2 <= std_logic_vector(unsigned(phi_mul_fu_84) + unsigned(ap_const_lv13_55));
    add_ln110_fu_313_p2 <= std_logic_vector(unsigned(nin_fu_88) + unsigned(ap_const_lv7_1));
    add_ln111_fu_380_p2 <= std_logic_vector(unsigned(by_reg_229) + unsigned(ap_const_lv7_1));
    add_ln112_fu_454_p2 <= std_logic_vector(unsigned(bx_reg_240) + unsigned(ap_const_lv7_1));
    add_ln119_1_fu_399_p2 <= std_logic_vector(signed(sext_ln110_reg_562) + signed(zext_ln119_3_fu_395_p1));
    add_ln119_2_fu_438_p2 <= std_logic_vector(unsigned(mul_ln111_reg_572) + unsigned(zext_ln119_4_fu_434_p1));
    add_ln119_3_fu_473_p2 <= std_logic_vector(unsigned(sub_ln119_1_reg_585) + unsigned(zext_ln119_6_fu_469_p1));
    add_ln119_fu_359_p2 <= std_logic_vector(unsigned(phi_mul_fu_84) + unsigned(zext_ln119_2_fu_355_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln110_fu_307_p2)
    begin
        if ((((icmp_ln110_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln110_fu_307_p2)
    begin
        if (((icmp_ln110_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_68_fu_265_p2 <= std_logic_vector(unsigned(empty_fu_80) + unsigned(ap_const_lv19_1));
    exitcond214_fu_259_p2 <= "1" when (empty_fu_80 = ap_const_lv19_70E40) else "0";
    icmp_ln110_fu_307_p2 <= "1" when (nin_fu_88 = ap_const_lv7_40) else "0";
    icmp_ln111_fu_374_p2 <= "1" when (by_reg_229 = ap_const_lv7_55) else "0";
    icmp_ln112_fu_448_p2 <= "1" when (bx_reg_240 = ap_const_lv7_55) else "0";

    input_fm_buffer_address0_assign_proc : process(input_fm_buffer_addr_1_reg_590, ap_CS_fsm_state6, p_cast_fu_271_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_1_reg_590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_fm_buffer_address0 <= p_cast_fu_271_p1(19 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state2, tmp_fu_490_p10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_d0 <= tmp_fu_490_p10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state2, exitcond214_fu_259_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond214_fu_259_p2 = ap_const_lv1_0)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln111_fu_368_p0 <= mul_ln111_fu_368_p00(13 - 1 downto 0);
    mul_ln111_fu_368_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_fu_359_p2),19));
    mul_ln111_fu_368_p1 <= ap_const_lv19_55(8 - 1 downto 0);
    p_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_80),64));
    p_shl1_fu_412_p3 <= (trunc_ln119_fu_408_p1 & ap_const_lv8_0);
        sext_ln110_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln119_fu_335_p2),13));

        sext_ln119_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_1_fu_399_p2),19));

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_address0 <= zext_ln119_7_fu_478_p1(19 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln119_1_fu_420_p2 <= std_logic_vector(unsigned(p_shl1_fu_412_p3) - unsigned(sext_ln119_fu_404_p1));
    sub_ln119_fu_335_p2 <= std_logic_vector(unsigned(zext_ln119_1_fu_331_p1) - unsigned(zext_ln119_fu_319_p1));
    tmp_2_fu_323_p3 <= (trunc_ln110_fu_303_p1 & ap_const_lv8_0);
    trunc_ln110_fu_303_p1 <= nin_fu_88(3 - 1 downto 0);
    trunc_ln119_fu_408_p1 <= add_ln119_1_fu_399_p2(11 - 1 downto 0);
    xClamped_fu_464_p2 <= std_logic_vector(unsigned(zext_ln41_1_fu_460_p1) + unsigned(tx0));
    yClamped_fu_390_p2 <= std_logic_vector(unsigned(zext_ln41_fu_386_p1) + unsigned(ty0));
    zext_ln119_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_323_p3),12));
    zext_ln119_2_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_229),13));
    zext_ln119_3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yClamped_fu_390_p2),13));
    zext_ln119_4_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_240),19));
    zext_ln119_5_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_2_fu_438_p2),64));
    zext_ln119_6_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xClamped_fu_464_p2),19));
    zext_ln119_7_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_3_fu_473_p2),64));
    zext_ln119_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln110_fu_303_p1),12));
    zext_ln41_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_240),8));
    zext_ln41_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_229),8));
end behav;
