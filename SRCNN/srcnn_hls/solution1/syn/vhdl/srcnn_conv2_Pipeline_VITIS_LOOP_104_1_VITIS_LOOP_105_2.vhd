-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_VITIS_LOOP_104_1_VITIS_LOOP_105_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    shl_ln3 : IN STD_LOGIC_VECTOR (5 downto 0);
    select_ln30_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    select_ln30 : IN STD_LOGIC_VECTOR (3 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    input_fm_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_fm_buffer_1_ce0 : OUT STD_LOGIC;
    input_fm_buffer_1_we0 : OUT STD_LOGIC;
    input_fm_buffer_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_VITIS_LOOP_104_1_VITIS_LOOP_105_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal icmp_ln104_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage12 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal icmp_ln104_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_373_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln104_reg_853 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln104_1_fu_381_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln104_1_reg_859 : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_addr_17_reg_875 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln113_1_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_1_reg_881 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln113_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_3_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_4_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_5_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_6_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_7_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_8_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_9_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_10_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_11_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_12_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_13_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_14_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_15_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_16_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_17_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_18_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln106_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal by_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln105_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_by_load : STD_LOGIC_VECTOR (4 downto 0);
    signal nin_fu_136 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_nin_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_2_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln113_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_1_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_2_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_3_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_4_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_5_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_6_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_7_fu_663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_8_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_9_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_10_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_11_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_12_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_13_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_14_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_15_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln113_16_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln105_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln104_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln104_1_fu_389_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln104_1_fu_393_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal by_cast_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_432_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl5_fu_444_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_440_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl5_cast_fu_452_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_98_fu_456_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_466_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_803_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp2_cast_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_99_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_492_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln104_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln113_fu_522_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln113_fu_525_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln113_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_539_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln113_1_fu_531_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_2_fu_563_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_3_fu_578_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_4_fu_593_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_5_fu_608_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_6_fu_623_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_7_fu_638_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_8_fu_653_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_9_fu_668_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_10_fu_683_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_11_fu_698_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_12_fu_713_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_13_fu_728_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_14_fu_743_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_15_fu_758_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_16_fu_773_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_17_fu_788_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_803_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_803_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mac_muladd_6ns_18ns_19s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_18ns_19s_25_4_1_U22 : component srcnn_mac_muladd_6ns_18ns_19s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 18,
        din2_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_803_p0,
        din1 => grp_fu_803_p1,
        din2 => empty_98_fu_456_p2,
        ce => grp_fu_803_ce,
        dout => grp_fu_803_p3);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage12,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage12)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    by_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln104_fu_343_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    by_fu_132 <= add_ln105_fu_403_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    by_fu_132 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln104_fu_343_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_140 <= add_ln104_2_fu_349_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_140 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    nin_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln104_fu_343_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    nin_fu_136 <= select_ln104_1_fu_381_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    nin_fu_136 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0))) then
                add_ln113_1_reg_881 <= add_ln113_1_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0))) then
                gmem_addr_17_reg_875 <= sext_ln106_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln104_reg_849 <= icmp_ln104_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) 
    and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)))) then
                reg_321 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln104_1_reg_859 <= select_ln104_1_fu_381_p3;
                select_ln104_reg_853 <= select_ln104_fu_373_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage12_subdone, ap_condition_exit_pp0_iter0_stage12, ap_block_pp0_stage16_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage12)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_1_fu_393_p2 <= std_logic_vector(unsigned(zext_ln104_1_fu_389_p1) + unsigned(shl_ln3));
    add_ln104_2_fu_349_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln104_fu_361_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_nin_load) + unsigned(ap_const_lv4_1));
    add_ln105_fu_403_p2 <= std_logic_vector(unsigned(select_ln104_fu_373_p3) + unsigned(ap_const_lv5_1));
    add_ln113_10_fu_683_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_9));
    add_ln113_11_fu_698_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_A));
    add_ln113_12_fu_713_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_B));
    add_ln113_13_fu_728_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_C));
    add_ln113_14_fu_743_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_D));
    add_ln113_15_fu_758_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_E));
    add_ln113_16_fu_773_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_F));
    add_ln113_17_fu_788_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_10));
    add_ln113_1_fu_547_p2 <= std_logic_vector(unsigned(p_shl_fu_539_p3) + unsigned(zext_ln113_1_fu_531_p1));
    add_ln113_2_fu_563_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_1));
    add_ln113_3_fu_578_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_2));
    add_ln113_4_fu_593_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_3));
    add_ln113_5_fu_608_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_4));
    add_ln113_6_fu_623_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_5));
    add_ln113_7_fu_638_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_6));
    add_ln113_8_fu_653_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_7));
    add_ln113_9_fu_668_p2 <= std_logic_vector(unsigned(add_ln113_1_reg_881) + unsigned(ap_const_lv12_8));
    add_ln113_fu_525_p2 <= std_logic_vector(unsigned(zext_ln104_fu_518_p1) + unsigned(zext_ln113_fu_522_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage11_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage11_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage12_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage12_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage13_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage13_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage14_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage14_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage15_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage15_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage16_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage16_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage16_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_pp0_stage16_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage2_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage2_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage3_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage3_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage5_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage5_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage6_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage6_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage7_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage7_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage8_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage8_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage12_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_state13_pp0_stage12_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_state14_pp0_stage13_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_state14_pp0_stage13_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_state15_pp0_stage14_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_state15_pp0_stage14_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage15_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_state16_pp0_stage15_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_state17_pp0_stage16_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln104_reg_849)
    begin
                ap_block_state17_pp0_stage16_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;


    ap_block_state18_pp0_stage0_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state18_pp0_stage0_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state19_pp0_stage1_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state19_pp0_stage1_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage2_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state20_pp0_stage2_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state21_pp0_stage3_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state21_pp0_stage3_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state22_pp0_stage4_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state22_pp0_stage4_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state23_pp0_stage5_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state23_pp0_stage5_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state24_pp0_stage6_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state24_pp0_stage6_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state25_pp0_stage7_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state25_pp0_stage7_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state26_pp0_stage8_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state26_pp0_stage8_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state27_pp0_stage9_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state27_pp0_stage9_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state28_pp0_stage10_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state28_pp0_stage10_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state29_pp0_stage11_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state29_pp0_stage11_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln104_reg_849)
    begin
                ap_block_state5_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln104_reg_849 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, icmp_ln104_reg_849, ap_block_pp0_stage12_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone) and (icmp_ln104_reg_849 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage12;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_by_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, by_fu_132, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_by_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_by_load <= by_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_140)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_140;
        end if; 
    end process;


    ap_sig_allocacmp_nin_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nin_fu_136)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_nin_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_nin_load <= nin_fu_136;
        end if; 
    end process;

    bitcast_ln113_10_fu_708_p1 <= reg_321;
    bitcast_ln113_11_fu_723_p1 <= reg_321;
    bitcast_ln113_12_fu_738_p1 <= reg_321;
    bitcast_ln113_13_fu_753_p1 <= reg_321;
    bitcast_ln113_14_fu_768_p1 <= reg_321;
    bitcast_ln113_15_fu_783_p1 <= reg_321;
    bitcast_ln113_16_fu_798_p1 <= reg_321;
    bitcast_ln113_1_fu_573_p1 <= reg_321;
    bitcast_ln113_2_fu_588_p1 <= reg_321;
    bitcast_ln113_3_fu_603_p1 <= reg_321;
    bitcast_ln113_4_fu_618_p1 <= reg_321;
    bitcast_ln113_5_fu_633_p1 <= reg_321;
    bitcast_ln113_6_fu_648_p1 <= reg_321;
    bitcast_ln113_7_fu_663_p1 <= reg_321;
    bitcast_ln113_8_fu_678_p1 <= reg_321;
    bitcast_ln113_9_fu_693_p1 <= reg_321;
    bitcast_ln113_fu_558_p1 <= reg_321;
    by_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_reg_853),8));
    empty_98_fu_456_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_440_p1) - unsigned(p_shl5_cast_fu_452_p1));
    empty_99_fu_486_p2 <= std_logic_vector(unsigned(tmp1_fu_481_p2) + unsigned(tmp_cast_fu_474_p1));
    empty_fu_427_p2 <= std_logic_vector(unsigned(by_cast_fu_424_p1) + unsigned(select_ln30_2));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_ARREADY, icmp_ln104_reg_849, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln104_reg_849 = ap_const_lv1_0))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, m_axi_gmem_RVALID, icmp_ln104_reg_849, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 
    = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (icmp_ln104_reg_849 
    = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16) and (icmp_ln104_reg_849 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_803_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_803_ce <= ap_const_logic_1;
        else 
            grp_fu_803_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_803_p0 <= grp_fu_803_p00(6 - 1 downto 0);
    grp_fu_803_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_393_p2),24));
    grp_fu_803_p1 <= ap_const_lv24_3F804(18 - 1 downto 0);
    icmp_ln104_fu_343_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_88) else "0";
    icmp_ln105_fu_367_p2 <= "1" when (ap_sig_allocacmp_by_load = ap_const_lv5_11) else "0";

    input_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, zext_ln113_2_fu_553_p1, zext_ln113_3_fu_568_p1, zext_ln113_4_fu_583_p1, zext_ln113_5_fu_598_p1, zext_ln113_6_fu_613_p1, zext_ln113_7_fu_628_p1, zext_ln113_8_fu_643_p1, zext_ln113_9_fu_658_p1, zext_ln113_10_fu_673_p1, zext_ln113_11_fu_688_p1, zext_ln113_12_fu_703_p1, zext_ln113_13_fu_718_p1, zext_ln113_14_fu_733_p1, zext_ln113_15_fu_748_p1, zext_ln113_16_fu_763_p1, zext_ln113_17_fu_778_p1, zext_ln113_18_fu_793_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
            input_fm_buffer_1_address0 <= zext_ln113_18_fu_793_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            input_fm_buffer_1_address0 <= zext_ln113_17_fu_778_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            input_fm_buffer_1_address0 <= zext_ln113_16_fu_763_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            input_fm_buffer_1_address0 <= zext_ln113_15_fu_748_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            input_fm_buffer_1_address0 <= zext_ln113_14_fu_733_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            input_fm_buffer_1_address0 <= zext_ln113_13_fu_718_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            input_fm_buffer_1_address0 <= zext_ln113_12_fu_703_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            input_fm_buffer_1_address0 <= zext_ln113_11_fu_688_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            input_fm_buffer_1_address0 <= zext_ln113_10_fu_673_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            input_fm_buffer_1_address0 <= zext_ln113_9_fu_658_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            input_fm_buffer_1_address0 <= zext_ln113_8_fu_643_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            input_fm_buffer_1_address0 <= zext_ln113_7_fu_628_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_fm_buffer_1_address0 <= zext_ln113_6_fu_613_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            input_fm_buffer_1_address0 <= zext_ln113_5_fu_598_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            input_fm_buffer_1_address0 <= zext_ln113_4_fu_583_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            input_fm_buffer_1_address0 <= zext_ln113_3_fu_568_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
            input_fm_buffer_1_address0 <= zext_ln113_2_fu_553_p1(12 - 1 downto 0);
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) 
    or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, bitcast_ln113_fu_558_p1, bitcast_ln113_1_fu_573_p1, bitcast_ln113_2_fu_588_p1, bitcast_ln113_3_fu_603_p1, bitcast_ln113_4_fu_618_p1, bitcast_ln113_5_fu_633_p1, bitcast_ln113_6_fu_648_p1, bitcast_ln113_7_fu_663_p1, bitcast_ln113_8_fu_678_p1, bitcast_ln113_9_fu_693_p1, bitcast_ln113_10_fu_708_p1, bitcast_ln113_11_fu_723_p1, bitcast_ln113_12_fu_738_p1, bitcast_ln113_13_fu_753_p1, bitcast_ln113_14_fu_768_p1, bitcast_ln113_15_fu_783_p1, bitcast_ln113_16_fu_798_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_16_fu_798_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_15_fu_783_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_14_fu_768_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_13_fu_753_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_12_fu_738_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_11_fu_723_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_10_fu_708_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_9_fu_693_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_8_fu_678_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_7_fu_663_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_6_fu_648_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_5_fu_633_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_4_fu_618_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_3_fu_603_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_2_fu_588_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_1_fu_573_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
            input_fm_buffer_1_d0 <= bitcast_ln113_fu_558_p1;
        else 
            input_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, icmp_ln104_reg_849, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) 
    and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)))) then 
            input_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= gmem_addr_17_reg_875;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_11;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln104_reg_849, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, icmp_ln104_reg_849, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) 
    and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (icmp_ln104_reg_849 = ap_const_lv1_0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln_fu_512_p3 <= (select_ln104_1_reg_859 & select_ln104_1_reg_859);
    p_shl4_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_432_p3),19));
    p_shl4_fu_432_p3 <= (empty_fu_427_p2 & ap_const_lv10_0);
    p_shl5_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_444_p3),19));
    p_shl5_fu_444_p3 <= (empty_fu_427_p2 & ap_const_lv2_0);
    p_shl_fu_539_p3 <= (trunc_ln113_fu_535_p1 & ap_const_lv4_0);
    select_ln104_1_fu_381_p3 <= 
        add_ln104_fu_361_p2 when (icmp_ln105_fu_367_p2(0) = '1') else 
        ap_sig_allocacmp_nin_load;
    select_ln104_fu_373_p3 <= 
        ap_const_lv5_0 when (icmp_ln105_fu_367_p2(0) = '1') else 
        ap_sig_allocacmp_by_load;
        sext_ln106_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_492_p4),64));

    tmp1_fu_481_p2 <= std_logic_vector(signed(tmp2_cast_fu_478_p1) + signed(input_ftmap));
        tmp2_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_803_p3),64));

    tmp_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_466_p4),64));
    tmp_fu_466_p4 <= ((select_ln30 & select_ln30) & ap_const_lv2_0);
    trunc_ln113_fu_535_p1 <= add_ln113_fu_525_p2(8 - 1 downto 0);
    trunc_ln_fu_492_p4 <= empty_99_fu_486_p2(63 downto 2);
    zext_ln104_1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_1_fu_381_p3),6));
    zext_ln104_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_512_p3),9));
    zext_ln113_10_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_9_fu_668_p2),64));
    zext_ln113_11_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_10_fu_683_p2),64));
    zext_ln113_12_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_11_fu_698_p2),64));
    zext_ln113_13_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_12_fu_713_p2),64));
    zext_ln113_14_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_13_fu_728_p2),64));
    zext_ln113_15_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_14_fu_743_p2),64));
    zext_ln113_16_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_15_fu_758_p2),64));
    zext_ln113_17_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_16_fu_773_p2),64));
    zext_ln113_18_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_17_fu_788_p2),64));
    zext_ln113_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_fu_525_p2),12));
    zext_ln113_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_1_fu_547_p2),64));
    zext_ln113_3_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_2_fu_563_p2),64));
    zext_ln113_4_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_3_fu_578_p2),64));
    zext_ln113_5_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_4_fu_593_p2),64));
    zext_ln113_6_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_5_fu_608_p2),64));
    zext_ln113_7_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_6_fu_623_p2),64));
    zext_ln113_8_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_7_fu_638_p2),64));
    zext_ln113_9_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_8_fu_653_p2),64));
    zext_ln113_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_reg_853),9));
end behav;
