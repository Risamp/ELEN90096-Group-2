-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=339812496,HLS_SYN_TPT=none,HLS_SYN_MEM=133,HLS_SYN_DSP=0,HLS_SYN_FF=6451,HLS_SYN_LUT=10863,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3F8040 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111000000001000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1FC020 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000111111100000000100000";
    constant ap_const_lv32_FE01 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111111000000001";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv22_3F8040 : STD_LOGIC_VECTOR (21 downto 0) := "1111111000000001000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv21_1FC020 : STD_LOGIC_VECTOR (20 downto 0) := "111111100000000100000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv16_FE01 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal output_ftmap_read_reg_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_biases_read_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_weights_read_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_output_ftmap_read_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_biases_read_reg_509 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_weights_read_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_output_ftmap_read_reg_519 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_biases_read_reg_525 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_weights_read_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_ftmap_read_reg_535 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_581 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond3_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_3_read_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_conv1_fu_279_ap_start : STD_LOGIC;
    signal grp_conv1_fu_279_ap_done : STD_LOGIC;
    signal grp_conv1_fu_279_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_279_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_279_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_conv1_fu_279_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_conv1_fu_279_grp_fu_597_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_597_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_597_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_279_grp_fu_597_p_ce : STD_LOGIC;
    signal grp_conv1_fu_279_grp_fu_601_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_601_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_601_p_ce : STD_LOGIC;
    signal grp_conv1_fu_279_grp_fu_605_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_605_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_279_grp_fu_605_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv1_fu_279_grp_fu_605_p_ce : STD_LOGIC;
    signal grp_conv2_fu_293_ap_start : STD_LOGIC;
    signal grp_conv2_fu_293_ap_done : STD_LOGIC;
    signal grp_conv2_fu_293_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_293_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_293_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_conv2_fu_293_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_conv2_fu_293_grp_fu_597_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_597_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_597_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_293_grp_fu_597_p_ce : STD_LOGIC;
    signal grp_conv2_fu_293_grp_fu_601_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_601_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_601_p_ce : STD_LOGIC;
    signal grp_conv2_fu_293_grp_fu_605_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_605_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_293_grp_fu_605_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_fu_293_grp_fu_605_p_ce : STD_LOGIC;
    signal grp_conv3_fu_307_ap_start : STD_LOGIC;
    signal grp_conv3_fu_307_ap_done : STD_LOGIC;
    signal grp_conv3_fu_307_ap_idle : STD_LOGIC;
    signal grp_conv3_fu_307_ap_ready : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_307_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_conv3_fu_307_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_conv3_fu_307_grp_fu_597_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_597_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_597_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_307_grp_fu_597_p_ce : STD_LOGIC;
    signal grp_conv3_fu_307_grp_fu_601_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_601_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_601_p_ce : STD_LOGIC;
    signal grp_conv3_fu_307_grp_fu_605_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_605_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_307_grp_fu_605_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv3_fu_307_grp_fu_605_p_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal grp_conv1_fu_279_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_conv2_fu_293_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_conv3_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal sext_ln34_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_144 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_67_fu_355_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond65_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_148 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_71_fu_400_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond54_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_72_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_75_fu_445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln_fu_321_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_fu_371_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln2_fu_416_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_456_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_ce : STD_LOGIC;
    signal grp_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_601_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_601_ce : STD_LOGIC;
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_605_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_605_ce : STD_LOGIC;
    signal grp_fu_605_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_ce : OUT STD_LOGIC;
        grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_ce : OUT STD_LOGIC;
        grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_605_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        conv2_biases : IN STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_ce : OUT STD_LOGIC;
        grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_ce : OUT STD_LOGIC;
        grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_605_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_ce : OUT STD_LOGIC;
        grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_601_p_ce : OUT STD_LOGIC;
        grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_605_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv3_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv3_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component srcnn_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_conv1_fu_279 : component srcnn_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_279_ap_start,
        ap_done => grp_conv1_fu_279_ap_done,
        ap_idle => grp_conv1_fu_279_ap_idle,
        ap_ready => grp_conv1_fu_279_ap_ready,
        m_axi_gmem_AWVALID => grp_conv1_fu_279_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_conv1_fu_279_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_conv1_fu_279_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_conv1_fu_279_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_conv1_fu_279_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_conv1_fu_279_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_conv1_fu_279_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_conv1_fu_279_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_conv1_fu_279_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_conv1_fu_279_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_conv1_fu_279_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_conv1_fu_279_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_conv1_fu_279_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_conv1_fu_279_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_conv1_fu_279_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_conv1_fu_279_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_conv1_fu_279_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_conv1_fu_279_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_conv1_fu_279_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_conv1_fu_279_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_conv1_fu_279_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_conv1_fu_279_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_conv1_fu_279_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_conv1_fu_279_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_conv1_fu_279_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_conv1_fu_279_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_conv1_fu_279_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_conv1_fu_279_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_conv1_fu_279_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_conv1_fu_279_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_conv1_fu_279_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_conv1_fu_279_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_ftmap => input_ftmap_read_reg_535,
        conv1_weights => conv1_weights_read_reg_530,
        conv1_biases => conv1_biases_read_reg_525,
        output_ftmap => conv1_output_ftmap_read_reg_519,
        grp_fu_597_p_din0 => grp_conv1_fu_279_grp_fu_597_p_din0,
        grp_fu_597_p_din1 => grp_conv1_fu_279_grp_fu_597_p_din1,
        grp_fu_597_p_opcode => grp_conv1_fu_279_grp_fu_597_p_opcode,
        grp_fu_597_p_dout0 => grp_fu_597_p2,
        grp_fu_597_p_ce => grp_conv1_fu_279_grp_fu_597_p_ce,
        grp_fu_601_p_din0 => grp_conv1_fu_279_grp_fu_601_p_din0,
        grp_fu_601_p_din1 => grp_conv1_fu_279_grp_fu_601_p_din1,
        grp_fu_601_p_dout0 => grp_fu_601_p2,
        grp_fu_601_p_ce => grp_conv1_fu_279_grp_fu_601_p_ce,
        grp_fu_605_p_din0 => grp_conv1_fu_279_grp_fu_605_p_din0,
        grp_fu_605_p_din1 => grp_conv1_fu_279_grp_fu_605_p_din1,
        grp_fu_605_p_opcode => grp_conv1_fu_279_grp_fu_605_p_opcode,
        grp_fu_605_p_dout0 => grp_fu_605_p2,
        grp_fu_605_p_ce => grp_conv1_fu_279_grp_fu_605_p_ce);

    grp_conv2_fu_293 : component srcnn_conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_293_ap_start,
        ap_done => grp_conv2_fu_293_ap_done,
        ap_idle => grp_conv2_fu_293_ap_idle,
        ap_ready => grp_conv2_fu_293_ap_ready,
        m_axi_gmem_AWVALID => grp_conv2_fu_293_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_conv2_fu_293_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_conv2_fu_293_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_conv2_fu_293_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_conv2_fu_293_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_conv2_fu_293_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_conv2_fu_293_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_conv2_fu_293_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_conv2_fu_293_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_conv2_fu_293_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_conv2_fu_293_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_conv2_fu_293_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_conv2_fu_293_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_conv2_fu_293_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_conv2_fu_293_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_conv2_fu_293_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_conv2_fu_293_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_conv2_fu_293_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_conv2_fu_293_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_conv2_fu_293_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_conv2_fu_293_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_conv2_fu_293_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_conv2_fu_293_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_conv2_fu_293_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_conv2_fu_293_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_conv2_fu_293_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_conv2_fu_293_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_conv2_fu_293_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_conv2_fu_293_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_conv2_fu_293_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_conv2_fu_293_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_conv2_fu_293_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_ftmap => conv1_output_ftmap_read_reg_519,
        conv2_weights => conv2_weights_read_reg_514,
        conv2_biases => conv2_biases_read_reg_509,
        output_ftmap => conv2_output_ftmap_read_reg_502,
        grp_fu_597_p_din0 => grp_conv2_fu_293_grp_fu_597_p_din0,
        grp_fu_597_p_din1 => grp_conv2_fu_293_grp_fu_597_p_din1,
        grp_fu_597_p_opcode => grp_conv2_fu_293_grp_fu_597_p_opcode,
        grp_fu_597_p_dout0 => grp_fu_597_p2,
        grp_fu_597_p_ce => grp_conv2_fu_293_grp_fu_597_p_ce,
        grp_fu_601_p_din0 => grp_conv2_fu_293_grp_fu_601_p_din0,
        grp_fu_601_p_din1 => grp_conv2_fu_293_grp_fu_601_p_din1,
        grp_fu_601_p_dout0 => grp_fu_601_p2,
        grp_fu_601_p_ce => grp_conv2_fu_293_grp_fu_601_p_ce,
        grp_fu_605_p_din0 => grp_conv2_fu_293_grp_fu_605_p_din0,
        grp_fu_605_p_din1 => grp_conv2_fu_293_grp_fu_605_p_din1,
        grp_fu_605_p_opcode => grp_conv2_fu_293_grp_fu_605_p_opcode,
        grp_fu_605_p_dout0 => grp_fu_605_p2,
        grp_fu_605_p_ce => grp_conv2_fu_293_grp_fu_605_p_ce);

    grp_conv3_fu_307 : component srcnn_conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv3_fu_307_ap_start,
        ap_done => grp_conv3_fu_307_ap_done,
        ap_idle => grp_conv3_fu_307_ap_idle,
        ap_ready => grp_conv3_fu_307_ap_ready,
        m_axi_gmem_AWVALID => grp_conv3_fu_307_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_conv3_fu_307_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_conv3_fu_307_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_conv3_fu_307_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_conv3_fu_307_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_conv3_fu_307_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_conv3_fu_307_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_conv3_fu_307_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_conv3_fu_307_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_conv3_fu_307_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_conv3_fu_307_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_conv3_fu_307_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_conv3_fu_307_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_conv3_fu_307_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_conv3_fu_307_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_conv3_fu_307_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_conv3_fu_307_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_conv3_fu_307_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_conv3_fu_307_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_conv3_fu_307_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_conv3_fu_307_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_conv3_fu_307_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_conv3_fu_307_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_conv3_fu_307_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_conv3_fu_307_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_conv3_fu_307_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_conv3_fu_307_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_conv3_fu_307_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_conv3_fu_307_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_conv3_fu_307_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_conv3_fu_307_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_conv3_fu_307_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_ftmap => conv2_output_ftmap_read_reg_502,
        conv3_weights => conv3_weights_read_reg_497,
        conv3_biases_0_0_val => empty_77_reg_592,
        output_ftmap => output_ftmap_read_reg_486,
        grp_fu_597_p_din0 => grp_conv3_fu_307_grp_fu_597_p_din0,
        grp_fu_597_p_din1 => grp_conv3_fu_307_grp_fu_597_p_din1,
        grp_fu_597_p_opcode => grp_conv3_fu_307_grp_fu_597_p_opcode,
        grp_fu_597_p_dout0 => grp_fu_597_p2,
        grp_fu_597_p_ce => grp_conv3_fu_307_grp_fu_597_p_ce,
        grp_fu_601_p_din0 => grp_conv3_fu_307_grp_fu_601_p_din0,
        grp_fu_601_p_din1 => grp_conv3_fu_307_grp_fu_601_p_din1,
        grp_fu_601_p_dout0 => grp_fu_601_p2,
        grp_fu_601_p_ce => grp_conv3_fu_307_grp_fu_601_p_ce,
        grp_fu_605_p_din0 => grp_conv3_fu_307_grp_fu_605_p_din0,
        grp_fu_605_p_din1 => grp_conv3_fu_307_grp_fu_605_p_din1,
        grp_fu_605_p_opcode => grp_conv3_fu_307_grp_fu_605_p_opcode,
        grp_fu_605_p_dout0 => grp_fu_605_p2,
        grp_fu_605_p_ce => grp_conv3_fu_307_grp_fu_605_p_ce);

    control_s_axi_U : component srcnn_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_ftmap => input_ftmap,
        conv1_weights => conv1_weights,
        conv1_biases => conv1_biases,
        conv1_output_ftmap => conv1_output_ftmap,
        conv2_weights => conv2_weights,
        conv2_biases => conv2_biases,
        conv2_output_ftmap => conv2_output_ftmap,
        conv3_weights => conv3_weights,
        conv3_biases => conv3_biases,
        output_ftmap => output_ftmap,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component srcnn_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWLEN => gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    fadd_32ns_32ns_32_4_full_dsp_1_U36 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        ce => grp_fu_597_ce,
        dout => grp_fu_597_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U37 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_601_p0,
        din1 => grp_fu_601_p1,
        ce => grp_fu_601_ce,
        dout => grp_fu_601_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U38 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_605_p0,
        din1 => grp_fu_605_p1,
        ce => grp_fu_605_ce,
        opcode => grp_fu_605_opcode,
        dout => grp_fu_605_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_279_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv1_fu_279_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_conv1_fu_279_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_279_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_279_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_293_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2_fu_293_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_conv2_fu_293_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_293_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_293_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv3_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_conv3_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_68_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_68_fu_148 <= ap_const_lv21_0;
            elsif (((exitcond54_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                empty_68_fu_148 <= empty_71_fu_400_p2;
            end if; 
        end if;
    end process;

    empty_72_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                empty_72_fu_152 <= ap_const_lv16_0;
            elsif (((exitcond3_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                empty_72_fu_152 <= empty_75_fu_445_p2;
            end if; 
        end if;
    end process;

    empty_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_144 <= ap_const_lv22_0;
            elsif (((exitcond65_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_fu_144 <= empty_67_fu_355_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                conv1_biases_read_reg_525 <= conv1_biases;
                conv1_output_ftmap_read_reg_519 <= conv1_output_ftmap;
                conv1_weights_read_reg_530 <= conv1_weights;
                conv2_biases_read_reg_509 <= conv2_biases;
                conv2_output_ftmap_read_reg_502 <= conv2_output_ftmap;
                conv2_weights_read_reg_514 <= conv2_weights;
                conv3_biases_read_reg_492 <= conv3_biases;
                conv3_weights_read_reg_497 <= conv3_weights;
                gmem_addr_reg_540 <= sext_ln34_fu_331_p1;
                input_ftmap_read_reg_535 <= input_ftmap;
                output_ftmap_read_reg_486 <= output_ftmap;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                empty_77_reg_592 <= empty_77_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                gmem_addr_3_read_reg_587 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_3_reg_581 <= p_cast_cast_fu_465_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state17, exitcond3_fu_439_p2, grp_conv1_fu_279_ap_done, grp_conv2_fu_293_ap_done, grp_conv3_fu_307_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38, ap_CS_fsm_state3, exitcond65_fu_349_p2, ap_CS_fsm_state10, exitcond54_fu_394_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond65_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond54_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((exitcond3_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_conv1_fu_279_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_conv2_fu_293_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_conv3_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(gmem_AWREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(grp_conv1_fu_279_ap_done)
    begin
        if ((grp_conv1_fu_279_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(grp_conv2_fu_293_ap_done)
    begin
        if ((grp_conv2_fu_293_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(grp_conv3_fu_307_ap_done)
    begin
        if ((grp_conv3_fu_307_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(gmem_AWREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_conv3_fu_307_ap_done, ap_CS_fsm_state38)
    begin
        if (((grp_conv3_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_conv3_fu_307_ap_done, ap_CS_fsm_state38)
    begin
        if (((grp_conv3_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_67_fu_355_p2 <= std_logic_vector(unsigned(empty_fu_144) + unsigned(ap_const_lv22_1));
    empty_71_fu_400_p2 <= std_logic_vector(unsigned(empty_68_fu_148) + unsigned(ap_const_lv21_1));
    empty_75_fu_445_p2 <= std_logic_vector(unsigned(empty_72_fu_152) + unsigned(ap_const_lv16_1));
    empty_77_fu_475_p1 <= gmem_addr_3_read_reg_587;
    exitcond3_fu_439_p2 <= "1" when (empty_72_fu_152 = ap_const_lv16_FE01) else "0";
    exitcond54_fu_394_p2 <= "1" when (empty_68_fu_148 = ap_const_lv21_1FC020) else "0";
    exitcond65_fu_349_p2 <= "1" when (empty_fu_144 = ap_const_lv22_3F8040) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state28, gmem_addr_3_reg_581, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_ARADDR, grp_conv2_fu_293_m_axi_gmem_ARADDR, grp_conv3_fu_307_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            gmem_ARADDR <= gmem_addr_3_reg_581;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_ARADDR <= grp_conv3_fu_307_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_ARADDR <= grp_conv2_fu_293_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_ARADDR <= grp_conv1_fu_279_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_ARLEN, grp_conv2_fu_293_m_axi_gmem_ARLEN, grp_conv3_fu_307_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_ARLEN <= grp_conv3_fu_307_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_ARLEN <= grp_conv2_fu_293_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_ARLEN <= grp_conv1_fu_279_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_ARVALID, grp_conv2_fu_293_m_axi_gmem_ARVALID, grp_conv3_fu_307_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_ARVALID <= grp_conv3_fu_307_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_ARVALID <= grp_conv2_fu_293_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_ARVALID <= grp_conv1_fu_279_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state16, gmem_addr_reg_540, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_AWADDR, grp_conv2_fu_293_m_axi_gmem_AWADDR, grp_conv3_fu_307_m_axi_gmem_AWADDR, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38, sext_ln35_fu_380_p1, sext_ln36_fu_425_p1)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_AWADDR <= sext_ln36_fu_425_p1;
        elsif ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_AWADDR <= sext_ln35_fu_380_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWADDR <= gmem_addr_reg_540;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_AWADDR <= grp_conv3_fu_307_m_axi_gmem_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_AWADDR <= grp_conv2_fu_293_m_axi_gmem_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_AWADDR <= grp_conv1_fu_279_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_AWLEN, grp_conv2_fu_293_m_axi_gmem_AWLEN, grp_conv3_fu_307_m_axi_gmem_AWLEN, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_AWLEN <= ap_const_lv32_FE01;
        elsif ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_AWLEN <= ap_const_lv32_1FC020;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLEN <= ap_const_lv32_3F8040;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_AWLEN <= grp_conv3_fu_307_m_axi_gmem_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_AWLEN <= grp_conv2_fu_293_m_axi_gmem_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_AWLEN <= grp_conv1_fu_279_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_AWVALID, grp_conv2_fu_293_m_axi_gmem_AWVALID, grp_conv3_fu_307_m_axi_gmem_AWVALID, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_AWVALID <= grp_conv3_fu_307_m_axi_gmem_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_AWVALID <= grp_conv2_fu_293_m_axi_gmem_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_AWVALID <= grp_conv1_fu_279_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_BREADY, grp_conv2_fu_293_m_axi_gmem_BREADY, grp_conv3_fu_307_m_axi_gmem_BREADY, gmem_AWREADY, gmem_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_BREADY <= grp_conv3_fu_307_m_axi_gmem_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_BREADY <= grp_conv2_fu_293_m_axi_gmem_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_BREADY <= grp_conv1_fu_279_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_RREADY, grp_conv2_fu_293_m_axi_gmem_RREADY, grp_conv3_fu_307_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_RREADY <= grp_conv3_fu_307_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_RREADY <= grp_conv2_fu_293_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_RREADY <= grp_conv1_fu_279_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_WDATA, grp_conv2_fu_293_m_axi_gmem_WDATA, grp_conv3_fu_307_m_axi_gmem_WDATA, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WDATA <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_WDATA <= grp_conv3_fu_307_m_axi_gmem_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_WDATA <= grp_conv2_fu_293_m_axi_gmem_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_WDATA <= grp_conv1_fu_279_m_axi_gmem_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_WSTRB, grp_conv2_fu_293_m_axi_gmem_WSTRB, grp_conv3_fu_307_m_axi_gmem_WSTRB, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_WSTRB <= grp_conv3_fu_307_m_axi_gmem_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_WSTRB <= grp_conv2_fu_293_m_axi_gmem_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_WSTRB <= grp_conv1_fu_279_m_axi_gmem_WSTRB;
        else 
            gmem_WSTRB <= "XXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state37, grp_conv1_fu_279_m_axi_gmem_WVALID, grp_conv2_fu_293_m_axi_gmem_WVALID, grp_conv3_fu_307_m_axi_gmem_WVALID, gmem_WREADY, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            gmem_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_WVALID <= grp_conv3_fu_307_m_axi_gmem_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_WVALID <= grp_conv2_fu_293_m_axi_gmem_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_WVALID <= grp_conv1_fu_279_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_conv1_fu_279_ap_start <= grp_conv1_fu_279_ap_start_reg;
    grp_conv2_fu_293_ap_start <= grp_conv2_fu_293_ap_start_reg;
    grp_conv3_fu_307_ap_start <= grp_conv3_fu_307_ap_start_reg;

    grp_fu_597_ce_assign_proc : process(grp_conv1_fu_279_grp_fu_597_p_ce, grp_conv2_fu_293_grp_fu_597_p_ce, grp_conv3_fu_307_grp_fu_597_p_ce, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_597_ce <= grp_conv3_fu_307_grp_fu_597_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_597_ce <= grp_conv2_fu_293_grp_fu_597_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_597_ce <= grp_conv1_fu_279_grp_fu_597_p_ce;
        else 
            grp_fu_597_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_597_p0_assign_proc : process(grp_conv1_fu_279_grp_fu_597_p_din0, grp_conv2_fu_293_grp_fu_597_p_din0, grp_conv3_fu_307_grp_fu_597_p_din0, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_597_p0 <= grp_conv3_fu_307_grp_fu_597_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_597_p0 <= grp_conv2_fu_293_grp_fu_597_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_597_p0 <= grp_conv1_fu_279_grp_fu_597_p_din0;
        else 
            grp_fu_597_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_597_p1_assign_proc : process(grp_conv1_fu_279_grp_fu_597_p_din1, grp_conv2_fu_293_grp_fu_597_p_din1, grp_conv3_fu_307_grp_fu_597_p_din1, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_597_p1 <= grp_conv3_fu_307_grp_fu_597_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_597_p1 <= grp_conv2_fu_293_grp_fu_597_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_597_p1 <= grp_conv1_fu_279_grp_fu_597_p_din1;
        else 
            grp_fu_597_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_601_ce_assign_proc : process(grp_conv1_fu_279_grp_fu_601_p_ce, grp_conv2_fu_293_grp_fu_601_p_ce, grp_conv3_fu_307_grp_fu_601_p_ce, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_601_ce <= grp_conv3_fu_307_grp_fu_601_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_601_ce <= grp_conv2_fu_293_grp_fu_601_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_601_ce <= grp_conv1_fu_279_grp_fu_601_p_ce;
        else 
            grp_fu_601_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_601_p0_assign_proc : process(grp_conv1_fu_279_grp_fu_601_p_din0, grp_conv2_fu_293_grp_fu_601_p_din0, grp_conv3_fu_307_grp_fu_601_p_din0, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_601_p0 <= grp_conv3_fu_307_grp_fu_601_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_601_p0 <= grp_conv2_fu_293_grp_fu_601_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_601_p0 <= grp_conv1_fu_279_grp_fu_601_p_din0;
        else 
            grp_fu_601_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_601_p1_assign_proc : process(grp_conv1_fu_279_grp_fu_601_p_din1, grp_conv2_fu_293_grp_fu_601_p_din1, grp_conv3_fu_307_grp_fu_601_p_din1, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_601_p1 <= grp_conv3_fu_307_grp_fu_601_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_601_p1 <= grp_conv2_fu_293_grp_fu_601_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_601_p1 <= grp_conv1_fu_279_grp_fu_601_p_din1;
        else 
            grp_fu_601_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_605_ce_assign_proc : process(grp_conv1_fu_279_grp_fu_605_p_ce, grp_conv2_fu_293_grp_fu_605_p_ce, grp_conv3_fu_307_grp_fu_605_p_ce, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_605_ce <= grp_conv3_fu_307_grp_fu_605_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_605_ce <= grp_conv2_fu_293_grp_fu_605_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_605_ce <= grp_conv1_fu_279_grp_fu_605_p_ce;
        else 
            grp_fu_605_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_605_opcode_assign_proc : process(grp_conv1_fu_279_grp_fu_605_p_opcode, grp_conv2_fu_293_grp_fu_605_p_opcode, grp_conv3_fu_307_grp_fu_605_p_opcode, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_605_opcode <= grp_conv3_fu_307_grp_fu_605_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_605_opcode <= grp_conv2_fu_293_grp_fu_605_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_605_opcode <= grp_conv1_fu_279_grp_fu_605_p_opcode;
        else 
            grp_fu_605_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_605_p0_assign_proc : process(grp_conv1_fu_279_grp_fu_605_p_din0, grp_conv2_fu_293_grp_fu_605_p_din0, grp_conv3_fu_307_grp_fu_605_p_din0, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_605_p0 <= grp_conv3_fu_307_grp_fu_605_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_605_p0 <= grp_conv2_fu_293_grp_fu_605_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_605_p0 <= grp_conv1_fu_279_grp_fu_605_p_din0;
        else 
            grp_fu_605_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_605_p1_assign_proc : process(grp_conv1_fu_279_grp_fu_605_p_din1, grp_conv2_fu_293_grp_fu_605_p_din1, grp_conv3_fu_307_grp_fu_605_p_din1, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_605_p1 <= grp_conv3_fu_307_grp_fu_605_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_605_p1 <= grp_conv2_fu_293_grp_fu_605_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_605_p1 <= grp_conv1_fu_279_grp_fu_605_p_din1;
        else 
            grp_fu_605_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        p_cast_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_456_p4),64));

    p_cast_fu_456_p4 <= conv3_biases_read_reg_492(63 downto 2);
        sext_ln34_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_321_p4),64));

        sext_ln35_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_371_p4),64));

        sext_ln36_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_416_p4),64));

    trunc_ln1_fu_371_p4 <= conv2_output_ftmap_read_reg_502(63 downto 2);
    trunc_ln2_fu_416_p4 <= output_ftmap_read_reg_486(63 downto 2);
    trunc_ln_fu_321_p4 <= conv1_output_ftmap(63 downto 2);
end behav;
