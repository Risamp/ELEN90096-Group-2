-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_RELU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln113 : IN STD_LOGIC_VECTOR (9 downto 0);
    sext_ln110 : IN STD_LOGIC_VECTOR (29 downto 0);
    sext_ln113 : IN STD_LOGIC_VECTOR (29 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0 : OUT STD_LOGIC;
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0 : OUT STD_LOGIC;
    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0 : OUT STD_LOGIC;
    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_RELU is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_33 : STD_LOGIC_VECTOR (7 downto 0) := "00110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln110_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal sext_ln113_cast_fu_180_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln113_cast_reg_366 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln110_cast_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln110_cast_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln110_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln110_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_15_reg_384 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_16_reg_389 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_17_reg_394 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_18_reg_399 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_19_reg_404 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln113_2_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln110_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_urem_load_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_fu_177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_fu_86 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln110_3_fu_240_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bw_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_bw_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_246_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln115_cast_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_fu_218_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln113_2_fu_222_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_256_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_256_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln113_fu_272_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln113_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_281_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln115_fu_294_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln110_4_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln110_2_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mux_5_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_5_3_32_1_1_U471 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_q0,
        din1 => conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_q0,
        din2 => conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_q0,
        din3 => conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_q0,
        din4 => conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_q0,
        din5 => tmp_fu_256_p6,
        dout => tmp_fu_256_p7);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bw_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                bw_fu_90 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                bw_fu_90 <= add_ln110_reg_379;
            end if; 
        end if;
    end process;

    phi_mul_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                phi_mul_fu_86 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_mul_fu_86 <= add_ln110_3_fu_240_p2;
            end if; 
        end if;
    end process;

    phi_urem_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                phi_urem_fu_82 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_urem_fu_82 <= select_ln110_fu_323_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln110_reg_379 <= add_ln110_fu_212_p2;
                sext_ln110_cast_reg_371 <= sext_ln110_cast_fu_184_p1;
                sext_ln113_cast_reg_366 <= sext_ln113_cast_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_15_reg_384 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
                conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_16_reg_389 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
                conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_17_reg_394 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
                conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_18_reg_399 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
                conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_19_reg_404 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln110_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln110_3_fu_240_p2 <= std_logic_vector(unsigned(phi_mul_fu_86) + unsigned(ap_const_lv17_142));
    add_ln110_4_fu_311_p2 <= std_logic_vector(unsigned(grp_load_fu_177_p1) + unsigned(ap_const_lv8_1));
    add_ln110_fu_212_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bw_3) + unsigned(ap_const_lv8_1));
    add_ln113_2_fu_222_p2 <= std_logic_vector(unsigned(mul_ln113) + unsigned(zext_ln113_fu_218_p1));
    add_ln113_fu_276_p2 <= std_logic_vector(unsigned(tmp_fu_256_p7) + unsigned(sext_ln110_cast_reg_371));
    add_ln115_fu_281_p2 <= std_logic_vector(unsigned(trunc_ln113_fu_272_p1) + unsigned(sext_ln113_cast_reg_366));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_start_int)
    begin
        if (((icmp_ln110_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bw_3_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, bw_fu_90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bw_3 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_bw_3 <= bw_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_phi_urem_load_1_assign_proc : process(ap_CS_fsm_state1, phi_urem_fu_82, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_urem_load_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_phi_urem_load_1 <= phi_urem_fu_82;
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_18_reg_399, zext_ln113_2_fu_228_p1, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_3))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 <= conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_18_reg_399;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, trunc_ln_fu_246_p4, ap_start_int)
    begin
        if ((((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_3)))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_d0 <= select_ln115_cast_fu_302_p1;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_3))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_17_reg_394, zext_ln113_2_fu_228_p1, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_2))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 <= conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_17_reg_394;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, trunc_ln_fu_246_p4, ap_start_int)
    begin
        if ((((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_2)))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_d0 <= select_ln115_cast_fu_302_p1;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_2))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_16_reg_389, zext_ln113_2_fu_228_p1, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 <= conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_16_reg_389;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, trunc_ln_fu_246_p4, ap_start_int)
    begin
        if ((((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_1)))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_d0 <= select_ln115_cast_fu_302_p1;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_15_reg_384, zext_ln113_2_fu_228_p1, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_0))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 <= conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_15_reg_384;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, trunc_ln_fu_246_p4, ap_start_int)
    begin
        if ((((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_0)))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_d0 <= select_ln115_cast_fu_302_p1;

    conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln_fu_246_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln_fu_246_p4 = ap_const_lv3_0))) then 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0 <= ap_const_logic_1;
        else 
            conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_19_reg_404, zext_ln113_2_fu_228_p1, trunc_ln_fu_246_p4)
    begin
        if ((not((trunc_ln_fu_246_p4 = ap_const_lv3_3)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_2)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_1)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 <= conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_19_reg_404;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 <= zext_ln113_2_fu_228_p1(10 - 1 downto 0);
        else 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, trunc_ln_fu_246_p4, ap_start_int)
    begin
        if ((((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((trunc_ln_fu_246_p4 = ap_const_lv3_3)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_2)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_1)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0 <= ap_const_logic_1;
        else 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_d0 <= select_ln115_cast_fu_302_p1;

    conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln_fu_246_p4)
    begin
        if ((not((trunc_ln_fu_246_p4 = ap_const_lv3_3)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_2)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_1)) and not((trunc_ln_fu_246_p4 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0 <= ap_const_logic_1;
        else 
            conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_load_fu_177_p1_assign_proc : process(ap_CS_fsm_state1, icmp_ln110_fu_206_p2, ap_CS_fsm_state2, phi_urem_fu_82, ap_sig_allocacmp_phi_urem_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_177_p1 <= phi_urem_fu_82;
        elsif (((icmp_ln110_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_load_fu_177_p1 <= ap_sig_allocacmp_phi_urem_load_1;
        else 
            grp_load_fu_177_p1 <= "XXXXXXXX";
        end if; 
    end process;

    icmp_ln110_2_fu_317_p2 <= "1" when (unsigned(add_ln110_4_fu_311_p2) < unsigned(ap_const_lv8_33)) else "0";
    icmp_ln110_fu_206_p2 <= "1" when (ap_sig_allocacmp_bw_3 = ap_const_lv8_FF) else "0";
    select_ln110_fu_323_p3 <= 
        add_ln110_4_fu_311_p2 when (icmp_ln110_2_fu_317_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln115_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln115_fu_294_p3),32));
    select_ln115_fu_294_p3 <= 
        ap_const_lv31_0 when (tmp_111_fu_286_p3(0) = '1') else 
        add_ln115_fu_281_p2;
        sext_ln110_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln110),32));

        sext_ln113_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln113),31));

    tmp_111_fu_286_p3 <= add_ln113_fu_276_p2(31 downto 31);
    tmp_fu_256_p6 <= phi_mul_fu_86(16 downto 14);
    trunc_ln113_fu_272_p1 <= tmp_fu_256_p7(31 - 1 downto 0);
    trunc_ln_fu_246_p4 <= phi_mul_fu_86(16 downto 14);
    zext_ln113_2_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_2_fu_222_p2),64));
    zext_ln113_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_load_fu_177_p1),10));
end behav;
