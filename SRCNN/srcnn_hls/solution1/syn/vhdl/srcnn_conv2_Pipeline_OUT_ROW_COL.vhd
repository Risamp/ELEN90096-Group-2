-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_OUT_ROW_COL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_buffer_ce0 : OUT STD_LOGIC;
    weight_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_fm_buffer_ce0 : OUT STD_LOGIC;
    input_fm_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_fm_buffer_ce0 : OUT STD_LOGIC;
    output_fm_buffer_we0 : OUT STD_LOGIC;
    output_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_fm_buffer_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_fm_buffer_ce1 : OUT STD_LOGIC;
    output_fm_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_OUT_ROW_COL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_2FD00 : STD_LOGIC_VECTOR (17 downto 0) := "101111110100000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv17_BF40 : STD_LOGIC_VECTOR (16 downto 0) := "01011111101000000";
    constant ap_const_lv10_2FD : STD_LOGIC_VECTOR (9 downto 0) := "1011111101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln40_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_767_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_771_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_reg_780_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_785_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_790_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_797_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_7_fu_360_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln40_7_reg_807 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln41_1_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln41_1_reg_818 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln41_2_fu_514_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln41_2_reg_829 : STD_LOGIC_VECTOR (17 downto 0);
    signal output_fm_buffer_addr_reg_839 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal p_cast18_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast18_mid173_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast18_mid1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_8_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_9_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_104 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln43_1_fu_566_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten31_fu_108 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln43_2_fu_283_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten48_fu_116 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln41_3_fu_297_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal o_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten91_fu_124 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln40_1_fu_235_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln43_1_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_1_fu_291_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_204_fu_330_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_326_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_205_fu_367_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln40_fu_353_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln41_fu_384_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_207_fu_401_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_206_fu_397_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_fu_437_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_1_fu_444_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_434_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln46_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_474_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_3_fu_481_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_2_fu_471_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln46_1_fu_485_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_1_fu_499_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln41_2_fu_503_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln41_fu_495_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln40_8_fu_507_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln41_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_464_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln41_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_542_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln46_1_cast_fu_491_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln46_5_fu_578_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_1_fu_582_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln46_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_596_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln46_1_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln40_fu_454_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_4_fu_574_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_2_fu_610_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln46_1_fu_620_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_fu_624_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln46_2_fu_616_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln43_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln46_2_fu_604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln46_7_fu_642_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_3_fu_646_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln46_3_fu_632_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln46_6_fu_638_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln46_4_fu_657_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln3_fu_693_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln46_fu_187_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln46_fu_701_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_589 : BOOLEAN;
    signal ap_condition_594 : BOOLEAN;
    signal ap_condition_587 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_32s_18s_49_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_18s_49_1_1_U199 : component srcnn_mul_32s_18s_49_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 49)
    port map (
        din0 => input_fm_buffer_q0,
        din1 => select_ln41_2_reg_829,
        dout => mul_ln46_fu_187_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    c_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    c_fu_100 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln40_reg_767_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c_fu_100 <= add_ln44_fu_668_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    i_fu_112 <= ap_const_lv7_0;
                elsif (((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    i_fu_112 <= select_ln41_1_fu_390_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten31_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten31_fu_108 <= ap_const_lv10_0;
                elsif (((icmp_ln40_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten31_fu_108 <= select_ln43_2_fu_283_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten48_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten48_fu_116 <= ap_const_lv17_0;
                elsif (((icmp_ln40_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten48_fu_116 <= select_ln41_3_fu_297_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten91_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten91_fu_124 <= ap_const_lv18_0;
                elsif (((icmp_ln40_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten91_fu_124 <= add_ln40_1_fu_235_p2;
                end if;
            end if; 
        end if;
    end process;

    o_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    o_fu_120 <= ap_const_lv3_0;
                elsif (((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    o_fu_120 <= select_ln40_7_fu_360_p3;
                end if;
            end if; 
        end if;
    end process;

    r_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    r_fu_104 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln40_reg_767_pp0_iter2_reg = ap_const_lv1_0))) then 
                    r_fu_104 <= select_ln43_1_fu_566_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln40_1_reg_790 <= and_ln40_1_fu_265_p2;
                icmp_ln41_reg_771 <= icmp_ln41_fu_247_p2;
                icmp_ln43_reg_785 <= icmp_ln43_fu_259_p2;
                or_ln41_reg_797 <= or_ln41_fu_271_p2;
                xor_ln40_reg_780 <= xor_ln40_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln40_1_reg_790_pp0_iter2_reg <= and_ln40_1_reg_790;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln40_reg_767_pp0_iter2_reg <= icmp_ln40_reg_767;
                icmp_ln41_reg_771_pp0_iter2_reg <= icmp_ln41_reg_771;
                icmp_ln43_reg_785_pp0_iter2_reg <= icmp_ln43_reg_785;
                or_ln41_reg_797_pp0_iter2_reg <= or_ln41_reg_797;
                xor_ln40_reg_780_pp0_iter2_reg <= xor_ln40_reg_780;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln40_reg_767 <= icmp_ln40_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_reg_767_pp0_iter2_reg = ap_const_lv1_0))) then
                output_fm_buffer_addr_reg_839 <= zext_ln46_9_fu_663_p1(12 - 1 downto 0);
                select_ln41_2_reg_829 <= select_ln41_2_fu_514_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln40_7_reg_807 <= select_ln40_7_fu_360_p3;
                select_ln41_1_reg_818 <= select_ln41_1_fu_390_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_1_fu_235_p2 <= std_logic_vector(unsigned(indvar_flatten91_fu_124) + unsigned(ap_const_lv18_1));
    add_ln40_fu_347_p2 <= std_logic_vector(unsigned(o_fu_120) + unsigned(ap_const_lv3_1));
    add_ln41_1_fu_291_p2 <= std_logic_vector(unsigned(indvar_flatten48_fu_116) + unsigned(ap_const_lv17_1));
    add_ln41_fu_384_p2 <= std_logic_vector(unsigned(select_ln40_fu_353_p3) + unsigned(ap_const_lv7_1));
    add_ln43_1_fu_277_p2 <= std_logic_vector(unsigned(indvar_flatten31_fu_108) + unsigned(ap_const_lv10_1));
    add_ln43_fu_542_p2 <= std_logic_vector(unsigned(select_ln41_fu_464_p3) + unsigned(ap_const_lv2_1));
    add_ln44_fu_668_p2 <= std_logic_vector(unsigned(select_ln43_fu_558_p3) + unsigned(ap_const_lv8_1));
    add_ln46_1_fu_582_p2 <= std_logic_vector(signed(sub_ln46_1_cast_fu_491_p1) + signed(zext_ln46_5_fu_578_p1));
    add_ln46_2_fu_610_p2 <= std_logic_vector(signed(sext_ln40_fu_454_p1) + signed(zext_ln46_4_fu_574_p1));
    add_ln46_3_fu_646_p2 <= std_logic_vector(unsigned(sub_ln46_2_fu_604_p2) + unsigned(zext_ln46_7_fu_642_p1));
    add_ln46_4_fu_657_p2 <= std_logic_vector(unsigned(sub_ln46_3_fu_632_p2) + unsigned(zext_ln46_6_fu_638_p1));
    add_ln46_fu_701_p2 <= std_logic_vector(unsigned(shl_ln3_fu_693_p3) + unsigned(mul_ln46_fu_187_p2));
    and_ln40_1_fu_265_p2 <= (xor_ln40_fu_253_p2 and icmp_ln43_fu_259_p2);
    and_ln40_fu_531_p2 <= (xor_ln40_reg_780_pp0_iter2_reg and or_ln41_1_fu_526_p2);
    and_ln41_fu_536_p2 <= (icmp_ln44_fu_458_p2 and and_ln40_fu_531_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_587_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln40_reg_767, ap_block_pp0_stage0)
    begin
                ap_condition_587 <= ((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_589_assign_proc : process(icmp_ln41_reg_771, icmp_ln43_reg_785, and_ln40_1_reg_790)
    begin
                ap_condition_589 <= ((icmp_ln43_reg_785 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_1_reg_790) and (icmp_ln41_reg_771 = ap_const_lv1_0));
    end process;


    ap_condition_594_assign_proc : process(icmp_ln41_reg_771, icmp_ln43_reg_785, and_ln40_1_reg_790)
    begin
                ap_condition_594 <= ((ap_const_lv1_1 = and_ln40_1_reg_790) and (icmp_ln43_reg_785 = ap_const_lv1_1) and (icmp_ln41_reg_771 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln40_fu_229_p2)
    begin
        if (((icmp_ln40_fu_229_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln40_reg_767_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln40_reg_767_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_204_fu_330_p1 <= o_fu_120(2 - 1 downto 0);
    empty_205_fu_367_p1 <= add_ln40_fu_347_p2(2 - 1 downto 0);
    empty_206_fu_397_p1 <= add_ln41_fu_384_p2(6 - 1 downto 0);
    empty_207_fu_401_p1 <= select_ln40_7_fu_360_p3(2 - 1 downto 0);
    empty_fu_326_p1 <= i_fu_112(6 - 1 downto 0);
    icmp_ln40_fu_229_p2 <= "1" when (indvar_flatten91_fu_124 = ap_const_lv18_2FD00) else "0";
    icmp_ln41_fu_247_p2 <= "1" when (indvar_flatten48_fu_116 = ap_const_lv17_BF40) else "0";
    icmp_ln43_fu_259_p2 <= "1" when (indvar_flatten31_fu_108 = ap_const_lv10_2FD) else "0";
    icmp_ln44_fu_458_p2 <= "1" when (c_fu_100 = ap_const_lv8_FF) else "0";
    input_fm_buffer_address0 <= zext_ln46_8_fu_652_p1(16 - 1 downto 0);

    input_fm_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln41_1_fu_526_p2 <= (xor_ln41_fu_521_p2 or icmp_ln41_reg_771_pp0_iter2_reg);
    or_ln41_fu_271_p2 <= (icmp_ln41_fu_247_p2 or and_ln40_1_fu_265_p2);
    or_ln43_1_fu_553_p2 <= (or_ln43_fu_548_p2 or icmp_ln41_reg_771_pp0_iter2_reg);
    or_ln43_fu_548_p2 <= (and_ln41_fu_536_p2 or and_ln40_1_reg_790_pp0_iter2_reg);
    output_fm_buffer_address0 <= output_fm_buffer_addr_reg_839;
    output_fm_buffer_address1 <= zext_ln46_9_fu_663_p1(12 - 1 downto 0);

    output_fm_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_fm_buffer_ce1 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_fm_buffer_d0 <= add_ln46_fu_701_p2(48 downto 17);

    output_fm_buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast18_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_334_p3),64));
    p_cast18_mid173_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_371_p3),64));
    p_cast18_mid1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_405_p3),64));
    p_mid1_fu_405_p3 <= (empty_207_fu_401_p1 & empty_206_fu_397_p1);
    p_mid_fu_371_p3 <= (empty_205_fu_367_p1 & ap_const_lv6_0);
    p_shl1_fu_596_p3 <= (trunc_ln46_fu_592_p1 & ap_const_lv8_0);
    p_shl2_fu_624_p3 <= (trunc_ln46_1_fu_620_p1 & ap_const_lv8_0);
    p_shl_fu_474_p3 <= (select_ln41_1_reg_818 & ap_const_lv2_0);
    select_ln40_7_fu_360_p3 <= 
        add_ln40_fu_347_p2 when (icmp_ln41_reg_771(0) = '1') else 
        o_fu_120;
    select_ln40_8_fu_507_p3 <= 
        trunc_ln41_1_fu_499_p1 when (icmp_ln41_reg_771_pp0_iter2_reg(0) = '1') else 
        trunc_ln41_2_fu_503_p1;
    select_ln40_fu_353_p3 <= 
        ap_const_lv7_0 when (icmp_ln41_reg_771(0) = '1') else 
        i_fu_112;
    select_ln41_1_fu_390_p3 <= 
        add_ln41_fu_384_p2 when (and_ln40_1_reg_790(0) = '1') else 
        select_ln40_fu_353_p3;
    select_ln41_2_fu_514_p3 <= 
        trunc_ln41_fu_495_p1 when (and_ln40_1_reg_790_pp0_iter2_reg(0) = '1') else 
        select_ln40_8_fu_507_p3;
    select_ln41_3_fu_297_p3 <= 
        ap_const_lv17_1 when (icmp_ln41_fu_247_p2(0) = '1') else 
        add_ln41_1_fu_291_p2;
    select_ln41_fu_464_p3 <= 
        ap_const_lv2_0 when (or_ln41_reg_797_pp0_iter2_reg(0) = '1') else 
        r_fu_104;
    select_ln43_1_fu_566_p3 <= 
        add_ln43_fu_542_p2 when (and_ln41_fu_536_p2(0) = '1') else 
        select_ln41_fu_464_p3;
    select_ln43_2_fu_283_p3 <= 
        ap_const_lv10_1 when (or_ln41_fu_271_p2(0) = '1') else 
        add_ln43_1_fu_277_p2;
    select_ln43_fu_558_p3 <= 
        ap_const_lv8_0 when (or_ln43_1_fu_553_p2(0) = '1') else 
        c_fu_100;
        sext_ln40_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln46_fu_448_p2),7));

        sext_ln46_1_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_1_fu_582_p2),16));

        sext_ln46_2_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_2_fu_610_p2),12));

    shl_ln3_fu_693_p3 <= (output_fm_buffer_q1 & ap_const_lv17_0);
        sub_ln46_1_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln46_1_fu_485_p2),11));

    sub_ln46_1_fu_485_p2 <= std_logic_vector(unsigned(zext_ln46_3_fu_481_p1) - unsigned(zext_ln46_2_fu_471_p1));
    sub_ln46_2_fu_604_p2 <= std_logic_vector(unsigned(p_shl1_fu_596_p3) - unsigned(sext_ln46_1_fu_588_p1));
    sub_ln46_3_fu_632_p2 <= std_logic_vector(unsigned(p_shl2_fu_624_p3) - unsigned(sext_ln46_2_fu_616_p1));
    sub_ln46_fu_448_p2 <= std_logic_vector(unsigned(zext_ln46_1_fu_444_p1) - unsigned(zext_ln46_fu_434_p1));
    tmp_124_fu_437_p3 <= (select_ln40_7_reg_807 & ap_const_lv2_0);
    tmp_s_fu_334_p3 <= (empty_204_fu_330_p1 & empty_fu_326_p1);
    trunc_ln41_1_fu_499_p1 <= weight_buffer_q0(18 - 1 downto 0);
    trunc_ln41_2_fu_503_p1 <= weight_buffer_q0(18 - 1 downto 0);
    trunc_ln41_fu_495_p1 <= weight_buffer_q0(18 - 1 downto 0);
    trunc_ln46_1_fu_620_p1 <= add_ln46_2_fu_610_p2(4 - 1 downto 0);
    trunc_ln46_fu_592_p1 <= add_ln46_1_fu_582_p2(8 - 1 downto 0);

    weight_buffer_address0_assign_proc : process(icmp_ln41_reg_771, and_ln40_1_reg_790, p_cast18_fu_342_p1, p_cast18_mid173_fu_379_p1, p_cast18_mid1_fu_413_p1, ap_condition_589, ap_condition_594, ap_condition_587)
    begin
        if ((ap_const_boolean_1 = ap_condition_587)) then
            if ((ap_const_boolean_1 = ap_condition_594)) then 
                weight_buffer_address0 <= p_cast18_mid1_fu_413_p1(8 - 1 downto 0);
            elsif (((ap_const_lv1_0 = and_ln40_1_reg_790) and (icmp_ln41_reg_771 = ap_const_lv1_1))) then 
                weight_buffer_address0 <= p_cast18_mid173_fu_379_p1(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_589)) then 
                weight_buffer_address0 <= p_cast18_fu_342_p1(8 - 1 downto 0);
            else 
                weight_buffer_address0 <= "XXXXXXXX";
            end if;
        else 
            weight_buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weight_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln40_reg_767, icmp_ln41_reg_771, icmp_ln43_reg_785, and_ln40_1_reg_790)
    begin
        if ((((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln43_reg_785 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_1_reg_790) and (icmp_ln41_reg_771 = ap_const_lv1_0)) or ((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln40_1_reg_790) and (icmp_ln41_reg_771 = ap_const_lv1_1)) or ((icmp_ln40_reg_767 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln40_1_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln43_reg_785 = ap_const_lv1_1) and (icmp_ln41_reg_771 = ap_const_lv1_0)))) then 
            weight_buffer_ce0 <= ap_const_logic_1;
        else 
            weight_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln40_fu_253_p2 <= (icmp_ln41_fu_247_p2 xor ap_const_lv1_1);
    xor_ln41_fu_521_p2 <= (icmp_ln43_reg_785_pp0_iter2_reg xor ap_const_lv1_1);
    zext_ln46_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_437_p3),6));
    zext_ln46_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_1_reg_818),10));
    zext_ln46_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_474_p3),10));
    zext_ln46_4_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_1_fu_566_p3),7));
    zext_ln46_5_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_1_fu_566_p3),11));
    zext_ln46_6_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_fu_558_p3),12));
    zext_ln46_7_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_fu_558_p3),16));
    zext_ln46_8_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_3_fu_646_p2),64));
    zext_ln46_9_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_4_fu_657_p2),64));
    zext_ln46_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_7_reg_807),6));
end behav;
