-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_Pipeline_EXPORT_ROW_L is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i2_AWVALID : OUT STD_LOGIC;
    m_axi_i2_AWREADY : IN STD_LOGIC;
    m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WVALID : OUT STD_LOGIC;
    m_axi_i2_WREADY : IN STD_LOGIC;
    m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_WLAST : OUT STD_LOGIC;
    m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARVALID : OUT STD_LOGIC;
    m_axi_i2_ARREADY : IN STD_LOGIC;
    m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RVALID : IN STD_LOGIC;
    m_axi_i2_RREADY : OUT STD_LOGIC;
    m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_RLAST : IN STD_LOGIC;
    m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BVALID : IN STD_LOGIC;
    m_axi_i2_BREADY : OUT STD_LOGIC;
    m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    trunc_ln141_mid2 : IN STD_LOGIC_VECTOR (5 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln158 : IN STD_LOGIC_VECTOR (18 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv1_Pipeline_EXPORT_ROW_L is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_EF1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111011110001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv15_7788 : STD_LOGIC_VECTOR (14 downto 0) := "111011110001000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_EF1 : STD_LOGIC_VECTOR (11 downto 0) := "111011110001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal or_ln159_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_2_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op119_writereq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal empty_99_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op137_writeresp_state9 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln158_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i2_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i2_blk_n_W : STD_LOGIC;
    signal i2_blk_n_AW : STD_LOGIC;
    signal first_iter_0_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_01_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln158_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln158_cast_reg_773 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln158_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln159_mid2_v_reg_782 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln159_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln159_1_fu_524_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln159_1_reg_791 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln159_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_reg_841_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_845_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_697_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_292_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_first_iter_01_phi_fu_303_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast1_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln158_1_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loop_index_i42_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_98_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bh_1_fu_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln159_3_fu_600_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten89_fu_134 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln159_4_fu_654_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal bout_fu_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln158_1_fu_405_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten120_fu_142 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln158_4_fu_367_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln159_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln158_fu_379_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln158_fu_413_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln158_1_fu_417_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln158_fu_426_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln158_fu_426_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln158_fu_426_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln158_2_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln158_2_fu_436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln158_3_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln159_fu_349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln158_1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond142251005_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln158_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln158_fu_391_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln158_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln158_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln159_fu_494_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln159_1_fu_520_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln158_2_fu_456_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln158_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln159_2_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_552_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_101_fu_548_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl4_fu_566_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_38_cast_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln159_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln159_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_102_fu_576_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln159_cast_fu_608_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_103_fu_612_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln159_1_fu_648_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln158_fu_426_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_6ns_19ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component srcnn_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_6ns_19ns_24_1_1_U159 : component srcnn_mul_6ns_19ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln158_fu_426_p0,
        din1 => mul_ln158_fu_426_p1,
        dout => mul_ln158_fu_426_p2);

    mux_8_3_32_1_1_U160 : component srcnn_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_q0,
        din4 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_q0,
        din5 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_q0,
        din6 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0,
        din7 => conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0,
        din8 => select_ln159_1_reg_791,
        dout => tmp_4_fu_697_p10);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    bh_1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bh_1_fu_130 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0))) then 
                    bh_1_fu_130 <= select_ln159_3_fu_600_p3;
                end if;
            end if; 
        end if;
    end process;

    bout_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bout_fu_138 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0))) then 
                    bout_fu_138 <= select_ln158_1_fu_405_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_01_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln158_reg_778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_01_reg_299 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_01_reg_299 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    first_iter_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln158_reg_778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_288 <= or_ln159_2_reg_796;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_288 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten120_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten120_fu_142 <= ap_const_lv15_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0))) then 
                    indvar_flatten120_fu_142 <= add_ln158_4_fu_367_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten89_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten89_fu_134 <= ap_const_lv12_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0))) then 
                    indvar_flatten89_fu_134 <= select_ln159_4_fu_654_p3;
                end if;
            end if; 
        end if;
    end process;

    loop_index_i42_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index_i42_fu_126 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0))) then 
                    loop_index_i42_fu_126 <= empty_98_fu_630_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln158_reg_778 <= icmp_ln158_fu_361_p2;
                sext_ln158_cast_reg_773 <= sext_ln158_cast_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                empty_99_reg_841_pp0_iter2_reg <= empty_99_reg_841;
                empty_99_reg_841_pp0_iter3_reg <= empty_99_reg_841_pp0_iter2_reg;
                empty_99_reg_841_pp0_iter4_reg <= empty_99_reg_841_pp0_iter3_reg;
                empty_99_reg_841_pp0_iter5_reg <= empty_99_reg_841_pp0_iter4_reg;
                empty_99_reg_841_pp0_iter6_reg <= empty_99_reg_841_pp0_iter5_reg;
                empty_99_reg_841_pp0_iter7_reg <= empty_99_reg_841_pp0_iter6_reg;
                icmp_ln159_1_reg_845_pp0_iter2_reg <= icmp_ln159_1_reg_845;
                icmp_ln159_1_reg_845_pp0_iter3_reg <= icmp_ln159_1_reg_845_pp0_iter2_reg;
                icmp_ln159_1_reg_845_pp0_iter4_reg <= icmp_ln159_1_reg_845_pp0_iter3_reg;
                icmp_ln159_1_reg_845_pp0_iter5_reg <= icmp_ln159_1_reg_845_pp0_iter4_reg;
                icmp_ln159_1_reg_845_pp0_iter6_reg <= icmp_ln159_1_reg_845_pp0_iter5_reg;
                icmp_ln159_1_reg_845_pp0_iter7_reg <= icmp_ln159_1_reg_845_pp0_iter6_reg;
                tmp_4_reg_849 <= tmp_4_fu_697_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_99_reg_841 <= empty_99_fu_636_p2;
                icmp_ln159_1_reg_845 <= icmp_ln159_1_fu_642_p2;
                or_ln159_reg_787 <= or_ln159_fu_500_p2;
                select_ln159_1_reg_791 <= select_ln159_1_fu_524_p3;
                sext_ln159_mid2_v_reg_782 <= add_ln158_3_fu_441_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln158_fu_361_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln159_2_reg_796 <= or_ln159_2_fu_594_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln158_1_fu_417_p2 <= std_logic_vector(unsigned(zext_ln158_fu_413_p1) + unsigned(trunc_ln141_mid2));
    add_ln158_2_fu_436_p2 <= std_logic_vector(unsigned(zext_ln158_2_fu_432_p1) + unsigned(output_ftmap));
    add_ln158_3_fu_441_p2 <= std_logic_vector(unsigned(add_ln158_2_fu_436_p2) + unsigned(sext_ln158_cast_reg_773));
    add_ln158_4_fu_367_p2 <= std_logic_vector(unsigned(indvar_flatten120_fu_142) + unsigned(ap_const_lv15_1));
    add_ln158_fu_379_p2 <= std_logic_vector(unsigned(bout_fu_138) + unsigned(ap_const_lv4_1));
    add_ln159_1_fu_648_p2 <= std_logic_vector(unsigned(indvar_flatten89_fu_134) + unsigned(ap_const_lv12_1));
    add_ln159_fu_494_p2 <= std_logic_vector(unsigned(select_ln158_fu_391_p3) + unsigned(ap_const_lv4_1));
    and_ln158_1_fu_470_p2 <= (xor_ln158_1_fu_464_p2 and tmp_fu_353_p3);
    and_ln158_fu_488_p2 <= (xor_ln158_fu_476_p2 and exitcond142251005_fu_482_p2);
    and_ln159_fu_588_p2 <= (xor_ln159_fu_582_p2 and ap_phi_mux_first_iter_0_phi_fu_292_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_i2_BVALID, ap_predicate_op137_writeresp_state9)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_i2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, m_axi_i2_WREADY, m_axi_i2_BVALID, ap_block_state3_io, ap_predicate_op137_writeresp_state9)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_i2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1)) or ((m_axi_i2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, m_axi_i2_WREADY, m_axi_i2_BVALID, ap_block_state3_io, ap_predicate_op137_writeresp_state9)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_i2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1)) or ((m_axi_i2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_i2_AWREADY, ap_predicate_op119_writereq_state3)
    begin
                ap_block_state3_io <= ((m_axi_i2_AWREADY = ap_const_logic_0) and (ap_predicate_op119_writereq_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_i2_BVALID, ap_predicate_op137_writeresp_state9)
    begin
                ap_block_state9_pp0_stage0_iter8 <= ((m_axi_i2_BVALID = ap_const_logic_0) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln158_fu_361_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln158_fu_361_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_01_phi_fu_303_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_01_reg_299, icmp_ln158_reg_778)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln158_reg_778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_01_phi_fu_303_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_01_phi_fu_303_p4 <= first_iter_01_reg_299;
        end if; 
    end process;


    ap_phi_mux_first_iter_0_phi_fu_292_p4_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln159_2_reg_796, ap_block_pp0_stage0, first_iter_0_reg_288, icmp_ln158_reg_778)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln158_reg_778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_292_p4 <= or_ln159_2_reg_796;
        else 
            ap_phi_mux_first_iter_0_phi_fu_292_p4 <= first_iter_0_reg_288;
        end if; 
    end process;


    ap_predicate_op119_writereq_state3_assign_proc : process(or_ln159_reg_787, or_ln159_2_reg_796)
    begin
                ap_predicate_op119_writereq_state3 <= ((or_ln159_2_reg_796 = ap_const_lv1_1) and (or_ln159_reg_787 = ap_const_lv1_1));
    end process;


    ap_predicate_op137_writeresp_state9_assign_proc : process(empty_99_reg_841_pp0_iter7_reg, icmp_ln159_1_reg_845_pp0_iter7_reg)
    begin
                ap_predicate_op137_writeresp_state9 <= ((icmp_ln159_1_reg_845_pp0_iter7_reg = ap_const_lv1_1) and (empty_99_reg_841_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 <= p_cast1_fu_618_p1(12 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_101_fu_548_p1 <= select_ln158_1_fu_405_p3(3 - 1 downto 0);
    empty_102_fu_576_p2 <= std_logic_vector(unsigned(p_shl4_fu_566_p4) - unsigned(tmp_38_cast_fu_562_p1));
    empty_103_fu_612_p2 <= std_logic_vector(unsigned(empty_102_fu_576_p2) + unsigned(select_ln159_cast_fu_608_p1));
    empty_98_fu_630_p2 <= std_logic_vector(unsigned(select_ln159_fu_512_p3) + unsigned(ap_const_lv8_1));
    empty_99_fu_636_p2 <= "1" when (empty_98_fu_630_p2 = ap_const_lv8_FF) else "0";
    exitcond142251005_fu_482_p2 <= "1" when (loop_index_i42_fu_126 = ap_const_lv8_FF) else "0";

    i2_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_i2_AWREADY, ap_predicate_op119_writereq_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op119_writereq_state3 = ap_const_boolean_1))) then 
            i2_blk_n_AW <= m_axi_i2_AWREADY;
        else 
            i2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    i2_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_i2_BVALID, ap_predicate_op137_writeresp_state9, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1))) then 
            i2_blk_n_B <= m_axi_i2_BVALID;
        else 
            i2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    i2_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_i2_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            i2_blk_n_W <= m_axi_i2_WREADY;
        else 
            i2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln158_fu_361_p2 <= "1" when (indvar_flatten120_fu_142 = ap_const_lv15_7788) else "0";
    icmp_ln159_1_fu_642_p2 <= "1" when (select_ln159_3_fu_600_p3 = ap_const_lv4_E) else "0";
    icmp_ln159_fu_385_p2 <= "1" when (indvar_flatten89_fu_134 = ap_const_lv12_EF1) else "0";
    m_axi_i2_ARADDR <= ap_const_lv64_0;
    m_axi_i2_ARBURST <= ap_const_lv2_0;
    m_axi_i2_ARCACHE <= ap_const_lv4_0;
    m_axi_i2_ARID <= ap_const_lv1_0;
    m_axi_i2_ARLEN <= ap_const_lv32_0;
    m_axi_i2_ARLOCK <= ap_const_lv2_0;
    m_axi_i2_ARPROT <= ap_const_lv3_0;
    m_axi_i2_ARQOS <= ap_const_lv4_0;
    m_axi_i2_ARREGION <= ap_const_lv4_0;
    m_axi_i2_ARSIZE <= ap_const_lv3_0;
    m_axi_i2_ARUSER <= ap_const_lv1_0;
    m_axi_i2_ARVALID <= ap_const_logic_0;
    m_axi_i2_AWADDR <= sext_ln158_1_fu_687_p1;
    m_axi_i2_AWBURST <= ap_const_lv2_0;
    m_axi_i2_AWCACHE <= ap_const_lv4_0;
    m_axi_i2_AWID <= ap_const_lv1_0;
    m_axi_i2_AWLEN <= ap_const_lv32_EF1;
    m_axi_i2_AWLOCK <= ap_const_lv2_0;
    m_axi_i2_AWPROT <= ap_const_lv3_0;
    m_axi_i2_AWQOS <= ap_const_lv4_0;
    m_axi_i2_AWREGION <= ap_const_lv4_0;
    m_axi_i2_AWSIZE <= ap_const_lv3_0;
    m_axi_i2_AWUSER <= ap_const_lv1_0;

    m_axi_i2_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op119_writereq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op119_writereq_state3 = ap_const_boolean_1))) then 
            m_axi_i2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_i2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_i2_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op137_writeresp_state9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op137_writeresp_state9 = ap_const_boolean_1))) then 
            m_axi_i2_BREADY <= ap_const_logic_1;
        else 
            m_axi_i2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_RREADY <= ap_const_logic_0;
    m_axi_i2_WDATA <= tmp_4_reg_849;
    m_axi_i2_WID <= ap_const_lv1_0;
    m_axi_i2_WLAST <= ap_const_logic_0;
    m_axi_i2_WSTRB <= ap_const_lv4_F;
    m_axi_i2_WUSER <= ap_const_lv1_0;

    m_axi_i2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_i2_WVALID <= ap_const_logic_1;
        else 
            m_axi_i2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln158_fu_426_p0 <= mul_ln158_fu_426_p00(6 - 1 downto 0);
    mul_ln158_fu_426_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_1_fu_417_p2),24));
    mul_ln158_fu_426_p1 <= ap_const_lv24_3F804(19 - 1 downto 0);
    or_ln158_fu_399_p2 <= (icmp_ln159_fu_385_p2 or ap_phi_mux_first_iter_01_phi_fu_303_p4);
    or_ln159_1_fu_506_p2 <= (icmp_ln159_fu_385_p2 or and_ln158_fu_488_p2);
    or_ln159_2_fu_594_p2 <= (icmp_ln159_fu_385_p2 or and_ln159_fu_588_p2);
    or_ln159_fu_500_p2 <= (or_ln158_fu_399_p2 or and_ln158_fu_488_p2);
    p_cast1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_103_fu_612_p2),64));
    p_shl4_fu_566_p4 <= ((empty_101_fu_548_p1 & select_ln159_2_fu_540_p3) & ap_const_lv8_0);
    select_ln158_1_fu_405_p3 <= 
        add_ln158_fu_379_p2 when (icmp_ln159_fu_385_p2(0) = '1') else 
        bout_fu_138;
    select_ln158_2_fu_456_p3 <= 
        ap_const_lv3_0 when (icmp_ln159_fu_385_p2(0) = '1') else 
        trunc_ln159_fu_349_p1;
    select_ln158_fu_391_p3 <= 
        ap_const_lv4_0 when (icmp_ln159_fu_385_p2(0) = '1') else 
        bh_1_fu_130;
    select_ln159_1_fu_524_p3 <= 
        trunc_ln159_1_fu_520_p1 when (and_ln158_fu_488_p2(0) = '1') else 
        select_ln158_2_fu_456_p3;
    select_ln159_2_fu_540_p3 <= 
        tmp_17_fu_532_p3 when (and_ln158_fu_488_p2(0) = '1') else 
        and_ln158_1_fu_470_p2;
    select_ln159_3_fu_600_p3 <= 
        add_ln159_fu_494_p2 when (and_ln158_fu_488_p2(0) = '1') else 
        select_ln158_fu_391_p3;
    select_ln159_4_fu_654_p3 <= 
        ap_const_lv12_1 when (icmp_ln159_fu_385_p2(0) = '1') else 
        add_ln159_1_fu_648_p2;
    select_ln159_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln159_fu_512_p3),12));
    select_ln159_fu_512_p3 <= 
        ap_const_lv8_0 when (or_ln159_1_fu_506_p2(0) = '1') else 
        loop_index_i42_fu_126;
        sext_ln158_1_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln159_mid2_v_reg_782),64));

        sext_ln158_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln158),64));

    tmp_17_fu_532_p3 <= add_ln159_fu_494_p2(3 downto 3);
    tmp_38_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_552_p4),12));
    tmp_fu_353_p3 <= bh_1_fu_130(3 downto 3);
    tmp_s_fu_552_p4 <= ((ap_const_lv1_0 & select_ln158_1_fu_405_p3) & select_ln159_2_fu_540_p3);
    trunc_ln159_1_fu_520_p1 <= add_ln159_fu_494_p2(3 - 1 downto 0);
    trunc_ln159_fu_349_p1 <= bh_1_fu_130(3 - 1 downto 0);
    xor_ln158_1_fu_464_p2 <= (icmp_ln159_fu_385_p2 xor ap_const_lv1_1);
    xor_ln158_fu_476_p2 <= (icmp_ln159_fu_385_p2 xor ap_const_lv1_1);
    xor_ln159_fu_582_p2 <= (exitcond142251005_fu_482_p2 xor ap_const_lv1_1);
    zext_ln158_2_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln158_fu_426_p2),64));
    zext_ln158_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln158_1_fu_405_p3),6));
end behav;
