-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_Pipeline_KR_KC2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln63_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    or_ln63 : IN STD_LOGIC_VECTOR (4 downto 0);
    zext_ln52_5 : IN STD_LOGIC_VECTOR (3 downto 0);
    zext_ln52_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln52_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    add52_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add52_2_out_ap_vld : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce1 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce1 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2133_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_ce : OUT STD_LOGIC;
    grp_fu_2137_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2137_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2137_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2137_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1_Pipeline_KR_KC2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv11_107 : STD_LOGIC_VECTOR (10 downto 0) := "00100000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal icmp_ln54_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage11 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln52_7_cast_fu_347_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_7_cast_reg_812 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_6_cast_fu_355_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_6_cast_reg_818 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln54_fu_420_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_reg_823 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln56_2_fu_434_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln56_2_reg_829 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln63_17_fu_448_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_17_reg_839 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln56_fu_464_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln56_reg_854 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln56_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_16_fu_540_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln63_16_reg_871 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln54_2_fu_546_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln54_2_reg_877 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln56_2_mid1_reg_883 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln61_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_reg_899 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_fu_603_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_14_fu_631_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_14_reg_914 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_338_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_mid1_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_2_fu_658_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_2_reg_934 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_11_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_10_fu_676_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal select_ln54_13_fu_699_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln54_13_reg_1004 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_13_mid1_fu_704_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_mid1_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_724_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal mul_2_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal mul_2_mid1_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_1_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal add52_2_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal select_ln54_15_fu_741_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_15_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal zext_ln63_18_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln54_4_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_28_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln63_20_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln63_26_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln63_30_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add52_2_125_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal kc_fu_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln56_fu_576_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kc_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal kr_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_fu_528_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kr_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten55_fu_100 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln54_fu_482_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten55_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage11_01001 : BOOLEAN;
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln63_cast_fu_359_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln63_fu_392_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln63_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_16_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln52_5_cast_fu_351_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln63_11_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_12_fu_452_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln54_2_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_21_fu_494_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln63_14_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_fu_508_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_22_fu_504_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_15_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_23_fu_536_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_5_fu_550_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid153_fu_554_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_fu_570_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_615_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_24_fu_612_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln54_16_fu_636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln63_17_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_27_fu_642_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_19_fu_646_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_752_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_769_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_752_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_769_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_769_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage8_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal grp_fu_752_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_752_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_761_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_769_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_769_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_2_1_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component srcnn_mac_muladd_3ns_9ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_2_1_32_1_1_U72 : component srcnn_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_q0,
        din1 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_q0,
        din2 => trunc_ln,
        dout => grp_fu_338_p4);

    mux_2_1_32_1_1_U73 : component srcnn_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_q1,
        din1 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_q1,
        din2 => trunc_ln,
        dout => tmp_s_fu_603_p4);

    mux_4_2_32_1_1_U74 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din4 => trunc_ln54_reg_823,
        dout => tmp_10_fu_676_p6);

    mux_4_2_32_1_1_U75 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din4 => trunc_ln54_2_reg_877,
        dout => tmp_13_mid1_fu_704_p6);

    mux_4_2_32_1_1_U76 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din4 => select_ln54_13_reg_1004,
        dout => tmp_12_fu_724_p6);

    mac_muladd_3ns_9ns_9ns_11_4_1_U77 : component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => grp_fu_752_p1,
        din2 => grp_fu_752_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_752_p3);

    mac_muladd_3ns_9ns_8ns_11_4_1_U78 : component srcnn_mac_muladd_3ns_9ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => grp_fu_761_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p3);

    mac_muladd_3ns_9ns_9ns_11_4_1_U79 : component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_769_p0,
        din1 => grp_fu_769_p1,
        din2 => grp_fu_769_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_769_p3);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage11,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage11) or ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    add52_2_125_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add52_2_125_fu_88 <= select_ln63_2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                add52_2_125_fu_88 <= grp_fu_2133_p_dout0;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_476_p2 = ap_const_lv1_0))) then 
                    indvar_flatten55_fu_100 <= add_ln54_fu_482_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_100 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    kc_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_476_p2 = ap_const_lv1_0))) then 
                    kc_fu_92 <= select_ln56_fu_576_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kc_fu_92 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    kr_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_476_p2 = ap_const_lv1_0))) then 
                    kr_fu_96 <= select_ln54_fu_528_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kr_fu_96 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                add52_2_reg_1059 <= grp_fu_2133_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln61_2_reg_934 <= add_ln61_2_fu_658_p2;
                select_ln54_14_reg_914 <= select_ln54_14_fu_631_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln61_reg_899 <= add_ln61_fu_599_p2;
                tmp_s_reg_904 <= tmp_s_fu_603_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_476_p2 = ap_const_lv1_0))) then
                add_ln63_16_reg_871 <= add_ln63_16_fu_540_p2;
                lshr_ln56_2_mid1_reg_883 <= p_mid153_fu_554_p2(4 downto 2);
                trunc_ln54_2_reg_877 <= trunc_ln54_2_fu_546_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln54_reg_867 <= icmp_ln54_fu_476_p2;
                icmp_ln56_reg_859 <= icmp_ln56_fu_470_p2;
                icmp_ln56_reg_859_pp0_iter1_reg <= icmp_ln56_reg_859;
                lshr_ln56_2_reg_829 <= empty_fu_428_p2(4 downto 2);
                    or_ln56_reg_854(3 downto 1) <= or_ln56_fu_464_p2(3 downto 1);
                trunc_ln54_reg_823 <= trunc_ln54_fu_420_p1;
                    zext_ln52_6_cast_reg_818(7 downto 0) <= zext_ln52_6_cast_fu_355_p1(7 downto 0);
                    zext_ln52_7_cast_reg_812(7 downto 0) <= zext_ln52_7_cast_fu_347_p1(7 downto 0);
                    zext_ln63_17_reg_839(3 downto 0) <= zext_ln63_17_fu_448_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                mul_2_1_reg_1054 <= grp_fu_2137_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln56_reg_859 = ap_const_lv1_0))) then
                mul_2_mid1_reg_1049 <= grp_fu_2137_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_2_reg_1039 <= grp_fu_2137_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                select_ln54_13_reg_1004 <= select_ln54_13_fu_699_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                select_ln54_15_reg_1065 <= select_ln54_15_fu_741_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_10_reg_974 <= tmp_10_fu_676_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_11_reg_949 <= grp_fu_338_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln56_reg_859 = ap_const_lv1_0))) then
                tmp_12_mid1_reg_919 <= grp_fu_338_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                tmp_12_reg_1034 <= tmp_12_fu_724_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln56_reg_859 = ap_const_lv1_0))) then
                tmp_13_mid1_reg_1009 <= tmp_13_mid1_fu_704_p6;
            end if;
        end if;
    end process;
    zext_ln52_7_cast_reg_812(8) <= '0';
    zext_ln52_6_cast_reg_818(10 downto 8) <= "000";
    zext_ln63_17_reg_839(8 downto 4) <= "00000";
    or_ln56_reg_854(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage11_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add52_2_out <= grp_fu_2133_p_dout0;

    add52_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage11, icmp_ln54_reg_867, ap_block_pp0_stage11_11001)
    begin
        if (((icmp_ln54_reg_867 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            add52_2_out_ap_vld <= ap_const_logic_1;
        else 
            add52_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_2_fu_488_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_kr_2) + unsigned(ap_const_lv4_1));
    add_ln54_fu_482_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten55_load) + unsigned(ap_const_lv6_1));
    add_ln56_fu_570_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_kc_2) + unsigned(ap_const_lv4_2));
    add_ln61_2_fu_658_p2 <= std_logic_vector(unsigned(zext_ln63_27_fu_642_p1) + unsigned(zext_ln52_7_cast_reg_812));
    add_ln61_fu_599_p2 <= std_logic_vector(unsigned(zext_ln63_17_reg_839) + unsigned(zext_ln52_7_cast_reg_812));
    add_ln63_11_fu_414_p2 <= std_logic_vector(unsigned(p_shl_fu_406_p3) + unsigned(zext_ln63_16_fu_402_p1));
    add_ln63_12_fu_452_p2 <= std_logic_vector(unsigned(add_ln63_11_fu_414_p2) + unsigned(zext_ln63_17_fu_448_p1));
    add_ln63_14_fu_498_p2 <= std_logic_vector(unsigned(or_ln63_cast_fu_359_p1) + unsigned(zext_ln63_21_fu_494_p1));
    add_ln63_15_fu_516_p2 <= std_logic_vector(unsigned(p_shl3_fu_508_p3) + unsigned(zext_ln63_22_fu_504_p1));
    add_ln63_16_fu_540_p2 <= std_logic_vector(unsigned(or_ln63_cast_fu_359_p1) + unsigned(zext_ln63_23_fu_536_p1));
    add_ln63_17_fu_622_p2 <= std_logic_vector(unsigned(p_shl4_fu_615_p3) + unsigned(zext_ln63_24_fu_612_p1));
    add_ln63_19_fu_646_p2 <= std_logic_vector(unsigned(add_ln63_17_fu_622_p2) + unsigned(zext_ln63_27_fu_642_p1));
    add_ln63_fu_396_p2 <= std_logic_vector(unsigned(or_ln63_cast_fu_359_p1) + unsigned(zext_ln63_fu_392_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone, icmp_ln54_reg_867)
    begin
        if (((icmp_ln54_reg_867 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_condition_exit_pp0_iter0_stage11 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage11;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten55_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten55_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten55_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten55_load <= indvar_flatten55_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_kc_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kc_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_kc_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kc_2 <= kc_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_kr_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kr_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_kr_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kr_2 <= kr_fu_96;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln63_20_fu_669_p1, ap_block_pp0_stage3, zext_ln63_26_fu_689_p1, ap_block_pp0_stage4, zext_ln63_30_fu_717_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln63_30_fu_717_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln63_26_fu_689_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln63_20_fu_669_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln63_20_fu_669_p1, ap_block_pp0_stage3, zext_ln63_26_fu_689_p1, ap_block_pp0_stage4, zext_ln63_30_fu_717_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln63_30_fu_717_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln63_26_fu_689_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln63_20_fu_669_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln63_20_fu_669_p1, ap_block_pp0_stage3, zext_ln63_26_fu_689_p1, ap_block_pp0_stage4, zext_ln63_30_fu_717_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln63_30_fu_717_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln63_26_fu_689_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln63_20_fu_669_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln63_20_fu_669_p1, ap_block_pp0_stage3, zext_ln63_26_fu_689_p1, ap_block_pp0_stage4, zext_ln63_30_fu_717_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln63_30_fu_717_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln63_26_fu_689_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln63_20_fu_669_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_428_p2 <= std_logic_vector(unsigned(zext_ln54_fu_424_p1) + unsigned(zext_ln52_5_cast_fu_351_p1));
    grp_fu_2133_p_ce <= ap_const_logic_1;
    grp_fu_2133_p_din0 <= grp_fu_329_p0;
    grp_fu_2133_p_din1 <= grp_fu_329_p1;
    grp_fu_2133_p_opcode <= ap_const_lv2_0;
    grp_fu_2137_p_ce <= ap_const_logic_1;
    grp_fu_2137_p_din0 <= grp_fu_334_p0;
    grp_fu_2137_p_din1 <= grp_fu_334_p1;

    grp_fu_329_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, add52_2_reg_1059, select_ln54_15_reg_1065, ap_block_pp0_stage0, ap_block_pp0_stage4, add52_2_125_fu_88, ap_block_pp0_stage8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_329_p0 <= select_ln54_15_reg_1065;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_329_p0 <= add52_2_reg_1059;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_329_p0 <= add52_2_125_fu_88;
        else 
            grp_fu_329_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, mul_2_reg_1039, ap_CS_fsm_pp0_stage8, mul_2_mid1_reg_1049, mul_2_1_reg_1054, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_329_p1 <= mul_2_1_reg_1054;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_329_p1 <= mul_2_mid1_reg_1049;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_329_p1 <= mul_2_reg_1039;
        else 
            grp_fu_329_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_p0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_s_reg_904, tmp_12_mid1_reg_919, tmp_11_reg_949, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_334_p0 <= tmp_11_reg_949;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_334_p0 <= tmp_12_mid1_reg_919;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_334_p0 <= tmp_s_reg_904;
            else 
                grp_fu_334_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_334_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_p1_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_10_reg_974, ap_CS_fsm_pp0_stage5, tmp_13_mid1_reg_1009, tmp_12_reg_1034, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_334_p1 <= tmp_12_reg_1034;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_334_p1 <= tmp_13_mid1_reg_1009;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_334_p1 <= tmp_10_reg_974;
            else 
                grp_fu_334_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_334_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_752_p0 <= grp_fu_752_p00(3 - 1 downto 0);
    grp_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln56_2_fu_434_p4),11));
    grp_fu_752_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_752_p2 <= grp_fu_752_p20(9 - 1 downto 0);
    grp_fu_752_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_reg_899),11));
    grp_fu_761_p0 <= grp_fu_761_p00(3 - 1 downto 0);
    grp_fu_761_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln56_2_mid1_reg_883),11));
    grp_fu_761_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_761_p2 <= zext_ln52_6_cast_reg_818(8 - 1 downto 0);
    grp_fu_769_p0 <= grp_fu_769_p00(3 - 1 downto 0);
    grp_fu_769_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_14_reg_914),11));
    grp_fu_769_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_769_p2 <= grp_fu_769_p20(9 - 1 downto 0);
    grp_fu_769_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_2_reg_934),11));
    icmp_ln54_fu_476_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten55_load = ap_const_lv6_24) else "0";
    icmp_ln56_fu_470_p2 <= "1" when (unsigned(or_ln56_fu_464_p2) < unsigned(ap_const_lv4_9)) else "0";
    lshr_ln56_2_fu_434_p4 <= empty_fu_428_p2(4 downto 2);
    or_ln56_fu_464_p2 <= (ap_sig_allocacmp_kc_2 or ap_const_lv4_1);
    or_ln63_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln63),6));

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln54_4_fu_522_p1, zext_ln63_28_fu_652_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 <= zext_ln63_28_fu_652_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 <= zext_ln54_4_fu_522_p1(9 - 1 downto 0);
            else 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 <= "XXXXXXXXX";
            end if;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address1 <= zext_ln63_18_fu_458_p1(9 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce1 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln54_4_fu_522_p1, zext_ln63_28_fu_652_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 <= zext_ln63_28_fu_652_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 <= zext_ln54_4_fu_522_p1(9 - 1 downto 0);
            else 
                p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 <= "XXXXXXXXX";
            end if;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address1 <= zext_ln63_18_fu_458_p1(9 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce1 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid153_fu_554_p2 <= std_logic_vector(unsigned(zext_ln54_5_fu_550_p1) + unsigned(zext_ln52_5_cast_fu_351_p1));
    p_shl3_fu_508_p3 <= (add_ln63_14_fu_498_p2 & ap_const_lv3_0);
    p_shl4_fu_615_p3 <= (add_ln63_16_reg_871 & ap_const_lv3_0);
    p_shl_fu_406_p3 <= (add_ln63_fu_396_p2 & ap_const_lv3_0);
    select_ln54_13_fu_699_p3 <= 
        trunc_ln54_reg_823 when (icmp_ln56_reg_859(0) = '1') else 
        trunc_ln54_2_reg_877;
    select_ln54_14_fu_631_p3 <= 
        lshr_ln56_2_reg_829 when (icmp_ln56_reg_859(0) = '1') else 
        lshr_ln56_2_mid1_reg_883;
    select_ln54_15_fu_741_p3 <= 
        add52_2_reg_1059 when (icmp_ln56_reg_859_pp0_iter1_reg(0) = '1') else 
        grp_fu_2133_p_dout0;
    select_ln54_16_fu_636_p3 <= 
        or_ln56_reg_854 when (icmp_ln56_reg_859(0) = '1') else 
        ap_const_lv4_1;
    select_ln54_fu_528_p3 <= 
        ap_sig_allocacmp_kr_2 when (icmp_ln56_fu_470_p2(0) = '1') else 
        add_ln54_2_fu_488_p2;
    select_ln56_fu_576_p3 <= 
        add_ln56_fu_570_p2 when (icmp_ln56_fu_470_p2(0) = '1') else 
        ap_const_lv4_2;
    trunc_ln54_2_fu_546_p1 <= add_ln54_2_fu_488_p2(2 - 1 downto 0);
    trunc_ln54_fu_420_p1 <= ap_sig_allocacmp_kr_2(2 - 1 downto 0);
    zext_ln52_5_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_5),5));
    zext_ln52_6_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_6),11));
    zext_ln52_7_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_7),9));
    zext_ln54_4_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_15_fu_516_p2),64));
    zext_ln54_5_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_2_fu_488_p2),5));
    zext_ln54_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_kr_2),5));
    zext_ln63_16_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_396_p2),9));
    zext_ln63_17_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_kc_2),9));
    zext_ln63_18_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_12_fu_452_p2),64));
    zext_ln63_20_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_752_p3),64));
    zext_ln63_21_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_2_fu_488_p2),6));
    zext_ln63_22_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_14_fu_498_p2),9));
    zext_ln63_23_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_528_p3),6));
    zext_ln63_24_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_16_reg_871),9));
    zext_ln63_26_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_761_p3),64));
    zext_ln63_27_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_16_fu_636_p3),9));
    zext_ln63_28_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_19_fu_646_p2),64));
    zext_ln63_30_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_769_p3),64));
    zext_ln63_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_kr_2),6));
end behav;
