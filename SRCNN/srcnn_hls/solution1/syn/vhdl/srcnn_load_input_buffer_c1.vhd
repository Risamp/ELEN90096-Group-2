-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_input_buffer_c1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    h : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_load_input_buffer_c1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv10_1E : STD_LOGIC_VECTOR (9 downto 0) := "0000011110";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_3F8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001111111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_21 : STD_LOGIC_VECTOR (8 downto 0) := "000100001";
    constant ap_const_lv19_3E1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001111100001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal h_cast2_fu_419_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast2_reg_1060 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln76_fu_433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln76_reg_1065 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_fu_445_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_reg_1070 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln74_fu_545_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln74_reg_1118 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_r_addr_reg_1123 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln74_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_r_addr_1_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln371_fu_718_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln371_reg_1146 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal data_1_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_1_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln371_1_fu_842_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln371_1_reg_1167 : STD_LOGIC_VECTOR (22 downto 0);
    signal smantissa_fu_925_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal smantissa_reg_1172 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_69_fu_943_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_69_reg_1180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal arrayidx31612_sum_fu_949_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_reg_1190 : STD_LOGIC_VECTOR (2 downto 0);
    signal result_7_fu_1003_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_addr_read_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_393 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln85_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_1_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_2_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_3_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_2_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_3_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast103_fu_1036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln79_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bh_fu_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_70_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_404_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln74_fu_423_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln76_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln85_fu_458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln85_1_fu_469_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln85_2_fu_480_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_fu_491_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_2_fu_513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_3_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln74_1_fu_535_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_1_fu_555_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_fu_551_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_1_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln55_fu_580_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_597_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_fu_584_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal hclamp_fu_611_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln78_1_fu_627_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_619_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln78_fu_635_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln78_fu_639_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln78_2_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_654_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln79_fu_674_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_680_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mantissa_fu_722_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln346_fu_735_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_738_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_757_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_fu_761_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln18_1_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_731_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_fu_773_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal lshr_ln18_fu_777_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_5_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln18_fu_783_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln21_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_801_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_1_fu_846_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln346_1_fu_859_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_862_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_1_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_868_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_2_fu_881_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_2_fu_885_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln18_3_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln18_3cast_fu_901_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln18_1_fu_905_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln15_1_fu_855_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_1_fu_897_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_1_fu_915_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_2_fu_911_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln18_1_fu_921_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal loop_index_cast_fu_933_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_955_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_965_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_fu_965_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_965_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal val_1_fu_981_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_1_fu_996_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_6_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast99_fu_1027_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_72_fu_1031_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_404_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_955_ap_start : STD_LOGIC;
    signal grp_fu_955_ap_done : STD_LOGIC;
    signal grp_fu_955_ce : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal mul_fu_965_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_urem_9ns_7ns_9_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component srcnn_mul_9ns_11ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    sitofp_32ns_32_4_no_dsp_1_U5 : component srcnn_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_404_p0,
        ce => grp_fu_404_ce,
        dout => grp_fu_404_p1);

    urem_9ns_7ns_9_13_seq_1_U6 : component srcnn_urem_9ns_7ns_9_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_955_ap_start,
        done => grp_fu_955_ap_done,
        din0 => arrayidx31612_sum_fu_949_p2,
        din1 => grp_fu_955_p1,
        ce => grp_fu_955_ce,
        dout => grp_fu_955_p2);

    mul_9ns_11ns_19_1_1_U7 : component srcnn_mul_9ns_11ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_fu_965_p0,
        din1 => mul_fu_965_p1,
        dout => mul_fu_965_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bh_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bh_fu_182 <= ap_const_lv5_0;
            elsif (((exitcond2_fu_937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                bh_fu_182 <= add_ln74_reg_1118;
            end if; 
        end if;
    end process;

    loop_index_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                loop_index_reg_393 <= empty_69_reg_1180;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                loop_index_reg_393 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln74_reg_1118 <= add_ln74_fu_545_p2;
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085 <= zext_ln85_2_fu_475_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090 <= zext_ln85_3_fu_486_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095 <= zext_ln94_fu_497_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100 <= zext_ln94_1_fu_508_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105 <= zext_ln94_2_fu_519_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110 <= zext_ln94_3_fu_530_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075 <= zext_ln85_fu_453_p1(10 - 1 downto 0);
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080 <= zext_ln85_1_fu_464_p1(10 - 1 downto 0);
                or_ln_reg_1070 <= or_ln_fu_445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                data_1_reg_1156 <= m_axi_input_r_RDATA;
                trunc_ln371_1_reg_1167 <= trunc_ln371_1_fu_842_p1;
                xs_exp_1_reg_1161 <= m_axi_input_r_RDATA(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                empty_69_reg_1180 <= empty_69_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    h_cast2_reg_1060(7 downto 0) <= h_cast2_fu_419_p1(7 downto 0);
                sext_ln76_reg_1065 <= sext_ln76_fu_433_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                input_r_addr_1_reg_1129 <= sext_ln79_fu_690_p1;
                input_r_addr_reg_1123 <= sext_ln78_1_fu_664_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                input_r_addr_read_reg_1199 <= m_axi_input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                p_cast_reg_1190 <= mul_fu_965_p2(17 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_411 <= grp_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                result_reg_1151 <= result_fu_825_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                smantissa_reg_1172 <= smantissa_fu_925_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln371_reg_1146 <= trunc_ln371_fu_718_p1;
                xs_exp_reg_1140 <= m_axi_input_r_RDATA(30 downto 23);
                xs_sign_reg_1135 <= m_axi_input_r_RDATA(31 downto 31);
            end if;
        end if;
    end process;
    h_cast2_reg_1060(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_input_r_ARREADY, m_axi_input_r_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state2, icmp_ln74_fu_539_p2, ap_CS_fsm_state18, exitcond2_fu_937_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln74_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((exitcond2_fu_937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln346_1_fu_862_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_859_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_738_p2 <= std_logic_vector(unsigned(zext_ln346_fu_735_p1) + unsigned(ap_const_lv9_181));
    add_ln55_1_fu_574_p2 <= std_logic_vector(unsigned(zext_ln76_fu_551_p1) + unsigned(ap_const_lv6_3C));
    add_ln55_fu_584_p2 <= std_logic_vector(signed(sext_ln55_fu_580_p1) + signed(h_cast2_reg_1060));
    add_ln74_fu_545_p2 <= std_logic_vector(unsigned(bh_fu_182) + unsigned(ap_const_lv5_1));
    add_ln76_1_fu_555_p2 <= std_logic_vector(signed(sext_ln76_reg_1065) + signed(zext_ln74_1_fu_535_p1));
    add_ln76_fu_427_p2 <= std_logic_vector(unsigned(zext_ln74_fu_423_p1) + unsigned(ap_const_lv9_1FC));
    add_ln78_fu_649_p2 <= std_logic_vector(signed(sext_ln78_2_fu_645_p1) + signed(input_ftmap));
    add_ln79_fu_674_p2 <= std_logic_vector(unsigned(add_ln78_fu_649_p2) + unsigned(ap_const_lv64_3F8));
    add_ln85_1_fu_469_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_2));
    add_ln85_2_fu_480_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_3));
    add_ln85_fu_458_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_1));
    add_ln94_1_fu_502_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_1D));
    add_ln94_2_fu_513_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_1E));
    add_ln94_3_fu_524_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_1F));
    add_ln94_fu_491_p2 <= std_logic_vector(unsigned(or_ln_fu_445_p3) + unsigned(ap_const_lv10_1C));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_input_r_RVALID)
    begin
        if ((m_axi_input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_input_r_RVALID)
    begin
        if ((m_axi_input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(m_axi_input_r_RVALID)
    begin
        if ((m_axi_input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_input_r_ARREADY)
    begin
        if ((m_axi_input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_input_r_ARREADY)
    begin
        if ((m_axi_input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_input_r_ARREADY)
    begin
        if ((m_axi_input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln74_fu_539_p2)
    begin
        if ((((icmp_ln74_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln74_fu_539_p2)
    begin
        if (((icmp_ln74_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx31612_sum_fu_949_p2 <= std_logic_vector(unsigned(loop_index_cast_fu_933_p1) + unsigned(ap_const_lv9_4));
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_d0 <= empty_70_fu_1016_p1;

    conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0_assign_proc : process(p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((p_cast_reg_1190 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0_assign_proc : process(ap_CS_fsm_state16, conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080, conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090, ap_CS_fsm_state17, ap_CS_fsm_state30, p_cast103_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1_assign_proc : process(ap_CS_fsm_state16, conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075, conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0_assign_proc : process(ap_CS_fsm_state16, grp_fu_404_p1, reg_411, ap_CS_fsm_state17, ap_CS_fsm_state30, empty_70_fu_1016_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 <= empty_70_fu_1016_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 <= grp_fu_404_p1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1_assign_proc : process(ap_CS_fsm_state16, grp_fu_404_p1, reg_411, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 <= grp_fu_404_p1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state17, p_cast_reg_1190, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((p_cast_reg_1190 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0_assign_proc : process(ap_CS_fsm_state33, conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100, conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105, ap_CS_fsm_state30, p_cast103_fu_1036_p1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= p_cast103_fu_1036_p1(10 - 1 downto 0);
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1_assign_proc : process(ap_CS_fsm_state33, conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095, conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 <= conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state30, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0_assign_proc : process(grp_fu_404_p1, reg_411, ap_CS_fsm_state33, ap_CS_fsm_state30, empty_70_fu_1016_p1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 <= grp_fu_404_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 <= empty_70_fu_1016_p1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1_assign_proc : process(grp_fu_404_p1, reg_411, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 <= grp_fu_404_p1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0_assign_proc : process(ap_CS_fsm_state33, p_cast_reg_1190, ap_CS_fsm_state30, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((p_cast_reg_1190 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_69_fu_943_p2 <= std_logic_vector(unsigned(loop_index_reg_393) + unsigned(ap_const_lv8_1));
    empty_70_fu_1016_p1 <= input_r_addr_read_reg_1199;
    empty_72_fu_1031_p2 <= std_logic_vector(unsigned(or_ln_reg_1070) + unsigned(p_cast99_fu_1027_p1));
    exitcond2_fu_937_p2 <= "1" when (loop_index_reg_393 = ap_const_lv8_FF) else "0";

    grp_fu_404_ce_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state33, ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_404_ce <= ap_const_logic_1;
        else 
            grp_fu_404_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_404_p0_assign_proc : process(result_reg_1151, ap_CS_fsm_state18, result_7_fu_1003_p3, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_404_p0 <= result_7_fu_1003_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_404_p0 <= result_reg_1151;
        else 
            grp_fu_404_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_955_ap_start_assign_proc : process(ap_CS_fsm_state18, exitcond2_fu_937_p2)
    begin
        if (((exitcond2_fu_937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_955_ap_start <= ap_const_logic_1;
        else 
            grp_fu_955_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_955_ce_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_955_ce <= ap_const_logic_1;
        else 
            grp_fu_955_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_955_p1 <= ap_const_lv9_21(7 - 1 downto 0);
    h_cast2_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h),10));
    hclamp_fu_611_p3 <= 
        select_ln54_fu_597_p3 when (or_ln54_fu_605_p2(0) = '1') else 
        add_ln55_fu_584_p2;
    icmp_ln55_fu_568_p2 <= "1" when (signed(add_ln76_1_fu_555_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln74_fu_539_p2 <= "1" when (bh_fu_182 = ap_const_lv5_17) else "0";

    input_r_blk_n_AR_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_r_blk_n_AR <= m_axi_input_r_ARREADY;
        else 
            input_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_r_blk_n_R_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            input_r_blk_n_R <= m_axi_input_r_RVALID;
        else 
            input_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    loop_index_cast_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_393),9));
    lshr_ln18_1_fu_905_p2 <= std_logic_vector(shift_right(unsigned(mantissa_1_fu_846_p4),to_integer(unsigned('0' & sext_ln18_3cast_fu_901_p1(25-1 downto 0)))));
    lshr_ln18_fu_777_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_731_p1),to_integer(unsigned('0' & zext_ln18_fu_773_p1(31-1 downto 0)))));

    m_axi_input_r_ARADDR_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, input_r_addr_reg_1123, input_r_addr_1_reg_1129)
    begin
        if (((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_input_r_ARADDR <= input_r_addr_1_reg_1129;
        elsif ((((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input_r_ARADDR <= input_r_addr_reg_1123;
        else 
            m_axi_input_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_input_r_ARBURST <= ap_const_lv2_0;
    m_axi_input_r_ARCACHE <= ap_const_lv4_0;
    m_axi_input_r_ARID <= ap_const_lv1_0;

    m_axi_input_r_ARLEN_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_input_r_ARLEN <= ap_const_lv32_FF;
        elsif ((((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input_r_ARLEN <= ap_const_lv32_1;
        else 
            m_axi_input_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_input_r_ARLOCK <= ap_const_lv2_0;
    m_axi_input_r_ARPROT <= ap_const_lv3_0;
    m_axi_input_r_ARQOS <= ap_const_lv4_0;
    m_axi_input_r_ARREGION <= ap_const_lv4_0;
    m_axi_input_r_ARSIZE <= ap_const_lv3_0;
    m_axi_input_r_ARUSER <= ap_const_lv1_0;

    m_axi_input_r_ARVALID_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_AWADDR <= ap_const_lv64_0;
    m_axi_input_r_AWBURST <= ap_const_lv2_0;
    m_axi_input_r_AWCACHE <= ap_const_lv4_0;
    m_axi_input_r_AWID <= ap_const_lv1_0;
    m_axi_input_r_AWLEN <= ap_const_lv32_0;
    m_axi_input_r_AWLOCK <= ap_const_lv2_0;
    m_axi_input_r_AWPROT <= ap_const_lv3_0;
    m_axi_input_r_AWQOS <= ap_const_lv4_0;
    m_axi_input_r_AWREGION <= ap_const_lv4_0;
    m_axi_input_r_AWSIZE <= ap_const_lv3_0;
    m_axi_input_r_AWUSER <= ap_const_lv1_0;
    m_axi_input_r_AWVALID <= ap_const_logic_0;
    m_axi_input_r_BREADY <= ap_const_logic_0;

    m_axi_input_r_RREADY_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state16)
    begin
        if ((((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((m_axi_input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_input_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_WDATA <= ap_const_lv32_0;
    m_axi_input_r_WID <= ap_const_lv1_0;
    m_axi_input_r_WLAST <= ap_const_logic_0;
    m_axi_input_r_WSTRB <= ap_const_lv4_0;
    m_axi_input_r_WUSER <= ap_const_lv1_0;
    m_axi_input_r_WVALID <= ap_const_logic_0;
    mantissa_1_fu_846_p4 <= ((ap_const_lv1_1 & trunc_ln371_1_reg_1167) & ap_const_lv1_0);
    mantissa_fu_722_p4 <= ((ap_const_lv1_1 & trunc_ln371_reg_1146) & ap_const_lv1_0);
    mul_fu_965_p0 <= mul_fu_965_p00(9 - 1 downto 0);
    mul_fu_965_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx31612_sum_fu_949_p2),19));
    mul_fu_965_p1 <= ap_const_lv19_3E1(11 - 1 downto 0);
    or_ln54_fu_605_p2 <= (tmp_fu_560_p3 or icmp_ln55_fu_568_p2);
    or_ln_fu_445_p3 <= (bh_fu_182 & bh_fu_182);
    p_cast103_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_72_fu_1031_p2),64));
    p_cast99_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_955_p2),10));
    result_2_fu_819_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_811_p3));
    result_6_fu_990_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_981_p4));
    result_7_fu_1003_p3 <= 
        result_6_fu_990_p2 when (xs_sign_1_fu_996_p3(0) = '1') else 
        val_1_fu_981_p4;
    result_fu_825_p3 <= 
        result_2_fu_819_p2 when (xs_sign_reg_1135(0) = '1') else 
        val_fu_811_p3;
    select_ln18_2_fu_885_p3 <= 
        sext_ln18_2_fu_881_p1 when (tmp_6_fu_868_p3(0) = '1') else 
        add_ln346_1_fu_862_p2;
    select_ln18_fu_761_p3 <= 
        sext_ln18_fu_757_p1 when (tmp_4_fu_744_p3(0) = '1') else 
        add_ln346_fu_738_p2;
    select_ln54_fu_597_p3 <= 
        ap_const_lv10_0 when (tmp_1_fu_589_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln18_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_761_p3),32));

        sext_ln18_2_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_1_fu_876_p2),9));

        sext_ln18_3_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_2_fu_885_p3),32));

    sext_ln18_3cast_fu_901_p1 <= sext_ln18_3_fu_893_p1(25 - 1 downto 0);
        sext_ln18_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_752_p2),9));

        sext_ln55_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_1_fu_574_p2),10));

        sext_ln76_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln76_fu_427_p2),10));

        sext_ln78_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_654_p4),64));

        sext_ln78_2_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln78_fu_639_p2),64));

        sext_ln78_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln78_1_fu_627_p3),20));

        sext_ln79_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_680_p4),64));

    shl_ln18_1_fu_915_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_855_p1),to_integer(unsigned('0' & zext_ln18_1_fu_897_p1(31-1 downto 0)))));
    shl_ln18_fu_783_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_731_p1),to_integer(unsigned('0' & zext_ln18_fu_773_p1(31-1 downto 0)))));
    shl_ln78_1_fu_627_p3 <= (hclamp_fu_611_p3 & ap_const_lv2_0);
    shl_ln_fu_619_p3 <= (hclamp_fu_611_p3 & ap_const_lv10_0);
    smantissa_fu_925_p3 <= 
        zext_ln18_2_fu_911_p1 when (tmp_6_fu_868_p3(0) = '1') else 
        trunc_ln18_1_fu_921_p1;
    sub_ln18_1_fu_876_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_1_reg_1161));
    sub_ln18_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_reg_1140));
    sub_ln78_fu_639_p2 <= std_logic_vector(unsigned(shl_ln_fu_619_p3) - unsigned(sext_ln78_fu_635_p1));
    tmp_1_fu_589_p3 <= add_ln76_1_fu_555_p2(9 downto 9);
    tmp_3_fu_801_p4 <= shl_ln18_fu_783_p2(55 downto 24);
    tmp_4_fu_744_p3 <= add_ln346_fu_738_p2(8 downto 8);
    tmp_5_fu_789_p3 <= lshr_ln18_fu_777_p2(24 downto 24);
    tmp_6_fu_868_p3 <= add_ln346_1_fu_862_p2(8 downto 8);
    tmp_fu_560_p3 <= add_ln76_1_fu_555_p2(9 downto 9);
    trunc_ln18_1_fu_921_p1 <= shl_ln18_1_fu_915_p2(56 - 1 downto 0);
    trunc_ln2_fu_654_p4 <= add_ln78_fu_649_p2(63 downto 2);
    trunc_ln371_1_fu_842_p1 <= m_axi_input_r_RDATA(23 - 1 downto 0);
    trunc_ln371_fu_718_p1 <= m_axi_input_r_RDATA(23 - 1 downto 0);
    trunc_ln3_fu_680_p4 <= add_ln79_fu_674_p2(63 downto 2);
    val_1_fu_981_p4 <= smantissa_reg_1172(55 downto 24);
    val_fu_811_p3 <= 
        zext_ln21_fu_797_p1 when (tmp_4_fu_744_p3(0) = '1') else 
        tmp_3_fu_801_p4;
    xs_sign_1_fu_996_p3 <= data_1_reg_1156(31 downto 31);
    zext_ln15_1_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_846_p4),79));
    zext_ln15_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_722_p4),79));
    zext_ln18_1_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_3_fu_893_p1),79));
    zext_ln18_2_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_1_fu_905_p2),56));
    zext_ln18_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_769_p1),79));
    zext_ln21_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_789_p3),32));
    zext_ln346_1_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_1_reg_1161),9));
    zext_ln346_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_reg_1140),9));
    zext_ln74_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_fu_182),10));
    zext_ln74_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h),9));
    zext_ln76_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_fu_182),6));
    zext_ln85_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_fu_458_p2),64));
    zext_ln85_2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_fu_469_p2),64));
    zext_ln85_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_2_fu_480_p2),64));
    zext_ln85_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_445_p3),64));
    zext_ln94_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_fu_502_p2),64));
    zext_ln94_2_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_2_fu_513_p2),64));
    zext_ln94_3_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_3_fu_524_p2),64));
    zext_ln94_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_491_p2),64));
end behav;
