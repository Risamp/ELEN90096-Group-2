-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_ce : OUT STD_LOGIC;
    grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_ce : OUT STD_LOGIC;
    grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_605_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal input_fm_buffer_1_ce0 : STD_LOGIC;
    signal input_fm_buffer_1_we0 : STD_LOGIC;
    signal input_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln131_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln50_reg_1498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal gmem_addr_reg_1350 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_541_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1359 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1364 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_561_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_reg_1373 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_91_fu_577_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln107_fu_588_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln107_reg_1386 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_592_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1391 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln109_fu_600_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln109_reg_1396 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln109_1_fu_604_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln109_1_reg_1401 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln118_fu_626_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_reg_1406 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_638_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln109_reg_1414 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln118_2_fu_669_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_2_reg_1419 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln110_fu_685_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln110_reg_1427 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_8_reg_1432 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln110_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_1_addr_1_reg_1438 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln111_fu_804_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln111_reg_1446 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_8_read_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_96_fu_830_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_96_reg_1456 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln47_fu_842_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln47_reg_1464 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_7_reg_1469 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_cast57_fu_889_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_cast57_reg_1475 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal empty_99_fu_918_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_99_reg_1480 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_1_fu_930_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_1_reg_1488 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_addr_1_reg_1493 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln50_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_956_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln50_reg_1502 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_3_cast58_fu_962_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_3_cast58_reg_1507 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln62_fu_1031_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_reg_1525 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_7_read_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln131_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln131_fu_1047_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln131_reg_1559 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln131_2_fu_1053_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln131_2_reg_1564 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state47 : BOOLEAN;
    signal add_ln135_5_fu_1075_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln135_5_reg_1569 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_104_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_104_reg_1574 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln135_2_fu_1089_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_2_reg_1579 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_7_fu_1119_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln135_7_reg_1584 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln132_fu_1135_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln132_reg_1592 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln135_fu_1170_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln135_reg_1597 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln132_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln133_fu_1196_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln133_reg_1610 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_9_reg_1615 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln133_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fm_buffer_load_1_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal select_ln136_fu_1303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal empty_107_fu_1317_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ti_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6017_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_326 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln33_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_348 : STD_LOGIC_VECTOR (23 downto 0);
    signal by_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln111_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bx_reg_370 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal nout_reg_381 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln49_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state21_io : BOOLEAN;
    signal tx_3_reg_403 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln62_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_2_reg_415 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_102_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_1_reg_437 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal phi_mul55_reg_449 : STD_LOGIC_VECTOR (22 downto 0);
    signal ty_2_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_reg_471 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_106_reg_482 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast59_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_5_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast70_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_3_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_9_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast71_fu_1323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln131_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln111_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln135_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln118_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_493_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal trunc_ln_fu_507_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_fu_614_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln118_1_fu_622_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_fu_610_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_2_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_1_fu_648_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln118_fu_657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_661_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_3_fu_653_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln110_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_92_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_696_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl5_fu_708_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_704_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl5_cast_fu_716_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_93_fu_720_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_730_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast10_fu_726_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp2_fu_744_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp2_cast_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_94_fu_758_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_764_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln118_4_fu_784_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_3_fu_788_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_818_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_826_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal nout_cast_fu_814_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln49_fu_848_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln3_fu_852_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln49_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln49_fu_864_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_869_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ty_cast_fu_893_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_97_fu_897_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_98_fu_906_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_910_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_fu_902_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tx_3_cast_fu_936_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_100_fu_940_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_970_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln65_1_fu_978_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln65_fu_966_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_fu_982_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_1_fu_988_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln65_fu_997_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_1001_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln65_2_fu_993_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_2_fu_1009_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_3_fu_1015_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_1063_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln135_5_fu_1071_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln135_fu_1059_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln132_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_6_fu_1094_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln135_6_fu_1098_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln135_fu_1107_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_1111_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln135_7_fu_1103_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln132_1_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_105_fu_1141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln4_fu_1146_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln135_1_fu_1158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln135_1_fu_1154_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln135_2_fu_1166_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln135_8_fu_1176_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln135_8_fu_1180_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln135_fu_1202_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln135_3_fu_1207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln135_1_fu_1211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln135_2_fu_1216_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln135_4_fu_1224_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln135_4_fu_1228_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln135_1_fu_1233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_3_fu_1237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_1242_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln135_fu_1262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1265_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_1275_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_1_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_1_address0,
        ce0 => input_fm_buffer_1_ce0,
        we0 => input_fm_buffer_1_we0,
        d0 => input_fm_buffer_1_d0,
        q0 => input_fm_buffer_1_q0);

    output_fm_buffer_U : component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 9248,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                bx_reg_370 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bx_reg_370 <= add_ln111_reg_1446;
            end if; 
        end if;
    end process;

    by_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_359 <= ap_const_lv5_0;
            elsif (((icmp_ln111_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                by_reg_359 <= add_ln110_reg_1427;
            end if; 
        end if;
    end process;

    empty_102_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                empty_102_reg_426 <= output_fm_buffer_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                empty_102_reg_426 <= grp_fu_597_p_dout0;
            end if; 
        end if;
    end process;

    empty_106_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_1))) then 
                empty_106_reg_482 <= ap_const_lv14_0;
            elsif (((exitcond6017_fu_1311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                empty_106_reg_482 <= empty_107_fu_1317_p2;
            end if; 
        end if;
    end process;

    empty_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_326 <= empty_91_fu_577_p2;
            elsif (((icmp_ln33_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_326 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    nin_2_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                nin_2_reg_415 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                nin_2_reg_415 <= add_ln62_reg_1525;
            end if; 
        end if;
    end process;

    nin_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_337 <= ap_const_lv7_0;
            elsif (((icmp_ln110_fu_679_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_337 <= add_ln109_reg_1414;
            end if; 
        end if;
    end process;

    nout_1_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                nout_1_reg_437 <= ap_const_lv6_0;
            elsif (((icmp_ln132_fu_1129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                nout_1_reg_437 <= add_ln131_reg_1559;
            end if; 
        end if;
    end process;

    nout_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_381 <= ap_const_lv6_0;
            elsif (((icmp_ln49_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                nout_reg_381 <= add_ln47_reg_1464;
            end if; 
        end if;
    end process;

    phi_mul55_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                phi_mul55_reg_449 <= ap_const_lv23_0;
            elsif (((icmp_ln132_fu_1129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                phi_mul55_reg_449 <= add_ln131_2_reg_1564;
            end if; 
        end if;
    end process;

    phi_mul_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_348 <= ap_const_lv24_0;
            elsif (((icmp_ln110_fu_679_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_348 <= add_ln109_1_reg_1401;
            end if; 
        end if;
    end process;

    ti_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_314 <= ap_const_lv4_0;
            elsif (((exitcond6017_fu_1311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                ti_reg_314 <= add_ln33_reg_1373;
            end if; 
        end if;
    end process;

    tj_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_176 <= ap_const_lv4_0;
            elsif (((icmp_ln33_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_176 <= add_ln32_reg_1359;
            end if; 
        end if;
    end process;

    tx_3_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_924_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                tx_3_reg_403 <= ap_const_lv5_0;
            elsif (((icmp_ln62_fu_1025_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                tx_3_reg_403 <= add_ln50_reg_1502;
            end if; 
        end if;
    end process;

    tx_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tx_reg_471 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                tx_reg_471 <= add_ln133_reg_1610;
            end if; 
        end if;
    end process;

    ty_2_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_0))) then 
                ty_2_reg_460 <= ap_const_lv5_0;
            elsif (((icmp_ln133_fu_1190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                ty_2_reg_460 <= add_ln132_reg_1592;
            end if; 
        end if;
    end process;

    ty_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                ty_reg_392 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_1))) then 
                ty_reg_392 <= add_ln49_1_reg_1488;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_i_reg_1626 <= grp_fu_597_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln109_1_reg_1401 <= add_ln109_1_fu_604_p2;
                add_ln109_reg_1414 <= add_ln109_fu_638_p2;
                add_ln118_reg_1406 <= add_ln118_fu_626_p2;
                    zext_ln109_reg_1396(23 downto 0) <= zext_ln109_fu_600_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln110_reg_1427 <= add_ln110_fu_685_p2;
                add_ln118_2_reg_1419 <= add_ln118_2_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln111_reg_1446 <= add_ln111_fu_804_p2;
                input_fm_buffer_1_addr_1_reg_1438 <= zext_ln118_5_fu_793_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                add_ln131_2_reg_1564 <= add_ln131_2_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln131_reg_1559 <= add_ln131_fu_1047_p2;
                icmp_ln131_reg_1555 <= icmp_ln131_fu_1041_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln132_reg_1592 <= add_ln132_fu_1135_p2;
                add_ln135_7_reg_1584 <= add_ln135_7_fu_1119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln133_reg_1610 <= add_ln133_fu_1196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_0))) then
                add_ln135_2_reg_1579 <= add_ln135_2_fu_1089_p2;
                empty_104_reg_1574 <= empty_104_fu_1081_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln135_5_reg_1569 <= add_ln135_5_fu_1075_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln32_reg_1359 <= add_ln32_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln33_reg_1373 <= add_ln33_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln47_reg_1464 <= add_ln47_fu_842_p2;
                empty_96_reg_1456 <= empty_96_fu_830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_1_reg_1488 <= add_ln49_1_fu_930_p2;
                empty_99_reg_1480 <= empty_99_fu_918_p2;
                    ty_cast57_reg_1475(4 downto 0) <= ty_cast57_fu_889_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln50_reg_1502 <= add_ln50_fu_956_p2;
                icmp_ln50_reg_1498 <= icmp_ln50_fu_950_p2;
                output_fm_buffer_addr_1_reg_1493 <= p_cast70_fu_945_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln62_reg_1525 <= add_ln62_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                gmem_addr_7_read_reg_1530 <= m_axi_gmem_RDATA;
                input_fm_buffer_1_load_reg_1535 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                gmem_addr_7_reg_1469 <= sext_ln62_fu_879_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_8_read_reg_1451 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_679_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_8_reg_1432 <= sext_ln111_fu_774_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_fu_1190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                gmem_addr_9_reg_1615 <= sext_ln135_fu_1252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_1350 <= sext_ln131_fu_517_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                mul_reg_1545 <= grp_fu_601_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                output_fm_buffer_load_1_reg_1621 <= output_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                select_ln136_reg_1632 <= select_ln136_fu_1303_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln_reg_1391(7 downto 4) <= shl_ln_fu_592_p3(7 downto 4);
                    zext_ln107_reg_1386(3 downto 0) <= zext_ln107_fu_588_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    sub_ln135_reg_1597(18 downto 2) <= sub_ln135_fu_1170_p2(18 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_4_reg_1364 <= tmp_4_fu_547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    tx_3_cast58_reg_1507(4 downto 0) <= tx_3_cast58_fu_962_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln107_reg_1386(4) <= '0';
    shl_ln_reg_1391(3 downto 0) <= "0000";
    zext_ln109_reg_1396(24) <= '0';
    ty_cast57_reg_1475(11 downto 5) <= "0000000";
    tx_3_cast58_reg_1507(14 downto 5) <= "0000000000";
    sub_ln135_reg_1597(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state38, ap_CS_fsm_state47, icmp_ln131_reg_1555, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state21, icmp_ln50_reg_1498, ap_CS_fsm_state30, ap_CS_fsm_state50, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state2, icmp_ln32_fu_535_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond6_fu_571_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln110_fu_679_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, icmp_ln47_fu_836_p2, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state48, icmp_ln132_fu_1129_p2, ap_CS_fsm_state49, icmp_ln133_fu_1190_p2, ap_CS_fsm_state63, exitcond6017_fu_1311_p2, icmp_ln33_fu_555_p2, icmp_ln111_fu_798_p2, icmp_ln109_fu_632_p2, icmp_ln49_fu_924_p2, ap_block_state21_io, icmp_ln62_fu_1025_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln33_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond6_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln109_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln110_fu_679_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln111_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln47_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln62_fu_1025_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if ((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                elsif ((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln132_fu_1129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln133_fu_1190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((exitcond6017_fu_1311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln109_1_fu_604_p2 <= std_logic_vector(unsigned(phi_mul_reg_348) + unsigned(ap_const_lv24_3F804));
    add_ln109_fu_638_p2 <= std_logic_vector(unsigned(nin_reg_337) + unsigned(ap_const_lv7_1));
    add_ln110_fu_685_p2 <= std_logic_vector(unsigned(by_reg_359) + unsigned(ap_const_lv5_1));
    add_ln111_fu_804_p2 <= std_logic_vector(unsigned(bx_reg_370) + unsigned(ap_const_lv5_1));
    add_ln118_1_fu_648_p2 <= std_logic_vector(unsigned(add_ln118_reg_1406) + unsigned(zext_ln118_2_fu_644_p1));
    add_ln118_2_fu_669_p2 <= std_logic_vector(unsigned(p_shl1_fu_661_p3) + unsigned(zext_ln118_3_fu_653_p1));
    add_ln118_3_fu_788_p2 <= std_logic_vector(unsigned(add_ln118_2_reg_1419) + unsigned(zext_ln118_4_fu_784_p1));
    add_ln118_fu_626_p2 <= std_logic_vector(unsigned(zext_ln118_1_fu_622_p1) + unsigned(zext_ln118_fu_610_p1));
    add_ln131_2_fu_1053_p2 <= std_logic_vector(unsigned(phi_mul55_reg_449) + unsigned(ap_const_lv23_3F804));
    add_ln131_fu_1047_p2 <= std_logic_vector(unsigned(nout_1_reg_437) + unsigned(ap_const_lv6_1));
    add_ln132_fu_1135_p2 <= std_logic_vector(unsigned(ty_2_reg_460) + unsigned(ap_const_lv5_1));
    add_ln133_fu_1196_p2 <= std_logic_vector(unsigned(tx_reg_471) + unsigned(ap_const_lv5_1));
    add_ln135_1_fu_1211_p2 <= std_logic_vector(unsigned(zext_ln135_3_fu_1207_p1) + unsigned(shl_ln_reg_1391));
    add_ln135_2_fu_1089_p2 <= std_logic_vector(unsigned(zext_ln132_fu_1085_p1) + unsigned(output_ftmap));
    add_ln135_3_fu_1237_p2 <= std_logic_vector(signed(sext_ln135_1_fu_1233_p1) + signed(add_ln135_2_reg_1579));
    add_ln135_4_fu_1228_p2 <= std_logic_vector(unsigned(sub_ln135_reg_1597) + unsigned(zext_ln135_4_fu_1224_p1));
    add_ln135_5_fu_1075_p2 <= std_logic_vector(unsigned(zext_ln135_5_fu_1071_p1) + unsigned(zext_ln135_fu_1059_p1));
    add_ln135_6_fu_1098_p2 <= std_logic_vector(unsigned(add_ln135_5_reg_1569) + unsigned(zext_ln135_6_fu_1094_p1));
    add_ln135_7_fu_1119_p2 <= std_logic_vector(unsigned(p_shl_fu_1111_p3) + unsigned(zext_ln135_7_fu_1103_p1));
    add_ln135_8_fu_1180_p2 <= std_logic_vector(unsigned(add_ln135_7_reg_1584) + unsigned(zext_ln135_8_fu_1176_p1));
    add_ln135_fu_1202_p2 <= std_logic_vector(unsigned(zext_ln107_reg_1386) + unsigned(tx_reg_471));
    add_ln32_fu_541_p2 <= std_logic_vector(unsigned(tj_fu_176) + unsigned(ap_const_lv4_1));
    add_ln33_fu_561_p2 <= std_logic_vector(unsigned(ti_reg_314) + unsigned(ap_const_lv4_1));
    add_ln47_fu_842_p2 <= std_logic_vector(unsigned(nout_reg_381) + unsigned(ap_const_lv6_1));
    add_ln49_1_fu_930_p2 <= std_logic_vector(unsigned(ty_reg_392) + unsigned(ap_const_lv5_1));
    add_ln49_fu_864_p2 <= std_logic_vector(unsigned(zext_ln49_fu_860_p1) + unsigned(conv2_weights));
    add_ln50_fu_956_p2 <= std_logic_vector(unsigned(tx_3_reg_403) + unsigned(ap_const_lv5_1));
    add_ln62_fu_1031_p2 <= std_logic_vector(unsigned(nin_2_reg_415) + unsigned(ap_const_lv7_1));
    add_ln65_1_fu_988_p2 <= std_logic_vector(unsigned(add_ln65_fu_982_p2) + unsigned(ty_cast57_reg_1475));
    add_ln65_2_fu_1009_p2 <= std_logic_vector(unsigned(p_shl7_fu_1001_p3) + unsigned(zext_ln65_2_fu_993_p1));
    add_ln65_3_fu_1015_p2 <= std_logic_vector(unsigned(add_ln65_2_fu_1009_p2) + unsigned(tx_3_cast58_reg_1507));
    add_ln65_fu_982_p2 <= std_logic_vector(unsigned(zext_ln65_1_fu_978_p1) + unsigned(zext_ln65_fu_966_p1));
    and_ln136_fu_1297_p2 <= (or_ln136_fu_1291_p2 and grp_fu_605_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(ap_block_state21_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state21_io)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(m_axi_gmem_RVALID, icmp_ln131_reg_1555)
    begin
        if (((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;

    ap_ST_fsm_state57_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;

    ap_ST_fsm_state62_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state21_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln50_reg_1498)
    begin
                ap_block_state21_io <= ((icmp_ln50_reg_1498 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state47_assign_proc : process(m_axi_gmem_RVALID, icmp_ln131_reg_1555)
    begin
                ap_block_state47 <= ((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_535_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln32_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_535_p2)
    begin
        if (((icmp_ln32_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln118_fu_810_p1 <= gmem_addr_8_read_reg_1451;
    bitcast_ln135_fu_1262_p1 <= add_i_reg_1626;
    bitcast_ln65_fu_1037_p1 <= gmem_addr_7_read_reg_1530;
    empty_100_fu_940_p2 <= std_logic_vector(unsigned(empty_99_reg_1480) + unsigned(tx_3_cast_fu_936_p1));
    empty_104_fu_1081_p1 <= m_axi_gmem_RDATA;
    empty_105_fu_1141_p2 <= std_logic_vector(unsigned(zext_ln132_1_fu_1125_p1) + unsigned(tmp_4_reg_1364));
    empty_107_fu_1317_p2 <= std_logic_vector(unsigned(empty_106_reg_482) + unsigned(ap_const_lv14_1));
    empty_91_fu_577_p2 <= std_logic_vector(unsigned(empty_reg_326) + unsigned(ap_const_lv15_1));
    empty_92_fu_691_p2 <= std_logic_vector(unsigned(zext_ln110_fu_675_p1) + unsigned(tmp_4_reg_1364));
    empty_93_fu_720_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_704_p1) - unsigned(p_shl5_cast_fu_716_p1));
    empty_94_fu_758_p2 <= std_logic_vector(unsigned(tmp1_fu_753_p2) + unsigned(tmp_cast_fu_740_p1));
    empty_96_fu_830_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_826_p1) + unsigned(nout_cast_fu_814_p1));
    empty_97_fu_897_p2 <= std_logic_vector(unsigned(empty_96_reg_1456) + unsigned(ty_cast_fu_893_p1));
    empty_98_fu_906_p1 <= empty_97_fu_897_p2(10 - 1 downto 0);
    empty_99_fu_918_p2 <= std_logic_vector(unsigned(p_shl6_fu_910_p3) + unsigned(p_cast_fu_902_p1));
    exitcond6017_fu_1311_p2 <= "1" when (empty_106_reg_482 = ap_const_lv14_2420) else "0";
    exitcond6_fu_571_p2 <= "1" when (empty_reg_326 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1498)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state47, icmp_ln131_reg_1555, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_493_p0_assign_proc : process(output_fm_buffer_load_1_reg_1621, empty_102_reg_426, ap_CS_fsm_state34, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_493_p0 <= output_fm_buffer_load_1_reg_1621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_493_p0 <= empty_102_reg_426;
        else 
            grp_fu_493_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_493_p1_assign_proc : process(mul_reg_1545, empty_104_reg_1574, ap_CS_fsm_state34, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_493_p1 <= empty_104_reg_1574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_493_p1 <= mul_reg_1545;
        else 
            grp_fu_493_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_597_p_ce <= ap_const_logic_1;
    grp_fu_597_p_din0 <= grp_fu_493_p0;
    grp_fu_597_p_din1 <= grp_fu_493_p1;
    grp_fu_597_p_opcode <= ap_const_lv2_0;
    grp_fu_601_p_ce <= ap_const_logic_1;
    grp_fu_601_p_din0 <= bitcast_ln65_fu_1037_p1;
    grp_fu_601_p_din1 <= input_fm_buffer_1_load_reg_1535;
    grp_fu_605_p_ce <= ap_const_logic_1;
    grp_fu_605_p_din0 <= add_i_reg_1626;
    grp_fu_605_p_din1 <= ap_const_lv32_0;
    grp_fu_605_p_opcode <= ap_const_lv5_4;
    icmp_ln109_fu_632_p2 <= "1" when (nin_reg_337 = ap_const_lv7_40) else "0";
    icmp_ln110_fu_679_p2 <= "1" when (by_reg_359 = ap_const_lv5_11) else "0";
    icmp_ln111_fu_798_p2 <= "1" when (bx_reg_370 = ap_const_lv5_11) else "0";
    icmp_ln131_fu_1041_p2 <= "1" when (nout_1_reg_437 = ap_const_lv6_20) else "0";
    icmp_ln132_fu_1129_p2 <= "1" when (ty_2_reg_460 = ap_const_lv5_11) else "0";
    icmp_ln133_fu_1190_p2 <= "1" when (tx_reg_471 = ap_const_lv5_11) else "0";
    icmp_ln136_1_fu_1285_p2 <= "1" when (trunc_ln136_fu_1275_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_1279_p2 <= "0" when (tmp_5_fu_1265_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_fu_535_p2 <= "1" when (tj_fu_176 = ap_const_lv4_F) else "0";
    icmp_ln33_fu_555_p2 <= "1" when (ti_reg_314 = ap_const_lv4_F) else "0";
    icmp_ln47_fu_836_p2 <= "1" when (nout_reg_381 = ap_const_lv6_20) else "0";
    icmp_ln49_fu_924_p2 <= "1" when (ty_reg_392 = ap_const_lv5_11) else "0";
    icmp_ln50_fu_950_p2 <= "1" when (tx_3_reg_403 = ap_const_lv5_11) else "0";
    icmp_ln62_fu_1025_p2 <= "1" when (nin_2_reg_415 = ap_const_lv7_40) else "0";

    input_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_state4, input_fm_buffer_1_addr_1_reg_1438, ap_CS_fsm_state29, ap_CS_fsm_state17, p_cast59_fu_583_p1, zext_ln65_3_fu_1020_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_fm_buffer_1_address0 <= zext_ln65_3_fu_1020_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_1_reg_1438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_address0 <= p_cast59_fu_583_p1(15 - 1 downto 0);
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state17, bitcast_ln118_fu_810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_1_d0 <= bitcast_ln118_fu_810_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state4, exitcond6_fu_571_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond6_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1498, gmem_addr_reg_1350, gmem_addr_8_reg_1432, gmem_addr_7_reg_1469, ap_block_state21_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_1350;
        elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= gmem_addr_7_reg_1469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_8_reg_1432;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1498, ap_block_state21_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_20;
        elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_0))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_11;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1498, ap_block_state21_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1498 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_9_reg_1615;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state50)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state47, icmp_ln131_reg_1555, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((not(((icmp_ln131_reg_1555 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln131_reg_1555 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= select_ln136_reg_1632;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    nout_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_381),11));
    or_ln136_fu_1291_p2 <= (icmp_ln136_fu_1279_p2 or icmp_ln136_1_fu_1285_p2);

    output_fm_buffer_address0_assign_proc : process(output_fm_buffer_addr_1_reg_1493, ap_CS_fsm_state29, ap_CS_fsm_state49, ap_CS_fsm_state63, zext_ln135_9_fu_1185_p1, p_cast71_fu_1323_p1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            output_fm_buffer_address0 <= p_cast71_fu_1323_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_fm_buffer_address0 <= zext_ln135_9_fu_1185_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_1_reg_1493;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state49, ap_CS_fsm_state63, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state63, empty_102_reg_426)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            output_fm_buffer_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_fm_buffer_d0 <= empty_102_reg_426;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state63, exitcond6017_fu_1311_p2, icmp_ln62_fu_1025_p2)
    begin
        if ((((exitcond6017_fu_1311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((icmp_ln62_fu_1025_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast10_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_93_fu_720_p2),25));

    p_cast59_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_326),64));
    p_cast70_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_100_fu_940_p2),64));
    p_cast71_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_106_reg_482),64));
    p_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_fu_897_p2),14));
    p_shl1_fu_661_p3 <= (trunc_ln118_fu_657_p1 & ap_const_lv4_0);
    p_shl4_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_696_p3),19));
    p_shl4_fu_696_p3 <= (empty_92_fu_691_p2 & ap_const_lv10_0);
    p_shl5_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_708_p3),19));
    p_shl5_fu_708_p3 <= (empty_92_fu_691_p2 & ap_const_lv2_0);
    p_shl6_fu_910_p3 <= (empty_98_fu_906_p1 & ap_const_lv4_0);
    p_shl7_fu_1001_p3 <= (trunc_ln65_fu_997_p1 & ap_const_lv4_0);
    p_shl_fu_1111_p3 <= (trunc_ln135_fu_1107_p1 & ap_const_lv4_0);
    select_ln136_fu_1303_p3 <= 
        ap_const_lv32_0 when (and_ln136_fu_1297_p2(0) = '1') else 
        bitcast_ln135_fu_1262_p1;
        sext_ln111_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_764_p4),64));

        sext_ln131_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_507_p4),64));

        sext_ln135_1_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln135_4_fu_1228_p2),64));

        sext_ln135_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1242_p4),64));

        sext_ln62_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_869_p4),64));

    shl_ln135_1_fu_1158_p3 <= (empty_105_fu_1141_p2 & ap_const_lv2_0);
    shl_ln135_2_fu_1216_p3 <= (add_ln135_1_fu_1211_p2 & ap_const_lv2_0);
    shl_ln3_fu_852_p3 <= (trunc_ln49_fu_848_p1 & ap_const_lv8_0);
    shl_ln4_fu_1146_p3 <= (empty_105_fu_1141_p2 & ap_const_lv10_0);
    shl_ln_fu_592_p3 <= (ti_reg_314 & ap_const_lv4_0);
    sub_ln135_fu_1170_p2 <= std_logic_vector(unsigned(zext_ln135_1_fu_1154_p1) - unsigned(zext_ln135_2_fu_1166_p1));
    tmp1_fu_753_p2 <= std_logic_vector(signed(tmp2_cast_fu_749_p1) + signed(input_ftmap));
        tmp2_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_744_p2),64));

    tmp2_fu_744_p2 <= std_logic_vector(unsigned(zext_ln109_reg_1396) + unsigned(p_cast10_fu_726_p1));
    tmp_1_fu_970_p3 <= (nin_2_reg_415 & ap_const_lv4_0);
    tmp_4_fu_547_p3 <= (tj_fu_176 & tj_fu_176);
    tmp_5_fu_1265_p4 <= bitcast_ln135_fu_1262_p1(30 downto 23);
    tmp_7_fu_614_p3 <= (nin_reg_337 & ap_const_lv4_0);
    tmp_8_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_818_p3),11));
    tmp_8_fu_818_p3 <= (nout_reg_381 & ap_const_lv4_0);
    tmp_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_730_p4),64));
    tmp_fu_730_p4 <= ((ti_reg_314 & ti_reg_314) & ap_const_lv2_0);
    tmp_s_fu_1063_p3 <= (nout_1_reg_437 & ap_const_lv4_0);
    trunc_ln118_fu_657_p1 <= add_ln118_1_fu_648_p2(11 - 1 downto 0);
    trunc_ln135_fu_1107_p1 <= add_ln135_6_fu_1098_p2(10 - 1 downto 0);
    trunc_ln136_fu_1275_p1 <= bitcast_ln135_fu_1262_p1(23 - 1 downto 0);
    trunc_ln1_fu_1242_p4 <= add_ln135_3_fu_1237_p2(63 downto 2);
    trunc_ln49_fu_848_p1 <= nout_reg_381(5 - 1 downto 0);
    trunc_ln65_fu_997_p1 <= add_ln65_1_fu_988_p2(11 - 1 downto 0);
    trunc_ln8_fu_869_p4 <= add_ln49_fu_864_p2(63 downto 2);
    trunc_ln9_fu_764_p4 <= empty_94_fu_758_p2(63 downto 2);
    trunc_ln_fu_507_p4 <= conv2_biases(63 downto 2);
    tx_3_cast58_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_403),15));
    tx_3_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_403),14));
    ty_cast57_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_392),12));
    ty_cast_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_392),11));
    zext_ln107_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_reg_314),5));
    zext_ln109_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_348),25));
    zext_ln110_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_359),8));
    zext_ln118_1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_614_p3),12));
    zext_ln118_2_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_359),12));
    zext_ln118_3_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_1_fu_648_p2),15));
    zext_ln118_4_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_370),15));
    zext_ln118_5_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_3_fu_788_p2),64));
    zext_ln118_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_reg_337),12));
    zext_ln132_1_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_2_reg_460),8));
    zext_ln132_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul55_reg_449),64));
    zext_ln135_1_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_1146_p3),19));
    zext_ln135_2_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln135_1_fu_1158_p3),19));
    zext_ln135_3_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_fu_1202_p2),8));
    zext_ln135_4_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln135_2_fu_1216_p3),19));
    zext_ln135_5_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1063_p3),11));
    zext_ln135_6_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_2_reg_460),11));
    zext_ln135_7_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_6_fu_1098_p2),14));
    zext_ln135_8_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_471),14));
    zext_ln135_9_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_8_fu_1180_p2),64));
    zext_ln135_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_1_reg_437),11));
    zext_ln49_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_852_p3),64));
    zext_ln65_1_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_970_p3),12));
    zext_ln65_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_1_fu_988_p2),15));
    zext_ln65_3_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_3_fu_1015_p2),64));
    zext_ln65_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_2_reg_415),12));
end behav;
