-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i2_AWVALID : OUT STD_LOGIC;
    m_axi_i2_AWREADY : IN STD_LOGIC;
    m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WVALID : OUT STD_LOGIC;
    m_axi_i2_WREADY : IN STD_LOGIC;
    m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_WLAST : OUT STD_LOGIC;
    m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARVALID : OUT STD_LOGIC;
    m_axi_i2_ARREADY : IN STD_LOGIC;
    m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RVALID : IN STD_LOGIC;
    m_axi_i2_RREADY : OUT STD_LOGIC;
    m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_RLAST : IN STD_LOGIC;
    m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BVALID : IN STD_LOGIC;
    m_axi_i2_BREADY : OUT STD_LOGIC;
    m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_AWVALID : OUT STD_LOGIC;
    m_axi_w2_AWREADY : IN STD_LOGIC;
    m_axi_w2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_WVALID : OUT STD_LOGIC;
    m_axi_w2_WREADY : IN STD_LOGIC;
    m_axi_w2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_WLAST : OUT STD_LOGIC;
    m_axi_w2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_ARVALID : OUT STD_LOGIC;
    m_axi_w2_ARREADY : IN STD_LOGIC;
    m_axi_w2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RVALID : IN STD_LOGIC;
    m_axi_w2_RREADY : OUT STD_LOGIC;
    m_axi_w2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_RLAST : IN STD_LOGIC;
    m_axi_w2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_w2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_BVALID : IN STD_LOGIC;
    m_axi_w2_BREADY : OUT STD_LOGIC;
    m_axi_w2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWVALID : OUT STD_LOGIC;
    m_axi_i3_AWREADY : IN STD_LOGIC;
    m_axi_i3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WVALID : OUT STD_LOGIC;
    m_axi_i3_WREADY : IN STD_LOGIC;
    m_axi_i3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_WLAST : OUT STD_LOGIC;
    m_axi_i3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARVALID : OUT STD_LOGIC;
    m_axi_i3_ARREADY : IN STD_LOGIC;
    m_axi_i3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RVALID : IN STD_LOGIC;
    m_axi_i3_RREADY : OUT STD_LOGIC;
    m_axi_i3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_RLAST : IN STD_LOGIC;
    m_axi_i3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BVALID : IN STD_LOGIC;
    m_axi_i3_BREADY : OUT STD_LOGIC;
    m_axi_i3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_523_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_523_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_ce : OUT STD_LOGIC;
    grp_fu_527_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_ce : OUT STD_LOGIC;
    grp_fu_531_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_531_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_531_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_531_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_531_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv11_242 : STD_LOGIC_VECTOR (10 downto 0) := "01001000010";
    constant ap_const_lv11_363 : STD_LOGIC_VECTOR (10 downto 0) := "01101100011";
    constant ap_const_lv11_484 : STD_LOGIC_VECTOR (10 downto 0) := "10010000100";
    constant ap_const_lv11_5A5 : STD_LOGIC_VECTOR (10 downto 0) := "10110100101";
    constant ap_const_lv12_6C6 : STD_LOGIC_VECTOR (11 downto 0) := "011011000110";
    constant ap_const_lv12_7E7 : STD_LOGIC_VECTOR (11 downto 0) := "011111100111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_ce0 : STD_LOGIC;
    signal input_fm_buffer_1_we0 : STD_LOGIC;
    signal input_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_ce1 : STD_LOGIC;
    signal input_fm_buffer_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_0_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_0_we0 : STD_LOGIC;
    signal weights_buffer_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_1_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_1_we0 : STD_LOGIC;
    signal weights_buffer_0_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_2_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_2_we0 : STD_LOGIC;
    signal weights_buffer_0_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_3_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_3_we0 : STD_LOGIC;
    signal weights_buffer_0_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_4_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_4_we0 : STD_LOGIC;
    signal weights_buffer_0_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_5_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_5_we0 : STD_LOGIC;
    signal weights_buffer_0_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_6_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_6_we0 : STD_LOGIC;
    signal weights_buffer_0_0_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_buffer_0_0_7_ce0 : STD_LOGIC;
    signal weights_buffer_0_0_7_we0 : STD_LOGIC;
    signal weights_buffer_0_0_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal i3_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal i3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal add_ln30_1_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_1_reg_1377 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln30_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_reg_1382 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln30_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_667_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_1_reg_1387 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_fu_675_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_reg_1392 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_mid2_fu_679_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid2_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln30_2_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln30_2_reg_1402 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_711_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_reg_1407 : STD_LOGIC_VECTOR (7 downto 0);
    signal ti_cast9_fu_719_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast9_reg_1412 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1417 : STD_LOGIC_VECTOR (7 downto 0);
    signal tn_1_fu_737_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tn_1_reg_1425 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tn0_fu_747_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tn0_reg_1430 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln38_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_784_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_1435 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln55_fu_796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_reg_1443 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln55_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_buffer_0_0_0_load_reg_1488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weights_buffer_0_0_1_load_reg_1493 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_2_load_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_3_load_reg_1503 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_4_load_reg_1508 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_5_load_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_6_load_reg_1518 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_7_load_reg_1523 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln73_fu_822_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_reg_1528 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln73_23_fu_836_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_23_reg_1533 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_24_fu_842_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_24_reg_1538 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_25_fu_848_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_25_reg_1543 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_26_fu_854_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_26_reg_1548 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_27_fu_860_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_27_reg_1553 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_28_fu_866_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_28_reg_1558 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_29_fu_872_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_29_reg_1563 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_100_fu_899_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_100_reg_1568 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln58_fu_911_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_reg_1576 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_fm_buffer_1_addr_290_reg_1591 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_addr_291_reg_1596 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_addr_292_reg_1601 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_addr_293_reg_1606 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_addr_294_reg_1611 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_1_addr_295_reg_1616 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_fm_buffer_addr_1_reg_1621 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_fu_1029_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln59_reg_1629 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_fm_buffer_1_load_2_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_fm_buffer_1_load_3_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_4_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_fm_buffer_1_load_5_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_1_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_2_reg_1664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mul49_3_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal mul49_5_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul49_7_reg_1689 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln141_1_fu_1035_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln141_1_reg_1694 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln147_5_fu_1062_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln147_5_reg_1699 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln141_fu_1074_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln141_reg_1707 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln141_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln147_2_fu_1084_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln147_2_reg_1717 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_102_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_102_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln147_7_fu_1136_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln147_7_reg_1727 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln143_fu_1148_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln143_reg_1735 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln147_fu_1192_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln147_reg_1740 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln143_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln145_fu_1218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln145_reg_1753 : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_addr_reg_1758 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln145_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_addr_read_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln147_fu_1284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln148_fu_1330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln148_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_load_buffer_tile_c2_fu_534_ap_start : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_ap_done : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_ap_idle : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_ap_ready : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WLAST : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_RREADY : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_i2_BREADY : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WLAST : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARVALID : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_RREADY : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_m_axi_w2_BREADY : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_ce0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_we0 : STD_LOGIC;
    signal grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_1_fu_565_ap_start : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_ap_done : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_ap_idle : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_ap_ready : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_output_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv2_Pipeline_1_fu_565_output_fm_buffer_ce0 : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_output_fm_buffer_we0 : STD_LOGIC;
    signal grp_conv2_Pipeline_1_fu_565_output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tn_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal nout_1_reg_457 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln58_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ty_3_reg_468 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln59_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_3_reg_479 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal nout_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_501 : STD_LOGIC_VECTOR (22 downto 0);
    signal ty_reg_512 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_reg_523 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_load_buffer_tile_c2_fu_534_ap_start_reg : STD_LOGIC := '0';
    signal grp_conv2_Pipeline_1_fu_565_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal zext_ln55_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_22_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_23_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_24_fu_958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_25_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_26_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_27_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_28_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_29_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast140_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_9_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln147_fu_1274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ti_fu_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_fu_1089_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tj_fu_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_575_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln31_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_mid1_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_743_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_772_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_cast_fu_780_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal nout_1_cast_fu_768_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_810_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln73_15_fu_818_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_14_fu_806_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_17_fu_832_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_16_fu_828_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_fu_802_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_98_fu_878_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_99_fu_887_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_891_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_fu_883_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln73_21_fu_929_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_30_fu_933_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_31_fu_943_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_20_fu_925_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_32_fu_953_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_33_fu_963_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_34_fu_973_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_35_fu_983_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_19_fu_921_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_36_fu_993_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_37_fu_1003_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_18_fu_917_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_101_fu_1013_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_fu_1050_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln147_5_fu_1058_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln147_fu_1046_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln143_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_6_fu_1111_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln147_6_fu_1115_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln147_fu_1124_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_1128_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln147_7_fu_1120_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_1154_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_1159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_103_fu_1163_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_1168_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln147_1_fu_1180_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln147_1_fu_1176_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln147_2_fu_1188_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln147_8_fu_1198_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln147_8_fu_1202_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln147_fu_1224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln147_3_fu_1229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln147_1_fu_1233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln147_2_fu_1238_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln147_4_fu_1246_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln147_4_fu_1250_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln147_1_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln147_3_fu_1259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1264_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln147_1_fu_1288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1292_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln148_fu_1302_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln148_1_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln148_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_571_ce : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_load_buffer_tile_c2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_i2_AWVALID : OUT STD_LOGIC;
        m_axi_i2_AWREADY : IN STD_LOGIC;
        m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_WVALID : OUT STD_LOGIC;
        m_axi_i2_WREADY : IN STD_LOGIC;
        m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_WLAST : OUT STD_LOGIC;
        m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_ARVALID : OUT STD_LOGIC;
        m_axi_i2_ARREADY : IN STD_LOGIC;
        m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RVALID : IN STD_LOGIC;
        m_axi_i2_RREADY : OUT STD_LOGIC;
        m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_RLAST : IN STD_LOGIC;
        m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_BVALID : IN STD_LOGIC;
        m_axi_i2_BREADY : OUT STD_LOGIC;
        m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_fm : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_w2_AWVALID : OUT STD_LOGIC;
        m_axi_w2_AWREADY : IN STD_LOGIC;
        m_axi_w2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_w2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_w2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_w2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_w2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_WVALID : OUT STD_LOGIC;
        m_axi_w2_WREADY : IN STD_LOGIC;
        m_axi_w2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_w2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_WLAST : OUT STD_LOGIC;
        m_axi_w2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_ARVALID : OUT STD_LOGIC;
        m_axi_w2_ARREADY : IN STD_LOGIC;
        m_axi_w2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_w2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_w2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_w2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_w2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_w2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_RVALID : IN STD_LOGIC;
        m_axi_w2_RREADY : OUT STD_LOGIC;
        m_axi_w2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_w2_RLAST : IN STD_LOGIC;
        m_axi_w2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_w2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_BVALID : IN STD_LOGIC;
        m_axi_w2_BREADY : OUT STD_LOGIC;
        m_axi_w2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_w2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_w2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        tx0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ty0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tn0 : IN STD_LOGIC_VECTOR (5 downto 0);
        input_fm_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_fm_buffer_1_ce0 : OUT STD_LOGIC;
        input_fm_buffer_1_we0 : OUT STD_LOGIC;
        input_fm_buffer_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_0_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_0_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_1_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_1_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_2_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_2_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_3_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_3_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_4_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_4_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_5_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_5_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_6_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_6_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_buffer_0_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        weights_buffer_0_0_7_ce0 : OUT STD_LOGIC;
        weights_buffer_0_0_7_we0 : OUT STD_LOGIC;
        weights_buffer_0_0_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_fm_buffer_ce0 : OUT STD_LOGIC;
        output_fm_buffer_we0 : OUT STD_LOGIC;
        output_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv2_input_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_1_U : component srcnn_conv2_input_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2312,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_1_address0,
        ce0 => input_fm_buffer_1_ce0,
        we0 => input_fm_buffer_1_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_d0,
        q0 => input_fm_buffer_1_q0,
        address1 => input_fm_buffer_1_address1,
        ce1 => input_fm_buffer_1_ce1,
        q1 => input_fm_buffer_1_q1);

    weights_buffer_0_0_0_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_0_address0,
        ce0 => weights_buffer_0_0_0_ce0,
        we0 => weights_buffer_0_0_0_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_d0,
        q0 => weights_buffer_0_0_0_q0);

    weights_buffer_0_0_1_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_1_address0,
        ce0 => weights_buffer_0_0_1_ce0,
        we0 => weights_buffer_0_0_1_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_d0,
        q0 => weights_buffer_0_0_1_q0);

    weights_buffer_0_0_2_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_2_address0,
        ce0 => weights_buffer_0_0_2_ce0,
        we0 => weights_buffer_0_0_2_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_d0,
        q0 => weights_buffer_0_0_2_q0);

    weights_buffer_0_0_3_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_3_address0,
        ce0 => weights_buffer_0_0_3_ce0,
        we0 => weights_buffer_0_0_3_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_d0,
        q0 => weights_buffer_0_0_3_q0);

    weights_buffer_0_0_4_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_4_address0,
        ce0 => weights_buffer_0_0_4_ce0,
        we0 => weights_buffer_0_0_4_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_d0,
        q0 => weights_buffer_0_0_4_q0);

    weights_buffer_0_0_5_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_5_address0,
        ce0 => weights_buffer_0_0_5_ce0,
        we0 => weights_buffer_0_0_5_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_d0,
        q0 => weights_buffer_0_0_5_q0);

    weights_buffer_0_0_6_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_6_address0,
        ce0 => weights_buffer_0_0_6_ce0,
        we0 => weights_buffer_0_0_6_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_d0,
        q0 => weights_buffer_0_0_6_q0);

    weights_buffer_0_0_7_U : component srcnn_conv2_weights_buffer_0_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_buffer_0_0_7_address0,
        ce0 => weights_buffer_0_0_7_ce0,
        we0 => weights_buffer_0_0_7_we0,
        d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_d0,
        q0 => weights_buffer_0_0_7_q0);

    output_fm_buffer_U : component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 9248,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);

    grp_load_buffer_tile_c2_fu_534 : component srcnn_load_buffer_tile_c2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_buffer_tile_c2_fu_534_ap_start,
        ap_done => grp_load_buffer_tile_c2_fu_534_ap_done,
        ap_idle => grp_load_buffer_tile_c2_fu_534_ap_idle,
        ap_ready => grp_load_buffer_tile_c2_fu_534_ap_ready,
        m_axi_i2_AWVALID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWVALID,
        m_axi_i2_AWREADY => ap_const_logic_0,
        m_axi_i2_AWADDR => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWADDR,
        m_axi_i2_AWID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWID,
        m_axi_i2_AWLEN => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWLEN,
        m_axi_i2_AWSIZE => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWSIZE,
        m_axi_i2_AWBURST => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWBURST,
        m_axi_i2_AWLOCK => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWLOCK,
        m_axi_i2_AWCACHE => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWCACHE,
        m_axi_i2_AWPROT => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWPROT,
        m_axi_i2_AWQOS => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWQOS,
        m_axi_i2_AWREGION => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWREGION,
        m_axi_i2_AWUSER => grp_load_buffer_tile_c2_fu_534_m_axi_i2_AWUSER,
        m_axi_i2_WVALID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WVALID,
        m_axi_i2_WREADY => ap_const_logic_0,
        m_axi_i2_WDATA => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WDATA,
        m_axi_i2_WSTRB => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WSTRB,
        m_axi_i2_WLAST => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WLAST,
        m_axi_i2_WID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WID,
        m_axi_i2_WUSER => grp_load_buffer_tile_c2_fu_534_m_axi_i2_WUSER,
        m_axi_i2_ARVALID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARVALID,
        m_axi_i2_ARREADY => m_axi_i2_ARREADY,
        m_axi_i2_ARADDR => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARADDR,
        m_axi_i2_ARID => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARID,
        m_axi_i2_ARLEN => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLEN,
        m_axi_i2_ARSIZE => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARSIZE,
        m_axi_i2_ARBURST => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARBURST,
        m_axi_i2_ARLOCK => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLOCK,
        m_axi_i2_ARCACHE => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARCACHE,
        m_axi_i2_ARPROT => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARPROT,
        m_axi_i2_ARQOS => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARQOS,
        m_axi_i2_ARREGION => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARREGION,
        m_axi_i2_ARUSER => grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARUSER,
        m_axi_i2_RVALID => m_axi_i2_RVALID,
        m_axi_i2_RREADY => grp_load_buffer_tile_c2_fu_534_m_axi_i2_RREADY,
        m_axi_i2_RDATA => m_axi_i2_RDATA,
        m_axi_i2_RLAST => m_axi_i2_RLAST,
        m_axi_i2_RID => m_axi_i2_RID,
        m_axi_i2_RFIFONUM => m_axi_i2_RFIFONUM,
        m_axi_i2_RUSER => m_axi_i2_RUSER,
        m_axi_i2_RRESP => m_axi_i2_RRESP,
        m_axi_i2_BVALID => ap_const_logic_0,
        m_axi_i2_BREADY => grp_load_buffer_tile_c2_fu_534_m_axi_i2_BREADY,
        m_axi_i2_BRESP => ap_const_lv2_0,
        m_axi_i2_BID => ap_const_lv1_0,
        m_axi_i2_BUSER => ap_const_lv1_0,
        input_fm => input_ftmap,
        m_axi_w2_AWVALID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWVALID,
        m_axi_w2_AWREADY => ap_const_logic_0,
        m_axi_w2_AWADDR => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWADDR,
        m_axi_w2_AWID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWID,
        m_axi_w2_AWLEN => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWLEN,
        m_axi_w2_AWSIZE => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWSIZE,
        m_axi_w2_AWBURST => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWBURST,
        m_axi_w2_AWLOCK => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWLOCK,
        m_axi_w2_AWCACHE => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWCACHE,
        m_axi_w2_AWPROT => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWPROT,
        m_axi_w2_AWQOS => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWQOS,
        m_axi_w2_AWREGION => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWREGION,
        m_axi_w2_AWUSER => grp_load_buffer_tile_c2_fu_534_m_axi_w2_AWUSER,
        m_axi_w2_WVALID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WVALID,
        m_axi_w2_WREADY => ap_const_logic_0,
        m_axi_w2_WDATA => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WDATA,
        m_axi_w2_WSTRB => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WSTRB,
        m_axi_w2_WLAST => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WLAST,
        m_axi_w2_WID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WID,
        m_axi_w2_WUSER => grp_load_buffer_tile_c2_fu_534_m_axi_w2_WUSER,
        m_axi_w2_ARVALID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARVALID,
        m_axi_w2_ARREADY => m_axi_w2_ARREADY,
        m_axi_w2_ARADDR => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARADDR,
        m_axi_w2_ARID => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARID,
        m_axi_w2_ARLEN => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLEN,
        m_axi_w2_ARSIZE => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARSIZE,
        m_axi_w2_ARBURST => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARBURST,
        m_axi_w2_ARLOCK => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLOCK,
        m_axi_w2_ARCACHE => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARCACHE,
        m_axi_w2_ARPROT => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARPROT,
        m_axi_w2_ARQOS => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARQOS,
        m_axi_w2_ARREGION => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARREGION,
        m_axi_w2_ARUSER => grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARUSER,
        m_axi_w2_RVALID => m_axi_w2_RVALID,
        m_axi_w2_RREADY => grp_load_buffer_tile_c2_fu_534_m_axi_w2_RREADY,
        m_axi_w2_RDATA => m_axi_w2_RDATA,
        m_axi_w2_RLAST => m_axi_w2_RLAST,
        m_axi_w2_RID => m_axi_w2_RID,
        m_axi_w2_RFIFONUM => m_axi_w2_RFIFONUM,
        m_axi_w2_RUSER => m_axi_w2_RUSER,
        m_axi_w2_RRESP => m_axi_w2_RRESP,
        m_axi_w2_BVALID => ap_const_logic_0,
        m_axi_w2_BREADY => grp_load_buffer_tile_c2_fu_534_m_axi_w2_BREADY,
        m_axi_w2_BRESP => ap_const_lv2_0,
        m_axi_w2_BID => ap_const_lv1_0,
        m_axi_w2_BUSER => ap_const_lv1_0,
        conv2_weights => conv2_weights,
        tx0 => tmp_9_reg_1417,
        ty0 => select_ln30_2_reg_1402,
        tn0 => tn0_reg_1430,
        input_fm_buffer_1_address0 => grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_address0,
        input_fm_buffer_1_ce0 => grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_ce0,
        input_fm_buffer_1_we0 => grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_we0,
        input_fm_buffer_1_d0 => grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_d0,
        weights_buffer_0_0_0_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_address0,
        weights_buffer_0_0_0_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_ce0,
        weights_buffer_0_0_0_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_we0,
        weights_buffer_0_0_0_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_d0,
        weights_buffer_0_0_1_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_address0,
        weights_buffer_0_0_1_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_ce0,
        weights_buffer_0_0_1_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_we0,
        weights_buffer_0_0_1_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_d0,
        weights_buffer_0_0_2_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_address0,
        weights_buffer_0_0_2_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_ce0,
        weights_buffer_0_0_2_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_we0,
        weights_buffer_0_0_2_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_d0,
        weights_buffer_0_0_3_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_address0,
        weights_buffer_0_0_3_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_ce0,
        weights_buffer_0_0_3_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_we0,
        weights_buffer_0_0_3_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_d0,
        weights_buffer_0_0_4_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_address0,
        weights_buffer_0_0_4_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_ce0,
        weights_buffer_0_0_4_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_we0,
        weights_buffer_0_0_4_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_d0,
        weights_buffer_0_0_5_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_address0,
        weights_buffer_0_0_5_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_ce0,
        weights_buffer_0_0_5_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_we0,
        weights_buffer_0_0_5_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_d0,
        weights_buffer_0_0_6_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_address0,
        weights_buffer_0_0_6_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_ce0,
        weights_buffer_0_0_6_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_we0,
        weights_buffer_0_0_6_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_d0,
        weights_buffer_0_0_7_address0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_address0,
        weights_buffer_0_0_7_ce0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_ce0,
        weights_buffer_0_0_7_we0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_we0,
        weights_buffer_0_0_7_d0 => grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_d0);

    grp_conv2_Pipeline_1_fu_565 : component srcnn_conv2_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2_Pipeline_1_fu_565_ap_start,
        ap_done => grp_conv2_Pipeline_1_fu_565_ap_done,
        ap_idle => grp_conv2_Pipeline_1_fu_565_ap_idle,
        ap_ready => grp_conv2_Pipeline_1_fu_565_ap_ready,
        output_fm_buffer_address0 => grp_conv2_Pipeline_1_fu_565_output_fm_buffer_address0,
        output_fm_buffer_ce0 => grp_conv2_Pipeline_1_fu_565_output_fm_buffer_ce0,
        output_fm_buffer_we0 => grp_conv2_Pipeline_1_fu_565_output_fm_buffer_we0,
        output_fm_buffer_d0 => grp_conv2_Pipeline_1_fu_565_output_fm_buffer_d0);

    fmul_32ns_32ns_32_3_max_dsp_1_U186 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_579_p0,
        din1 => grp_fu_579_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_579_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv2_Pipeline_1_fu_565_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2_Pipeline_1_fu_565_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln141_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    grp_conv2_Pipeline_1_fu_565_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_Pipeline_1_fu_565_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_Pipeline_1_fu_565_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_buffer_tile_c2_fu_534_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_buffer_tile_c2_fu_534_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_load_buffer_tile_c2_fu_534_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_buffer_tile_c2_fu_534_ap_ready = ap_const_logic_1)) then 
                    grp_load_buffer_tile_c2_fu_534_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_198 <= ap_const_lv8_0;
            elsif (((icmp_ln141_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                indvar_flatten_fu_198 <= add_ln30_1_reg_1377;
            end if; 
        end if;
    end process;

    nout_1_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load_buffer_tile_c2_fu_534_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nout_1_reg_457 <= ap_const_lv6_0;
            elsif (((icmp_ln58_fu_905_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                nout_1_reg_457 <= add_ln55_reg_1443;
            end if; 
        end if;
    end process;

    nout_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                nout_reg_490 <= ap_const_lv6_0;
            elsif (((icmp_ln143_fu_1142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                nout_reg_490 <= add_ln141_reg_1707;
            end if; 
        end if;
    end process;

    phi_mul_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_501 <= ap_const_lv23_0;
            elsif (((icmp_ln143_fu_1142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                phi_mul_reg_501 <= add_ln141_1_reg_1694;
            end if; 
        end if;
    end process;

    ti_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ti_fu_190 <= ap_const_lv4_0;
            elsif (((icmp_ln141_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                ti_fu_190 <= add_ln31_fu_1089_p2;
            end if; 
        end if;
    end process;

    tj_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_194 <= ap_const_lv4_0;
            elsif (((icmp_ln141_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                tj_fu_194 <= select_ln30_1_reg_1387;
            end if; 
        end if;
    end process;

    tn_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tn_reg_446 <= tn_1_reg_1425;
            elsif (((icmp_ln30_fu_629_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tn_reg_446 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tx_3_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_905_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                tx_3_reg_479 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                tx_3_reg_479 <= add_ln59_reg_1629;
            end if; 
        end if;
    end process;

    tx_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_1142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tx_reg_523 <= ap_const_lv5_0;
            elsif (((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                tx_reg_523 <= add_ln145_reg_1753;
            end if; 
        end if;
    end process;

    ty_3_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ty_3_reg_468 <= ap_const_lv5_0;
            elsif (((icmp_ln59_fu_1023_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                ty_3_reg_468 <= add_ln58_reg_1576;
            end if; 
        end if;
    end process;

    ty_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                ty_reg_512 <= ap_const_lv5_0;
            elsif (((icmp_ln145_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                ty_reg_512 <= add_ln143_reg_1735;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln141_1_reg_1694 <= add_ln141_1_fu_1035_p2;
                add_ln141_reg_1707 <= add_ln141_fu_1074_p2;
                add_ln147_5_reg_1699 <= add_ln147_5_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln143_reg_1735 <= add_ln143_fu_1148_p2;
                add_ln147_7_reg_1727 <= add_ln147_7_fu_1136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln145_reg_1753 <= add_ln145_fu_1218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_1068_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                add_ln147_2_reg_1717 <= add_ln147_2_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln30_1_reg_1377 <= add_ln30_1_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln55_reg_1443 <= add_ln55_fu_796_p2;
                empty_reg_1435 <= empty_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln58_reg_1576 <= add_ln58_fu_911_p2;
                add_ln73_23_reg_1533 <= add_ln73_23_fu_836_p2;
                add_ln73_24_reg_1538 <= add_ln73_24_fu_842_p2;
                add_ln73_25_reg_1543 <= add_ln73_25_fu_848_p2;
                add_ln73_26_reg_1548 <= add_ln73_26_fu_854_p2;
                add_ln73_27_reg_1553 <= add_ln73_27_fu_860_p2;
                add_ln73_28_reg_1558 <= add_ln73_28_fu_866_p2;
                add_ln73_29_reg_1563 <= add_ln73_29_fu_872_p2;
                add_ln73_reg_1528 <= add_ln73_fu_822_p2;
                empty_100_reg_1568 <= empty_100_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln59_reg_1629 <= add_ln59_fu_1029_p2;
                    input_fm_buffer_1_addr_290_reg_1591(10 downto 0) <= zext_ln73_24_fu_958_p1(12 - 1 downto 0)(10 downto 0);
                    input_fm_buffer_1_addr_291_reg_1596(10 downto 0) <= zext_ln73_25_fu_968_p1(12 - 1 downto 0)(10 downto 0);
                    input_fm_buffer_1_addr_292_reg_1601(10 downto 0) <= zext_ln73_26_fu_978_p1(12 - 1 downto 0)(10 downto 0);
                    input_fm_buffer_1_addr_293_reg_1606(10 downto 0) <= zext_ln73_27_fu_988_p1(12 - 1 downto 0)(10 downto 0);
                input_fm_buffer_1_addr_294_reg_1611 <= zext_ln73_28_fu_998_p1(12 - 1 downto 0);
                input_fm_buffer_1_addr_295_reg_1616 <= zext_ln73_29_fu_1008_p1(12 - 1 downto 0);
                output_fm_buffer_addr_1_reg_1621 <= p_cast140_fu_1018_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                empty_102_reg_1722 <= empty_102_fu_1107_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                i3_addr_read_reg_1765 <= m_axi_i3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                i3_addr_reg_1758 <= sext_ln147_fu_1274_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_fm_buffer_1_load_2_reg_1634 <= input_fm_buffer_1_q1;
                input_fm_buffer_1_load_3_reg_1639 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_fm_buffer_1_load_4_reg_1644 <= input_fm_buffer_1_q1;
                input_fm_buffer_1_load_5_reg_1649 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul49_1_reg_1659 <= grp_fu_579_p2;
                mul_reg_1654 <= grp_fu_527_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul49_2_reg_1664 <= grp_fu_527_p_dout0;
                mul49_3_reg_1669 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul49_4_reg_1674 <= grp_fu_527_p_dout0;
                mul49_5_reg_1679 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul49_6_reg_1684 <= grp_fu_527_p_dout0;
                mul49_7_reg_1689 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_629_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    p_shl1_reg_1407(7 downto 4) <= p_shl1_fu_711_p3(7 downto 4);
                    p_shl_mid2_reg_1397(7 downto 4) <= p_shl_mid2_fu_679_p3(7 downto 4);
                select_ln30_1_reg_1387 <= select_ln30_1_fu_667_p3;
                select_ln30_2_reg_1402 <= select_ln30_2_fu_703_p3;
                select_ln30_reg_1382 <= select_ln30_fu_659_p3;
                    ti_cast9_reg_1412(3 downto 0) <= ti_cast9_fu_719_p1(3 downto 0);
                tmp_9_reg_1417 <= tmp_9_fu_723_p3;
                    zext_ln30_reg_1392(3 downto 0) <= zext_ln30_fu_675_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_588 <= input_fm_buffer_1_q1;
                reg_593 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state50))) then
                reg_598 <= output_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_603 <= grp_fu_523_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                select_ln148_reg_1775 <= select_ln148_fu_1330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_1142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    sub_ln147_reg_1740(18 downto 2) <= sub_ln147_fu_1192_p2(18 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tn0_reg_1430(5 downto 3) <= tn0_fu_747_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tn_1_reg_1425 <= tn_1_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weights_buffer_0_0_0_load_reg_1488 <= weights_buffer_0_0_0_q0;
                weights_buffer_0_0_1_load_reg_1493 <= weights_buffer_0_0_1_q0;
                weights_buffer_0_0_2_load_reg_1498 <= weights_buffer_0_0_2_q0;
                weights_buffer_0_0_3_load_reg_1503 <= weights_buffer_0_0_3_q0;
                weights_buffer_0_0_4_load_reg_1508 <= weights_buffer_0_0_4_q0;
                weights_buffer_0_0_5_load_reg_1513 <= weights_buffer_0_0_5_q0;
                weights_buffer_0_0_6_load_reg_1518 <= weights_buffer_0_0_6_q0;
                weights_buffer_0_0_7_load_reg_1523 <= weights_buffer_0_0_7_q0;
            end if;
        end if;
    end process;
    zext_ln30_reg_1392(4) <= '0';
    p_shl_mid2_reg_1397(3 downto 0) <= "0000";
    p_shl1_reg_1407(3 downto 0) <= "0000";
    ti_cast9_reg_1412(4) <= '0';
    tn0_reg_1430(2 downto 0) <= "000";
    input_fm_buffer_1_addr_290_reg_1591(11) <= '0';
    input_fm_buffer_1_addr_291_reg_1596(11) <= '0';
    input_fm_buffer_1_addr_292_reg_1601(11) <= '0';
    input_fm_buffer_1_addr_293_reg_1606(11) <= '0';
    sub_ln147_reg_1740(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_i3_AWREADY, m_axi_i3_WREADY, m_axi_i3_ARREADY, m_axi_i3_RVALID, m_axi_i3_BVALID, ap_CS_fsm_state50, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state2, icmp_ln30_fu_629_p2, ap_CS_fsm_state3, icmp_ln38_fu_731_p2, ap_CS_fsm_state5, icmp_ln55_fu_790_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state46, icmp_ln141_fu_1068_p2, ap_CS_fsm_state48, icmp_ln143_fu_1142_p2, ap_CS_fsm_state49, icmp_ln145_fu_1212_p2, grp_load_buffer_tile_c2_fu_534_ap_done, grp_conv2_Pipeline_1_fu_565_ap_done, icmp_ln58_fu_905_p2, ap_CS_fsm_state4, icmp_ln59_fu_1023_p2, ap_CS_fsm_state71)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln30_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln38_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_load_buffer_tile_c2_fu_534_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln55_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln58_fu_905_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln59_fu_1023_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln141_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln143_fu_1142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln145_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (((m_axi_i3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((m_axi_i3_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((m_axi_i3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((grp_conv2_Pipeline_1_fu_565_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln141_1_fu_1035_p2 <= std_logic_vector(unsigned(phi_mul_reg_501) + unsigned(ap_const_lv23_3F804));
    add_ln141_fu_1074_p2 <= std_logic_vector(unsigned(nout_reg_490) + unsigned(ap_const_lv6_1));
    add_ln143_fu_1148_p2 <= std_logic_vector(unsigned(ty_reg_512) + unsigned(ap_const_lv5_1));
    add_ln145_fu_1218_p2 <= std_logic_vector(unsigned(tx_reg_523) + unsigned(ap_const_lv5_1));
    add_ln147_1_fu_1233_p2 <= std_logic_vector(unsigned(zext_ln147_3_fu_1229_p1) + unsigned(p_shl1_reg_1407));
    add_ln147_2_fu_1084_p2 <= std_logic_vector(unsigned(zext_ln143_fu_1080_p1) + unsigned(output_ftmap));
    add_ln147_3_fu_1259_p2 <= std_logic_vector(signed(sext_ln147_1_fu_1255_p1) + signed(add_ln147_2_reg_1717));
    add_ln147_4_fu_1250_p2 <= std_logic_vector(unsigned(sub_ln147_reg_1740) + unsigned(zext_ln147_4_fu_1246_p1));
    add_ln147_5_fu_1062_p2 <= std_logic_vector(unsigned(zext_ln147_5_fu_1058_p1) + unsigned(zext_ln147_fu_1046_p1));
    add_ln147_6_fu_1115_p2 <= std_logic_vector(unsigned(add_ln147_5_reg_1699) + unsigned(zext_ln147_6_fu_1111_p1));
    add_ln147_7_fu_1136_p2 <= std_logic_vector(unsigned(p_shl6_fu_1128_p3) + unsigned(zext_ln147_7_fu_1120_p1));
    add_ln147_8_fu_1202_p2 <= std_logic_vector(unsigned(add_ln147_7_reg_1727) + unsigned(zext_ln147_8_fu_1198_p1));
    add_ln147_fu_1224_p2 <= std_logic_vector(unsigned(ti_cast9_reg_1412) + unsigned(tx_reg_523));
    add_ln30_1_fu_635_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_198) + unsigned(ap_const_lv8_1));
    add_ln30_fu_647_p2 <= std_logic_vector(unsigned(tj_fu_194) + unsigned(ap_const_lv4_1));
    add_ln31_fu_1089_p2 <= std_logic_vector(unsigned(select_ln30_reg_1382) + unsigned(ap_const_lv4_1));
    add_ln55_fu_796_p2 <= std_logic_vector(unsigned(nout_1_reg_457) + unsigned(ap_const_lv6_1));
    add_ln58_fu_911_p2 <= std_logic_vector(unsigned(ty_3_reg_468) + unsigned(ap_const_lv5_1));
    add_ln59_fu_1029_p2 <= std_logic_vector(unsigned(tx_3_reg_479) + unsigned(ap_const_lv5_1));
    add_ln73_23_fu_836_p2 <= std_logic_vector(unsigned(add_ln73_fu_822_p2) + unsigned(ap_const_lv10_121));
    add_ln73_24_fu_842_p2 <= std_logic_vector(unsigned(zext_ln73_17_fu_832_p1) + unsigned(ap_const_lv11_242));
    add_ln73_25_fu_848_p2 <= std_logic_vector(unsigned(zext_ln73_17_fu_832_p1) + unsigned(ap_const_lv11_363));
    add_ln73_26_fu_854_p2 <= std_logic_vector(unsigned(zext_ln73_17_fu_832_p1) + unsigned(ap_const_lv11_484));
    add_ln73_27_fu_860_p2 <= std_logic_vector(unsigned(zext_ln73_17_fu_832_p1) + unsigned(ap_const_lv11_5A5));
    add_ln73_28_fu_866_p2 <= std_logic_vector(unsigned(zext_ln73_16_fu_828_p1) + unsigned(ap_const_lv12_6C6));
    add_ln73_29_fu_872_p2 <= std_logic_vector(unsigned(zext_ln73_16_fu_828_p1) + unsigned(ap_const_lv12_7E7));
    add_ln73_30_fu_933_p2 <= std_logic_vector(unsigned(add_ln73_reg_1528) + unsigned(zext_ln73_21_fu_929_p1));
    add_ln73_31_fu_943_p2 <= std_logic_vector(unsigned(add_ln73_23_reg_1533) + unsigned(zext_ln73_21_fu_929_p1));
    add_ln73_32_fu_953_p2 <= std_logic_vector(unsigned(add_ln73_24_reg_1538) + unsigned(zext_ln73_20_fu_925_p1));
    add_ln73_33_fu_963_p2 <= std_logic_vector(unsigned(add_ln73_25_reg_1543) + unsigned(zext_ln73_20_fu_925_p1));
    add_ln73_34_fu_973_p2 <= std_logic_vector(unsigned(add_ln73_26_reg_1548) + unsigned(zext_ln73_20_fu_925_p1));
    add_ln73_35_fu_983_p2 <= std_logic_vector(unsigned(add_ln73_27_reg_1553) + unsigned(zext_ln73_20_fu_925_p1));
    add_ln73_36_fu_993_p2 <= std_logic_vector(unsigned(add_ln73_28_reg_1558) + unsigned(zext_ln73_19_fu_921_p1));
    add_ln73_37_fu_1003_p2 <= std_logic_vector(unsigned(add_ln73_29_reg_1563) + unsigned(zext_ln73_19_fu_921_p1));
    add_ln73_fu_822_p2 <= std_logic_vector(unsigned(zext_ln73_15_fu_818_p1) + unsigned(zext_ln73_14_fu_806_p1));
    and_ln148_fu_1324_p2 <= (or_ln148_fu_1318_p2 and grp_fu_531_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_load_buffer_tile_c2_fu_534_ap_done)
    begin
        if ((grp_load_buffer_tile_c2_fu_534_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state50_blk_assign_proc : process(m_axi_i3_ARREADY)
    begin
        if ((m_axi_i3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;

    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_i3_RVALID)
    begin
        if ((m_axi_i3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state59_blk_assign_proc : process(m_axi_i3_AWREADY)
    begin
        if ((m_axi_i3_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_i3_WREADY)
    begin
        if ((m_axi_i3_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state70_blk_assign_proc : process(m_axi_i3_BVALID)
    begin
        if ((m_axi_i3_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state70_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state70_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state71_blk_assign_proc : process(grp_conv2_Pipeline_1_fu_565_ap_done)
    begin
        if ((grp_conv2_Pipeline_1_fu_565_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln30_fu_629_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln30_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln30_fu_629_p2)
    begin
        if (((icmp_ln30_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln147_1_fu_1288_p1 <= reg_603;
    bitcast_ln147_fu_1284_p1 <= i3_addr_read_reg_1765;
    conv2_biases_address0 <= zext_ln141_fu_1041_p1(5 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_899_p2 <= std_logic_vector(unsigned(p_shl3_fu_891_p3) + unsigned(p_cast_fu_883_p1));
    empty_101_fu_1013_p2 <= std_logic_vector(unsigned(empty_100_reg_1568) + unsigned(zext_ln73_18_fu_917_p1));
    empty_102_fu_1107_p1 <= conv2_biases_q0;
    empty_103_fu_1163_p2 <= std_logic_vector(unsigned(tmp_cast_fu_1159_p1) + unsigned(p_shl_mid2_reg_1397));
    empty_98_fu_878_p2 <= std_logic_vector(unsigned(empty_reg_1435) + unsigned(zext_ln73_fu_802_p1));
    empty_99_fu_887_p1 <= empty_98_fu_878_p2(10 - 1 downto 0);
    empty_fu_784_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_780_p1) + unsigned(nout_1_cast_fu_768_p1));
    grp_conv2_Pipeline_1_fu_565_ap_start <= grp_conv2_Pipeline_1_fu_565_ap_start_reg;
    grp_fu_523_p_ce <= grp_fu_571_ce;
    grp_fu_523_p_din0 <= grp_fu_571_p0;
    grp_fu_523_p_din1 <= grp_fu_571_p1;
    grp_fu_523_p_opcode <= ap_const_lv2_0;
    grp_fu_527_p_ce <= ap_const_logic_1;
    grp_fu_527_p_din0 <= grp_fu_575_p0;
    grp_fu_527_p_din1 <= grp_fu_575_p1;
    grp_fu_531_p_ce <= ap_const_logic_1;
    grp_fu_531_p_din0 <= reg_603;
    grp_fu_531_p_din1 <= ap_const_lv32_0;
    grp_fu_531_p_opcode <= ap_const_lv5_4;

    grp_fu_571_ce_assign_proc : process(ap_CS_fsm_state1, m_axi_i3_AWREADY, ap_CS_fsm_state50, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state64, ap_CS_fsm_state4, ap_CS_fsm_state45, ap_CS_fsm_state71, ap_CS_fsm_state63, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) 
    or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state63) or ((m_axi_i3_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            grp_fu_571_ce <= ap_const_logic_0;
        else 
            grp_fu_571_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_571_p0_assign_proc : process(ap_CS_fsm_state59, reg_598, reg_603, ap_CS_fsm_state13, bitcast_ln147_fu_1284_p1, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_571_p0 <= bitcast_ln147_fu_1284_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_571_p0 <= reg_603;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_571_p0 <= reg_598;
        else 
            grp_fu_571_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_571_p1_assign_proc : process(ap_CS_fsm_state59, reg_603, mul_reg_1654, mul49_1_reg_1659, mul49_2_reg_1664, ap_CS_fsm_state13, mul49_3_reg_1669, mul49_4_reg_1674, mul49_5_reg_1679, mul49_6_reg_1684, mul49_7_reg_1689, empty_102_reg_1722, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_571_p1 <= reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_571_p1 <= empty_102_reg_1722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_571_p1 <= mul49_7_reg_1689;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_571_p1 <= mul49_6_reg_1684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_571_p1 <= mul49_5_reg_1679;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_571_p1 <= mul49_4_reg_1674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_571_p1 <= mul49_3_reg_1669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_571_p1 <= mul49_2_reg_1664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_571_p1 <= mul49_1_reg_1659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_571_p1 <= mul_reg_1654;
        else 
            grp_fu_571_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_575_p0_assign_proc : process(ap_CS_fsm_state12, weights_buffer_0_0_0_load_reg_1488, weights_buffer_0_0_2_load_reg_1498, weights_buffer_0_0_4_load_reg_1508, weights_buffer_0_0_6_load_reg_1518, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_575_p0 <= weights_buffer_0_0_6_load_reg_1518;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_575_p0 <= weights_buffer_0_0_4_load_reg_1508;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_575_p0 <= weights_buffer_0_0_2_load_reg_1498;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_575_p0 <= weights_buffer_0_0_0_load_reg_1488;
        else 
            grp_fu_575_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_575_p1_assign_proc : process(reg_588, ap_CS_fsm_state12, input_fm_buffer_1_load_2_reg_1634, ap_CS_fsm_state10, input_fm_buffer_1_load_4_reg_1644, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_575_p1 <= input_fm_buffer_1_load_4_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_575_p1 <= input_fm_buffer_1_load_2_reg_1634;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_575_p1 <= reg_588;
        else 
            grp_fu_575_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_579_p0_assign_proc : process(ap_CS_fsm_state12, weights_buffer_0_0_1_load_reg_1493, weights_buffer_0_0_3_load_reg_1503, weights_buffer_0_0_5_load_reg_1513, weights_buffer_0_0_7_load_reg_1523, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_579_p0 <= weights_buffer_0_0_7_load_reg_1523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_579_p0 <= weights_buffer_0_0_5_load_reg_1513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_579_p0 <= weights_buffer_0_0_3_load_reg_1503;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_579_p0 <= weights_buffer_0_0_1_load_reg_1493;
        else 
            grp_fu_579_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_579_p1_assign_proc : process(ap_CS_fsm_state12, reg_593, ap_CS_fsm_state10, input_fm_buffer_1_load_3_reg_1639, ap_CS_fsm_state11, input_fm_buffer_1_load_5_reg_1649, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_579_p1 <= input_fm_buffer_1_load_5_reg_1649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_579_p1 <= input_fm_buffer_1_load_3_reg_1639;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_579_p1 <= reg_593;
        else 
            grp_fu_579_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_load_buffer_tile_c2_fu_534_ap_start <= grp_load_buffer_tile_c2_fu_534_ap_start_reg;

    i3_blk_n_AR_assign_proc : process(m_axi_i3_ARREADY, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            i3_blk_n_AR <= m_axi_i3_ARREADY;
        else 
            i3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_AW_assign_proc : process(m_axi_i3_AWREADY, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            i3_blk_n_AW <= m_axi_i3_AWREADY;
        else 
            i3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_B_assign_proc : process(m_axi_i3_BVALID, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            i3_blk_n_B <= m_axi_i3_BVALID;
        else 
            i3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_R_assign_proc : process(m_axi_i3_RVALID, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            i3_blk_n_R <= m_axi_i3_RVALID;
        else 
            i3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_W_assign_proc : process(m_axi_i3_WREADY, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            i3_blk_n_W <= m_axi_i3_WREADY;
        else 
            i3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln141_fu_1068_p2 <= "1" when (nout_reg_490 = ap_const_lv6_20) else "0";
    icmp_ln143_fu_1142_p2 <= "1" when (ty_reg_512 = ap_const_lv5_11) else "0";
    icmp_ln145_fu_1212_p2 <= "1" when (tx_reg_523 = ap_const_lv5_11) else "0";
    icmp_ln148_1_fu_1312_p2 <= "1" when (trunc_ln148_fu_1302_p1 = ap_const_lv23_0) else "0";
    icmp_ln148_fu_1306_p2 <= "0" when (tmp_s_fu_1292_p4 = ap_const_lv8_FF) else "1";
    icmp_ln30_fu_629_p2 <= "1" when (indvar_flatten_fu_198 = ap_const_lv8_E1) else "0";
    icmp_ln31_fu_653_p2 <= "1" when (ti_fu_190 = ap_const_lv4_F) else "0";
    icmp_ln38_fu_731_p2 <= "1" when (tn_reg_446 = ap_const_lv4_8) else "0";
    icmp_ln55_fu_790_p2 <= "1" when (nout_1_reg_457 = ap_const_lv6_20) else "0";
    icmp_ln58_fu_905_p2 <= "1" when (ty_3_reg_468 = ap_const_lv5_11) else "0";
    icmp_ln59_fu_1023_p2 <= "1" when (tx_3_reg_479 = ap_const_lv5_11) else "0";

    input_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, input_fm_buffer_1_addr_291_reg_1596, input_fm_buffer_1_addr_293_reg_1606, input_fm_buffer_1_addr_295_reg_1616, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_address0, ap_CS_fsm_state4, zext_ln73_23_fu_948_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_295_reg_1616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_293_reg_1606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_291_reg_1596;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_1_address0 <= zext_ln73_23_fu_948_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_address0 <= grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_address0;
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, input_fm_buffer_1_addr_290_reg_1591, input_fm_buffer_1_addr_292_reg_1601, input_fm_buffer_1_addr_294_reg_1611, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln73_22_fu_938_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_fm_buffer_1_address1 <= input_fm_buffer_1_addr_294_reg_1611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_fm_buffer_1_address1 <= input_fm_buffer_1_addr_292_reg_1601;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_fm_buffer_1_address1 <= input_fm_buffer_1_addr_290_reg_1591;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_1_address1 <= zext_ln73_22_fu_938_p1(12 - 1 downto 0);
        else 
            input_fm_buffer_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_ce0 <= grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_ce0;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_fm_buffer_1_ce1 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_we0 <= grp_load_buffer_tile_c2_fu_534_input_fm_buffer_1_we0;
        else 
            input_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_ARADDR <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARADDR;
    m_axi_i2_ARBURST <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARBURST;
    m_axi_i2_ARCACHE <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARCACHE;
    m_axi_i2_ARID <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARID;
    m_axi_i2_ARLEN <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLEN;
    m_axi_i2_ARLOCK <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARLOCK;
    m_axi_i2_ARPROT <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARPROT;
    m_axi_i2_ARQOS <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARQOS;
    m_axi_i2_ARREGION <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARREGION;
    m_axi_i2_ARSIZE <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARSIZE;
    m_axi_i2_ARUSER <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARUSER;

    m_axi_i2_ARVALID_assign_proc : process(ap_CS_fsm_state3, icmp_ln38_fu_731_p2, grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_i2_ARVALID <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_ARVALID;
        else 
            m_axi_i2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_AWADDR <= ap_const_lv64_0;
    m_axi_i2_AWBURST <= ap_const_lv2_0;
    m_axi_i2_AWCACHE <= ap_const_lv4_0;
    m_axi_i2_AWID <= ap_const_lv1_0;
    m_axi_i2_AWLEN <= ap_const_lv32_0;
    m_axi_i2_AWLOCK <= ap_const_lv2_0;
    m_axi_i2_AWPROT <= ap_const_lv3_0;
    m_axi_i2_AWQOS <= ap_const_lv4_0;
    m_axi_i2_AWREGION <= ap_const_lv4_0;
    m_axi_i2_AWSIZE <= ap_const_lv3_0;
    m_axi_i2_AWUSER <= ap_const_lv1_0;
    m_axi_i2_AWVALID <= ap_const_logic_0;
    m_axi_i2_BREADY <= ap_const_logic_0;

    m_axi_i2_RREADY_assign_proc : process(ap_CS_fsm_state3, icmp_ln38_fu_731_p2, grp_load_buffer_tile_c2_fu_534_m_axi_i2_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_i2_RREADY <= grp_load_buffer_tile_c2_fu_534_m_axi_i2_RREADY;
        else 
            m_axi_i2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_WDATA <= ap_const_lv32_0;
    m_axi_i2_WID <= ap_const_lv1_0;
    m_axi_i2_WLAST <= ap_const_logic_0;
    m_axi_i2_WSTRB <= ap_const_lv4_0;
    m_axi_i2_WUSER <= ap_const_lv1_0;
    m_axi_i2_WVALID <= ap_const_logic_0;
    m_axi_i3_ARADDR <= i3_addr_reg_1758;
    m_axi_i3_ARBURST <= ap_const_lv2_0;
    m_axi_i3_ARCACHE <= ap_const_lv4_0;
    m_axi_i3_ARID <= ap_const_lv1_0;
    m_axi_i3_ARLEN <= ap_const_lv32_1;
    m_axi_i3_ARLOCK <= ap_const_lv2_0;
    m_axi_i3_ARPROT <= ap_const_lv3_0;
    m_axi_i3_ARQOS <= ap_const_lv4_0;
    m_axi_i3_ARREGION <= ap_const_lv4_0;
    m_axi_i3_ARSIZE <= ap_const_lv3_0;
    m_axi_i3_ARUSER <= ap_const_lv1_0;

    m_axi_i3_ARVALID_assign_proc : process(m_axi_i3_ARREADY, ap_CS_fsm_state50)
    begin
        if (((m_axi_i3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            m_axi_i3_ARVALID <= ap_const_logic_1;
        else 
            m_axi_i3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_AWADDR <= i3_addr_reg_1758;
    m_axi_i3_AWBURST <= ap_const_lv2_0;
    m_axi_i3_AWCACHE <= ap_const_lv4_0;
    m_axi_i3_AWID <= ap_const_lv1_0;
    m_axi_i3_AWLEN <= ap_const_lv32_1;
    m_axi_i3_AWLOCK <= ap_const_lv2_0;
    m_axi_i3_AWPROT <= ap_const_lv3_0;
    m_axi_i3_AWQOS <= ap_const_lv4_0;
    m_axi_i3_AWREGION <= ap_const_lv4_0;
    m_axi_i3_AWSIZE <= ap_const_lv3_0;
    m_axi_i3_AWUSER <= ap_const_lv1_0;

    m_axi_i3_AWVALID_assign_proc : process(m_axi_i3_AWREADY, ap_CS_fsm_state59)
    begin
        if (((m_axi_i3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_i3_AWVALID <= ap_const_logic_1;
        else 
            m_axi_i3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_i3_BREADY_assign_proc : process(m_axi_i3_BVALID, ap_CS_fsm_state70)
    begin
        if (((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            m_axi_i3_BREADY <= ap_const_logic_1;
        else 
            m_axi_i3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_i3_RREADY_assign_proc : process(m_axi_i3_RVALID, ap_CS_fsm_state58)
    begin
        if (((m_axi_i3_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            m_axi_i3_RREADY <= ap_const_logic_1;
        else 
            m_axi_i3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_WDATA <= select_ln148_reg_1775;
    m_axi_i3_WID <= ap_const_lv1_0;
    m_axi_i3_WLAST <= ap_const_logic_0;
    m_axi_i3_WSTRB <= ap_const_lv4_F;
    m_axi_i3_WUSER <= ap_const_lv1_0;

    m_axi_i3_WVALID_assign_proc : process(m_axi_i3_WREADY, ap_CS_fsm_state65)
    begin
        if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            m_axi_i3_WVALID <= ap_const_logic_1;
        else 
            m_axi_i3_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_ARADDR <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARADDR;
    m_axi_w2_ARBURST <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARBURST;
    m_axi_w2_ARCACHE <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARCACHE;
    m_axi_w2_ARID <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARID;
    m_axi_w2_ARLEN <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLEN;
    m_axi_w2_ARLOCK <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARLOCK;
    m_axi_w2_ARPROT <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARPROT;
    m_axi_w2_ARQOS <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARQOS;
    m_axi_w2_ARREGION <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARREGION;
    m_axi_w2_ARSIZE <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARSIZE;
    m_axi_w2_ARUSER <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARUSER;

    m_axi_w2_ARVALID_assign_proc : process(ap_CS_fsm_state3, icmp_ln38_fu_731_p2, grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_w2_ARVALID <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_ARVALID;
        else 
            m_axi_w2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_AWADDR <= ap_const_lv64_0;
    m_axi_w2_AWBURST <= ap_const_lv2_0;
    m_axi_w2_AWCACHE <= ap_const_lv4_0;
    m_axi_w2_AWID <= ap_const_lv1_0;
    m_axi_w2_AWLEN <= ap_const_lv32_0;
    m_axi_w2_AWLOCK <= ap_const_lv2_0;
    m_axi_w2_AWPROT <= ap_const_lv3_0;
    m_axi_w2_AWQOS <= ap_const_lv4_0;
    m_axi_w2_AWREGION <= ap_const_lv4_0;
    m_axi_w2_AWSIZE <= ap_const_lv3_0;
    m_axi_w2_AWUSER <= ap_const_lv1_0;
    m_axi_w2_AWVALID <= ap_const_logic_0;
    m_axi_w2_BREADY <= ap_const_logic_0;

    m_axi_w2_RREADY_assign_proc : process(ap_CS_fsm_state3, icmp_ln38_fu_731_p2, grp_load_buffer_tile_c2_fu_534_m_axi_w2_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln38_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_w2_RREADY <= grp_load_buffer_tile_c2_fu_534_m_axi_w2_RREADY;
        else 
            m_axi_w2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_WDATA <= ap_const_lv32_0;
    m_axi_w2_WID <= ap_const_lv1_0;
    m_axi_w2_WLAST <= ap_const_logic_0;
    m_axi_w2_WSTRB <= ap_const_lv4_0;
    m_axi_w2_WUSER <= ap_const_lv1_0;
    m_axi_w2_WVALID <= ap_const_logic_0;
    nout_1_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_1_reg_457),11));
    or_ln148_fu_1318_p2 <= (icmp_ln148_fu_1306_p2 or icmp_ln148_1_fu_1312_p2);

    output_fm_buffer_address0_assign_proc : process(output_fm_buffer_addr_1_reg_1621, ap_CS_fsm_state11, ap_CS_fsm_state49, grp_conv2_Pipeline_1_fu_565_output_fm_buffer_address0, ap_CS_fsm_state45, ap_CS_fsm_state71, zext_ln147_9_fu_1207_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_fm_buffer_address0 <= zext_ln147_9_fu_1207_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_1_reg_1621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            output_fm_buffer_address0 <= grp_conv2_Pipeline_1_fu_565_output_fm_buffer_address0;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state49, grp_conv2_Pipeline_1_fu_565_output_fm_buffer_ce0, ap_CS_fsm_state45, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            output_fm_buffer_ce0 <= grp_conv2_Pipeline_1_fu_565_output_fm_buffer_ce0;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(reg_603, grp_conv2_Pipeline_1_fu_565_output_fm_buffer_d0, ap_CS_fsm_state45, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_fm_buffer_d0 <= reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            output_fm_buffer_d0 <= grp_conv2_Pipeline_1_fu_565_output_fm_buffer_d0;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(grp_conv2_Pipeline_1_fu_565_output_fm_buffer_we0, ap_CS_fsm_state45, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            output_fm_buffer_we0 <= grp_conv2_Pipeline_1_fu_565_output_fm_buffer_we0;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast140_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_101_fu_1013_p2),64));
    p_cast_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_98_fu_878_p2),14));
    p_shl1_fu_711_p3 <= (select_ln30_fu_659_p3 & ap_const_lv4_0);
    p_shl3_fu_891_p3 <= (empty_99_fu_887_p1 & ap_const_lv4_0);
    p_shl6_fu_1128_p3 <= (trunc_ln147_fu_1124_p1 & ap_const_lv4_0);
    p_shl_mid2_fu_679_p3 <= (select_ln30_1_fu_667_p3 & ap_const_lv4_0);
    select_ln148_fu_1330_p3 <= 
        ap_const_lv32_0 when (and_ln148_fu_1324_p2(0) = '1') else 
        bitcast_ln147_1_fu_1288_p1;
    select_ln30_1_fu_667_p3 <= 
        add_ln30_fu_647_p2 when (icmp_ln31_fu_653_p2(0) = '1') else 
        tj_fu_194;
    select_ln30_2_fu_703_p3 <= 
        tmp_8_mid1_fu_687_p3 when (icmp_ln31_fu_653_p2(0) = '1') else 
        tmp_10_fu_695_p3;
    select_ln30_fu_659_p3 <= 
        ap_const_lv4_0 when (icmp_ln31_fu_653_p2(0) = '1') else 
        ti_fu_190;
        sext_ln147_1_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln147_4_fu_1250_p2),64));

        sext_ln147_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1264_p4),64));

    shl_ln147_1_fu_1180_p3 <= (empty_103_fu_1163_p2 & ap_const_lv2_0);
    shl_ln147_2_fu_1238_p3 <= (add_ln147_1_fu_1233_p2 & ap_const_lv2_0);
    shl_ln_fu_1168_p3 <= (empty_103_fu_1163_p2 & ap_const_lv10_0);
    sub_ln147_fu_1192_p2 <= std_logic_vector(unsigned(zext_ln147_1_fu_1176_p1) - unsigned(zext_ln147_2_fu_1188_p1));
    ti_cast9_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_659_p3),5));
    tmp_10_fu_695_p3 <= (tj_fu_194 & tj_fu_194);
    tmp_11_fu_1050_p3 <= (nout_reg_490 & ap_const_lv4_0);
    tmp_12_fu_772_p3 <= (nout_1_reg_457 & ap_const_lv4_0);
    tmp_13_fu_810_p3 <= (ty_3_reg_468 & ap_const_lv4_0);
    tmp_22_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_772_p3),11));
    tmp_8_mid1_fu_687_p3 <= (add_ln30_fu_647_p2 & add_ln30_fu_647_p2);
    tmp_9_fu_723_p3 <= (select_ln30_fu_659_p3 & select_ln30_fu_659_p3);
    tmp_cast_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1154_p2),8));
    tmp_fu_1154_p2 <= std_logic_vector(unsigned(zext_ln30_reg_1392) + unsigned(ty_reg_512));
    tmp_s_fu_1292_p4 <= bitcast_ln147_1_fu_1288_p1(30 downto 23);
    tn0_fu_747_p3 <= (trunc_ln41_fu_743_p1 & ap_const_lv3_0);
    tn_1_fu_737_p2 <= std_logic_vector(unsigned(tn_reg_446) + unsigned(ap_const_lv4_1));
    trunc_ln147_fu_1124_p1 <= add_ln147_6_fu_1115_p2(10 - 1 downto 0);
    trunc_ln148_fu_1302_p1 <= bitcast_ln147_1_fu_1288_p1(23 - 1 downto 0);
    trunc_ln41_fu_743_p1 <= tn_reg_446(3 - 1 downto 0);
    trunc_ln_fu_1264_p4 <= add_ln147_3_fu_1259_p2(63 downto 2);

    weights_buffer_0_0_0_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_0_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_0_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_address0;
        else 
            weights_buffer_0_0_0_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_0_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_0_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_ce0;
        else 
            weights_buffer_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_0_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_0_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_0_we0;
        else 
            weights_buffer_0_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_1_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_1_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_1_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_address0;
        else 
            weights_buffer_0_0_1_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_1_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_1_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_ce0;
        else 
            weights_buffer_0_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_1_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_1_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_1_we0;
        else 
            weights_buffer_0_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_2_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_2_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_2_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_address0;
        else 
            weights_buffer_0_0_2_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_2_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_2_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_ce0;
        else 
            weights_buffer_0_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_2_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_2_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_2_we0;
        else 
            weights_buffer_0_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_3_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_3_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_3_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_address0;
        else 
            weights_buffer_0_0_3_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_3_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_3_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_ce0;
        else 
            weights_buffer_0_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_3_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_3_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_3_we0;
        else 
            weights_buffer_0_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_4_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_4_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_4_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_address0;
        else 
            weights_buffer_0_0_4_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_4_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_4_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_ce0;
        else 
            weights_buffer_0_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_4_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_4_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_4_we0;
        else 
            weights_buffer_0_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_5_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_5_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_5_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_address0;
        else 
            weights_buffer_0_0_5_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_5_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_5_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_ce0;
        else 
            weights_buffer_0_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_5_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_5_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_5_we0;
        else 
            weights_buffer_0_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_6_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_6_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_6_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_address0;
        else 
            weights_buffer_0_0_6_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_6_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_6_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_ce0;
        else 
            weights_buffer_0_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_6_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_6_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_6_we0;
        else 
            weights_buffer_0_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_7_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_address0, ap_CS_fsm_state4, zext_ln55_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_7_address0 <= zext_ln55_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_7_address0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_address0;
        else 
            weights_buffer_0_0_7_address0 <= "XXXXX";
        end if; 
    end process;


    weights_buffer_0_0_7_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_buffer_0_0_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_7_ce0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_ce0;
        else 
            weights_buffer_0_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_buffer_0_0_7_we0_assign_proc : process(grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_buffer_0_0_7_we0 <= grp_load_buffer_tile_c2_fu_534_weights_buffer_0_0_7_we0;
        else 
            weights_buffer_0_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln141_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_490),64));
    zext_ln143_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_501),64));
    zext_ln147_1_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1168_p3),19));
    zext_ln147_2_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln147_1_fu_1180_p3),19));
    zext_ln147_3_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_fu_1224_p2),8));
    zext_ln147_4_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln147_2_fu_1238_p3),19));
    zext_ln147_5_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1050_p3),11));
    zext_ln147_6_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_512),11));
    zext_ln147_7_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_6_fu_1115_p2),14));
    zext_ln147_8_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_523),14));
    zext_ln147_9_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_8_fu_1202_p2),64));
    zext_ln147_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_490),11));
    zext_ln30_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_fu_667_p3),5));
    zext_ln55_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_1_reg_457),64));
    zext_ln73_14_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_468),10));
    zext_ln73_15_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_810_p3),10));
    zext_ln73_16_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_fu_822_p2),12));
    zext_ln73_17_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_fu_822_p2),11));
    zext_ln73_18_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_479),14));
    zext_ln73_19_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_479),12));
    zext_ln73_20_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_479),11));
    zext_ln73_21_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_479),10));
    zext_ln73_22_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_30_fu_933_p2),64));
    zext_ln73_23_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_31_fu_943_p2),64));
    zext_ln73_24_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_32_fu_953_p2),64));
    zext_ln73_25_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_33_fu_963_p2),64));
    zext_ln73_26_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_34_fu_973_p2),64));
    zext_ln73_27_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_35_fu_983_p2),64));
    zext_ln73_28_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_36_fu_993_p2),64));
    zext_ln73_29_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_37_fu_1003_p2),64));
    zext_ln73_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_468),11));
end behav;
