-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal input_fm_buffer_1_ce0 : STD_LOGIC;
    signal input_fm_buffer_1_we0 : STD_LOGIC;
    signal input_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln131_reg_1561 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln50_reg_1514 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_addr_reg_1366 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_564_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1375 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_570_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1380 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_584_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_reg_1389 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_91_fu_600_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln109_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_reg_1402 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_625_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1407 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_630_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln109_1_reg_1412 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln109_1_fu_634_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln109_1_reg_1417 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln118_fu_656_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_reg_1422 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_668_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln109_reg_1430 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln118_2_fu_699_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_2_reg_1435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln110_fu_715_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln110_reg_1443 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_8_reg_1448 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln110_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_1_addr_1_reg_1454 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln111_fu_814_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln111_reg_1462 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_8_read_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_96_fu_836_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_96_reg_1472 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln47_fu_848_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln47_reg_1480 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_7_reg_1485 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_reg_1491 : STD_LOGIC_VECTOR (63 downto 0);
    signal ty_cast58_fu_900_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_cast58_reg_1496 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal empty_99_fu_929_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_99_reg_1501 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_1_fu_941_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_1_reg_1509 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln50_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln50_fu_953_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln50_reg_1518 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_3_cast59_fu_959_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_3_cast59_reg_1523 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_fm_buffer_addr_1_reg_1528 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal input_fm_buffer_1_addr_2_reg_1538 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln62_fu_1042_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_reg_1546 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln65_2_fu_1048_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln65_2_reg_1551 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln131_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln131_fu_1091_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln131_reg_1565 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln131_fu_1097_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln131_reg_1570 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln131_2_fu_1101_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln131_2_reg_1575 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state41 : BOOLEAN;
    signal add_ln135_1_fu_1123_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln135_1_reg_1580 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln135_fu_1129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln135_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_1139_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln9_reg_1590 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln135_3_fu_1172_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln135_3_reg_1595 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln132_fu_1188_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln132_reg_1603 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_9_reg_1608 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln132_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal add_ln133_fu_1287_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln133_reg_1622 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln136_fu_1315_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln136_reg_1627 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal empty_110_fu_1333_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ti_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5418_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_335 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln33_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_346 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_lcssa_phi_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_reg_369 : STD_LOGIC_VECTOR (23 downto 0);
    signal by_reg_380 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln111_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phi_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal bx_reg_403 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal nout_reg_414 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln49_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_reg_425 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state21_io : BOOLEAN;
    signal tx_3_reg_436 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln62_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_2_reg_448 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_102_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_1_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal phi_mul56_reg_482 : STD_LOGIC_VECTOR (22 downto 0);
    signal ty_2_reg_493 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_reg_504 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_109_reg_515 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast60_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_5_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast70_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_3_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_5_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast71_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln131_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln111_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln133_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln_fu_530_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_fu_611_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_644_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln118_1_fu_652_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_fu_640_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_2_fu_674_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_1_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln118_fu_687_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_691_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_3_fu_683_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln110_fu_705_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_92_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_726_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_fu_738_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_734_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl4_cast_fu_746_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_93_fu_750_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast7_fu_756_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp1_fu_760_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp1_cast_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_94_fu_769_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_774_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln118_4_fu_794_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_3_fu_798_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_824_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_cast_fu_832_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal nout_cast_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln49_fu_854_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_858_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln49_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln49_fu_870_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_875_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ty_cast_fu_904_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_97_fu_908_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_98_fu_917_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_fu_921_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_fu_913_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tx_3_cast_fu_963_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_100_fu_967_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_981_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln65_1_fu_989_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln65_fu_977_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_1_fu_993_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_2_fu_999_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln65_fu_1008_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_fu_1012_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln65_2_fu_1004_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_3_fu_1020_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_4_fu_1026_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln4_fu_1061_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln65_fu_526_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln65_fu_1069_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_s_fu_1111_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln135_1_fu_1119_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln135_fu_1107_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln135_fu_1135_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln135_2_fu_1147_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln135_2_fu_1151_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln135_1_fu_1160_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_1164_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln135_3_fu_1156_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln132_fu_1178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_104_fu_1194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1199_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl6_fu_1211_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_1207_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl6_cast_fu_1219_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_105_fu_1223_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast11_fu_1229_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp3_fu_1233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp3_cast_fu_1238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_106_fu_1242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_1247_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln135_4_fu_1267_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln135_4_fu_1271_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln135_2_fu_1293_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln135_fu_1297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_fu_1302_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln133_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_32s_18s_49_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_1_address0,
        ce0 => input_fm_buffer_1_ce0,
        we0 => input_fm_buffer_1_we0,
        d0 => input_fm_buffer_1_d0,
        q0 => input_fm_buffer_1_q0);

    output_fm_buffer_U : component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 9248,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);

    mul_32s_18s_49_1_1_U12 : component srcnn_mul_32s_18s_49_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 49)
    port map (
        din0 => input_fm_buffer_1_q0,
        din1 => trunc_ln65_2_reg_1551,
        dout => mul_ln65_fu_526_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                bx_reg_403 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bx_reg_403 <= add_ln111_reg_1462;
            end if; 
        end if;
    end process;

    by_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_662_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_380 <= ap_const_lv5_0;
            elsif (((icmp_ln111_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                by_reg_380 <= add_ln110_reg_1443;
            end if; 
        end if;
    end process;

    empty_102_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                empty_102_reg_459 <= add_ln65_fu_1069_p2(48 downto 17);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                empty_102_reg_459 <= output_fm_buffer_q0;
            end if; 
        end if;
    end process;

    empty_109_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_1))) then 
                empty_109_reg_515 <= ap_const_lv14_0;
            elsif (((exitcond5418_fu_1327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                empty_109_reg_515 <= empty_110_fu_1333_p2;
            end if; 
        end if;
    end process;

    empty_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_594_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_335 <= empty_91_fu_600_p2;
            elsif (((icmp_ln33_fu_578_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_335 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    nin_2_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                nin_2_reg_448 <= add_ln62_reg_1546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                nin_2_reg_448 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    nin_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_346 <= ap_const_lv7_0;
            elsif (((icmp_ln110_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_346 <= add_ln109_reg_1430;
            end if; 
        end if;
    end process;

    nout_1_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                nout_1_reg_470 <= ap_const_lv6_0;
            elsif (((icmp_ln132_fu_1182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                nout_1_reg_470 <= add_ln131_reg_1565;
            end if; 
        end if;
    end process;

    nout_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_662_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_414 <= ap_const_lv6_0;
            elsif (((icmp_ln49_fu_935_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                nout_reg_414 <= add_ln47_reg_1480;
            end if; 
        end if;
    end process;

    p_phi_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_662_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_phi_reg_391 <= p_lcssa_phi_reg_357;
            elsif (((icmp_ln111_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_phi_reg_391 <= zext_ln109_reg_1402;
            end if; 
        end if;
    end process;

    phi_mul56_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                phi_mul56_reg_482 <= ap_const_lv23_0;
            elsif (((icmp_ln132_fu_1182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                phi_mul56_reg_482 <= add_ln131_2_reg_1575;
            end if; 
        end if;
    end process;

    phi_mul_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_369 <= ap_const_lv24_0;
            elsif (((icmp_ln110_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_369 <= add_ln109_1_reg_1417;
            end if; 
        end if;
    end process;

    ti_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5418_fu_1327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                ti_reg_323 <= add_ln33_reg_1389;
            elsif (((icmp_ln32_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_323 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tj_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_186 <= ap_const_lv4_0;
            elsif (((icmp_ln33_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_186 <= add_ln32_reg_1375;
            end if; 
        end if;
    end process;

    tx_3_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_935_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                tx_3_reg_436 <= ap_const_lv5_0;
            elsif (((icmp_ln62_fu_1036_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                tx_3_reg_436 <= add_ln50_reg_1518;
            end if; 
        end if;
    end process;

    tx_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                tx_reg_504 <= ap_const_lv5_0;
            elsif (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                tx_reg_504 <= add_ln133_reg_1622;
            end if; 
        end if;
    end process;

    ty_2_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_0))) then 
                ty_2_reg_493 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                ty_2_reg_493 <= add_ln132_reg_1603;
            end if; 
        end if;
    end process;

    ty_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_842_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                ty_reg_425 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_1))) then 
                ty_reg_425 <= add_ln49_1_reg_1509;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln109_1_reg_1417 <= add_ln109_1_fu_634_p2;
                add_ln109_reg_1430 <= add_ln109_fu_668_p2;
                add_ln118_reg_1422 <= add_ln118_fu_656_p2;
                    zext_ln109_1_reg_1412(23 downto 0) <= zext_ln109_1_fu_630_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln110_reg_1443 <= add_ln110_fu_715_p2;
                add_ln118_2_reg_1435 <= add_ln118_2_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln111_reg_1462 <= add_ln111_fu_814_p2;
                input_fm_buffer_1_addr_1_reg_1454 <= zext_ln118_5_fu_803_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                add_ln131_2_reg_1575 <= add_ln131_2_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                add_ln131_reg_1565 <= add_ln131_fu_1091_p2;
                icmp_ln131_reg_1561 <= icmp_ln131_fu_1085_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln132_reg_1603 <= add_ln132_fu_1188_p2;
                add_ln135_3_reg_1595 <= add_ln135_3_fu_1172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln133_reg_1622 <= add_ln133_fu_1287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln135_1_reg_1580 <= add_ln135_1_fu_1123_p2;
                    zext_ln131_reg_1570(22 downto 0) <= zext_ln131_fu_1097_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln32_reg_1375 <= add_ln32_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln33_reg_1389 <= add_ln33_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln47_reg_1480 <= add_ln47_fu_848_p2;
                empty_96_reg_1472 <= empty_96_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_1_reg_1509 <= add_ln49_1_fu_941_p2;
                empty_99_reg_1501 <= empty_99_fu_929_p2;
                    ty_cast58_reg_1496(4 downto 0) <= ty_cast58_fu_900_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln50_reg_1518 <= add_ln50_fu_953_p2;
                icmp_ln50_reg_1514 <= icmp_ln50_fu_947_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln62_reg_1546 <= add_ln62_fu_1042_p2;
                input_fm_buffer_1_addr_2_reg_1538 <= zext_ln65_3_fu_1031_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_842_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                gmem_addr_7_reg_1485 <= sext_ln62_fu_885_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_8_read_reg_1467 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_709_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_8_reg_1448 <= sext_ln111_fu_784_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_1182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                gmem_addr_9_reg_1608 <= sext_ln133_fu_1257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_1366 <= sext_ln131_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                output_fm_buffer_addr_1_reg_1528 <= p_cast70_fu_972_p1(14 - 1 downto 0);
                    tx_3_cast59_reg_1523(4 downto 0) <= tx_3_cast59_fu_959_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                p_lcssa_phi_reg_357 <= p_phi_reg_391;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                select_ln136_reg_1627 <= select_ln136_fu_1315_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_0))) then
                    shl_ln135_reg_1585(31 downto 8) <= shl_ln135_fu_1129_p2(31 downto 8);
                    trunc_ln9_reg_1590(30 downto 8) <= trunc_ln9_fu_1139_p3(30 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp2_reg_1491 <= tmp2_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_4_reg_1380 <= tmp_4_fu_570_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_reg_1407 <= tmp_fu_625_p2;
                    zext_ln109_reg_1402(9 downto 2) <= zext_ln109_fu_621_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                trunc_ln65_2_reg_1551 <= trunc_ln65_2_fu_1048_p1;
            end if;
        end if;
    end process;
    zext_ln109_reg_1402(1 downto 0) <= "00";
    zext_ln109_reg_1402(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln109_1_reg_1412(24) <= '0';
    ty_cast58_reg_1496(11 downto 5) <= "0000000";
    tx_3_cast59_reg_1523(14 downto 5) <= "0000000000";
    zext_ln131_reg_1570(23) <= '0';
    shl_ln135_reg_1585(7 downto 0) <= "00000000";
    trunc_ln9_reg_1590(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state32, ap_CS_fsm_state41, icmp_ln131_reg_1561, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state21, icmp_ln50_reg_1514, ap_CS_fsm_state30, ap_CS_fsm_state43, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state2, icmp_ln32_fu_558_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_594_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln110_fu_709_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, icmp_ln47_fu_842_p2, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state42, icmp_ln132_fu_1182_p2, ap_CS_fsm_state44, ap_CS_fsm_state52, exitcond5418_fu_1327_p2, icmp_ln33_fu_578_p2, icmp_ln111_fu_808_p2, icmp_ln109_fu_662_p2, icmp_ln49_fu_935_p2, ap_block_state21_io, icmp_ln62_fu_1036_p2, icmp_ln133_fu_1281_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_558_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln33_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond7_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln109_fu_662_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln110_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln111_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln47_fu_842_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_935_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln62_fu_1036_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state32 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if ((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                elsif ((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln132_fu_1182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln133_fu_1281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((exitcond5418_fu_1327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln109_1_fu_634_p2 <= std_logic_vector(unsigned(phi_mul_reg_369) + unsigned(ap_const_lv24_3F804));
    add_ln109_fu_668_p2 <= std_logic_vector(unsigned(nin_reg_346) + unsigned(ap_const_lv7_1));
    add_ln110_fu_715_p2 <= std_logic_vector(unsigned(by_reg_380) + unsigned(ap_const_lv5_1));
    add_ln111_fu_814_p2 <= std_logic_vector(unsigned(bx_reg_403) + unsigned(ap_const_lv5_1));
    add_ln118_1_fu_678_p2 <= std_logic_vector(unsigned(add_ln118_reg_1422) + unsigned(zext_ln118_2_fu_674_p1));
    add_ln118_2_fu_699_p2 <= std_logic_vector(unsigned(p_shl1_fu_691_p3) + unsigned(zext_ln118_3_fu_683_p1));
    add_ln118_3_fu_798_p2 <= std_logic_vector(unsigned(add_ln118_2_reg_1435) + unsigned(zext_ln118_4_fu_794_p1));
    add_ln118_fu_656_p2 <= std_logic_vector(unsigned(zext_ln118_1_fu_652_p1) + unsigned(zext_ln118_fu_640_p1));
    add_ln131_2_fu_1101_p2 <= std_logic_vector(unsigned(phi_mul56_reg_482) + unsigned(ap_const_lv23_3F804));
    add_ln131_fu_1091_p2 <= std_logic_vector(unsigned(nout_1_reg_470) + unsigned(ap_const_lv6_1));
    add_ln132_fu_1188_p2 <= std_logic_vector(unsigned(ty_2_reg_493) + unsigned(ap_const_lv5_1));
    add_ln133_fu_1287_p2 <= std_logic_vector(unsigned(tx_reg_504) + unsigned(ap_const_lv5_1));
    add_ln135_1_fu_1123_p2 <= std_logic_vector(unsigned(zext_ln135_1_fu_1119_p1) + unsigned(zext_ln135_fu_1107_p1));
    add_ln135_2_fu_1151_p2 <= std_logic_vector(unsigned(add_ln135_1_reg_1580) + unsigned(zext_ln135_2_fu_1147_p1));
    add_ln135_3_fu_1172_p2 <= std_logic_vector(unsigned(p_shl_fu_1164_p3) + unsigned(zext_ln135_3_fu_1156_p1));
    add_ln135_4_fu_1271_p2 <= std_logic_vector(unsigned(add_ln135_3_reg_1595) + unsigned(zext_ln135_4_fu_1267_p1));
    add_ln135_fu_1297_p2 <= std_logic_vector(unsigned(output_fm_buffer_q0) + unsigned(shl_ln135_reg_1585));
    add_ln136_fu_1302_p2 <= std_logic_vector(unsigned(trunc_ln135_2_fu_1293_p1) + unsigned(trunc_ln9_reg_1590));
    add_ln32_fu_564_p2 <= std_logic_vector(unsigned(tj_fu_186) + unsigned(ap_const_lv4_1));
    add_ln33_fu_584_p2 <= std_logic_vector(unsigned(ti_reg_323) + unsigned(ap_const_lv4_1));
    add_ln47_fu_848_p2 <= std_logic_vector(unsigned(nout_reg_414) + unsigned(ap_const_lv6_1));
    add_ln49_1_fu_941_p2 <= std_logic_vector(unsigned(ty_reg_425) + unsigned(ap_const_lv5_1));
    add_ln49_fu_870_p2 <= std_logic_vector(unsigned(zext_ln49_fu_866_p1) + unsigned(conv2_weights));
    add_ln50_fu_953_p2 <= std_logic_vector(unsigned(tx_3_reg_436) + unsigned(ap_const_lv5_1));
    add_ln62_fu_1042_p2 <= std_logic_vector(unsigned(nin_2_reg_448) + unsigned(ap_const_lv7_1));
    add_ln65_1_fu_993_p2 <= std_logic_vector(unsigned(zext_ln65_1_fu_989_p1) + unsigned(zext_ln65_fu_977_p1));
    add_ln65_2_fu_999_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_993_p2) + unsigned(ty_cast58_reg_1496));
    add_ln65_3_fu_1020_p2 <= std_logic_vector(unsigned(p_shl8_fu_1012_p3) + unsigned(zext_ln65_2_fu_1004_p1));
    add_ln65_4_fu_1026_p2 <= std_logic_vector(unsigned(add_ln65_3_fu_1020_p2) + unsigned(tx_3_cast59_reg_1523));
    add_ln65_fu_1069_p2 <= std_logic_vector(unsigned(shl_ln4_fu_1061_p3) + unsigned(mul_ln65_fu_526_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(ap_block_state21_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state21_io)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_gmem_RVALID, icmp_ln131_reg_1561)
    begin
        if (((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;

    ap_ST_fsm_state43_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;

    ap_ST_fsm_state51_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state21_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln50_reg_1514)
    begin
                ap_block_state21_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln50_reg_1514 = ap_const_lv1_0));
    end process;


    ap_block_state41_assign_proc : process(m_axi_gmem_RVALID, icmp_ln131_reg_1561)
    begin
                ap_block_state41 <= ((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_558_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln32_fu_558_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_558_p2)
    begin
        if (((icmp_ln32_fu_558_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_967_p2 <= std_logic_vector(unsigned(empty_99_reg_1501) + unsigned(tx_3_cast_fu_963_p1));
    empty_104_fu_1194_p2 <= std_logic_vector(unsigned(zext_ln132_fu_1178_p1) + unsigned(tmp_4_reg_1380));
    empty_105_fu_1223_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1207_p1) - unsigned(p_shl6_cast_fu_1219_p1));
    empty_106_fu_1242_p2 <= std_logic_vector(signed(tmp3_cast_fu_1238_p1) + signed(tmp2_reg_1491));
    empty_110_fu_1333_p2 <= std_logic_vector(unsigned(empty_109_reg_515) + unsigned(ap_const_lv14_1));
    empty_91_fu_600_p2 <= std_logic_vector(unsigned(empty_reg_335) + unsigned(ap_const_lv15_1));
    empty_92_fu_721_p2 <= std_logic_vector(unsigned(zext_ln110_fu_705_p1) + unsigned(tmp_4_reg_1380));
    empty_93_fu_750_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_734_p1) - unsigned(p_shl4_cast_fu_746_p1));
    empty_94_fu_769_p2 <= std_logic_vector(signed(tmp1_cast_fu_765_p1) + signed(tmp_reg_1407));
    empty_96_fu_836_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_832_p1) + unsigned(nout_cast_fu_820_p1));
    empty_97_fu_908_p2 <= std_logic_vector(unsigned(empty_96_reg_1472) + unsigned(ty_cast_fu_904_p1));
    empty_98_fu_917_p1 <= empty_97_fu_908_p2(10 - 1 downto 0);
    empty_99_fu_929_p2 <= std_logic_vector(unsigned(p_shl7_fu_921_p3) + unsigned(p_cast_fu_913_p1));
    exitcond5418_fu_1327_p2 <= "1" when (empty_109_reg_515 = ap_const_lv14_2420) else "0";
    exitcond7_fu_594_p2 <= "1" when (empty_reg_335 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state32, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1514)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state41, icmp_ln131_reg_1561, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln109_fu_662_p2 <= "1" when (nin_reg_346 = ap_const_lv7_40) else "0";
    icmp_ln110_fu_709_p2 <= "1" when (by_reg_380 = ap_const_lv5_11) else "0";
    icmp_ln111_fu_808_p2 <= "1" when (bx_reg_403 = ap_const_lv5_11) else "0";
    icmp_ln131_fu_1085_p2 <= "1" when (nout_1_reg_470 = ap_const_lv6_20) else "0";
    icmp_ln132_fu_1182_p2 <= "1" when (ty_2_reg_493 = ap_const_lv5_11) else "0";
    icmp_ln133_fu_1281_p2 <= "1" when (tx_reg_504 = ap_const_lv5_11) else "0";
    icmp_ln32_fu_558_p2 <= "1" when (tj_fu_186 = ap_const_lv4_F) else "0";
    icmp_ln33_fu_578_p2 <= "1" when (ti_reg_323 = ap_const_lv4_F) else "0";
    icmp_ln47_fu_842_p2 <= "1" when (nout_reg_414 = ap_const_lv6_20) else "0";
    icmp_ln49_fu_935_p2 <= "1" when (ty_reg_425 = ap_const_lv5_11) else "0";
    icmp_ln50_fu_947_p2 <= "1" when (tx_3_reg_436 = ap_const_lv5_11) else "0";
    icmp_ln62_fu_1036_p2 <= "1" when (nin_2_reg_448 = ap_const_lv7_40) else "0";

    input_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state4, input_fm_buffer_1_addr_1_reg_1454, input_fm_buffer_1_addr_2_reg_1538, ap_CS_fsm_state17, p_cast60_fu_606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_2_reg_1538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_1_reg_1454;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_address0 <= p_cast60_fu_606_p1(15 - 1 downto 0);
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state30, ap_CS_fsm_state4, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_state4, gmem_addr_8_read_reg_1467, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_1_d0 <= gmem_addr_8_read_reg_1467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state4, exitcond7_fu_594_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond7_fu_594_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state32, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1514, gmem_addr_reg_1366, gmem_addr_8_reg_1448, gmem_addr_7_reg_1485, ap_block_state21_io)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_1366;
        elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= gmem_addr_7_reg_1485;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_ARADDR <= gmem_addr_8_reg_1448;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state32, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1514, ap_block_state21_io)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_20;
        elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_0))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_40;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_11;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state32, ap_CS_fsm_state7, ap_CS_fsm_state21, icmp_ln50_reg_1514, ap_block_state21_io)
    begin
        if ((((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln50_reg_1514 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_9_reg_1608;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_11;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state43)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state41, icmp_ln131_reg_1561, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((not(((icmp_ln131_reg_1561 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln131_reg_1561 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln136_reg_1627),32));
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state46)
    begin
        if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    nout_cast_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_414),11));

    output_fm_buffer_address0_assign_proc : process(output_fm_buffer_addr_1_reg_1528, ap_CS_fsm_state29, ap_CS_fsm_state44, ap_CS_fsm_state52, zext_ln135_5_fu_1276_p1, p_cast71_fu_1339_p1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output_fm_buffer_address0 <= p_cast71_fu_1339_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_fm_buffer_address0 <= zext_ln135_5_fu_1276_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_1_reg_1528;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state44, ap_CS_fsm_state52, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state52, empty_102_reg_459)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output_fm_buffer_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_fm_buffer_d0 <= empty_102_reg_459;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state52, exitcond5418_fu_1327_p2, icmp_ln62_fu_1036_p2)
    begin
        if ((((exitcond5418_fu_1327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((icmp_ln62_fu_1036_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast11_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_105_fu_1223_p2),24));

    p_cast60_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_335),64));
    p_cast70_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_100_fu_967_p2),64));
    p_cast71_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_109_reg_515),64));
        p_cast7_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_93_fu_750_p2),25));

    p_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_fu_908_p2),14));
    p_shl1_fu_691_p3 <= (trunc_ln118_fu_687_p1 & ap_const_lv4_0);
    p_shl3_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_726_p3),19));
    p_shl3_fu_726_p3 <= (empty_92_fu_721_p2 & ap_const_lv10_0);
    p_shl4_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_738_p3),19));
    p_shl4_fu_738_p3 <= (empty_92_fu_721_p2 & ap_const_lv2_0);
    p_shl5_cast_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_1199_p3),19));
    p_shl5_fu_1199_p3 <= (empty_104_fu_1194_p2 & ap_const_lv10_0);
    p_shl6_cast_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_1211_p3),19));
    p_shl6_fu_1211_p3 <= (empty_104_fu_1194_p2 & ap_const_lv2_0);
    p_shl7_fu_921_p3 <= (empty_98_fu_917_p1 & ap_const_lv4_0);
    p_shl8_fu_1012_p3 <= (trunc_ln65_fu_1008_p1 & ap_const_lv4_0);
    p_shl_fu_1164_p3 <= (trunc_ln135_1_fu_1160_p1 & ap_const_lv4_0);
    select_ln136_fu_1315_p3 <= 
        ap_const_lv31_0 when (tmp_8_fu_1307_p3(0) = '1') else 
        add_ln136_fu_1302_p2;
        sext_ln111_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_774_p4),64));

        sext_ln131_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_530_p4),64));

        sext_ln133_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1247_p4),64));

        sext_ln62_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_875_p4),64));

    shl_ln135_fu_1129_p2 <= std_logic_vector(shift_left(unsigned(m_axi_gmem_RDATA),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln4_fu_1061_p3 <= (empty_102_reg_459 & ap_const_lv17_0);
    shl_ln_fu_858_p3 <= (trunc_ln49_fu_854_p1 & ap_const_lv8_0);
        tmp1_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_760_p2),64));

    tmp1_fu_760_p2 <= std_logic_vector(unsigned(zext_ln109_1_reg_1412) + unsigned(p_cast7_fu_756_p1));
    tmp2_fu_895_p2 <= std_logic_vector(unsigned(p_lcssa_phi_reg_357) + unsigned(output_ftmap));
        tmp3_cast_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_1233_p2),64));

    tmp3_fu_1233_p2 <= std_logic_vector(unsigned(zext_ln131_reg_1570) + unsigned(p_cast11_fu_1229_p1));
    tmp_1_fu_981_p3 <= (nin_2_reg_448 & ap_const_lv4_0);
    tmp_4_fu_570_p3 <= (tj_fu_186 & tj_fu_186);
    tmp_5_fu_611_p4 <= ((ti_reg_323 & ti_reg_323) & ap_const_lv2_0);
    tmp_6_fu_644_p3 <= (nin_reg_346 & ap_const_lv4_0);
    tmp_7_cast_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_824_p3),11));
    tmp_7_fu_824_p3 <= (nout_reg_414 & ap_const_lv4_0);
    tmp_8_fu_1307_p3 <= add_ln135_fu_1297_p2(31 downto 31);
    tmp_fu_625_p2 <= std_logic_vector(unsigned(zext_ln109_fu_621_p1) + unsigned(input_ftmap));
    tmp_s_fu_1111_p3 <= (nout_1_reg_470 & ap_const_lv4_0);
    trunc_ln118_fu_687_p1 <= add_ln118_1_fu_678_p2(11 - 1 downto 0);
    trunc_ln135_1_fu_1160_p1 <= add_ln135_2_fu_1151_p2(10 - 1 downto 0);
    trunc_ln135_2_fu_1293_p1 <= output_fm_buffer_q0(31 - 1 downto 0);
    trunc_ln135_fu_1135_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln1_fu_1247_p4 <= empty_106_fu_1242_p2(63 downto 2);
    trunc_ln49_fu_854_p1 <= nout_reg_414(5 - 1 downto 0);
    trunc_ln65_2_fu_1048_p1 <= m_axi_gmem_RDATA(18 - 1 downto 0);
    trunc_ln65_fu_1008_p1 <= add_ln65_2_fu_999_p2(11 - 1 downto 0);
    trunc_ln7_fu_875_p4 <= add_ln49_fu_870_p2(63 downto 2);
    trunc_ln8_fu_774_p4 <= empty_94_fu_769_p2(63 downto 2);
    trunc_ln9_fu_1139_p3 <= (trunc_ln135_fu_1135_p1 & ap_const_lv8_0);
    trunc_ln_fu_530_p4 <= conv2_biases(63 downto 2);
    tx_3_cast59_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_436),15));
    tx_3_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_436),14));
    ty_cast58_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_425),12));
    ty_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_425),11));
    zext_ln109_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_369),25));
    zext_ln109_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_611_p4),64));
    zext_ln110_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_380),8));
    zext_ln118_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_644_p3),12));
    zext_ln118_2_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_380),12));
    zext_ln118_3_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_1_fu_678_p2),15));
    zext_ln118_4_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_403),15));
    zext_ln118_5_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_3_fu_798_p2),64));
    zext_ln118_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_reg_346),12));
    zext_ln131_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul56_reg_482),24));
    zext_ln132_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_2_reg_493),8));
    zext_ln135_1_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1111_p3),11));
    zext_ln135_2_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_2_reg_493),11));
    zext_ln135_3_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_2_fu_1151_p2),14));
    zext_ln135_4_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_504),14));
    zext_ln135_5_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_4_fu_1271_p2),64));
    zext_ln135_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_1_reg_470),11));
    zext_ln49_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_858_p3),64));
    zext_ln65_1_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_981_p3),12));
    zext_ln65_2_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_2_fu_999_p2),15));
    zext_ln65_3_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_4_fu_1026_p2),64));
    zext_ln65_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_2_reg_448),12));
end behav;
