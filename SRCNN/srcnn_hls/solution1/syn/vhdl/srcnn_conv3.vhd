-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of srcnn_conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_3720 : STD_LOGIC_VECTOR (13 downto 0) := "11011100100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv10_15 : STD_LOGIC_VECTOR (9 downto 0) := "0000010101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_15 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010101";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv9_121 : STD_LOGIC_VECTOR (8 downto 0) := "100100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_fm_buffer_0_ce0 : STD_LOGIC;
    signal output_fm_buffer_0_we0 : STD_LOGIC;
    signal output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal add_ln31_fu_619_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1575 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1580 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_633_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1585 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln82_fu_637_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln82_reg_1597 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln32_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1605 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_75_fu_667_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln106_1_fu_678_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln106_1_reg_1618 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln106_2_fu_684_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_2_reg_1623 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_fu_696_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln106_reg_1631 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln115_fu_706_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_reg_1636 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln106_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln107_fu_725_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln107_reg_1641 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln107_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln107_reg_1649 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln115_fu_826_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln115_reg_1654 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln107_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_1_reg_1659 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln108_fu_856_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln108_reg_1667 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_5_reg_1672 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln108_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_5_read_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_fu_992_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_77_reg_1683 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_fu_1004_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_reg_1691 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_addr_reg_1696 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_1030_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1704 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln52_fu_1046_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln52_reg_1717 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln62_fu_1058_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_reg_1722 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_2_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_1_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_reg_1727 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_fu_1102_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_reg_1735 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln62_2_fu_1114_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln62_2_reg_1740 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln53_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_fu_1126_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln61_reg_1745 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_7_fu_1130_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_7_reg_1750 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal input_fm_buffer_addr_2_reg_1755 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln61_fu_1146_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_reg_1763 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln62_8_fu_1152_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_8_reg_1768 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln61_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_6_reg_1773 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln62_fu_1197_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln62_reg_1779 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln131_fu_1246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_reg_1789 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln128_fu_1262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln128_reg_1797 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_4_reg_1802 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln128_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal add_ln129_fu_1372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln129_reg_1816 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_load_1_reg_1821 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal empty_87_fu_1384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln79_fu_1404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln79_reg_1837 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal sext_ln80_fu_1440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln80_reg_1842 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_fu_1450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln80_reg_1850 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal gmem_addr_reg_1855 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln80_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln82_1_fu_1502_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln82_1_reg_1867 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln83_fu_1522_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln83_reg_1872 : STD_LOGIC_VECTOR (30 downto 0);
    signal ti_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6414_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_376 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln32_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond273_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_387 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul49_reg_410 : STD_LOGIC_VECTOR (22 downto 0);
    signal by_reg_421 : STD_LOGIC_VECTOR (4 downto 0);
    signal bx_reg_432 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ty_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_455 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln48_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_reg_467 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_i_i119_lcssa_lcssa15_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_489 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_i_i119_lcssa14_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul51_reg_512 : STD_LOGIC_VECTOR (9 downto 0);
    signal nin_1_reg_523 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_80_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul53_reg_546 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_1_reg_557 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_1_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_86_reg_579 : STD_LOGIC_VECTOR (8 downto 0);
    signal xr_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast56_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_2_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast60_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_5_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_2_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast63_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_1_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln129_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_fu_1488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln83_cast_fu_1530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tj_fu_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal yr_fu_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln107_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_fu_711_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln115_3_fu_715_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln107_fu_725_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln107_fu_725_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln107_2_fu_731_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_747_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_753_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_76_fu_757_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_784_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_798_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_1_fu_814_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1_fu_806_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_fu_822_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln115_1_fu_832_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln115_4_fu_836_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_fu_862_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln108_fu_846_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln111_1_fu_874_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln111_fu_880_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln111_fu_870_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_fu_884_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_904_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_2_fu_918_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_3_fu_926_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_2_fu_934_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln115_2_fu_942_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln115_1_fu_946_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_3_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_2_fu_955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_960_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_1_fu_984_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ty_cast_fu_980_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_cast_fu_1010_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_78_fu_1014_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_fu_1036_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_79_fu_1052_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln62_1_fu_1070_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_1062_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_fu_1078_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_fu_1082_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_1_fu_1092_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_1108_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln62_2_fu_1118_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1534_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln62_1_fu_1158_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_4_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_4_fu_1167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_2_fu_1172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln62_2_fu_1177_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln62_3_fu_1210_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal mul_ln62_1_fu_601_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal add_ln62_3_fu_1218_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_2_fu_1238_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln131_fu_1234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln128_fu_1252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_81_fu_1268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_1273_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_fu_1285_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl10_cast_fu_1281_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl11_cast_fu_1293_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_82_fu_1297_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp3_fu_1307_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast35_fu_1303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp14_fu_1321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp13_cast_fu_1317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_83_fu_1326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_1332_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln131_1_fu_1352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_1_fu_1356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_1410_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln82_1_fu_1422_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln82_fu_1418_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln82_1_fu_1430_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln82_fu_1434_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln82_2_fu_1456_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln82_2_fu_1464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln82_fu_1468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln82_1_fu_1473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1478_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln82_2_fu_1506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1514_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_1510_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1534_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1534_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln129_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal mul_ln107_fu_725_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_32s_20s_51_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component srcnn_mul_10ns_6ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 14112,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_0_U : component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 289,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_0_address0,
        ce0 => output_fm_buffer_0_ce0,
        we0 => output_fm_buffer_0_we0,
        d0 => output_fm_buffer_0_d0,
        q0 => output_fm_buffer_0_q0);

    mul_32s_20s_51_1_1_U20 : component srcnn_mul_32s_20s_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 20,
        dout_WIDTH => 51)
    port map (
        din0 => input_fm_buffer_q0,
        din1 => trunc_ln62_reg_1779,
        dout => mul_ln62_1_fu_601_p2);

    mul_10ns_6ns_14_1_1_U21 : component srcnn_mul_10ns_6ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln107_fu_725_p0,
        din1 => mul_ln107_fu_725_p1,
        dout => mul_ln107_fu_725_p2);

    ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1_U22 : component srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi_mul51_reg_512,
        din1 => grp_fu_1534_p1,
        din2 => grp_fu_1534_p2,
        din3 => grp_fu_1534_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1534_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_735_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                bx_reg_432 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bx_reg_432 <= add_ln108_reg_1667;
            end if; 
        end if;
    end process;

    by_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_421 <= ap_const_lv5_0;
            elsif (((icmp_ln108_fu_850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                by_reg_421 <= add_ln107_reg_1649;
            end if; 
        end if;
    end process;

    conv_i_i119_lcssa14_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                conv_i_i119_lcssa14_reg_500 <= conv_i_i119_lcssa_lcssa15_reg_478;
            elsif (((icmp_ln61_fu_1140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                conv_i_i119_lcssa14_reg_500 <= empty_80_reg_534;
            end if; 
        end if;
    end process;

    conv_i_i119_lcssa_lcssa15_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                conv_i_i119_lcssa_lcssa15_reg_478 <= output_fm_buffer_0_q0;
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                conv_i_i119_lcssa_lcssa15_reg_478 <= conv_i_i119_lcssa14_reg_500;
            end if; 
        end if;
    end process;

    empty_80_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                empty_80_reg_534 <= add_ln62_3_fu_1218_p2(50 downto 19);
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                empty_80_reg_534 <= conv_i_i119_lcssa14_reg_500;
            end if; 
        end if;
    end process;

    empty_86_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                empty_86_reg_579 <= ap_const_lv9_0;
            elsif (((exitcond6414_fu_1378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                empty_86_reg_579 <= empty_87_fu_1384_p2;
            end if; 
        end if;
    end process;

    empty_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond273_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_376 <= empty_75_fu_667_p2;
            elsif (((icmp_ln32_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_376 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    kx_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                kx_reg_489 <= ap_const_lv3_0;
            elsif (((icmp_ln61_fu_1140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                kx_reg_489 <= add_ln53_reg_1735;
            end if; 
        end if;
    end process;

    ky_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ky_reg_467 <= ap_const_lv3_0;
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                ky_reg_467 <= add_ln52_reg_1717;
            end if; 
        end if;
    end process;

    nin_1_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                nin_1_reg_523 <= add_ln61_reg_1763;
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                nin_1_reg_523 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    nin_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond273_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_387 <= ap_const_lv6_0;
            elsif (((icmp_ln107_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_387 <= add_ln106_reg_1631;
            end if; 
        end if;
    end process;

    phi_mul49_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond273_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul49_reg_410 <= ap_const_lv23_0;
            elsif (((icmp_ln107_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul49_reg_410 <= add_ln106_1_reg_1618;
            end if; 
        end if;
    end process;

    phi_mul51_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                phi_mul51_reg_512 <= add_ln62_7_reg_1750;
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul51_reg_512 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul53_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                phi_mul53_reg_546 <= add_ln62_8_reg_1768;
            elsif (((icmp_ln53_fu_1096_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul53_reg_546 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond273_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_398 <= ap_const_lv10_0;
            elsif (((icmp_ln107_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_398 <= add_ln106_2_reg_1623;
            end if; 
        end if;
    end process;

    ti_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6414_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                ti_reg_364 <= add_ln32_reg_1605;
            elsif (((icmp_ln31_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_364 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tj_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_212 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_212 <= add_ln31_reg_1575;
            end if; 
        end if;
    end process;

    tx_1_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                tx_1_reg_568 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_WREADY = ap_const_logic_1))) then 
                tx_1_reg_568 <= add_ln129_reg_1816;
            end if; 
        end if;
    end process;

    tx_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_998_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_455 <= ap_const_lv5_0;
            elsif (((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tx_reg_455 <= add_ln49_reg_1704;
            end if; 
        end if;
    end process;

    ty_1_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_998_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                ty_1_reg_557 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                ty_1_reg_557 <= add_ln128_reg_1797;
            end if; 
        end if;
    end process;

    ty_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ty_reg_443 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_1024_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_443 <= add_ln48_reg_1691;
            end if; 
        end if;
    end process;

    xr_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                xr_reg_590 <= add_ln80_reg_1850;
            elsif (((icmp_ln79_fu_1398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                xr_reg_590 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    yr_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                yr_fu_216 <= ap_const_lv8_0;
            elsif (((icmp_ln80_fu_1444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                yr_fu_216 <= add_ln79_reg_1837;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln106_1_reg_1618 <= add_ln106_1_fu_678_p2;
                add_ln106_2_reg_1623 <= add_ln106_2_fu_684_p2;
                add_ln106_reg_1631 <= add_ln106_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln107_reg_1649 <= add_ln107_fu_741_p2;
                mul_ln107_reg_1641 <= mul_ln107_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln108_reg_1667 <= add_ln108_fu_856_p2;
                input_fm_buffer_addr_1_reg_1659 <= zext_ln115_2_fu_841_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln115_reg_1636 <= add_ln115_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln128_reg_1797 <= add_ln128_fu_1262_p2;
                add_ln131_reg_1789 <= add_ln131_fu_1246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                add_ln129_reg_1816 <= add_ln129_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1575 <= add_ln31_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1605 <= add_ln32_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_reg_1691 <= add_ln48_fu_1004_p2;
                empty_77_reg_1683 <= empty_77_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_1704 <= add_ln49_fu_1030_p2;
                output_fm_buffer_0_addr_reg_1696 <= p_cast60_fu_1019_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln52_reg_1717 <= add_ln52_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln53_reg_1735 <= add_ln53_fu_1102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln61_reg_1763 <= add_ln61_fu_1146_p2;
                input_fm_buffer_addr_2_reg_1755 <= zext_ln62_5_fu_1136_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln62_7_reg_1750 <= add_ln62_7_fu_1130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_1140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                add_ln62_8_reg_1768 <= add_ln62_8_fu_1152_p2;
                gmem_addr_6_reg_1773 <= sext_ln62_fu_1187_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln79_reg_1837 <= add_ln79_fu_1404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln80_reg_1850 <= add_ln80_fu_1450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_1256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                gmem_addr_4_reg_1802 <= sext_ln129_fu_1342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_5_read_reg_1678 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_850_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                gmem_addr_5_reg_1672 <= sext_ln115_1_fu_970_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                gmem_addr_read_reg_1862 <= m_axi_gmem_RDATA;
                trunc_ln82_1_reg_1867 <= trunc_ln82_1_fu_1502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_1444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                gmem_addr_reg_1855 <= sext_ln82_fu_1488_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                output_fm_buffer_0_load_1_reg_1821 <= output_fm_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                select_ln83_reg_1872 <= select_ln83_fu_1522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_1398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    sext_ln80_reg_1842(63 downto 2) <= sext_ln80_fu_1440_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_735_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln115_reg_1654(19 downto 2) <= sub_ln115_fu_826_p2(19 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1580 <= tmp_fu_625_p3;
                    zext_ln32_reg_1585(7 downto 0) <= zext_ln32_fu_633_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                trunc_ln62_reg_1779 <= trunc_ln62_fu_1197_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln82_reg_1597 <= trunc_ln82_fu_637_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1096_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    zext_ln61_reg_1745(4 downto 2) <= zext_ln61_fu_1126_p1(4 downto 2);
                    zext_ln62_2_reg_1740(4 downto 0) <= zext_ln62_2_fu_1114_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    zext_ln62_1_reg_1727(6 downto 2) <= zext_ln62_1_fu_1088_p1(6 downto 2);
                    zext_ln62_reg_1722(4 downto 0) <= zext_ln62_fu_1058_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_1585(9 downto 8) <= "00";
    sub_ln115_reg_1654(1 downto 0) <= "00";
    zext_ln62_reg_1722(9 downto 5) <= "00000";
    zext_ln62_1_reg_1727(1 downto 0) <= "00";
    zext_ln62_1_reg_1727(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln62_2_reg_1740(13 downto 5) <= "000000000";
    zext_ln61_reg_1745(1 downto 0) <= "00";
    zext_ln61_reg_1745(11 downto 5) <= "0000000";
    sext_ln80_reg_1842(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state50, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state2, icmp_ln31_fu_613_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln106_fu_690_p2, ap_CS_fsm_state6, icmp_ln107_fu_735_p2, ap_CS_fsm_state7, icmp_ln108_fu_850_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, icmp_ln52_2_fu_1040_p2, ap_CS_fsm_state22, icmp_ln53_fu_1096_p2, ap_CS_fsm_state26, icmp_ln61_fu_1140_p2, ap_CS_fsm_state37, icmp_ln128_fu_1256_p2, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state48, icmp_ln79_fu_1398_p2, ap_CS_fsm_state49, icmp_ln80_fu_1444_p2, exitcond6414_fu_1378_p2, icmp_ln32_fu_645_p2, exitcond273_fu_661_p2, icmp_ln49_fu_1024_p2, icmp_ln48_fu_998_p2, icmp_ln129_fu_1366_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond273_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln106_fu_690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln107_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln108_fu_850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_998_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_1024_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln53_fu_1096_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln61_fu_1140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln128_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln129_fu_1366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((exitcond6414_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln79_fu_1398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln80_fu_1444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_1_fu_678_p2 <= std_logic_vector(unsigned(phi_mul49_reg_410) + unsigned(ap_const_lv23_3F804));
    add_ln106_2_fu_684_p2 <= std_logic_vector(unsigned(phi_mul_reg_398) + unsigned(ap_const_lv10_15));
    add_ln106_fu_696_p2 <= std_logic_vector(unsigned(nin_reg_387) + unsigned(ap_const_lv6_1));
    add_ln107_fu_741_p2 <= std_logic_vector(unsigned(by_reg_421) + unsigned(ap_const_lv5_1));
    add_ln108_fu_856_p2 <= std_logic_vector(unsigned(bx_reg_432) + unsigned(ap_const_lv5_1));
    add_ln111_1_fu_874_p2 <= std_logic_vector(unsigned(zext_ln108_fu_846_p1) + unsigned(ap_const_lv6_3E));
    add_ln111_fu_884_p2 <= std_logic_vector(signed(sext_ln111_fu_880_p1) + signed(zext_ln111_fu_870_p1));
    add_ln115_1_fu_946_p2 <= std_logic_vector(unsigned(sub_ln115_reg_1654) + unsigned(sext_ln115_2_fu_942_p1));
    add_ln115_2_fu_955_p2 <= std_logic_vector(signed(sext_ln115_3_fu_951_p1) + signed(add_ln115_reg_1636));
    add_ln115_3_fu_715_p2 <= std_logic_vector(unsigned(phi_mul_reg_398) + unsigned(zext_ln115_fu_711_p1));
    add_ln115_4_fu_836_p2 <= std_logic_vector(unsigned(mul_ln107_reg_1641) + unsigned(zext_ln115_1_fu_832_p1));
    add_ln115_fu_706_p2 <= std_logic_vector(unsigned(zext_ln107_fu_702_p1) + unsigned(input_ftmap));
    add_ln128_fu_1262_p2 <= std_logic_vector(unsigned(ty_1_reg_557) + unsigned(ap_const_lv5_1));
    add_ln129_fu_1372_p2 <= std_logic_vector(unsigned(tx_1_reg_568) + unsigned(ap_const_lv5_1));
    add_ln131_1_fu_1356_p2 <= std_logic_vector(unsigned(add_ln131_reg_1789) + unsigned(zext_ln131_1_fu_1352_p1));
    add_ln131_fu_1246_p2 <= std_logic_vector(unsigned(tmp_2_fu_1238_p3) + unsigned(zext_ln131_fu_1234_p1));
    add_ln31_fu_619_p2 <= std_logic_vector(unsigned(tj_fu_212) + unsigned(ap_const_lv4_1));
    add_ln32_fu_651_p2 <= std_logic_vector(unsigned(ti_reg_364) + unsigned(ap_const_lv4_1));
    add_ln48_fu_1004_p2 <= std_logic_vector(unsigned(ty_reg_443) + unsigned(ap_const_lv5_1));
    add_ln49_fu_1030_p2 <= std_logic_vector(unsigned(tx_reg_455) + unsigned(ap_const_lv5_1));
    add_ln52_fu_1046_p2 <= std_logic_vector(unsigned(ky_reg_467) + unsigned(ap_const_lv3_1));
    add_ln53_fu_1102_p2 <= std_logic_vector(unsigned(kx_reg_489) + unsigned(ap_const_lv3_1));
    add_ln57_fu_1108_p2 <= std_logic_vector(unsigned(zext_ln53_1_fu_1092_p1) + unsigned(tx_reg_455));
    add_ln61_fu_1146_p2 <= std_logic_vector(unsigned(nin_1_reg_523) + unsigned(ap_const_lv6_1));
    add_ln62_1_fu_1158_p2 <= std_logic_vector(unsigned(zext_ln61_reg_1745) + unsigned(phi_mul53_reg_546));
    add_ln62_2_fu_1172_p2 <= std_logic_vector(unsigned(add_ln62_4_fu_1167_p2) + unsigned(zext_ln62_1_reg_1727));
    add_ln62_3_fu_1218_p2 <= std_logic_vector(unsigned(shl_ln62_3_fu_1210_p3) + unsigned(mul_ln62_1_fu_601_p2));
    add_ln62_4_fu_1167_p2 <= std_logic_vector(unsigned(zext_ln62_4_fu_1163_p1) + unsigned(conv3_weights));
    add_ln62_7_fu_1130_p2 <= std_logic_vector(unsigned(phi_mul51_reg_512) + unsigned(ap_const_lv10_15));
    add_ln62_8_fu_1152_p2 <= std_logic_vector(unsigned(phi_mul53_reg_546) + unsigned(ap_const_lv12_64));
    add_ln62_fu_1082_p2 <= std_logic_vector(unsigned(shl_ln2_fu_1062_p3) + unsigned(zext_ln53_fu_1078_p1));
    add_ln79_fu_1404_p2 <= std_logic_vector(unsigned(yr_fu_216) + unsigned(ap_const_lv8_1));
    add_ln80_fu_1450_p2 <= std_logic_vector(unsigned(xr_reg_590) + unsigned(ap_const_lv8_1));
    add_ln82_1_fu_1473_p2 <= std_logic_vector(unsigned(add_ln82_fu_1468_p2) + unsigned(sext_ln80_reg_1842));
    add_ln82_2_fu_1506_p2 <= std_logic_vector(unsigned(gmem_addr_read_reg_1862) + unsigned(conv3_biases_0_0_val));
    add_ln82_fu_1468_p2 <= std_logic_vector(unsigned(zext_ln82_2_fu_1464_p1) + unsigned(output_ftmap));
    add_ln83_fu_1510_p2 <= std_logic_vector(unsigned(trunc_ln82_1_reg_1867) + unsigned(trunc_ln82_reg_1597));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state35_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;

    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state59_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state48, icmp_ln79_fu_1398_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln79_fu_1398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state48, icmp_ln79_fu_1398_p2)
    begin
        if (((icmp_ln79_fu_1398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_75_fu_667_p2 <= std_logic_vector(unsigned(empty_reg_376) + unsigned(ap_const_lv14_1));
    empty_76_fu_757_p2 <= std_logic_vector(signed(tmp1_cast_fu_753_p1) + signed(zext_ln32_reg_1585));
    empty_77_fu_992_p2 <= std_logic_vector(unsigned(tmp_1_fu_984_p3) + unsigned(ty_cast_fu_980_p1));
    empty_78_fu_1014_p2 <= std_logic_vector(unsigned(empty_77_reg_1683) + unsigned(tx_cast_fu_1010_p1));
    empty_79_fu_1052_p2 <= std_logic_vector(unsigned(zext_ln52_fu_1036_p1) + unsigned(ty_reg_443));
    empty_81_fu_1268_p2 <= std_logic_vector(unsigned(zext_ln128_fu_1252_p1) + unsigned(tmp_reg_1580));
    empty_82_fu_1297_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_1281_p1) - unsigned(p_shl11_cast_fu_1293_p1));
    empty_83_fu_1326_p2 <= std_logic_vector(unsigned(tmp14_fu_1321_p2) + unsigned(tmp13_cast_fu_1317_p1));
    empty_87_fu_1384_p2 <= std_logic_vector(unsigned(empty_86_reg_579) + unsigned(ap_const_lv9_1));
    exitcond273_fu_661_p2 <= "1" when (empty_reg_376 = ap_const_lv14_3720) else "0";
    exitcond6414_fu_1378_p2 <= "1" when (empty_86_reg_579 = ap_const_lv9_121) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state38, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state46, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state35, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state41, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1534_p1 <= zext_ln62_reg_1722(5 - 1 downto 0);
    grp_fu_1534_p2 <= ap_const_lv14_15(5 - 1 downto 0);
    grp_fu_1534_p3 <= zext_ln62_2_reg_1740(5 - 1 downto 0);
    icmp_ln106_fu_690_p2 <= "1" when (nin_reg_387 = ap_const_lv6_20) else "0";
    icmp_ln107_fu_735_p2 <= "1" when (by_reg_421 = ap_const_lv5_15) else "0";
    icmp_ln108_fu_850_p2 <= "1" when (bx_reg_432 = ap_const_lv5_15) else "0";
    icmp_ln128_fu_1256_p2 <= "1" when (ty_1_reg_557 = ap_const_lv5_11) else "0";
    icmp_ln129_fu_1366_p2 <= "1" when (tx_1_reg_568 = ap_const_lv5_11) else "0";
    icmp_ln31_fu_613_p2 <= "1" when (tj_fu_212 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_645_p2 <= "1" when (ti_reg_364 = ap_const_lv4_F) else "0";
    icmp_ln48_fu_998_p2 <= "1" when (ty_reg_443 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_1024_p2 <= "1" when (tx_reg_455 = ap_const_lv5_11) else "0";
    icmp_ln52_1_fu_898_p2 <= "1" when (signed(add_ln111_fu_884_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln52_2_fu_1040_p2 <= "1" when (ky_reg_467 = ap_const_lv3_5) else "0";
    icmp_ln52_fu_770_p2 <= "1" when (signed(empty_76_fu_757_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln53_fu_1096_p2 <= "1" when (kx_reg_489 = ap_const_lv3_5) else "0";
    icmp_ln61_fu_1140_p2 <= "1" when (nin_1_reg_523 = ap_const_lv6_20) else "0";
    icmp_ln79_fu_1398_p2 <= "1" when (yr_fu_216 = ap_const_lv8_FF) else "0";
    icmp_ln80_fu_1444_p2 <= "1" when (xr_reg_590 = ap_const_lv8_FF) else "0";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state4, input_fm_buffer_addr_1_reg_1659, input_fm_buffer_addr_2_reg_1755, ap_CS_fsm_state17, p_cast56_fu_673_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_2_reg_1755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_1_reg_1659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_address0 <= p_cast56_fu_673_p1(14 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state35, ap_CS_fsm_state4, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state4, gmem_addr_5_read_reg_1678, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_d0 <= gmem_addr_5_read_reg_1678;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond273_fu_661_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond273_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state50, gmem_addr_5_reg_1672, gmem_addr_6_reg_1773, gmem_addr_reg_1855)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1855;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                m_axi_gmem_ARADDR <= gmem_addr_6_reg_1773;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_axi_gmem_ARADDR <= gmem_addr_5_reg_1672;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state50)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state38, ap_CS_fsm_state59, gmem_addr_4_reg_1802, gmem_addr_reg_1855)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                m_axi_gmem_AWADDR <= gmem_addr_reg_1855;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                m_axi_gmem_AWADDR <= gmem_addr_4_reg_1802;
            else 
                m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;

    m_axi_gmem_AWLEN_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state38, ap_CS_fsm_state59)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                m_axi_gmem_AWLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                m_axi_gmem_AWLEN <= ap_const_lv32_11;
            else 
                m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state38, ap_CS_fsm_state59)
    begin
        if ((((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state46, ap_CS_fsm_state65)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state35, ap_CS_fsm_state58)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state60, output_fm_buffer_0_load_1_reg_1821, select_ln83_cast_fu_1530_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            m_axi_gmem_WDATA <= select_ln83_cast_fu_1530_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            m_axi_gmem_WDATA <= output_fm_buffer_0_load_1_reg_1821;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state41, ap_CS_fsm_state60)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_WREADY = ap_const_logic_1)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln107_fu_725_p0 <= mul_ln107_fu_725_p00(10 - 1 downto 0);
    mul_ln107_fu_725_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_3_fu_715_p2),14));
    mul_ln107_fu_725_p1 <= ap_const_lv14_15(6 - 1 downto 0);
    or_ln51_1_fu_912_p2 <= (tmp_6_fu_890_p3 or icmp_ln52_1_fu_898_p2);
    or_ln51_fu_792_p2 <= (tmp_4_fu_762_p3 or icmp_ln52_fu_770_p2);

    output_fm_buffer_0_address0_assign_proc : process(output_fm_buffer_0_addr_reg_1696, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state39, ap_CS_fsm_state47, p_cast60_fu_1019_p1, zext_ln131_2_fu_1361_p1, p_cast63_fu_1390_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_fm_buffer_0_address0 <= p_cast63_fu_1390_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_fm_buffer_0_address0 <= zext_ln131_2_fu_1361_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_0_address0 <= output_fm_buffer_0_addr_reg_1696;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_fm_buffer_0_address0 <= p_cast60_fu_1019_p1(9 - 1 downto 0);
        else 
            output_fm_buffer_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state39, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_fm_buffer_0_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state47, conv_i_i119_lcssa_lcssa15_reg_478)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_fm_buffer_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_0_d0 <= conv_i_i119_lcssa_lcssa15_reg_478;
        else 
            output_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln52_2_fu_1040_p2, ap_CS_fsm_state47, exitcond6414_fu_1378_p2)
    begin
        if ((((exitcond6414_fu_1378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((icmp_ln52_2_fu_1040_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_fm_buffer_0_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast35_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_82_fu_1297_p2),64));

    p_cast56_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_376),64));
    p_cast60_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_78_fu_1014_p2),64));
    p_cast63_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_86_reg_579),64));
    p_shl10_cast_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1273_p3),19));
    p_shl11_cast_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_1285_p3),19));
    p_shl1_fu_1273_p3 <= (empty_81_fu_1268_p2 & ap_const_lv10_0);
    p_shl2_fu_1285_p3 <= (empty_81_fu_1268_p2 & ap_const_lv2_0);
    select_ln51_2_fu_918_p3 <= 
        ap_const_lv10_0 when (tmp_7_fu_904_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln51_3_fu_926_p3 <= 
        select_ln51_2_fu_918_p3 when (or_ln51_1_fu_912_p2(0) = '1') else 
        add_ln111_fu_884_p2;
    select_ln51_fu_784_p3 <= 
        ap_const_lv10_0 when (tmp_5_fu_776_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_cast_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_reg_1872),32));
    select_ln83_fu_1522_p3 <= 
        ap_const_lv31_0 when (tmp_3_fu_1514_p3(0) = '1') else 
        add_ln83_fu_1510_p2;
        sext_ln111_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_1_fu_874_p2),10));

        sext_ln115_1_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_960_p4),64));

        sext_ln115_2_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_2_fu_934_p3),20));

        sext_ln115_3_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln115_1_fu_946_p2),64));

        sext_ln115_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_1_fu_814_p3),20));

        sext_ln129_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1332_p4),64));

        sext_ln62_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln62_2_fu_1177_p4),64));

        sext_ln80_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln82_fu_1434_p2),64));

        sext_ln82_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1478_p4),64));

    shl_ln115_1_fu_814_p3 <= (yClamped_fu_798_p3 & ap_const_lv2_0);
    shl_ln115_2_fu_934_p3 <= (select_ln51_3_fu_926_p3 & ap_const_lv2_0);
    shl_ln1_fu_806_p3 <= (yClamped_fu_798_p3 & ap_const_lv10_0);
    shl_ln2_fu_1062_p3 <= (ky_reg_467 & ap_const_lv4_0);
    shl_ln62_1_fu_1070_p3 <= (ky_reg_467 & ap_const_lv2_0);
    shl_ln62_2_fu_1118_p3 <= (kx_reg_489 & ap_const_lv2_0);
    shl_ln62_3_fu_1210_p3 <= (empty_80_reg_534 & ap_const_lv19_0);
    shl_ln82_1_fu_1422_p3 <= (yr_fu_216 & ap_const_lv2_0);
    shl_ln82_2_fu_1456_p3 <= (xr_reg_590 & ap_const_lv2_0);
    shl_ln_fu_1410_p3 <= (yr_fu_216 & ap_const_lv10_0);
    sub_ln115_fu_826_p2 <= std_logic_vector(unsigned(shl_ln1_fu_806_p3) - unsigned(sext_ln115_fu_822_p1));
    sub_ln82_fu_1434_p2 <= std_logic_vector(unsigned(zext_ln82_fu_1418_p1) - unsigned(zext_ln82_1_fu_1430_p1));
    tmp13_cast_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_1307_p4),64));
    tmp14_fu_1321_p2 <= std_logic_vector(signed(p_cast35_fu_1303_p1) + signed(output_ftmap));
        tmp1_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_747_p2),10));

    tmp1_fu_747_p2 <= std_logic_vector(unsigned(zext_ln107_2_fu_731_p1) + unsigned(ap_const_lv6_3E));
    tmp3_fu_1307_p4 <= ((ti_reg_364 & ti_reg_364) & ap_const_lv2_0);
    tmp4_fu_862_p3 <= (ti_reg_364 & ti_reg_364);
    tmp_1_fu_984_p3 <= (ty_reg_443 & ap_const_lv4_0);
    tmp_2_fu_1238_p3 <= (ty_1_reg_557 & ap_const_lv4_0);
    tmp_3_fu_1514_p3 <= add_ln82_2_fu_1506_p2(31 downto 31);
    tmp_4_fu_762_p3 <= empty_76_fu_757_p2(9 downto 9);
    tmp_5_fu_776_p3 <= empty_76_fu_757_p2(9 downto 9);
    tmp_6_fu_890_p3 <= add_ln111_fu_884_p2(9 downto 9);
    tmp_7_fu_904_p3 <= add_ln111_fu_884_p2(9 downto 9);
    tmp_fu_625_p3 <= (tj_fu_212 & tj_fu_212);
    trunc_ln4_fu_1332_p4 <= empty_83_fu_1326_p2(63 downto 2);
    trunc_ln5_fu_960_p4 <= add_ln115_2_fu_955_p2(63 downto 2);
    trunc_ln62_2_fu_1177_p4 <= add_ln62_2_fu_1172_p2(63 downto 2);
    trunc_ln62_fu_1197_p1 <= m_axi_gmem_RDATA(20 - 1 downto 0);
    trunc_ln82_1_fu_1502_p1 <= m_axi_gmem_RDATA(31 - 1 downto 0);
    trunc_ln82_fu_637_p1 <= conv3_biases_0_0_val(31 - 1 downto 0);
    trunc_ln_fu_1478_p4 <= add_ln82_1_fu_1473_p2(63 downto 2);
    tx_cast_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_455),9));
    ty_cast_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_443),9));
    yClamped_fu_798_p3 <= 
        select_ln51_fu_784_p3 when (or_ln51_fu_792_p2(0) = '1') else 
        empty_76_fu_757_p2;
    zext_ln107_2_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_421),6));
    zext_ln107_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul49_reg_410),64));
    zext_ln108_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_432),6));
    zext_ln111_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_862_p3),10));
    zext_ln115_1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_432),14));
    zext_ln115_2_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_4_fu_836_p2),64));
    zext_ln115_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_421),10));
    zext_ln128_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_557),8));
    zext_ln131_1_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_568),9));
    zext_ln131_2_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_1_fu_1356_p2),64));
    zext_ln131_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_557),9));
    zext_ln32_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_625_p3),10));
    zext_ln52_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_467),5));
    zext_ln53_1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_489),5));
    zext_ln53_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_1070_p3),7));
    zext_ln61_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_2_fu_1118_p3),12));
    zext_ln62_1_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_1082_p2),64));
    zext_ln62_2_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1108_p2),14));
    zext_ln62_4_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_fu_1158_p2),64));
    zext_ln62_5_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1534_p4),64));
    zext_ln62_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_79_fu_1052_p2),10));
    zext_ln82_1_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln82_1_fu_1422_p3),19));
    zext_ln82_2_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln82_2_fu_1456_p3),64));
    zext_ln82_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1410_p3),19));
end behav;
