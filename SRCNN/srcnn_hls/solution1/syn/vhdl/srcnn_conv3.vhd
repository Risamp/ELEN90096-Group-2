-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_ce : OUT STD_LOGIC;
    grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_ce : OUT STD_LOGIC;
    grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_605_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_3720 : STD_LOGIC_VECTOR (13 downto 0) := "11011100100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv10_15 : STD_LOGIC_VECTOR (9 downto 0) := "0000010101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_15 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010101";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv9_121 : STD_LOGIC_VECTOR (8 downto 0) := "100100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_fm_buffer_0_ce0 : STD_LOGIC;
    signal output_fm_buffer_0_we0 : STD_LOGIC;
    signal output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal add_ln31_fu_627_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1576 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1581 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_641_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1586 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_656_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1601 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_72_fu_672_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln106_1_fu_683_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln106_1_reg_1614 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln106_2_fu_689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_2_reg_1619 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_fu_701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln106_reg_1627 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln115_fu_711_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_reg_1632 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln106_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln107_fu_730_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln107_reg_1637 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln107_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln107_reg_1645 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln115_fu_831_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln115_reg_1650 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln107_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_1_reg_1655 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln108_fu_861_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln108_reg_1663 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_5_reg_1668 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln108_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_5_read_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_74_fu_1001_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_74_reg_1679 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_fu_1013_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_reg_1687 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_addr_reg_1692 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_1039_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1700 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln52_fu_1055_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln52_reg_1713 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln62_fu_1067_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_reg_1718 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_2_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_1_fu_1097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_reg_1723 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_fu_1111_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_reg_1731 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln62_2_fu_1123_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln62_2_reg_1736 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln53_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_fu_1135_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln61_reg_1741 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_6_fu_1139_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_6_reg_1746 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal input_fm_buffer_addr_2_reg_1751 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln61_fu_1155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_reg_1759 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln62_7_fu_1161_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_7_reg_1764 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln61_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_6_reg_1769 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_6_read_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_load_reg_1780 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_fu_1206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal add_ln131_fu_1222_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_reg_1795 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal add_ln128_fu_1238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln128_reg_1803 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_4_reg_1808 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln128_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal add_ln129_fu_1348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln129_reg_1822 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_load_1_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal empty_84_fu_1364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln79_fu_1384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln79_reg_1843 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal sext_ln80_fu_1420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln80_reg_1848 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_fu_1430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln80_reg_1856 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal gmem_addr_reg_1861 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln80_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_1868 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln82_fu_1482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_fu_1528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_reg_1878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ti_reg_356 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7514_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_368 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln32_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond383_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_379 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul49_reg_402 : STD_LOGIC_VECTOR (22 downto 0);
    signal by_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal bx_reg_424 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ty_reg_435 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_447 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln48_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_reg_459 : STD_LOGIC_VECTOR (2 downto 0);
    signal add51_lcssa_lcssa27_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_481 : STD_LOGIC_VECTOR (2 downto 0);
    signal add51_lcssa26_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul51_reg_504 : STD_LOGIC_VECTOR (9 downto 0);
    signal nin_1_reg_515 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_77_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul53_reg_538 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_1_reg_549 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_1_reg_560 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_83_reg_571 : STD_LOGIC_VECTOR (8 downto 0);
    signal xr_reg_582 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast55_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_2_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast59_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_5_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_2_fu_1337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast64_fu_1370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_1_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln129_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_fu_1468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln131_fu_1354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tj_fu_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal yr_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln115_fu_985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln107_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_fu_716_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln115_3_fu_720_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln107_fu_730_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln107_fu_730_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln107_2_fu_736_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_752_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_758_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_73_fu_762_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_789_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_803_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_1_fu_819_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1_fu_811_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_fu_827_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln115_1_fu_837_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln115_4_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_fu_867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln108_fu_851_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln111_1_fu_879_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln111_fu_885_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln111_fu_875_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_fu_889_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_2_fu_923_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_3_fu_931_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_2_fu_939_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln115_2_fu_947_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln115_1_fu_951_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_3_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_2_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln6_fu_965_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_3_fu_993_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ty_cast_fu_989_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_cast_fu_1019_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_75_fu_1023_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_fu_1045_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_76_fu_1061_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln62_1_fu_1079_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_1071_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_fu_1087_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_fu_1091_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_1_fu_1101_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_1117_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln62_2_fu_1127_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1536_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln62_1_fu_1167_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_4_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_3_fu_1176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_2_fu_1181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_1186_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_4_fu_1214_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln131_fu_1210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln128_fu_1228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_78_fu_1244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_1249_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl9_fu_1261_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_fu_1257_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl9_cast_fu_1269_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_79_fu_1273_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp3_fu_1283_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast33_fu_1279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp14_fu_1297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp13_cast_fu_1293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_80_fu_1302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_1308_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln131_1_fu_1328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_1_fu_1332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_1390_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln82_1_fu_1402_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln82_fu_1398_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln82_1_fu_1410_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln82_fu_1414_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln82_2_fu_1436_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln82_2_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln82_fu_1448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln82_1_fu_1453_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1458_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln82_1_fu_1486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1490_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_fu_1500_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_1_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_1516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1536_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1536_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1536_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_593_ce : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln129_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal mul_ln107_fu_730_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_mul_10ns_6ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 14112,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_0_U : component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 289,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_0_address0,
        ce0 => output_fm_buffer_0_ce0,
        we0 => output_fm_buffer_0_we0,
        d0 => output_fm_buffer_0_d0,
        q0 => output_fm_buffer_0_q0);

    mul_10ns_6ns_14_1_1_U25 : component srcnn_mul_10ns_6ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln107_fu_730_p0,
        din1 => mul_ln107_fu_730_p1,
        dout => mul_ln107_fu_730_p2);

    ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1_U26 : component srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi_mul51_reg_504,
        din1 => grp_fu_1536_p1,
        din2 => grp_fu_1536_p2,
        din3 => grp_fu_1536_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1536_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add51_lcssa26_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                add51_lcssa26_reg_492 <= add51_lcssa_lcssa27_reg_470;
            elsif (((icmp_ln61_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                add51_lcssa26_reg_492 <= empty_77_reg_526;
            end if; 
        end if;
    end process;

    add51_lcssa_lcssa27_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                add51_lcssa_lcssa27_reg_470 <= output_fm_buffer_0_q0;
            elsif (((icmp_ln53_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                add51_lcssa_lcssa27_reg_470 <= add51_lcssa26_reg_492;
            end if; 
        end if;
    end process;

    bx_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_740_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                bx_reg_424 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bx_reg_424 <= add_ln108_reg_1663;
            end if; 
        end if;
    end process;

    by_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_695_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_413 <= ap_const_lv5_0;
            elsif (((icmp_ln108_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                by_reg_413 <= add_ln107_reg_1645;
            end if; 
        end if;
    end process;

    empty_77_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                empty_77_reg_526 <= add51_lcssa26_reg_492;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                empty_77_reg_526 <= grp_fu_597_p_dout0;
            end if; 
        end if;
    end process;

    empty_83_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_1232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                empty_83_reg_571 <= ap_const_lv9_0;
            elsif (((exitcond7514_fu_1358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                empty_83_reg_571 <= empty_84_fu_1364_p2;
            end if; 
        end if;
    end process;

    empty_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond383_fu_666_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_368 <= empty_72_fu_672_p2;
            elsif (((icmp_ln32_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_368 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    kx_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                kx_reg_481 <= ap_const_lv3_0;
            elsif (((icmp_ln61_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                kx_reg_481 <= add_ln53_reg_1731;
            end if; 
        end if;
    end process;

    ky_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ky_reg_459 <= ap_const_lv3_0;
            elsif (((icmp_ln53_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                ky_reg_459 <= add_ln52_reg_1713;
            end if; 
        end if;
    end process;

    nin_1_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                nin_1_reg_515 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                nin_1_reg_515 <= add_ln61_reg_1759;
            end if; 
        end if;
    end process;

    nin_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond383_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_379 <= ap_const_lv6_0;
            elsif (((icmp_ln107_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_379 <= add_ln106_reg_1627;
            end if; 
        end if;
    end process;

    phi_mul49_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond383_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul49_reg_402 <= ap_const_lv23_0;
            elsif (((icmp_ln107_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul49_reg_402 <= add_ln106_1_reg_1614;
            end if; 
        end if;
    end process;

    phi_mul51_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul51_reg_504 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                phi_mul51_reg_504 <= add_ln62_6_reg_1746;
            end if; 
        end if;
    end process;

    phi_mul53_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul53_reg_538 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                phi_mul53_reg_538 <= add_ln62_7_reg_1764;
            end if; 
        end if;
    end process;

    phi_mul_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond383_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_390 <= ap_const_lv10_0;
            elsif (((icmp_ln107_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_390 <= add_ln106_2_reg_1619;
            end if; 
        end if;
    end process;

    ti_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_356 <= ap_const_lv4_0;
            elsif (((exitcond7514_fu_1358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                ti_reg_356 <= add_ln32_reg_1601;
            end if; 
        end if;
    end process;

    tj_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_204 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_204 <= add_ln31_reg_1576;
            end if; 
        end if;
    end process;

    tx_1_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                tx_1_reg_560 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1))) then 
                tx_1_reg_560 <= add_ln129_reg_1822;
            end if; 
        end if;
    end process;

    tx_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1007_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_447 <= ap_const_lv5_0;
            elsif (((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tx_reg_447 <= add_ln49_reg_1700;
            end if; 
        end if;
    end process;

    ty_1_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                ty_1_reg_549 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                ty_1_reg_549 <= add_ln128_reg_1803;
            end if; 
        end if;
    end process;

    ty_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ty_reg_435 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_1033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_435 <= add_ln48_reg_1687;
            end if; 
        end if;
    end process;

    xr_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                xr_reg_582 <= add_ln80_reg_1856;
            elsif (((icmp_ln79_fu_1378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                xr_reg_582 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    yr_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                yr_fu_208 <= ap_const_lv8_0;
            elsif (((icmp_ln80_fu_1424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                yr_fu_208 <= add_ln79_reg_1843;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln106_1_reg_1614 <= add_ln106_1_fu_683_p2;
                add_ln106_2_reg_1619 <= add_ln106_2_fu_689_p2;
                add_ln106_reg_1627 <= add_ln106_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln107_reg_1645 <= add_ln107_fu_746_p2;
                mul_ln107_reg_1637 <= mul_ln107_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln108_reg_1663 <= add_ln108_fu_861_p2;
                input_fm_buffer_addr_1_reg_1655 <= zext_ln115_2_fu_846_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_695_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln115_reg_1632 <= add_ln115_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln128_reg_1803 <= add_ln128_fu_1238_p2;
                add_ln131_reg_1795 <= add_ln131_fu_1222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln129_reg_1822 <= add_ln129_fu_1348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1576 <= add_ln31_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1601 <= add_ln32_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_reg_1687 <= add_ln48_fu_1013_p2;
                empty_74_reg_1679 <= empty_74_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_1700 <= add_ln49_fu_1039_p2;
                output_fm_buffer_0_addr_reg_1692 <= p_cast59_fu_1028_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln52_reg_1713 <= add_ln52_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln53_reg_1731 <= add_ln53_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln61_reg_1759 <= add_ln61_fu_1155_p2;
                input_fm_buffer_addr_2_reg_1751 <= zext_ln62_5_fu_1145_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln62_6_reg_1746 <= add_ln62_6_fu_1139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                add_ln62_7_reg_1764 <= add_ln62_7_fu_1161_p2;
                gmem_addr_6_reg_1769 <= sext_ln62_fu_1196_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_ln79_reg_1843 <= add_ln79_fu_1384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                add_ln80_reg_1856 <= add_ln80_fu_1430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_1232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                gmem_addr_4_reg_1808 <= sext_ln129_fu_1318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_5_read_reg_1674 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                gmem_addr_5_reg_1668 <= sext_ln115_1_fu_975_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                gmem_addr_6_read_reg_1775 <= m_axi_gmem_RDATA;
                input_fm_buffer_load_reg_1780 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                gmem_addr_read_reg_1868 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                gmem_addr_reg_1861 <= sext_ln82_fu_1468_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                mul_reg_1790 <= grp_fu_601_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                output_fm_buffer_0_load_1_reg_1827 <= output_fm_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_607 <= grp_fu_597_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                select_ln83_reg_1878 <= select_ln83_fu_1528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_1378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    sext_ln80_reg_1848(63 downto 2) <= sext_ln80_fu_1420_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_740_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln115_reg_1650(19 downto 2) <= sub_ln115_fu_831_p2(19 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1581 <= tmp_fu_633_p3;
                    zext_ln32_reg_1586(7 downto 0) <= zext_ln32_fu_641_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    zext_ln61_reg_1741(4 downto 2) <= zext_ln61_fu_1135_p1(4 downto 2);
                    zext_ln62_2_reg_1736(4 downto 0) <= zext_ln62_2_fu_1123_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    zext_ln62_1_reg_1723(6 downto 2) <= zext_ln62_1_fu_1097_p1(6 downto 2);
                    zext_ln62_reg_1718(4 downto 0) <= zext_ln62_fu_1067_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_1586(9 downto 8) <= "00";
    sub_ln115_reg_1650(1 downto 0) <= "00";
    zext_ln62_reg_1718(9 downto 5) <= "00000";
    zext_ln62_1_reg_1723(1 downto 0) <= "00";
    zext_ln62_1_reg_1723(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln62_2_reg_1736(13 downto 5) <= "000000000";
    zext_ln61_reg_1741(1 downto 0) <= "00";
    zext_ln61_reg_1741(11 downto 5) <= "0000000";
    sext_ln80_reg_1848(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state56, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state2, icmp_ln31_fu_621_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln106_fu_695_p2, ap_CS_fsm_state6, icmp_ln107_fu_740_p2, ap_CS_fsm_state7, icmp_ln108_fu_855_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, icmp_ln52_2_fu_1049_p2, ap_CS_fsm_state22, icmp_ln53_fu_1105_p2, ap_CS_fsm_state26, icmp_ln61_fu_1149_p2, ap_CS_fsm_state43, icmp_ln128_fu_1232_p2, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state54, icmp_ln79_fu_1378_p2, ap_CS_fsm_state55, icmp_ln80_fu_1424_p2, exitcond7514_fu_1358_p2, icmp_ln32_fu_650_p2, exitcond383_fu_666_p2, icmp_ln49_fu_1033_p2, icmp_ln48_fu_1007_p2, icmp_ln129_fu_1342_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond383_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln106_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln107_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln108_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_1033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln53_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln61_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln128_fu_1232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln129_fu_1342_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((exitcond7514_fu_1358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln79_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                if (((icmp_ln80_fu_1424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_1_fu_683_p2 <= std_logic_vector(unsigned(phi_mul49_reg_402) + unsigned(ap_const_lv23_3F804));
    add_ln106_2_fu_689_p2 <= std_logic_vector(unsigned(phi_mul_reg_390) + unsigned(ap_const_lv10_15));
    add_ln106_fu_701_p2 <= std_logic_vector(unsigned(nin_reg_379) + unsigned(ap_const_lv6_1));
    add_ln107_fu_746_p2 <= std_logic_vector(unsigned(by_reg_413) + unsigned(ap_const_lv5_1));
    add_ln108_fu_861_p2 <= std_logic_vector(unsigned(bx_reg_424) + unsigned(ap_const_lv5_1));
    add_ln111_1_fu_879_p2 <= std_logic_vector(unsigned(zext_ln108_fu_851_p1) + unsigned(ap_const_lv6_3E));
    add_ln111_fu_889_p2 <= std_logic_vector(signed(sext_ln111_fu_885_p1) + signed(zext_ln111_fu_875_p1));
    add_ln115_1_fu_951_p2 <= std_logic_vector(unsigned(sub_ln115_reg_1650) + unsigned(sext_ln115_2_fu_947_p1));
    add_ln115_2_fu_960_p2 <= std_logic_vector(signed(sext_ln115_3_fu_956_p1) + signed(add_ln115_reg_1632));
    add_ln115_3_fu_720_p2 <= std_logic_vector(unsigned(phi_mul_reg_390) + unsigned(zext_ln115_fu_716_p1));
    add_ln115_4_fu_841_p2 <= std_logic_vector(unsigned(mul_ln107_reg_1637) + unsigned(zext_ln115_1_fu_837_p1));
    add_ln115_fu_711_p2 <= std_logic_vector(unsigned(zext_ln107_fu_707_p1) + unsigned(input_ftmap));
    add_ln128_fu_1238_p2 <= std_logic_vector(unsigned(ty_1_reg_549) + unsigned(ap_const_lv5_1));
    add_ln129_fu_1348_p2 <= std_logic_vector(unsigned(tx_1_reg_560) + unsigned(ap_const_lv5_1));
    add_ln131_1_fu_1332_p2 <= std_logic_vector(unsigned(add_ln131_reg_1795) + unsigned(zext_ln131_1_fu_1328_p1));
    add_ln131_fu_1222_p2 <= std_logic_vector(unsigned(tmp_4_fu_1214_p3) + unsigned(zext_ln131_fu_1210_p1));
    add_ln31_fu_627_p2 <= std_logic_vector(unsigned(tj_fu_204) + unsigned(ap_const_lv4_1));
    add_ln32_fu_656_p2 <= std_logic_vector(unsigned(ti_reg_356) + unsigned(ap_const_lv4_1));
    add_ln48_fu_1013_p2 <= std_logic_vector(unsigned(ty_reg_435) + unsigned(ap_const_lv5_1));
    add_ln49_fu_1039_p2 <= std_logic_vector(unsigned(tx_reg_447) + unsigned(ap_const_lv5_1));
    add_ln52_fu_1055_p2 <= std_logic_vector(unsigned(ky_reg_459) + unsigned(ap_const_lv3_1));
    add_ln53_fu_1111_p2 <= std_logic_vector(unsigned(kx_reg_481) + unsigned(ap_const_lv3_1));
    add_ln57_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln53_1_fu_1101_p1) + unsigned(tx_reg_447));
    add_ln61_fu_1155_p2 <= std_logic_vector(unsigned(nin_1_reg_515) + unsigned(ap_const_lv6_1));
    add_ln62_1_fu_1167_p2 <= std_logic_vector(unsigned(zext_ln61_reg_1741) + unsigned(phi_mul53_reg_538));
    add_ln62_2_fu_1181_p2 <= std_logic_vector(unsigned(add_ln62_3_fu_1176_p2) + unsigned(zext_ln62_1_reg_1723));
    add_ln62_3_fu_1176_p2 <= std_logic_vector(unsigned(zext_ln62_4_fu_1172_p1) + unsigned(conv3_weights));
    add_ln62_6_fu_1139_p2 <= std_logic_vector(unsigned(phi_mul51_reg_504) + unsigned(ap_const_lv10_15));
    add_ln62_7_fu_1161_p2 <= std_logic_vector(unsigned(phi_mul53_reg_538) + unsigned(ap_const_lv12_64));
    add_ln62_fu_1091_p2 <= std_logic_vector(unsigned(shl_ln2_fu_1071_p3) + unsigned(zext_ln53_fu_1087_p1));
    add_ln79_fu_1384_p2 <= std_logic_vector(unsigned(yr_fu_208) + unsigned(ap_const_lv8_1));
    add_ln80_fu_1430_p2 <= std_logic_vector(unsigned(xr_reg_582) + unsigned(ap_const_lv8_1));
    add_ln82_1_fu_1453_p2 <= std_logic_vector(unsigned(add_ln82_fu_1448_p2) + unsigned(sext_ln80_reg_1848));
    add_ln82_fu_1448_p2 <= std_logic_vector(unsigned(zext_ln82_2_fu_1444_p1) + unsigned(output_ftmap));
    and_ln83_fu_1522_p2 <= (or_ln83_fu_1516_p2 and grp_fu_605_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state35_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;

    ap_ST_fsm_state52_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state52_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state52_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;

    ap_ST_fsm_state56_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;

    ap_ST_fsm_state64_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state64_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state64_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;

    ap_ST_fsm_state71_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state54, icmp_ln79_fu_1378_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln79_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54, icmp_ln79_fu_1378_p2)
    begin
        if (((icmp_ln79_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln115_fu_985_p1 <= gmem_addr_5_read_reg_1674;
    bitcast_ln131_fu_1354_p1 <= output_fm_buffer_0_load_1_reg_1827;
    bitcast_ln62_fu_1206_p1 <= gmem_addr_6_read_reg_1775;
    bitcast_ln82_1_fu_1486_p1 <= reg_607;
    bitcast_ln82_fu_1482_p1 <= gmem_addr_read_reg_1868;
    empty_72_fu_672_p2 <= std_logic_vector(unsigned(empty_reg_368) + unsigned(ap_const_lv14_1));
    empty_73_fu_762_p2 <= std_logic_vector(signed(tmp1_cast_fu_758_p1) + signed(zext_ln32_reg_1586));
    empty_74_fu_1001_p2 <= std_logic_vector(unsigned(tmp_3_fu_993_p3) + unsigned(ty_cast_fu_989_p1));
    empty_75_fu_1023_p2 <= std_logic_vector(unsigned(empty_74_reg_1679) + unsigned(tx_cast_fu_1019_p1));
    empty_76_fu_1061_p2 <= std_logic_vector(unsigned(zext_ln52_fu_1045_p1) + unsigned(ty_reg_435));
    empty_78_fu_1244_p2 <= std_logic_vector(unsigned(zext_ln128_fu_1228_p1) + unsigned(tmp_reg_1581));
    empty_79_fu_1273_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1257_p1) - unsigned(p_shl9_cast_fu_1269_p1));
    empty_80_fu_1302_p2 <= std_logic_vector(unsigned(tmp14_fu_1297_p2) + unsigned(tmp13_cast_fu_1293_p1));
    empty_84_fu_1364_p2 <= std_logic_vector(unsigned(empty_83_reg_571) + unsigned(ap_const_lv9_1));
    exitcond383_fu_666_p2 <= "1" when (empty_reg_368 = ap_const_lv14_3720) else "0";
    exitcond7514_fu_1358_p2 <= "1" when (empty_83_reg_571 = ap_const_lv9_121) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state44, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state52, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state35, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state47, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1536_p1 <= zext_ln62_reg_1718(5 - 1 downto 0);
    grp_fu_1536_p2 <= ap_const_lv14_15(5 - 1 downto 0);
    grp_fu_1536_p3 <= zext_ln62_2_reg_1736(5 - 1 downto 0);

    grp_fu_593_ce_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state65, ap_CS_fsm_state42, ap_CS_fsm_state68, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            grp_fu_593_ce <= ap_const_logic_1;
        else 
            grp_fu_593_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_593_p0_assign_proc : process(ap_CS_fsm_state65, bitcast_ln82_fu_1482_p1, empty_77_reg_526, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_593_p0 <= bitcast_ln82_fu_1482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_593_p0 <= empty_77_reg_526;
        else 
            grp_fu_593_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_593_p1_assign_proc : process(conv3_biases_0_0_val, ap_CS_fsm_state65, mul_reg_1790, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_593_p1 <= conv3_biases_0_0_val;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_593_p1 <= mul_reg_1790;
        else 
            grp_fu_593_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_597_p_ce <= grp_fu_593_ce;
    grp_fu_597_p_din0 <= grp_fu_593_p0;
    grp_fu_597_p_din1 <= grp_fu_593_p1;
    grp_fu_597_p_opcode <= ap_const_lv2_0;
    grp_fu_601_p_ce <= ap_const_logic_1;
    grp_fu_601_p_din0 <= bitcast_ln62_fu_1206_p1;
    grp_fu_601_p_din1 <= input_fm_buffer_load_reg_1780;
    grp_fu_605_p_ce <= ap_const_logic_1;
    grp_fu_605_p_din0 <= reg_607;
    grp_fu_605_p_din1 <= ap_const_lv32_0;
    grp_fu_605_p_opcode <= ap_const_lv5_4;
    icmp_ln106_fu_695_p2 <= "1" when (nin_reg_379 = ap_const_lv6_20) else "0";
    icmp_ln107_fu_740_p2 <= "1" when (by_reg_413 = ap_const_lv5_15) else "0";
    icmp_ln108_fu_855_p2 <= "1" when (bx_reg_424 = ap_const_lv5_15) else "0";
    icmp_ln128_fu_1232_p2 <= "1" when (ty_1_reg_549 = ap_const_lv5_11) else "0";
    icmp_ln129_fu_1342_p2 <= "1" when (tx_1_reg_560 = ap_const_lv5_11) else "0";
    icmp_ln31_fu_621_p2 <= "1" when (tj_fu_204 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_650_p2 <= "1" when (ti_reg_356 = ap_const_lv4_F) else "0";
    icmp_ln48_fu_1007_p2 <= "1" when (ty_reg_435 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_1033_p2 <= "1" when (tx_reg_447 = ap_const_lv5_11) else "0";
    icmp_ln52_1_fu_903_p2 <= "1" when (signed(add_ln111_fu_889_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln52_2_fu_1049_p2 <= "1" when (ky_reg_459 = ap_const_lv3_5) else "0";
    icmp_ln52_fu_775_p2 <= "1" when (signed(empty_73_fu_762_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln53_fu_1105_p2 <= "1" when (kx_reg_481 = ap_const_lv3_5) else "0";
    icmp_ln61_fu_1149_p2 <= "1" when (nin_1_reg_515 = ap_const_lv6_20) else "0";
    icmp_ln79_fu_1378_p2 <= "1" when (yr_fu_208 = ap_const_lv8_FF) else "0";
    icmp_ln80_fu_1424_p2 <= "1" when (xr_reg_582 = ap_const_lv8_FF) else "0";
    icmp_ln83_1_fu_1510_p2 <= "1" when (trunc_ln83_fu_1500_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_fu_1504_p2 <= "0" when (tmp_1_fu_1490_p4 = ap_const_lv8_FF) else "1";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state4, input_fm_buffer_addr_1_reg_1655, input_fm_buffer_addr_2_reg_1751, ap_CS_fsm_state17, p_cast55_fu_678_p1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_2_reg_1751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_1_reg_1655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_address0 <= p_cast55_fu_678_p1(14 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state17, bitcast_ln115_fu_985_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_d0 <= bitcast_ln115_fu_985_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond383_fu_666_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond383_fu_666_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state56, gmem_addr_5_reg_1668, gmem_addr_6_reg_1769, gmem_addr_reg_1861)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1861;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                m_axi_gmem_ARADDR <= gmem_addr_6_reg_1769;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_axi_gmem_ARADDR <= gmem_addr_5_reg_1668;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state56)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state44, ap_CS_fsm_state65, gmem_addr_4_reg_1808, gmem_addr_reg_1861)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                m_axi_gmem_AWADDR <= gmem_addr_reg_1861;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                m_axi_gmem_AWADDR <= gmem_addr_4_reg_1808;
            else 
                m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;

    m_axi_gmem_AWLEN_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state44, ap_CS_fsm_state65)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                m_axi_gmem_AWLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                m_axi_gmem_AWLEN <= ap_const_lv32_11;
            else 
                m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state44, ap_CS_fsm_state65)
    begin
        if ((((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state52, ap_CS_fsm_state76)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state76) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state35, ap_CS_fsm_state64)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state71, select_ln83_reg_1878, bitcast_ln131_fu_1354_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            m_axi_gmem_WDATA <= select_ln83_reg_1878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            m_axi_gmem_WDATA <= bitcast_ln131_fu_1354_p1;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state47, ap_CS_fsm_state71)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln107_fu_730_p0 <= mul_ln107_fu_730_p00(10 - 1 downto 0);
    mul_ln107_fu_730_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_3_fu_720_p2),14));
    mul_ln107_fu_730_p1 <= ap_const_lv14_15(6 - 1 downto 0);
    or_ln51_1_fu_917_p2 <= (tmp_7_fu_895_p3 or icmp_ln52_1_fu_903_p2);
    or_ln51_fu_797_p2 <= (tmp_5_fu_767_p3 or icmp_ln52_fu_775_p2);
    or_ln83_fu_1516_p2 <= (icmp_ln83_fu_1504_p2 or icmp_ln83_1_fu_1510_p2);

    output_fm_buffer_0_address0_assign_proc : process(output_fm_buffer_0_addr_reg_1692, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state45, ap_CS_fsm_state53, p_cast59_fu_1028_p1, zext_ln131_2_fu_1337_p1, p_cast64_fu_1370_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            output_fm_buffer_0_address0 <= p_cast64_fu_1370_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_fm_buffer_0_address0 <= zext_ln131_2_fu_1337_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_0_address0 <= output_fm_buffer_0_addr_reg_1692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_fm_buffer_0_address0 <= p_cast59_fu_1028_p1(9 - 1 downto 0);
        else 
            output_fm_buffer_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state45, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_fm_buffer_0_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state53, add51_lcssa_lcssa27_reg_470)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            output_fm_buffer_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_0_d0 <= add51_lcssa_lcssa27_reg_470;
        else 
            output_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln52_2_fu_1049_p2, ap_CS_fsm_state53, exitcond7514_fu_1358_p2)
    begin
        if ((((exitcond7514_fu_1358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln52_2_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_fm_buffer_0_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast33_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_79_fu_1273_p2),64));

    p_cast55_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_368),64));
    p_cast59_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_1023_p2),64));
    p_cast64_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_83_reg_571),64));
    p_shl8_cast_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_1249_p3),19));
    p_shl8_fu_1249_p3 <= (empty_78_fu_1244_p2 & ap_const_lv10_0);
    p_shl9_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_1261_p3),19));
    p_shl9_fu_1261_p3 <= (empty_78_fu_1244_p2 & ap_const_lv2_0);
    select_ln51_2_fu_923_p3 <= 
        ap_const_lv10_0 when (tmp_8_fu_909_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln51_3_fu_931_p3 <= 
        select_ln51_2_fu_923_p3 when (or_ln51_1_fu_917_p2(0) = '1') else 
        add_ln111_fu_889_p2;
    select_ln51_fu_789_p3 <= 
        ap_const_lv10_0 when (tmp_6_fu_781_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_fu_1528_p3 <= 
        ap_const_lv32_0 when (and_ln83_fu_1522_p2(0) = '1') else 
        bitcast_ln82_1_fu_1486_p1;
        sext_ln111_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_1_fu_879_p2),10));

        sext_ln115_1_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_965_p4),64));

        sext_ln115_2_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_2_fu_939_p3),20));

        sext_ln115_3_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln115_1_fu_951_p2),64));

        sext_ln115_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_1_fu_819_p3),20));

        sext_ln129_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_1308_p4),64));

        sext_ln62_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_1186_p4),64));

        sext_ln80_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln82_fu_1414_p2),64));

        sext_ln82_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1458_p4),64));

    shl_ln115_1_fu_819_p3 <= (yClamped_fu_803_p3 & ap_const_lv2_0);
    shl_ln115_2_fu_939_p3 <= (select_ln51_3_fu_931_p3 & ap_const_lv2_0);
    shl_ln1_fu_811_p3 <= (yClamped_fu_803_p3 & ap_const_lv10_0);
    shl_ln2_fu_1071_p3 <= (ky_reg_459 & ap_const_lv4_0);
    shl_ln62_1_fu_1079_p3 <= (ky_reg_459 & ap_const_lv2_0);
    shl_ln62_2_fu_1127_p3 <= (kx_reg_481 & ap_const_lv2_0);
    shl_ln82_1_fu_1402_p3 <= (yr_fu_208 & ap_const_lv2_0);
    shl_ln82_2_fu_1436_p3 <= (xr_reg_582 & ap_const_lv2_0);
    shl_ln_fu_1390_p3 <= (yr_fu_208 & ap_const_lv10_0);
    sub_ln115_fu_831_p2 <= std_logic_vector(unsigned(shl_ln1_fu_811_p3) - unsigned(sext_ln115_fu_827_p1));
    sub_ln82_fu_1414_p2 <= std_logic_vector(unsigned(zext_ln82_fu_1398_p1) - unsigned(zext_ln82_1_fu_1410_p1));
    tmp13_cast_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_1283_p4),64));
    tmp14_fu_1297_p2 <= std_logic_vector(signed(p_cast33_fu_1279_p1) + signed(output_ftmap));
        tmp1_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_752_p2),10));

    tmp1_fu_752_p2 <= std_logic_vector(unsigned(zext_ln107_2_fu_736_p1) + unsigned(ap_const_lv6_3E));
    tmp3_fu_1283_p4 <= ((ti_reg_356 & ti_reg_356) & ap_const_lv2_0);
    tmp4_fu_867_p3 <= (ti_reg_356 & ti_reg_356);
    tmp_1_fu_1490_p4 <= bitcast_ln82_1_fu_1486_p1(30 downto 23);
    tmp_3_fu_993_p3 <= (ty_reg_435 & ap_const_lv4_0);
    tmp_4_fu_1214_p3 <= (ty_1_reg_549 & ap_const_lv4_0);
    tmp_5_fu_767_p3 <= empty_73_fu_762_p2(9 downto 9);
    tmp_6_fu_781_p3 <= empty_73_fu_762_p2(9 downto 9);
    tmp_7_fu_895_p3 <= add_ln111_fu_889_p2(9 downto 9);
    tmp_8_fu_909_p3 <= add_ln111_fu_889_p2(9 downto 9);
    tmp_fu_633_p3 <= (tj_fu_204 & tj_fu_204);
    trunc_ln5_fu_1308_p4 <= empty_80_fu_1302_p2(63 downto 2);
    trunc_ln6_fu_965_p4 <= add_ln115_2_fu_960_p2(63 downto 2);
    trunc_ln7_fu_1186_p4 <= add_ln62_2_fu_1181_p2(63 downto 2);
    trunc_ln83_fu_1500_p1 <= bitcast_ln82_1_fu_1486_p1(23 - 1 downto 0);
    trunc_ln_fu_1458_p4 <= add_ln82_1_fu_1453_p2(63 downto 2);
    tx_cast_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_447),9));
    ty_cast_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_435),9));
    yClamped_fu_803_p3 <= 
        select_ln51_fu_789_p3 when (or_ln51_fu_797_p2(0) = '1') else 
        empty_73_fu_762_p2;
    zext_ln107_2_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_413),6));
    zext_ln107_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul49_reg_402),64));
    zext_ln108_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_424),6));
    zext_ln111_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_867_p3),10));
    zext_ln115_1_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_424),14));
    zext_ln115_2_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_4_fu_841_p2),64));
    zext_ln115_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_413),10));
    zext_ln128_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_549),8));
    zext_ln131_1_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_560),9));
    zext_ln131_2_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_1_fu_1332_p2),64));
    zext_ln131_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_549),9));
    zext_ln32_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_633_p3),10));
    zext_ln52_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_459),5));
    zext_ln53_1_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_481),5));
    zext_ln53_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_1079_p3),7));
    zext_ln61_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_2_fu_1127_p3),12));
    zext_ln62_1_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_1091_p2),64));
    zext_ln62_2_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1117_p2),14));
    zext_ln62_4_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_fu_1167_p2),64));
    zext_ln62_5_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1536_p4),64));
    zext_ln62_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_76_fu_1061_p2),10));
    zext_ln82_1_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln82_1_fu_1402_p3),19));
    zext_ln82_2_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln82_2_fu_1436_p3),64));
    zext_ln82_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1390_p3),19));
end behav;
