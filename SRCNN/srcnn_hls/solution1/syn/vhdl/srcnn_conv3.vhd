-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i3_AWVALID : OUT STD_LOGIC;
    m_axi_i3_AWREADY : IN STD_LOGIC;
    m_axi_i3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WVALID : OUT STD_LOGIC;
    m_axi_i3_WREADY : IN STD_LOGIC;
    m_axi_i3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_WLAST : OUT STD_LOGIC;
    m_axi_i3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARVALID : OUT STD_LOGIC;
    m_axi_i3_ARREADY : IN STD_LOGIC;
    m_axi_i3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RVALID : IN STD_LOGIC;
    m_axi_i3_RREADY : OUT STD_LOGIC;
    m_axi_i3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_RLAST : IN STD_LOGIC;
    m_axi_i3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BVALID : IN STD_LOGIC;
    m_axi_i3_BREADY : OUT STD_LOGIC;
    m_axi_i3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w3_AWVALID : OUT STD_LOGIC;
    m_axi_w3_AWREADY : IN STD_LOGIC;
    m_axi_w3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_WVALID : OUT STD_LOGIC;
    m_axi_w3_WREADY : IN STD_LOGIC;
    m_axi_w3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_WLAST : OUT STD_LOGIC;
    m_axi_w3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_ARVALID : OUT STD_LOGIC;
    m_axi_w3_ARREADY : IN STD_LOGIC;
    m_axi_w3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_RVALID : IN STD_LOGIC;
    m_axi_w3_RREADY : OUT STD_LOGIC;
    m_axi_w3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w3_RLAST : IN STD_LOGIC;
    m_axi_w3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_w3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_BVALID : IN STD_LOGIC;
    m_axi_w3_BREADY : OUT STD_LOGIC;
    m_axi_w3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_o_AWVALID : OUT STD_LOGIC;
    m_axi_o_AWREADY : IN STD_LOGIC;
    m_axi_o_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_o_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_o_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_o_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_o_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_WVALID : OUT STD_LOGIC;
    m_axi_o_WREADY : IN STD_LOGIC;
    m_axi_o_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_o_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_WLAST : OUT STD_LOGIC;
    m_axi_o_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_ARVALID : OUT STD_LOGIC;
    m_axi_o_ARREADY : IN STD_LOGIC;
    m_axi_o_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_o_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_o_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_o_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_o_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_o_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_RVALID : IN STD_LOGIC;
    m_axi_o_RREADY : OUT STD_LOGIC;
    m_axi_o_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_o_RLAST : IN STD_LOGIC;
    m_axi_o_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_o_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_BVALID : IN STD_LOGIC;
    m_axi_o_BREADY : OUT STD_LOGIC;
    m_axi_o_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_o_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_o_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_459_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_459_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_459_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_459_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_459_p_ce : OUT STD_LOGIC;
    grp_fu_463_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_463_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_463_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_463_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_320 : STD_LOGIC_VECTOR (11 downto 0) := "001100100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv9_138 : STD_LOGIC_VECTOR (8 downto 0) := "100111000";
    constant ap_const_lv10_2D4 : STD_LOGIC_VECTOR (9 downto 0) := "1011010100";
    constant ap_const_lv10_270 : STD_LOGIC_VECTOR (9 downto 0) := "1001110000";
    constant ap_const_lv10_20C : STD_LOGIC_VECTOR (9 downto 0) := "1000001100";
    constant ap_const_lv11_5A8 : STD_LOGIC_VECTOR (10 downto 0) := "10110101000";
    constant ap_const_lv10_15 : STD_LOGIC_VECTOR (9 downto 0) := "0000010101";
    constant ap_const_lv11_1B9 : STD_LOGIC_VECTOR (10 downto 0) := "00110111001";
    constant ap_const_lv11_372 : STD_LOGIC_VECTOR (10 downto 0) := "01101110010";
    constant ap_const_lv11_52B : STD_LOGIC_VECTOR (10 downto 0) := "10100101011";
    constant ap_const_lv12_6E4 : STD_LOGIC_VECTOR (11 downto 0) := "011011100100";
    constant ap_const_lv12_89D : STD_LOGIC_VECTOR (11 downto 0) := "100010011101";
    constant ap_const_lv12_A56 : STD_LOGIC_VECTOR (11 downto 0) := "101001010110";
    constant ap_const_lv11_40F : STD_LOGIC_VECTOR (10 downto 0) := "10000001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_fm_buffer_0_ce0 : STD_LOGIC;
    signal output_fm_buffer_0_we0 : STD_LOGIC;
    signal output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal w3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal o_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal o_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal o_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal o_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal o_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal add_ln31_1_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_1_reg_1659 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln31_fu_648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln31_reg_1664 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_1_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_1_reg_1670 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_2_fu_680_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln31_2_reg_1676 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_reg_1683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ti_cast28_fu_696_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast28_reg_1688 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_1_fu_700_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln40_1_reg_1693 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln40_fu_712_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln40_reg_1701 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_fu_718_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln104_reg_1706 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln40_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_722_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_reg_1711 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp1_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_reg_1717 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast50_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast50_reg_1722 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln58_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1727 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp11_fu_760_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp11_reg_1732 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_73_fu_777_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_73_reg_1742 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln58_fu_789_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_reg_1750 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_addr_1_reg_1755 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln59_fu_815_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln59_reg_1763 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln63_fu_831_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln63_reg_1776 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln73_fu_998_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln73_reg_1781 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln63_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_8_fu_1012_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_8_reg_1786 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_9_fu_1018_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_9_reg_1791 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_10_fu_1024_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_10_reg_1796 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_11_fu_1030_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_11_reg_1801 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_12_fu_1036_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_12_reg_1806 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_13_fu_1042_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_13_reg_1811 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_14_fu_1048_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_14_reg_1816 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln64_fu_1064_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_reg_1821 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_1_fu_1078_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_1_reg_1826 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_2_fu_1092_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_2_reg_1831 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_3_fu_1106_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_3_reg_1836 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_4_fu_1120_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_4_reg_1841 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_5_fu_1134_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_5_reg_1846 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_6_fu_1148_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_6_reg_1851 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_7_fu_1162_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_7_reg_1856 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln64_fu_1180_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln64_reg_1864 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln73_15_fu_1204_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_15_reg_1869 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln64_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_16_fu_1209_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_16_reg_1874 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_17_fu_1214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_17_reg_1879 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_18_fu_1219_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_18_reg_1884 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_19_fu_1224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_19_reg_1889 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_20_fu_1229_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_20_reg_1894 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_21_fu_1234_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_21_reg_1899 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_22_fu_1239_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_22_reg_1904 : STD_LOGIC_VECTOR (10 downto 0);
    signal w3_addr_reg_1909 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_1_reg_1915 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_2_reg_1921 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_3_reg_1927 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_4_reg_1933 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_5_reg_1939 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_6_reg_1945 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_7_reg_1951 : STD_LOGIC_VECTOR (63 downto 0);
    signal w3_addr_read_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_1_read_reg_1982 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_1_fu_1384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_2_read_reg_1997 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_2_fu_1392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_3_read_reg_2012 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul50_1_reg_2022 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_3_fu_1400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_4_read_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul50_2_reg_2042 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_4_fu_1408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_5_read_reg_2052 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul50_3_reg_2062 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_5_fu_1420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_6_read_reg_2072 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_6_fu_1424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_addr_7_read_reg_2082 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul50_5_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal bitcast_ln73_7_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul50_6_reg_2097 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal mul50_7_reg_2102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal add_ln143_4_fu_1444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln143_4_reg_2112 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal add_ln139_fu_1460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln139_reg_2120 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln141_fu_1501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln141_reg_2125 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln139_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal add_ln141_fu_1543_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln141_reg_2138 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_addr_reg_2143 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln141_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fm_buffer_0_load_reg_2150 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_addr_read_reg_2155 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln143_fu_1605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_1_fu_540_ap_start : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_ap_done : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_ap_idle : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_ap_ready : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_input_fm_buffer_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv3_Pipeline_1_fu_540_input_fm_buffer_ce0 : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_input_fm_buffer_we0 : STD_LOGIC;
    signal grp_conv3_Pipeline_1_fu_540_input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_idle : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_ready : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWVALID : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WVALID : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WLAST : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARVALID : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_RREADY : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_BREADY : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_ce0 : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_we0 : STD_LOGIC;
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_Pipeline_3_fu_559_ap_start : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_ap_done : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_ap_idle : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_ap_ready : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_ce0 : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_we0 : STD_LOGIC;
    signal grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tn_reg_426 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln58_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_437 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_1_reg_449 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln59_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_1_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_473 : STD_LOGIC_VECTOR (2 downto 0);
    signal add57_7_lcssa19_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal add57_717_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ty_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_reg_529 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv3_Pipeline_1_fu_540_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg : STD_LOGIC := '0';
    signal grp_conv3_Pipeline_3_fu_559_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal p_cast197_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_6_fu_1364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_7_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_8_fu_1372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_9_fu_1380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_10_fu_1388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_11_fu_1396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_12_fu_1404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_13_fu_1415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_6_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_fu_1249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_1_fu_1264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_2_fu_1279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_3_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_4_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_5_fu_1324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_6_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_7_fu_1354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln143_fu_1595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ti_fu_182 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_fu_1505_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tj_fu_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten69_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_570_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_636_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_mid1_fu_656_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln104_fu_737_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_746_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_746_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_769_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ty_1_cast_fu_765_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_1_cast_fu_795_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_74_fu_799_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_845_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_837_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_cast_fu_853_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_75_fu_857_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast54_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_fu_883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast38_fu_879_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_fu_893_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_cast_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast39_fu_875_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp14_fu_908_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp14_cast_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast40_fu_871_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_fu_923_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_cast_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp18_fu_938_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp18_cast_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp20_fu_953_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp20_cast_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast41_fu_867_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp22_fu_968_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp22_cast_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_821_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_84_fu_988_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln73_fu_998_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln73_fu_998_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln73_2_fu_1008_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_1_fu_1004_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_83_fu_983_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_1054_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_82_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_1_fu_1068_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_81_fu_963_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_2_fu_1082_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_80_fu_948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_3_fu_1096_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_79_fu_933_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_4_fu_1110_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_78_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_5_fu_1124_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_77_fu_903_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_6_fu_1138_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_76_fu_888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_7_fu_1152_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln64_1_fu_1170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_fu_1186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln73_5_fu_1200_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_4_fu_1196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_3_fu_1192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln64_fu_1166_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_fu_1244_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_1_fu_1259_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_2_fu_1274_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_3_fu_1289_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_4_fu_1304_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_5_fu_1319_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_6_fu_1334_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_7_fu_1349_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln73_8_fu_1412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_1436_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln143_fu_1432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln139_fu_1450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_85_fu_1466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_1471_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln143_1_fu_1483_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln143_1_fu_1479_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln143_2_fu_1491_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln143_fu_1495_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln143_5_fu_1523_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln143_5_fu_1527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln143_fu_1549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln143_3_fu_1554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln143_1_fu_1558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln143_2_fu_1563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln143_4_fu_1571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_3_fu_1575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_2_fu_1580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln6_fu_1585_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_565_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_570_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal empty_fu_746_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_fu_998_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv3_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_fm_buffer_ce0 : OUT STD_LOGIC;
        input_fm_buffer_we0 : OUT STD_LOGIC;
        input_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_i3_AWVALID : OUT STD_LOGIC;
        m_axi_i3_AWREADY : IN STD_LOGIC;
        m_axi_i3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_WVALID : OUT STD_LOGIC;
        m_axi_i3_WREADY : IN STD_LOGIC;
        m_axi_i3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_WLAST : OUT STD_LOGIC;
        m_axi_i3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_ARVALID : OUT STD_LOGIC;
        m_axi_i3_ARREADY : IN STD_LOGIC;
        m_axi_i3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_RVALID : IN STD_LOGIC;
        m_axi_i3_RREADY : OUT STD_LOGIC;
        m_axi_i3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i3_RLAST : IN STD_LOGIC;
        m_axi_i3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_i3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_BVALID : IN STD_LOGIC;
        m_axi_i3_BREADY : OUT STD_LOGIC;
        m_axi_i3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        zext_ln31 : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln55 : IN STD_LOGIC_VECTOR (7 downto 0);
        shl_ln2 : IN STD_LOGIC_VECTOR (4 downto 0);
        select_ln31 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        input_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_fm_buffer_ce0 : OUT STD_LOGIC;
        input_fm_buffer_we0 : OUT STD_LOGIC;
        input_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_fm_buffer_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_fm_buffer_0_ce0 : OUT STD_LOGIC;
        output_fm_buffer_0_we0 : OUT STD_LOGIC;
        output_fm_buffer_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_5ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3528,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_0_U : component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 289,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_0_address0,
        ce0 => output_fm_buffer_0_ce0,
        we0 => output_fm_buffer_0_we0,
        d0 => output_fm_buffer_0_d0,
        q0 => output_fm_buffer_0_q0);

    grp_conv3_Pipeline_1_fu_540 : component srcnn_conv3_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_Pipeline_1_fu_540_ap_start,
        ap_done => grp_conv3_Pipeline_1_fu_540_ap_done,
        ap_idle => grp_conv3_Pipeline_1_fu_540_ap_idle,
        ap_ready => grp_conv3_Pipeline_1_fu_540_ap_ready,
        input_fm_buffer_address0 => grp_conv3_Pipeline_1_fu_540_input_fm_buffer_address0,
        input_fm_buffer_ce0 => grp_conv3_Pipeline_1_fu_540_input_fm_buffer_ce0,
        input_fm_buffer_we0 => grp_conv3_Pipeline_1_fu_540_input_fm_buffer_we0,
        input_fm_buffer_d0 => grp_conv3_Pipeline_1_fu_540_input_fm_buffer_d0);

    grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546 : component srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start,
        ap_done => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done,
        ap_idle => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_idle,
        ap_ready => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_ready,
        m_axi_i3_AWVALID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWVALID,
        m_axi_i3_AWREADY => ap_const_logic_0,
        m_axi_i3_AWADDR => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWADDR,
        m_axi_i3_AWID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWID,
        m_axi_i3_AWLEN => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWLEN,
        m_axi_i3_AWSIZE => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWSIZE,
        m_axi_i3_AWBURST => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWBURST,
        m_axi_i3_AWLOCK => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWLOCK,
        m_axi_i3_AWCACHE => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWCACHE,
        m_axi_i3_AWPROT => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWPROT,
        m_axi_i3_AWQOS => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWQOS,
        m_axi_i3_AWREGION => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWREGION,
        m_axi_i3_AWUSER => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_AWUSER,
        m_axi_i3_WVALID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WVALID,
        m_axi_i3_WREADY => ap_const_logic_0,
        m_axi_i3_WDATA => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WDATA,
        m_axi_i3_WSTRB => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WSTRB,
        m_axi_i3_WLAST => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WLAST,
        m_axi_i3_WID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WID,
        m_axi_i3_WUSER => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_WUSER,
        m_axi_i3_ARVALID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARVALID,
        m_axi_i3_ARREADY => m_axi_i3_ARREADY,
        m_axi_i3_ARADDR => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARADDR,
        m_axi_i3_ARID => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARID,
        m_axi_i3_ARLEN => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLEN,
        m_axi_i3_ARSIZE => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARSIZE,
        m_axi_i3_ARBURST => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARBURST,
        m_axi_i3_ARLOCK => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLOCK,
        m_axi_i3_ARCACHE => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARCACHE,
        m_axi_i3_ARPROT => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARPROT,
        m_axi_i3_ARQOS => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARQOS,
        m_axi_i3_ARREGION => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARREGION,
        m_axi_i3_ARUSER => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARUSER,
        m_axi_i3_RVALID => m_axi_i3_RVALID,
        m_axi_i3_RREADY => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_RREADY,
        m_axi_i3_RDATA => m_axi_i3_RDATA,
        m_axi_i3_RLAST => m_axi_i3_RLAST,
        m_axi_i3_RID => m_axi_i3_RID,
        m_axi_i3_RFIFONUM => m_axi_i3_RFIFONUM,
        m_axi_i3_RUSER => m_axi_i3_RUSER,
        m_axi_i3_RRESP => m_axi_i3_RRESP,
        m_axi_i3_BVALID => ap_const_logic_0,
        m_axi_i3_BREADY => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_BREADY,
        m_axi_i3_BRESP => ap_const_lv2_0,
        m_axi_i3_BID => ap_const_lv1_0,
        m_axi_i3_BUSER => ap_const_lv1_0,
        zext_ln31 => select_ln31_1_reg_1670,
        zext_ln55 => tmp1_reg_1717,
        shl_ln2 => shl_ln2_reg_1711,
        select_ln31 => select_ln31_reg_1664,
        input_ftmap => input_ftmap,
        input_fm_buffer_address0 => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_address0,
        input_fm_buffer_ce0 => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_ce0,
        input_fm_buffer_we0 => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_we0,
        input_fm_buffer_d0 => grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_d0);

    grp_conv3_Pipeline_3_fu_559 : component srcnn_conv3_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_Pipeline_3_fu_559_ap_start,
        ap_done => grp_conv3_Pipeline_3_fu_559_ap_done,
        ap_idle => grp_conv3_Pipeline_3_fu_559_ap_idle,
        ap_ready => grp_conv3_Pipeline_3_fu_559_ap_ready,
        output_fm_buffer_0_address0 => grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_address0,
        output_fm_buffer_0_ce0 => grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_ce0,
        output_fm_buffer_0_we0 => grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_we0,
        output_fm_buffer_0_d0 => grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_d0);

    mul_5ns_8ns_12_1_1_U316 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => empty_fu_746_p0,
        din1 => empty_fu_746_p1,
        dout => empty_fu_746_p2);

    mul_5ns_6ns_10_1_1_U317 : component srcnn_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln73_fu_998_p0,
        din1 => mul_ln73_fu_998_p1,
        dout => mul_ln73_fu_998_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv3_Pipeline_1_fu_540_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_Pipeline_1_fu_540_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln40_fu_706_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_conv3_Pipeline_1_fu_540_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_Pipeline_1_fu_540_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_Pipeline_1_fu_540_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_Pipeline_3_fu_559_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_Pipeline_3_fu_559_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln139_fu_1454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    grp_conv3_Pipeline_3_fu_559_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_Pipeline_3_fu_559_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_Pipeline_3_fu_559_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add57_717_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                add57_717_reg_506 <= grp_fu_459_p_dout0;
            elsif (((icmp_ln63_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                add57_717_reg_506 <= add57_7_lcssa19_reg_484;
            end if; 
        end if;
    end process;

    add57_7_lcssa19_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                add57_7_lcssa19_reg_484 <= output_fm_buffer_0_q0;
            elsif (((icmp_ln64_fu_1174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                add57_7_lcssa19_reg_484 <= add57_717_reg_506;
            end if; 
        end if;
    end process;

    indvar_flatten69_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten69_fu_190 <= ap_const_lv8_0;
            elsif (((icmp_ln139_fu_1454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                indvar_flatten69_fu_190 <= add_ln31_1_reg_1659;
            end if; 
        end if;
    end process;

    kx_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                kx_reg_495 <= add_ln64_reg_1864;
            elsif (((icmp_ln63_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                kx_reg_495 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ky_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ky_reg_473 <= ap_const_lv3_0;
            elsif (((icmp_ln64_fu_1174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                ky_reg_473 <= add_ln63_reg_1776;
            end if; 
        end if;
    end process;

    phi_mul_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_437 <= ap_const_lv12_0;
            elsif (((icmp_ln58_fu_783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_437 <= add_ln40_1_reg_1693;
            end if; 
        end if;
    end process;

    ti_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ti_fu_182 <= ap_const_lv4_0;
            elsif (((icmp_ln139_fu_1454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                ti_fu_182 <= add_ln32_fu_1505_p2;
            end if; 
        end if;
    end process;

    tj_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_186 <= ap_const_lv4_0;
            elsif (((icmp_ln139_fu_1454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                tj_fu_186 <= select_ln31_2_reg_1676;
            end if; 
        end if;
    end process;

    tn_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tn_reg_426 <= ap_const_lv3_0;
            elsif (((icmp_ln58_fu_783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                tn_reg_426 <= add_ln40_reg_1701;
            end if; 
        end if;
    end process;

    tx_1_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                tx_1_reg_461 <= ap_const_lv5_0;
            elsif (((icmp_ln63_fu_825_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                tx_1_reg_461 <= add_ln59_reg_1763;
            end if; 
        end if;
    end process;

    tx_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_1454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                tx_reg_529 <= ap_const_lv5_0;
            elsif (((m_axi_o_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                tx_reg_529 <= add_ln141_reg_2138;
            end if; 
        end if;
    end process;

    ty_1_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ty_1_reg_449 <= ap_const_lv5_0;
            elsif (((icmp_ln59_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                ty_1_reg_449 <= add_ln58_reg_1750;
            end if; 
        end if;
    end process;

    ty_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_706_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ty_reg_518 <= ap_const_lv5_0;
            elsif (((icmp_ln141_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                ty_reg_518 <= add_ln139_reg_2120;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                add_ln139_reg_2120 <= add_ln139_fu_1460_p2;
                add_ln143_4_reg_2112 <= add_ln143_4_fu_1444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                add_ln141_reg_2138 <= add_ln141_fu_1543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_1_reg_1659 <= add_ln31_1_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln40_1_reg_1693 <= add_ln40_1_fu_700_p2;
                add_ln40_reg_1701 <= add_ln40_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln58_reg_1750 <= add_ln58_fu_789_p2;
                empty_73_reg_1742 <= empty_73_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln59_reg_1763 <= add_ln59_fu_815_p2;
                output_fm_buffer_0_addr_1_reg_1755 <= p_cast197_fu_804_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln63_reg_1776 <= add_ln63_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln64_reg_1864 <= add_ln64_fu_1180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln73_10_reg_1796 <= add_ln73_10_fu_1024_p2;
                add_ln73_11_reg_1801 <= add_ln73_11_fu_1030_p2;
                add_ln73_12_reg_1806 <= add_ln73_12_fu_1036_p2;
                add_ln73_13_reg_1811 <= add_ln73_13_fu_1042_p2;
                add_ln73_14_reg_1816 <= add_ln73_14_fu_1048_p2;
                add_ln73_8_reg_1786 <= add_ln73_8_fu_1012_p2;
                add_ln73_9_reg_1791 <= add_ln73_9_fu_1018_p2;
                mul_ln73_reg_1781 <= mul_ln73_fu_998_p2;
                sext_ln64_1_reg_1826 <= sext_ln64_1_fu_1078_p1;
                sext_ln64_2_reg_1831 <= sext_ln64_2_fu_1092_p1;
                sext_ln64_3_reg_1836 <= sext_ln64_3_fu_1106_p1;
                sext_ln64_4_reg_1841 <= sext_ln64_4_fu_1120_p1;
                sext_ln64_5_reg_1846 <= sext_ln64_5_fu_1134_p1;
                sext_ln64_6_reg_1851 <= sext_ln64_6_fu_1148_p1;
                sext_ln64_7_reg_1856 <= sext_ln64_7_fu_1162_p1;
                sext_ln64_reg_1821 <= sext_ln64_fu_1064_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln73_15_reg_1869 <= add_ln73_15_fu_1204_p2;
                add_ln73_16_reg_1874 <= add_ln73_16_fu_1209_p2;
                add_ln73_17_reg_1879 <= add_ln73_17_fu_1214_p2;
                add_ln73_18_reg_1884 <= add_ln73_18_fu_1219_p2;
                add_ln73_19_reg_1889 <= add_ln73_19_fu_1224_p2;
                add_ln73_20_reg_1894 <= add_ln73_20_fu_1229_p2;
                add_ln73_21_reg_1899 <= add_ln73_21_fu_1234_p2;
                add_ln73_22_reg_1904 <= add_ln73_22_fu_1239_p2;
                w3_addr_1_reg_1915 <= sext_ln73_1_fu_1264_p1;
                w3_addr_2_reg_1921 <= sext_ln73_2_fu_1279_p1;
                w3_addr_3_reg_1927 <= sext_ln73_3_fu_1294_p1;
                w3_addr_4_reg_1933 <= sext_ln73_4_fu_1309_p1;
                w3_addr_5_reg_1939 <= sext_ln73_5_fu_1324_p1;
                w3_addr_6_reg_1945 <= sext_ln73_6_fu_1339_p1;
                w3_addr_7_reg_1951 <= sext_ln73_7_fu_1354_p1;
                w3_addr_reg_1909 <= sext_ln73_fu_1249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul50_1_reg_2022 <= grp_fu_463_p_dout0;
                w3_addr_4_read_reg_2032 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                mul50_2_reg_2042 <= grp_fu_463_p_dout0;
                w3_addr_5_read_reg_2052 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul50_3_reg_2062 <= grp_fu_463_p_dout0;
                w3_addr_6_read_reg_2072 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                mul50_5_reg_2087 <= grp_fu_463_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                mul50_6_reg_2097 <= grp_fu_463_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                mul50_7_reg_2102 <= grp_fu_463_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                o_addr_read_reg_2155 <= m_axi_o_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_1537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                o_addr_reg_2143 <= sext_ln143_fu_1595_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                output_fm_buffer_0_load_reg_2150 <= output_fm_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    p_cast50_reg_1722(11 downto 0) <= p_cast50_fu_752_p1(11 downto 0);
                tmp11_reg_1732 <= tmp11_fu_760_p2;
                    zext_ln58_reg_1727(11 downto 0) <= zext_ln58_fu_756_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    p_shl1_reg_1683(7 downto 4) <= p_shl1_fu_688_p3(7 downto 4);
                select_ln31_1_reg_1670 <= select_ln31_1_fu_672_p3;
                select_ln31_2_reg_1676 <= select_ln31_2_fu_680_p3;
                select_ln31_reg_1664 <= select_ln31_fu_648_p3;
                    ti_cast28_reg_1688(3 downto 0) <= ti_cast28_fu_696_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_w3_RVALID = ap_const_logic_1)))) then
                reg_574 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_w3_RVALID = ap_const_logic_1)))) then
                reg_579 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_w3_RVALID = ap_const_logic_1)))) then
                reg_584 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1)))) then
                reg_589 <= grp_fu_463_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)))) then
                reg_594 <= grp_fu_459_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_1454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    sext_ln141_reg_2125(63 downto 2) <= sext_ln141_fu_1501_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    shl_ln2_reg_1711(4 downto 3) <= shl_ln2_fu_722_p3(4 downto 3);
                tmp1_reg_1717 <= tmp1_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_706_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln104_reg_1706 <= trunc_ln104_fu_718_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                w3_addr_1_read_reg_1982 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                w3_addr_2_read_reg_1997 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                w3_addr_3_read_reg_2012 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                w3_addr_7_read_reg_2082 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                w3_addr_read_reg_1967 <= m_axi_w3_RDATA;
            end if;
        end if;
    end process;
    p_shl1_reg_1683(3 downto 0) <= "0000";
    ti_cast28_reg_1688(4) <= '0';
    shl_ln2_reg_1711(2 downto 0) <= "000";
    p_cast50_reg_1722(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1727(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    sext_ln141_reg_2125(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_w3_ARREADY, m_axi_w3_RVALID, m_axi_o_AWREADY, m_axi_o_WREADY, m_axi_o_ARREADY, m_axi_o_RVALID, m_axi_o_BVALID, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state2, icmp_ln31_fu_618_p2, ap_CS_fsm_state3, icmp_ln40_fu_706_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, icmp_ln63_fu_825_p2, ap_CS_fsm_state11, icmp_ln64_fu_1174_p2, ap_CS_fsm_state56, icmp_ln139_fu_1454_p2, ap_CS_fsm_state57, icmp_ln141_fu_1537_p2, grp_conv3_Pipeline_1_fu_540_ap_done, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done, grp_conv3_Pipeline_3_fu_559_ap_done, icmp_ln58_fu_783_p2, icmp_ln59_fu_809_p2, ap_CS_fsm_state4, ap_CS_fsm_state77)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln40_fu_706_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_conv3_Pipeline_1_fu_540_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln58_fu_783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln59_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln63_fu_825_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln64_fu_1174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_w3_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state56 => 
                if (((icmp_ln139_fu_1454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state57 => 
                if (((icmp_ln141_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state58 => 
                if (((m_axi_o_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((m_axi_o_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((m_axi_o_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((m_axi_o_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((m_axi_o_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((grp_conv3_Pipeline_3_fu_559_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln139_fu_1460_p2 <= std_logic_vector(unsigned(ty_reg_518) + unsigned(ap_const_lv5_1));
    add_ln141_fu_1543_p2 <= std_logic_vector(unsigned(tx_reg_529) + unsigned(ap_const_lv5_1));
    add_ln143_1_fu_1558_p2 <= std_logic_vector(unsigned(zext_ln143_3_fu_1554_p1) + unsigned(p_shl1_reg_1683));
    add_ln143_2_fu_1580_p2 <= std_logic_vector(unsigned(add_ln143_3_fu_1575_p2) + unsigned(sext_ln141_reg_2125));
    add_ln143_3_fu_1575_p2 <= std_logic_vector(unsigned(zext_ln143_4_fu_1571_p1) + unsigned(output_ftmap));
    add_ln143_4_fu_1444_p2 <= std_logic_vector(unsigned(tmp_6_fu_1436_p3) + unsigned(zext_ln143_fu_1432_p1));
    add_ln143_5_fu_1527_p2 <= std_logic_vector(unsigned(add_ln143_4_reg_2112) + unsigned(zext_ln143_5_fu_1523_p1));
    add_ln143_fu_1549_p2 <= std_logic_vector(unsigned(ti_cast28_reg_1688) + unsigned(tx_reg_529));
    add_ln31_1_fu_624_p2 <= std_logic_vector(unsigned(indvar_flatten69_fu_190) + unsigned(ap_const_lv8_1));
    add_ln31_fu_636_p2 <= std_logic_vector(unsigned(tj_fu_186) + unsigned(ap_const_lv4_1));
    add_ln32_fu_1505_p2 <= std_logic_vector(unsigned(select_ln31_reg_1664) + unsigned(ap_const_lv4_1));
    add_ln40_1_fu_700_p2 <= std_logic_vector(unsigned(phi_mul_reg_437) + unsigned(ap_const_lv12_320));
    add_ln40_fu_712_p2 <= std_logic_vector(unsigned(tn_reg_426) + unsigned(ap_const_lv3_1));
    add_ln58_fu_789_p2 <= std_logic_vector(unsigned(ty_1_reg_449) + unsigned(ap_const_lv5_1));
    add_ln59_fu_815_p2 <= std_logic_vector(unsigned(tx_1_reg_461) + unsigned(ap_const_lv5_1));
    add_ln63_fu_831_p2 <= std_logic_vector(unsigned(ky_reg_473) + unsigned(ap_const_lv3_1));
    add_ln64_fu_1180_p2 <= std_logic_vector(unsigned(kx_reg_495) + unsigned(ap_const_lv3_1));
    add_ln68_fu_1186_p2 <= std_logic_vector(unsigned(zext_ln64_1_fu_1170_p1) + unsigned(tx_1_reg_461));
    add_ln73_10_fu_1024_p2 <= std_logic_vector(unsigned(zext_ln73_2_fu_1008_p1) + unsigned(ap_const_lv11_52B));
    add_ln73_11_fu_1030_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_1004_p1) + unsigned(ap_const_lv12_6E4));
    add_ln73_12_fu_1036_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_1004_p1) + unsigned(ap_const_lv12_89D));
    add_ln73_13_fu_1042_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_1004_p1) + unsigned(ap_const_lv12_A56));
    add_ln73_14_fu_1048_p2 <= std_logic_vector(unsigned(zext_ln73_2_fu_1008_p1) + unsigned(ap_const_lv11_40F));
    add_ln73_15_fu_1204_p2 <= std_logic_vector(unsigned(mul_ln73_reg_1781) + unsigned(zext_ln73_5_fu_1200_p1));
    add_ln73_16_fu_1209_p2 <= std_logic_vector(unsigned(add_ln73_8_reg_1786) + unsigned(zext_ln73_4_fu_1196_p1));
    add_ln73_17_fu_1214_p2 <= std_logic_vector(unsigned(add_ln73_9_reg_1791) + unsigned(zext_ln73_4_fu_1196_p1));
    add_ln73_18_fu_1219_p2 <= std_logic_vector(unsigned(add_ln73_10_reg_1796) + unsigned(zext_ln73_4_fu_1196_p1));
    add_ln73_19_fu_1224_p2 <= std_logic_vector(unsigned(add_ln73_11_reg_1801) + unsigned(zext_ln73_3_fu_1192_p1));
    add_ln73_1_fu_1259_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_1_reg_1826));
    add_ln73_20_fu_1229_p2 <= std_logic_vector(unsigned(add_ln73_12_reg_1806) + unsigned(zext_ln73_3_fu_1192_p1));
    add_ln73_21_fu_1234_p2 <= std_logic_vector(unsigned(add_ln73_13_reg_1811) + unsigned(zext_ln73_3_fu_1192_p1));
    add_ln73_22_fu_1239_p2 <= std_logic_vector(unsigned(add_ln73_14_reg_1816) + unsigned(zext_ln73_4_fu_1196_p1));
    add_ln73_2_fu_1274_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_2_reg_1831));
    add_ln73_3_fu_1289_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_3_reg_1836));
    add_ln73_4_fu_1304_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_4_reg_1841));
    add_ln73_5_fu_1319_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_5_reg_1846));
    add_ln73_6_fu_1334_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_6_reg_1851));
    add_ln73_7_fu_1349_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_7_reg_1856));
    add_ln73_8_fu_1012_p2 <= std_logic_vector(unsigned(zext_ln73_2_fu_1008_p1) + unsigned(ap_const_lv11_1B9));
    add_ln73_9_fu_1018_p2 <= std_logic_vector(unsigned(zext_ln73_2_fu_1008_p1) + unsigned(ap_const_lv11_372));
    add_ln73_fu_1244_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1166_p1) + unsigned(sext_ln64_reg_1821));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_w3_ARREADY)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_w3_RVALID)
    begin
        if ((m_axi_w3_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_conv3_Pipeline_1_fu_540_ap_done)
    begin
        if ((grp_conv3_Pipeline_1_fu_540_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;

    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_o_ARREADY)
    begin
        if ((m_axi_o_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;

    ap_ST_fsm_state66_blk_assign_proc : process(m_axi_o_RVALID)
    begin
        if ((m_axi_o_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state67_blk_assign_proc : process(m_axi_o_AWREADY)
    begin
        if ((m_axi_o_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done)
    begin
        if ((grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state70_blk <= ap_const_logic_0;

    ap_ST_fsm_state71_blk_assign_proc : process(m_axi_o_WREADY)
    begin
        if ((m_axi_o_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(m_axi_o_BVALID)
    begin
        if ((m_axi_o_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state77_blk_assign_proc : process(grp_conv3_Pipeline_3_fu_559_ap_done)
    begin
        if ((grp_conv3_Pipeline_3_fu_559_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_618_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_618_p2)
    begin
        if (((icmp_ln31_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln143_fu_1605_p1 <= o_addr_read_reg_2155;
    bitcast_ln73_1_fu_1384_p1 <= w3_addr_1_read_reg_1982;
    bitcast_ln73_2_fu_1392_p1 <= w3_addr_2_read_reg_1997;
    bitcast_ln73_3_fu_1400_p1 <= w3_addr_3_read_reg_2012;
    bitcast_ln73_4_fu_1408_p1 <= w3_addr_4_read_reg_2032;
    bitcast_ln73_5_fu_1420_p1 <= w3_addr_5_read_reg_2052;
    bitcast_ln73_6_fu_1424_p1 <= w3_addr_6_read_reg_2072;
    bitcast_ln73_7_fu_1428_p1 <= w3_addr_7_read_reg_2082;
    bitcast_ln73_fu_1376_p1 <= w3_addr_read_reg_1967;
    empty_73_fu_777_p2 <= std_logic_vector(unsigned(tmp_8_fu_769_p3) + unsigned(ty_1_cast_fu_765_p1));
    empty_74_fu_799_p2 <= std_logic_vector(unsigned(empty_73_reg_1742) + unsigned(tx_1_cast_fu_795_p1));
    empty_75_fu_857_p2 <= std_logic_vector(unsigned(p_shl4_fu_837_p3) + unsigned(p_shl5_cast_fu_853_p1));
    empty_76_fu_888_p2 <= std_logic_vector(unsigned(tmp10_fu_883_p2) + unsigned(p_cast50_reg_1722));
    empty_77_fu_903_p2 <= std_logic_vector(signed(tmp12_cast_fu_899_p1) + signed(tmp11_reg_1732));
    empty_78_fu_918_p2 <= std_logic_vector(signed(tmp14_cast_fu_914_p1) + signed(tmp11_reg_1732));
    empty_79_fu_933_p2 <= std_logic_vector(signed(tmp16_cast_fu_929_p1) + signed(tmp11_reg_1732));
    empty_80_fu_948_p2 <= std_logic_vector(signed(tmp18_cast_fu_944_p1) + signed(tmp11_reg_1732));
    empty_81_fu_963_p2 <= std_logic_vector(signed(tmp20_cast_fu_959_p1) + signed(tmp11_reg_1732));
    empty_82_fu_978_p2 <= std_logic_vector(signed(tmp22_cast_fu_974_p1) + signed(tmp11_reg_1732));
    empty_83_fu_983_p2 <= std_logic_vector(unsigned(tmp10_fu_883_p2) + unsigned(zext_ln58_reg_1727));
    empty_84_fu_988_p2 <= std_logic_vector(unsigned(zext_ln63_fu_821_p1) + unsigned(ty_1_reg_449));
    empty_85_fu_1466_p2 <= std_logic_vector(unsigned(zext_ln139_fu_1450_p1) + unsigned(select_ln31_1_reg_1670));
    empty_fu_746_p0 <= empty_fu_746_p00(5 - 1 downto 0);
    empty_fu_746_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln104_fu_737_p2),12));
    empty_fu_746_p1 <= ap_const_lv12_64(8 - 1 downto 0);
    grp_conv3_Pipeline_1_fu_540_ap_start <= grp_conv3_Pipeline_1_fu_540_ap_start_reg;
    grp_conv3_Pipeline_3_fu_559_ap_start <= grp_conv3_Pipeline_3_fu_559_ap_start_reg;
    grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_ap_start_reg;
    grp_fu_459_p_ce <= grp_fu_565_ce;
    grp_fu_459_p_din0 <= grp_fu_565_p0;
    grp_fu_459_p_din1 <= grp_fu_565_p1;
    grp_fu_459_p_opcode <= ap_const_lv2_0;
    grp_fu_463_p_ce <= grp_fu_570_ce;
    grp_fu_463_p_din0 <= grp_fu_570_p0;
    grp_fu_463_p_din1 <= grp_fu_570_p1;

    grp_fu_565_ce_assign_proc : process(m_axi_w3_RVALID, m_axi_o_AWREADY, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state67, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state55, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state59, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state68, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 
    = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((m_axi_o_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1)))) then 
            grp_fu_565_ce <= ap_const_logic_1;
        else 
            grp_fu_565_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_565_p0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state67, reg_594, ap_CS_fsm_state28, output_fm_buffer_0_load_reg_2150, bitcast_ln143_fu_1605_p1, add57_717_reg_506, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_565_p0 <= bitcast_ln143_fu_1605_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_565_p0 <= output_fm_buffer_0_load_reg_2150;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_565_p0 <= reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_565_p0 <= add57_717_reg_506;
        else 
            grp_fu_565_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_565_p1_assign_proc : process(conv3_biases_0_0_val, ap_CS_fsm_state24, ap_CS_fsm_state67, reg_589, reg_594, mul50_1_reg_2022, mul50_2_reg_2042, mul50_3_reg_2062, mul50_5_reg_2087, ap_CS_fsm_state28, mul50_6_reg_2097, mul50_7_reg_2102, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_565_p1 <= reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_565_p1 <= conv3_biases_0_0_val;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_565_p1 <= mul50_7_reg_2102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_565_p1 <= mul50_6_reg_2097;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_565_p1 <= mul50_5_reg_2087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_565_p1 <= mul50_3_reg_2062;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_565_p1 <= mul50_2_reg_2042;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_565_p1 <= mul50_1_reg_2022;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_565_p1 <= reg_589;
        else 
            grp_fu_565_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_570_ce_assign_proc : process(m_axi_w3_RVALID, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_w3_RVALID = ap_const_logic_1)))) then 
            grp_fu_570_ce <= ap_const_logic_1;
        else 
            grp_fu_570_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_570_p0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, bitcast_ln73_fu_1376_p1, bitcast_ln73_1_fu_1384_p1, bitcast_ln73_2_fu_1392_p1, bitcast_ln73_3_fu_1400_p1, bitcast_ln73_4_fu_1408_p1, bitcast_ln73_5_fu_1420_p1, bitcast_ln73_6_fu_1424_p1, ap_CS_fsm_state28, bitcast_ln73_7_fu_1428_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_570_p0 <= bitcast_ln73_7_fu_1428_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_570_p0 <= bitcast_ln73_6_fu_1424_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_570_p0 <= bitcast_ln73_5_fu_1420_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_570_p0 <= bitcast_ln73_4_fu_1408_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_570_p0 <= bitcast_ln73_3_fu_1400_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_570_p0 <= bitcast_ln73_2_fu_1392_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_570_p0 <= bitcast_ln73_1_fu_1384_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_570_p0 <= bitcast_ln73_fu_1376_p1;
        else 
            grp_fu_570_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_570_p1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, reg_574, reg_579, reg_584, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_570_p1 <= reg_584;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_570_p1 <= reg_579;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_570_p1 <= reg_574;
        else 
            grp_fu_570_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln139_fu_1454_p2 <= "1" when (ty_reg_518 = ap_const_lv5_11) else "0";
    icmp_ln141_fu_1537_p2 <= "1" when (tx_reg_529 = ap_const_lv5_11) else "0";
    icmp_ln31_fu_618_p2 <= "1" when (indvar_flatten69_fu_190 = ap_const_lv8_E1) else "0";
    icmp_ln32_fu_642_p2 <= "1" when (ti_fu_182 = ap_const_lv4_F) else "0";
    icmp_ln40_fu_706_p2 <= "1" when (tn_reg_426 = ap_const_lv3_4) else "0";
    icmp_ln58_fu_783_p2 <= "1" when (ty_1_reg_449 = ap_const_lv5_11) else "0";
    icmp_ln59_fu_809_p2 <= "1" when (tx_1_reg_461 = ap_const_lv5_11) else "0";
    icmp_ln63_fu_825_p2 <= "1" when (ky_reg_473 = ap_const_lv3_5) else "0";
    icmp_ln64_fu_1174_p2 <= "1" when (kx_reg_495 = ap_const_lv3_5) else "0";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state6, grp_conv3_Pipeline_1_fu_540_input_fm_buffer_address0, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_address0, ap_CS_fsm_state4, zext_ln73_6_fu_1364_p1, zext_ln73_7_fu_1368_p1, zext_ln73_8_fu_1372_p1, zext_ln73_9_fu_1380_p1, zext_ln73_10_fu_1388_p1, zext_ln73_11_fu_1396_p1, zext_ln73_12_fu_1404_p1, zext_ln73_13_fu_1415_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_fm_buffer_address0 <= zext_ln73_13_fu_1415_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_fm_buffer_address0 <= zext_ln73_12_fu_1404_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_fm_buffer_address0 <= zext_ln73_11_fu_1396_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_fm_buffer_address0 <= zext_ln73_10_fu_1388_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_fm_buffer_address0 <= zext_ln73_9_fu_1380_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_fm_buffer_address0 <= zext_ln73_8_fu_1372_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_fm_buffer_address0 <= zext_ln73_7_fu_1368_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_fm_buffer_address0 <= zext_ln73_6_fu_1364_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_address0 <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_address0 <= grp_conv3_Pipeline_1_fu_540_input_fm_buffer_address0;
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(m_axi_w3_ARREADY, m_axi_w3_RVALID, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state6, grp_conv3_Pipeline_1_fu_540_input_fm_buffer_ce0, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_w3_RVALID = ap_const_logic_1)))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_ce0 <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_ce0 <= grp_conv3_Pipeline_1_fu_540_input_fm_buffer_ce0;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state6, grp_conv3_Pipeline_1_fu_540_input_fm_buffer_d0, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_d0 <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_d0 <= grp_conv3_Pipeline_1_fu_540_input_fm_buffer_d0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state6, grp_conv3_Pipeline_1_fu_540_input_fm_buffer_we0, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_fm_buffer_we0 <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_input_fm_buffer_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_we0 <= grp_conv3_Pipeline_1_fu_540_input_fm_buffer_we0;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_ARADDR <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARADDR;
    m_axi_i3_ARBURST <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARBURST;
    m_axi_i3_ARCACHE <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARCACHE;
    m_axi_i3_ARID <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARID;
    m_axi_i3_ARLEN <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLEN;
    m_axi_i3_ARLOCK <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARLOCK;
    m_axi_i3_ARPROT <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARPROT;
    m_axi_i3_ARQOS <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARQOS;
    m_axi_i3_ARREGION <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARREGION;
    m_axi_i3_ARSIZE <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARSIZE;
    m_axi_i3_ARUSER <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARUSER;

    m_axi_i3_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_i3_ARVALID <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_ARVALID;
        else 
            m_axi_i3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_AWADDR <= ap_const_lv64_0;
    m_axi_i3_AWBURST <= ap_const_lv2_0;
    m_axi_i3_AWCACHE <= ap_const_lv4_0;
    m_axi_i3_AWID <= ap_const_lv1_0;
    m_axi_i3_AWLEN <= ap_const_lv32_0;
    m_axi_i3_AWLOCK <= ap_const_lv2_0;
    m_axi_i3_AWPROT <= ap_const_lv3_0;
    m_axi_i3_AWQOS <= ap_const_lv4_0;
    m_axi_i3_AWREGION <= ap_const_lv4_0;
    m_axi_i3_AWSIZE <= ap_const_lv3_0;
    m_axi_i3_AWUSER <= ap_const_lv1_0;
    m_axi_i3_AWVALID <= ap_const_logic_0;
    m_axi_i3_BREADY <= ap_const_logic_0;

    m_axi_i3_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_i3_RREADY <= grp_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3_fu_546_m_axi_i3_RREADY;
        else 
            m_axi_i3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_WDATA <= ap_const_lv32_0;
    m_axi_i3_WID <= ap_const_lv1_0;
    m_axi_i3_WLAST <= ap_const_logic_0;
    m_axi_i3_WSTRB <= ap_const_lv4_0;
    m_axi_i3_WUSER <= ap_const_lv1_0;
    m_axi_i3_WVALID <= ap_const_logic_0;
    m_axi_o_ARADDR <= o_addr_reg_2143;
    m_axi_o_ARBURST <= ap_const_lv2_0;
    m_axi_o_ARCACHE <= ap_const_lv4_0;
    m_axi_o_ARID <= ap_const_lv1_0;
    m_axi_o_ARLEN <= ap_const_lv32_1;
    m_axi_o_ARLOCK <= ap_const_lv2_0;
    m_axi_o_ARPROT <= ap_const_lv3_0;
    m_axi_o_ARQOS <= ap_const_lv4_0;
    m_axi_o_ARREGION <= ap_const_lv4_0;
    m_axi_o_ARSIZE <= ap_const_lv3_0;
    m_axi_o_ARUSER <= ap_const_lv1_0;

    m_axi_o_ARVALID_assign_proc : process(m_axi_o_ARREADY, ap_CS_fsm_state58)
    begin
        if (((m_axi_o_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            m_axi_o_ARVALID <= ap_const_logic_1;
        else 
            m_axi_o_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_o_AWADDR <= o_addr_reg_2143;
    m_axi_o_AWBURST <= ap_const_lv2_0;
    m_axi_o_AWCACHE <= ap_const_lv4_0;
    m_axi_o_AWID <= ap_const_lv1_0;
    m_axi_o_AWLEN <= ap_const_lv32_1;
    m_axi_o_AWLOCK <= ap_const_lv2_0;
    m_axi_o_AWPROT <= ap_const_lv3_0;
    m_axi_o_AWQOS <= ap_const_lv4_0;
    m_axi_o_AWREGION <= ap_const_lv4_0;
    m_axi_o_AWSIZE <= ap_const_lv3_0;
    m_axi_o_AWUSER <= ap_const_lv1_0;

    m_axi_o_AWVALID_assign_proc : process(m_axi_o_AWREADY, ap_CS_fsm_state67)
    begin
        if (((m_axi_o_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            m_axi_o_AWVALID <= ap_const_logic_1;
        else 
            m_axi_o_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_o_BREADY_assign_proc : process(m_axi_o_BVALID, ap_CS_fsm_state76)
    begin
        if (((m_axi_o_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            m_axi_o_BREADY <= ap_const_logic_1;
        else 
            m_axi_o_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_o_RREADY_assign_proc : process(m_axi_o_RVALID, ap_CS_fsm_state66)
    begin
        if (((m_axi_o_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            m_axi_o_RREADY <= ap_const_logic_1;
        else 
            m_axi_o_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_o_WDATA <= reg_594;
    m_axi_o_WID <= ap_const_lv1_0;
    m_axi_o_WLAST <= ap_const_logic_0;
    m_axi_o_WSTRB <= ap_const_lv4_F;
    m_axi_o_WUSER <= ap_const_lv1_0;

    m_axi_o_WVALID_assign_proc : process(m_axi_o_WREADY, ap_CS_fsm_state71)
    begin
        if (((m_axi_o_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            m_axi_o_WVALID <= ap_const_logic_1;
        else 
            m_axi_o_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_w3_ARADDR_assign_proc : process(m_axi_w3_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, w3_addr_reg_1909, w3_addr_1_reg_1915, w3_addr_2_reg_1921, w3_addr_3_reg_1927, w3_addr_4_reg_1933, w3_addr_5_reg_1939, w3_addr_6_reg_1945, w3_addr_7_reg_1951)
    begin
        if ((m_axi_w3_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                m_axi_w3_ARADDR <= w3_addr_7_reg_1951;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_w3_ARADDR <= w3_addr_6_reg_1945;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                m_axi_w3_ARADDR <= w3_addr_5_reg_1939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_w3_ARADDR <= w3_addr_4_reg_1933;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                m_axi_w3_ARADDR <= w3_addr_3_reg_1927;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_w3_ARADDR <= w3_addr_2_reg_1921;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                m_axi_w3_ARADDR <= w3_addr_1_reg_1915;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_w3_ARADDR <= w3_addr_reg_1909;
            else 
                m_axi_w3_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_w3_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_w3_ARBURST <= ap_const_lv2_0;
    m_axi_w3_ARCACHE <= ap_const_lv4_0;
    m_axi_w3_ARID <= ap_const_lv1_0;
    m_axi_w3_ARLEN <= ap_const_lv32_1;
    m_axi_w3_ARLOCK <= ap_const_lv2_0;
    m_axi_w3_ARPROT <= ap_const_lv3_0;
    m_axi_w3_ARQOS <= ap_const_lv4_0;
    m_axi_w3_ARREGION <= ap_const_lv4_0;
    m_axi_w3_ARSIZE <= ap_const_lv3_0;
    m_axi_w3_ARUSER <= ap_const_lv1_0;

    m_axi_w3_ARVALID_assign_proc : process(m_axi_w3_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_w3_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_w3_ARREADY = ap_const_logic_1)))) then 
            m_axi_w3_ARVALID <= ap_const_logic_1;
        else 
            m_axi_w3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w3_AWADDR <= ap_const_lv64_0;
    m_axi_w3_AWBURST <= ap_const_lv2_0;
    m_axi_w3_AWCACHE <= ap_const_lv4_0;
    m_axi_w3_AWID <= ap_const_lv1_0;
    m_axi_w3_AWLEN <= ap_const_lv32_0;
    m_axi_w3_AWLOCK <= ap_const_lv2_0;
    m_axi_w3_AWPROT <= ap_const_lv3_0;
    m_axi_w3_AWQOS <= ap_const_lv4_0;
    m_axi_w3_AWREGION <= ap_const_lv4_0;
    m_axi_w3_AWSIZE <= ap_const_lv3_0;
    m_axi_w3_AWUSER <= ap_const_lv1_0;
    m_axi_w3_AWVALID <= ap_const_logic_0;
    m_axi_w3_BREADY <= ap_const_logic_0;

    m_axi_w3_RREADY_assign_proc : process(m_axi_w3_RVALID, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_w3_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_w3_RVALID = ap_const_logic_1)))) then 
            m_axi_w3_RREADY <= ap_const_logic_1;
        else 
            m_axi_w3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w3_WDATA <= ap_const_lv32_0;
    m_axi_w3_WID <= ap_const_lv1_0;
    m_axi_w3_WLAST <= ap_const_logic_0;
    m_axi_w3_WSTRB <= ap_const_lv4_0;
    m_axi_w3_WUSER <= ap_const_lv1_0;
    m_axi_w3_WVALID <= ap_const_logic_0;
    mul_ln73_fu_998_p0 <= mul_ln73_fu_998_p00(5 - 1 downto 0);
    mul_ln73_fu_998_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_84_fu_988_p2),10));
    mul_ln73_fu_998_p1 <= ap_const_lv10_15(6 - 1 downto 0);

    o_blk_n_AR_assign_proc : process(m_axi_o_ARREADY, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            o_blk_n_AR <= m_axi_o_ARREADY;
        else 
            o_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    o_blk_n_AW_assign_proc : process(m_axi_o_AWREADY, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            o_blk_n_AW <= m_axi_o_AWREADY;
        else 
            o_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    o_blk_n_B_assign_proc : process(m_axi_o_BVALID, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            o_blk_n_B <= m_axi_o_BVALID;
        else 
            o_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    o_blk_n_R_assign_proc : process(m_axi_o_RVALID, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            o_blk_n_R <= m_axi_o_RVALID;
        else 
            o_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    o_blk_n_W_assign_proc : process(m_axi_o_WREADY, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            o_blk_n_W <= m_axi_o_WREADY;
        else 
            o_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    or_ln104_fu_737_p2 <= (shl_ln2_reg_1711 or ap_const_lv5_7);

    output_fm_buffer_0_address0_assign_proc : process(output_fm_buffer_0_addr_1_reg_1755, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state57, grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_address0, ap_CS_fsm_state77, p_cast197_fu_804_p1, zext_ln143_6_fu_1532_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_0_address0 <= zext_ln143_6_fu_1532_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_fm_buffer_0_address0 <= output_fm_buffer_0_addr_1_reg_1755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_fm_buffer_0_address0 <= p_cast197_fu_804_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            output_fm_buffer_0_address0 <= grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_address0;
        else 
            output_fm_buffer_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state57, grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_ce0, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_fm_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            output_fm_buffer_0_ce0 <= grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_ce0;
        else 
            output_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state10, grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_d0, add57_7_lcssa19_reg_484, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_fm_buffer_0_d0 <= add57_7_lcssa19_reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            output_fm_buffer_0_d0 <= grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_d0;
        else 
            output_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln63_fu_825_p2, grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_we0, ap_CS_fsm_state77)
    begin
        if (((icmp_ln63_fu_825_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_fm_buffer_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            output_fm_buffer_0_we0 <= grp_conv3_Pipeline_3_fu_559_output_fm_buffer_0_we0;
        else 
            output_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast197_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_74_fu_799_p2),64));
    p_cast38_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_857_p2),8));
    p_cast39_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_857_p2),9));
    p_cast40_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_857_p2),10));
    p_cast41_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_857_p2),11));
    p_cast50_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_746_p2),64));
    p_cast54_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_857_p2),64));
    p_shl1_fu_688_p3 <= (select_ln31_fu_648_p3 & ap_const_lv4_0);
    p_shl4_fu_837_p3 <= (ky_reg_473 & ap_const_lv4_0);
    p_shl5_cast_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_845_p3),7));
    p_shl5_fu_845_p3 <= (ky_reg_473 & ap_const_lv2_0);
    select_ln31_1_fu_672_p3 <= 
        tmp_1_mid1_fu_656_p3 when (icmp_ln32_fu_642_p2(0) = '1') else 
        tmp_s_fu_664_p3;
    select_ln31_2_fu_680_p3 <= 
        add_ln31_fu_636_p2 when (icmp_ln32_fu_642_p2(0) = '1') else 
        tj_fu_186;
    select_ln31_fu_648_p3 <= 
        ap_const_lv4_0 when (icmp_ln32_fu_642_p2(0) = '1') else 
        ti_fu_182;
        sext_ln141_fu_1501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln143_fu_1495_p2),64));

        sext_ln143_fu_1595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_1585_p4),64));

        sext_ln64_1_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_1_fu_1068_p4),63));

        sext_ln64_2_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_2_fu_1082_p4),63));

        sext_ln64_3_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_3_fu_1096_p4),63));

        sext_ln64_4_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_4_fu_1110_p4),63));

        sext_ln64_5_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_5_fu_1124_p4),63));

        sext_ln64_6_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_6_fu_1138_p4),63));

        sext_ln64_7_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_7_fu_1152_p4),63));

        sext_ln64_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_1054_p4),63));

        sext_ln73_1_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_1_fu_1259_p2),64));

        sext_ln73_2_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_2_fu_1274_p2),64));

        sext_ln73_3_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_3_fu_1289_p2),64));

        sext_ln73_4_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_4_fu_1304_p2),64));

        sext_ln73_5_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_5_fu_1319_p2),64));

        sext_ln73_6_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_6_fu_1334_p2),64));

        sext_ln73_7_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_7_fu_1349_p2),64));

        sext_ln73_8_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_22_reg_1904),12));

        sext_ln73_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_fu_1244_p2),64));

    shl_ln143_1_fu_1483_p3 <= (empty_85_fu_1466_p2 & ap_const_lv2_0);
    shl_ln143_2_fu_1563_p3 <= (add_ln143_1_fu_1558_p2 & ap_const_lv2_0);
    shl_ln2_fu_722_p3 <= (trunc_ln104_reg_1706 & ap_const_lv3_0);
    shl_ln_fu_1471_p3 <= (empty_85_fu_1466_p2 & ap_const_lv10_0);
    sub_ln143_fu_1495_p2 <= std_logic_vector(unsigned(zext_ln143_1_fu_1479_p1) - unsigned(zext_ln143_2_fu_1491_p1));
    ti_cast28_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_fu_648_p3),5));
    tmp10_fu_883_p2 <= std_logic_vector(unsigned(p_cast54_fu_863_p1) + unsigned(conv3_weights));
    tmp11_fu_760_p2 <= std_logic_vector(unsigned(p_cast50_fu_752_p1) + unsigned(conv3_weights));
        tmp12_cast_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_893_p2),64));

    tmp12_fu_893_p2 <= std_logic_vector(unsigned(p_cast38_fu_879_p1) + unsigned(ap_const_lv8_9C));
        tmp14_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp14_fu_908_p2),64));

    tmp14_fu_908_p2 <= std_logic_vector(unsigned(p_cast39_fu_875_p1) + unsigned(ap_const_lv9_138));
        tmp16_cast_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_fu_923_p2),64));

    tmp16_fu_923_p2 <= std_logic_vector(unsigned(p_cast40_fu_871_p1) + unsigned(ap_const_lv10_2D4));
        tmp18_cast_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp18_fu_938_p2),64));

    tmp18_fu_938_p2 <= std_logic_vector(unsigned(p_cast40_fu_871_p1) + unsigned(ap_const_lv10_270));
    tmp1_fu_730_p3 <= (select_ln31_2_reg_1676 & select_ln31_2_reg_1676);
        tmp20_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp20_fu_953_p2),64));

    tmp20_fu_953_p2 <= std_logic_vector(unsigned(p_cast40_fu_871_p1) + unsigned(ap_const_lv10_20C));
        tmp22_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp22_fu_968_p2),64));

    tmp22_fu_968_p2 <= std_logic_vector(unsigned(p_cast41_fu_867_p1) + unsigned(ap_const_lv11_5A8));
    tmp_1_mid1_fu_656_p3 <= (add_ln31_fu_636_p2 & add_ln31_fu_636_p2);
    tmp_6_fu_1436_p3 <= (ty_reg_518 & ap_const_lv4_0);
    tmp_8_fu_769_p3 <= (ty_1_reg_449 & ap_const_lv4_0);
    tmp_s_fu_664_p3 <= (tj_fu_186 & tj_fu_186);
    trunc_ln104_fu_718_p1 <= tn_reg_426(2 - 1 downto 0);
    trunc_ln64_1_fu_1068_p4 <= empty_82_fu_978_p2(63 downto 2);
    trunc_ln64_2_fu_1082_p4 <= empty_81_fu_963_p2(63 downto 2);
    trunc_ln64_3_fu_1096_p4 <= empty_80_fu_948_p2(63 downto 2);
    trunc_ln64_4_fu_1110_p4 <= empty_79_fu_933_p2(63 downto 2);
    trunc_ln64_5_fu_1124_p4 <= empty_78_fu_918_p2(63 downto 2);
    trunc_ln64_6_fu_1138_p4 <= empty_77_fu_903_p2(63 downto 2);
    trunc_ln64_7_fu_1152_p4 <= empty_76_fu_888_p2(63 downto 2);
    trunc_ln6_fu_1585_p4 <= add_ln143_2_fu_1580_p2(63 downto 2);
    trunc_ln8_fu_1054_p4 <= empty_83_fu_983_p2(63 downto 2);
    tx_1_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_461),9));
    ty_1_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_449),9));

    w3_blk_n_AR_assign_proc : process(m_axi_w3_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            w3_blk_n_AR <= m_axi_w3_ARREADY;
        else 
            w3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    w3_blk_n_R_assign_proc : process(m_axi_w3_RVALID, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w3_blk_n_R <= m_axi_w3_RVALID;
        else 
            w3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln139_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_518),8));
    zext_ln143_1_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1471_p3),19));
    zext_ln143_2_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln143_1_fu_1483_p3),19));
    zext_ln143_3_fu_1554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_fu_1549_p2),8));
    zext_ln143_4_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln143_2_fu_1563_p3),64));
    zext_ln143_5_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_529),9));
    zext_ln143_6_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_5_fu_1527_p2),64));
    zext_ln143_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_518),9));
    zext_ln58_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_437),64));
    zext_ln63_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_473),5));
    zext_ln64_1_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_495),5));
    zext_ln64_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_495),63));
    zext_ln73_10_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_19_reg_1889),64));
    zext_ln73_11_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_20_reg_1894),64));
    zext_ln73_12_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_21_reg_1899),64));
    zext_ln73_13_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln73_8_fu_1412_p1),64));
    zext_ln73_1_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln73_fu_998_p2),12));
    zext_ln73_2_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln73_fu_998_p2),11));
    zext_ln73_3_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_1186_p2),12));
    zext_ln73_4_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_1186_p2),11));
    zext_ln73_5_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_1186_p2),10));
    zext_ln73_6_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_15_reg_1869),64));
    zext_ln73_7_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_16_reg_1874),64));
    zext_ln73_8_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_17_reg_1879),64));
    zext_ln73_9_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_18_reg_1884),64));
end behav;
