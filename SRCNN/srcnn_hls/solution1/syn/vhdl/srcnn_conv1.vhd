-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_output_ftmap_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    conv1_output_ftmap_ce0 : OUT STD_LOGIC;
    conv1_output_ftmap_we0 : OUT STD_LOGIC;
    conv1_output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_169_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_ce : OUT STD_LOGIC;
    grp_fu_173_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv15_144 : STD_LOGIC_VECTOR (14 downto 0) := "000000101000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_fm_buffer_1_0_ce0 : STD_LOGIC;
    signal input_fm_buffer_1_0_we0 : STD_LOGIC;
    signal input_fm_buffer_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_fm_buffer_1_ce0 : STD_LOGIC;
    signal output_fm_buffer_1_we0 : STD_LOGIC;
    signal output_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln115_reg_1538 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_addr_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1349 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_548_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1354 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_556_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1359 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_566_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1367 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_54_fu_582_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_593_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1380 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln94_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln94_reg_1385 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_reg_1390 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln94_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln94_reg_1398 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln95_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln95_reg_1403 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln94_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_1_0_addr_1_reg_1408 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln95_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_reg_1416 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_3_reg_1421 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln95_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_3_read_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_1_fu_852_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln45_1_reg_1432 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_56_fu_874_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_56_reg_1437 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_886_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_reg_1445 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_2_reg_1450 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_fu_946_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_59_reg_1456 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_1_fu_958_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_1_reg_1464 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_1_addr_1_reg_1469 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_984_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln52_fu_1000_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_reg_1490 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal mul_ln62_fu_1016_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln62_reg_1495 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_1032_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln53_reg_1503 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln53_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_2_read_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_0_load_reg_1518 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln115_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln115_fu_1068_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln115_reg_1542 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln119_fu_1100_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln119_reg_1547 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln119_1_fu_1116_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_1_reg_1552 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_64_fu_1122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_3_fu_1151_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_3_reg_1562 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln116_fu_1167_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln116_reg_1570 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln119_1_fu_1203_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln119_1_reg_1575 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln116_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln117_fu_1233_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln117_reg_1588 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln119_6_fu_1248_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln119_6_reg_1593 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln117_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fm_buffer_1_load_1_reg_1598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal add_i_reg_1603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal empty_67_fu_1312_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ti_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6015_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_313 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal by_reg_324 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_335 : STD_LOGIC_VECTOR (9 downto 0);
    signal bx_reg_347 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal nout_reg_358 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul53_reg_369 : STD_LOGIC_VECTOR (14 downto 0);
    signal ty_reg_380 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_404 : STD_LOGIC_VECTOR (3 downto 0);
    signal add51_lcssa_lcssa18_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal add51_lcssa17_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_2_reg_449 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ty_1_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state47 : BOOLEAN;
    signal tx_1_reg_472 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal empty_66_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast58_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast64_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_2_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_8_fu_1218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_10_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast65_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln102_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal trunc_ln_fu_508_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln94_1_fu_611_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_627_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_633_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_55_fu_637_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_656_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_664_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_678_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_1_fu_694_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_686_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln102_fu_702_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln102_fu_706_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln102_fu_716_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln102_2_fu_720_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln95_fu_731_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln98_1_fu_747_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln98_fu_753_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_757_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_2_fu_790_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln53_3_fu_798_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_2_fu_806_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln102_2_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_fu_818_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_1_fu_823_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_828_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_fu_862_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_870_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal nout_cast_fu_858_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln48_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_896_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_901_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ty_cast_fu_921_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_57_fu_925_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_58_fu_934_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_938_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast_fu_930_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_cast_fu_964_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_60_fu_968_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln52_fu_990_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_62_fu_1006_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_fu_1016_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_fu_1016_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_fu_1022_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_1038_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_1_fu_1044_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_fu_1048_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_1082_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln119_2_fu_1090_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln119_1_fu_1078_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln119_fu_1094_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_1104_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln119_3_fu_1112_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_fu_1074_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_4_fu_1126_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_2_fu_1130_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln119_fu_1139_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_fu_1143_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln119_5_fu_1135_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln116_fu_1157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_65_fu_1173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_6_fu_1178_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln119_4_fu_1182_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln119_1_fu_1191_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_1195_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln119_1_fu_1187_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln119_7_fu_1209_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_5_fu_1213_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln117_fu_1223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln119_fu_1239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_9_fu_1244_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal bitcast_ln120_fu_1257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1260_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln120_fu_1270_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln120_1_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal mul_ln62_fu_1016_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_conv1_input_fm_buffer_1_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_1_0_U : component srcnn_conv1_input_fm_buffer_1_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_1_0_address0,
        ce0 => input_fm_buffer_1_0_ce0,
        we0 => input_fm_buffer_1_0_we0,
        d0 => input_fm_buffer_1_0_d0,
        q0 => input_fm_buffer_1_0_q0);

    output_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_1_address0,
        ce0 => output_fm_buffer_1_ce0,
        we0 => output_fm_buffer_1_we0,
        d0 => output_fm_buffer_1_d0,
        q0 => output_fm_buffer_1_q0);

    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_reg_1603,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_503_p2);

    mul_5ns_6ns_10_1_1_U4 : component srcnn_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln62_fu_1016_p0,
        din1 => mul_ln62_fu_1016_p1,
        dout => mul_ln62_fu_1016_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add51_lcssa17_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                add51_lcssa17_reg_437 <= add51_lcssa_lcssa18_reg_415;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                add51_lcssa17_reg_437 <= grp_fu_169_p_dout0;
            end if; 
        end if;
    end process;

    add51_lcssa_lcssa18_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                add51_lcssa_lcssa18_reg_415 <= output_fm_buffer_1_q0;
            elsif (((icmp_ln53_fu_1026_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                add51_lcssa_lcssa18_reg_415 <= add51_lcssa17_reg_437;
            end if; 
        end if;
    end process;

    bx_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                bx_reg_347 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                bx_reg_347 <= add_ln95_reg_1416;
            end if; 
        end if;
    end process;

    by_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                by_reg_324 <= ap_const_lv5_0;
            elsif (((icmp_ln95_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                by_reg_324 <= add_ln94_reg_1398;
            end if; 
        end if;
    end process;

    empty_66_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_1))) then 
                empty_66_reg_483 <= ap_const_lv15_0;
            elsif (((exitcond6015_fu_1306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                empty_66_reg_483 <= empty_67_fu_1312_p2;
            end if; 
        end if;
    end process;

    empty_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_313 <= empty_54_fu_582_p2;
            elsif (((icmp_ln32_fu_560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_313 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    kx_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                kx_reg_426 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                kx_reg_426 <= add_ln53_reg_1503;
            end if; 
        end if;
    end process;

    ky_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                ky_reg_404 <= ap_const_lv4_0;
            elsif (((icmp_ln53_fu_1026_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                ky_reg_404 <= add_ln52_reg_1490;
            end if; 
        end if;
    end process;

    nout_2_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                nout_2_reg_449 <= ap_const_lv7_0;
            elsif (((icmp_ln116_fu_1161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                nout_2_reg_449 <= add_ln115_reg_1542;
            end if; 
        end if;
    end process;

    nout_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_358 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                nout_reg_358 <= add_ln45_reg_1445;
            end if; 
        end if;
    end process;

    phi_mul53_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul53_reg_369 <= ap_const_lv15_0;
            elsif (((icmp_ln48_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul53_reg_369 <= add_ln45_1_reg_1432;
            end if; 
        end if;
    end process;

    phi_mul_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_335 <= ap_const_lv10_0;
            elsif (((icmp_ln95_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_335 <= add_ln94_1_reg_1390;
            end if; 
        end if;
    end process;

    ti_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_301 <= ap_const_lv4_0;
            elsif (((exitcond6015_fu_1306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                ti_reg_301 <= add_ln32_reg_1367;
            end if; 
        end if;
    end process;

    tj_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_172 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_172 <= add_ln31_reg_1349;
            end if; 
        end if;
    end process;

    tx_1_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_1161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tx_1_reg_472 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                tx_1_reg_472 <= add_ln117_reg_1588;
            end if; 
        end if;
    end process;

    tx_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_952_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_392 <= ap_const_lv5_0;
            elsif (((icmp_ln52_fu_994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                tx_reg_392 <= add_ln49_reg_1477;
            end if; 
        end if;
    end process;

    ty_1_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_0))) then 
                ty_1_reg_461 <= ap_const_lv5_0;
            elsif (((icmp_ln117_fu_1227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                ty_1_reg_461 <= add_ln116_reg_1570;
            end if; 
        end if;
    end process;

    ty_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ty_reg_380 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_380 <= add_ln48_1_reg_1464;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_i_reg_1603 <= grp_fu_169_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln115_reg_1542 <= add_ln115_fu_1068_p2;
                icmp_ln115_reg_1538 <= icmp_ln115_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln116_reg_1570 <= add_ln116_fu_1167_p2;
                add_ln119_3_reg_1562 <= add_ln119_3_fu_1151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln117_reg_1588 <= add_ln117_fu_1233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln119_1_reg_1552 <= add_ln119_1_fu_1116_p2;
                sext_ln119_reg_1547 <= sext_ln119_fu_1100_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_1227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                add_ln119_6_reg_1593 <= add_ln119_6_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1349 <= add_ln31_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1367 <= add_ln32_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln45_1_reg_1432 <= add_ln45_1_fu_852_p2;
                add_ln45_reg_1445 <= add_ln45_fu_886_p2;
                empty_56_reg_1437 <= empty_56_fu_874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_1_reg_1464 <= add_ln48_1_fu_958_p2;
                empty_59_reg_1456 <= empty_59_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_1477 <= add_ln49_fu_984_p2;
                output_fm_buffer_1_addr_1_reg_1469 <= p_cast64_fu_973_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln52_reg_1490 <= add_ln52_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln53_reg_1503 <= add_ln53_fu_1032_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln94_1_reg_1390 <= add_ln94_1_fu_605_p2;
                add_ln94_reg_1398 <= add_ln94_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln95_reg_1416 <= add_ln95_fu_741_p2;
                input_fm_buffer_1_0_addr_1_reg_1408 <= zext_ln102_1_fu_726_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_0))) then
                empty_64_reg_1557 <= empty_64_fu_1122_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                gmem_addr_2_read_reg_1513 <= m_axi_gmem_RDATA;
                input_fm_buffer_1_0_load_reg_1518 <= input_fm_buffer_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_2_reg_1450 <= sext_ln52_fu_911_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                gmem_addr_3_read_reg_1427 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_735_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_3_reg_1421 <= sext_ln102_1_fu_838_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_1340 <= sext_ln115_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                mul_ln62_reg_1495 <= mul_ln62_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                mul_reg_1528 <= grp_fu_173_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                output_fm_buffer_1_load_1_reg_1598 <= output_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sext_ln95_reg_1403(63 downto 2) <= sext_ln95_fu_712_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_1161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                sub_ln119_1_reg_1575 <= sub_ln119_1_fu_1203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_1354 <= tmp_1_fu_548_p3;
                    zext_ln32_reg_1359(7 downto 0) <= zext_ln32_fu_556_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_2_reg_1380 <= tmp_2_fu_593_p3;
                    zext_ln94_reg_1385(7 downto 0) <= zext_ln94_fu_601_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_1359(9 downto 8) <= "00";
    zext_ln94_reg_1385(9 downto 8) <= "00";
    sext_ln95_reg_1403(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state38, ap_CS_fsm_state47, icmp_ln115_reg_1538, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state2, icmp_ln31_fu_536_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond4_fu_576_p2, ap_CS_fsm_state5, icmp_ln94_fu_615_p2, ap_CS_fsm_state6, icmp_ln95_fu_735_p2, ap_CS_fsm_state17, icmp_ln45_fu_880_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state28, icmp_ln52_fu_994_p2, ap_CS_fsm_state29, icmp_ln53_fu_1026_p2, ap_CS_fsm_state48, icmp_ln116_fu_1161_p2, ap_CS_fsm_state49, icmp_ln117_fu_1227_p2, ap_CS_fsm_state57, exitcond6015_fu_1306_p2, icmp_ln32_fu_560_p2, icmp_ln48_fu_952_p2, icmp_ln49_fu_978_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln94_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln95_fu_735_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln45_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln52_fu_994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln53_fu_1026_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if ((not(((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                elsif ((not(((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln116_fu_1161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln117_fu_1227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state57 => 
                if (((exitcond6015_fu_1306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln102_1_fu_823_p2 <= std_logic_vector(unsigned(add_ln102_fu_818_p2) + unsigned(sext_ln95_reg_1403));
    add_ln102_2_fu_720_p2 <= std_logic_vector(unsigned(phi_mul_reg_335) + unsigned(zext_ln102_fu_716_p1));
    add_ln102_fu_818_p2 <= std_logic_vector(signed(sext_ln102_2_fu_814_p1) + signed(input_ftmap));
    add_ln115_fu_1068_p2 <= std_logic_vector(unsigned(nout_2_reg_449) + unsigned(ap_const_lv7_1));
    add_ln116_fu_1167_p2 <= std_logic_vector(unsigned(ty_1_reg_461) + unsigned(ap_const_lv5_1));
    add_ln117_fu_1233_p2 <= std_logic_vector(unsigned(tx_1_reg_472) + unsigned(ap_const_lv5_1));
    add_ln119_1_fu_1116_p2 <= std_logic_vector(unsigned(zext_ln119_3_fu_1112_p1) + unsigned(zext_ln119_fu_1074_p1));
    add_ln119_2_fu_1130_p2 <= std_logic_vector(unsigned(add_ln119_1_reg_1552) + unsigned(zext_ln119_4_fu_1126_p1));
    add_ln119_3_fu_1151_p2 <= std_logic_vector(unsigned(p_shl4_fu_1143_p3) + unsigned(zext_ln119_5_fu_1135_p1));
    add_ln119_4_fu_1182_p2 <= std_logic_vector(signed(sext_ln119_reg_1547) + signed(zext_ln119_6_fu_1178_p1));
    add_ln119_5_fu_1213_p2 <= std_logic_vector(unsigned(add_ln119_3_reg_1562) + unsigned(zext_ln119_7_fu_1209_p1));
    add_ln119_6_fu_1248_p2 <= std_logic_vector(unsigned(sub_ln119_1_reg_1575) + unsigned(zext_ln119_9_fu_1244_p1));
    add_ln119_fu_1239_p2 <= std_logic_vector(unsigned(zext_ln117_fu_1223_p1) + unsigned(tmp_2_reg_1380));
    add_ln31_fu_542_p2 <= std_logic_vector(unsigned(tj_fu_172) + unsigned(ap_const_lv4_1));
    add_ln32_fu_566_p2 <= std_logic_vector(unsigned(ti_reg_301) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_852_p2 <= std_logic_vector(unsigned(phi_mul53_reg_369) + unsigned(ap_const_lv15_144));
    add_ln45_fu_886_p2 <= std_logic_vector(unsigned(nout_reg_358) + unsigned(ap_const_lv7_1));
    add_ln48_1_fu_958_p2 <= std_logic_vector(unsigned(ty_reg_380) + unsigned(ap_const_lv5_1));
    add_ln48_fu_896_p2 <= std_logic_vector(unsigned(zext_ln48_fu_892_p1) + unsigned(conv1_weights));
    add_ln49_fu_984_p2 <= std_logic_vector(unsigned(tx_reg_392) + unsigned(ap_const_lv5_1));
    add_ln52_fu_1000_p2 <= std_logic_vector(unsigned(ky_reg_404) + unsigned(ap_const_lv4_1));
    add_ln53_fu_1032_p2 <= std_logic_vector(unsigned(kx_reg_426) + unsigned(ap_const_lv4_1));
    add_ln57_fu_1038_p2 <= std_logic_vector(unsigned(zext_ln53_fu_1022_p1) + unsigned(tx_reg_392));
    add_ln62_fu_1048_p2 <= std_logic_vector(unsigned(mul_ln62_reg_1495) + unsigned(zext_ln62_1_fu_1044_p1));
    add_ln94_1_fu_605_p2 <= std_logic_vector(unsigned(phi_mul_reg_335) + unsigned(ap_const_lv10_19));
    add_ln94_fu_621_p2 <= std_logic_vector(unsigned(by_reg_324) + unsigned(ap_const_lv5_1));
    add_ln95_fu_741_p2 <= std_logic_vector(unsigned(bx_reg_347) + unsigned(ap_const_lv5_1));
    add_ln98_1_fu_747_p2 <= std_logic_vector(unsigned(zext_ln95_fu_731_p1) + unsigned(ap_const_lv6_3C));
    add_ln98_fu_757_p2 <= std_logic_vector(signed(sext_ln98_fu_753_p1) + signed(zext_ln94_reg_1385));
    and_ln120_fu_1292_p2 <= (or_ln120_fu_1286_p2 and grp_fu_503_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(m_axi_gmem_RVALID, icmp_ln115_reg_1538)
    begin
        if (((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state47_assign_proc : process(m_axi_gmem_RVALID, icmp_ln115_reg_1538)
    begin
                ap_block_state47 <= ((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_536_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_536_p2)
    begin
        if (((icmp_ln31_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln102_fu_848_p1 <= gmem_addr_3_read_reg_1427;
    bitcast_ln120_fu_1257_p1 <= add_i_reg_1603;
    bitcast_ln62_fu_1058_p1 <= gmem_addr_2_read_reg_1513;
    conv1_output_ftmap_address0 <= zext_ln119_10_fu_1253_p1(22 - 1 downto 0);

    conv1_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv1_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_ftmap_d0 <= 
        ap_const_lv32_0 when (and_ln120_fu_1292_p2(0) = '1') else 
        add_i_reg_1603;

    conv1_output_ftmap_we0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv1_output_ftmap_we0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_54_fu_582_p2 <= std_logic_vector(unsigned(empty_reg_313) + unsigned(ap_const_lv10_1));
    empty_55_fu_637_p2 <= std_logic_vector(signed(tmp_cast_fu_633_p1) + signed(zext_ln32_reg_1359));
    empty_56_fu_874_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_870_p1) + unsigned(nout_cast_fu_858_p1));
    empty_57_fu_925_p2 <= std_logic_vector(unsigned(empty_56_reg_1437) + unsigned(ty_cast_fu_921_p1));
    empty_58_fu_934_p1 <= empty_57_fu_925_p2(11 - 1 downto 0);
    empty_59_fu_946_p2 <= std_logic_vector(unsigned(p_shl1_fu_938_p3) + unsigned(p_cast_fu_930_p1));
    empty_60_fu_968_p2 <= std_logic_vector(unsigned(empty_59_reg_1456) + unsigned(tx_cast_fu_964_p1));
    empty_62_fu_1006_p2 <= std_logic_vector(unsigned(zext_ln52_fu_990_p1) + unsigned(ty_reg_380));
    empty_64_fu_1122_p1 <= m_axi_gmem_RDATA;
    empty_65_fu_1173_p2 <= std_logic_vector(unsigned(zext_ln116_fu_1157_p1) + unsigned(tmp_1_reg_1354));
    empty_67_fu_1312_p2 <= std_logic_vector(unsigned(empty_66_reg_483) + unsigned(ap_const_lv15_1));
    exitcond4_fu_576_p2 <= "1" when (empty_reg_313 = ap_const_lv10_271) else "0";
    exitcond6015_fu_1306_p2 <= "1" when (empty_66_reg_483 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state47, icmp_ln115_reg_1538, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_169_p_ce <= ap_const_logic_1;
    grp_fu_169_p_din0 <= grp_fu_494_p0;
    grp_fu_169_p_din1 <= grp_fu_494_p1;
    grp_fu_169_p_opcode <= ap_const_lv2_0;
    grp_fu_173_p_ce <= ap_const_logic_1;
    grp_fu_173_p_din0 <= bitcast_ln62_fu_1058_p1;
    grp_fu_173_p_din1 <= input_fm_buffer_1_0_load_reg_1518;

    grp_fu_494_p0_assign_proc : process(output_fm_buffer_1_load_1_reg_1598, add51_lcssa17_reg_437, ap_CS_fsm_state34, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_494_p0 <= output_fm_buffer_1_load_1_reg_1598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_494_p0 <= add51_lcssa17_reg_437;
        else 
            grp_fu_494_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_494_p1_assign_proc : process(mul_reg_1528, empty_64_reg_1557, ap_CS_fsm_state34, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_494_p1 <= empty_64_reg_1557;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_494_p1 <= mul_reg_1528;
        else 
            grp_fu_494_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln115_fu_1062_p2 <= "1" when (nout_2_reg_449 = ap_const_lv7_40) else "0";
    icmp_ln116_fu_1161_p2 <= "1" when (ty_1_reg_461 = ap_const_lv5_11) else "0";
    icmp_ln117_fu_1227_p2 <= "1" when (tx_1_reg_472 = ap_const_lv5_11) else "0";
    icmp_ln120_1_fu_1280_p2 <= "1" when (trunc_ln120_fu_1270_p1 = ap_const_lv23_0) else "0";
    icmp_ln120_fu_1274_p2 <= "0" when (tmp_3_fu_1260_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_fu_536_p2 <= "1" when (tj_fu_172 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_560_p2 <= "1" when (ti_reg_301 = ap_const_lv4_F) else "0";
    icmp_ln45_fu_880_p2 <= "1" when (nout_reg_358 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_952_p2 <= "1" when (ty_reg_380 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_978_p2 <= "1" when (tx_reg_392 = ap_const_lv5_11) else "0";
    icmp_ln52_fu_994_p2 <= "1" when (ky_reg_404 = ap_const_lv4_9) else "0";
    icmp_ln53_fu_1026_p2 <= "1" when (kx_reg_426 = ap_const_lv4_9) else "0";
    icmp_ln54_1_fu_770_p2 <= "1" when (signed(add_ln98_fu_757_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln54_fu_650_p2 <= "1" when (signed(empty_55_fu_637_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln94_fu_615_p2 <= "1" when (by_reg_324 = ap_const_lv5_19) else "0";
    icmp_ln95_fu_735_p2 <= "1" when (bx_reg_347 = ap_const_lv5_19) else "0";

    input_fm_buffer_1_0_address0_assign_proc : process(ap_CS_fsm_state4, input_fm_buffer_1_0_addr_1_reg_1408, ap_CS_fsm_state29, ap_CS_fsm_state16, p_cast58_fu_588_p1, zext_ln62_2_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_fm_buffer_1_0_address0 <= zext_ln62_2_fu_1053_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_1_0_address0 <= input_fm_buffer_1_0_addr_1_reg_1408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_0_address0 <= p_cast58_fu_588_p1(10 - 1 downto 0);
        else 
            input_fm_buffer_1_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_fm_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_0_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, bitcast_ln102_fu_848_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_1_0_d0 <= bitcast_ln102_fu_848_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_1_0_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_1_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_0_we0_assign_proc : process(ap_CS_fsm_state4, exitcond4_fu_576_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond4_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state20, gmem_addr_reg_1340, gmem_addr_3_reg_1421, gmem_addr_2_reg_1450)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1340;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_axi_gmem_ARADDR <= gmem_addr_2_reg_1450;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARADDR <= gmem_addr_3_reg_1421;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_40;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_51;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_1;
            else 
                m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state47, icmp_ln115_reg_1538, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((not(((icmp_ln115_reg_1538 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln115_reg_1538 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mul_ln62_fu_1016_p0 <= mul_ln62_fu_1016_p00(5 - 1 downto 0);
    mul_ln62_fu_1016_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_62_fu_1006_p2),10));
    mul_ln62_fu_1016_p1 <= ap_const_lv10_19(6 - 1 downto 0);
    nout_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_358),12));
    or_ln120_fu_1286_p2 <= (icmp_ln120_fu_1274_p2 or icmp_ln120_1_fu_1280_p2);
    or_ln53_1_fu_784_p2 <= (tmp_7_fu_762_p3 or icmp_ln54_1_fu_770_p2);
    or_ln53_fu_672_p2 <= (tmp_5_fu_642_p3 or icmp_ln54_fu_650_p2);

    output_fm_buffer_1_address0_assign_proc : process(output_fm_buffer_1_addr_1_reg_1469, ap_CS_fsm_state28, ap_CS_fsm_state49, ap_CS_fsm_state57, zext_ln119_8_fu_1218_p1, p_cast65_fu_1318_p1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_1_address0 <= p_cast65_fu_1318_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_fm_buffer_1_address0 <= zext_ln119_8_fu_1218_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            output_fm_buffer_1_address0 <= output_fm_buffer_1_addr_1_reg_1469;
        else 
            output_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            output_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state57, add51_lcssa_lcssa18_reg_415)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_fm_buffer_1_d0 <= add51_lcssa_lcssa18_reg_415;
        else 
            output_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state28, icmp_ln52_fu_994_p2, ap_CS_fsm_state57, exitcond6015_fu_1306_p2)
    begin
        if ((((exitcond6015_fu_1306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((icmp_ln52_fu_994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            output_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast58_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_313),64));
    p_cast64_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_60_fu_968_p2),64));
    p_cast65_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_66_reg_483),64));
    p_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_57_fu_925_p2),15));
    p_shl1_fu_938_p3 <= (empty_58_fu_934_p1 & ap_const_lv4_0);
    p_shl4_fu_1143_p3 <= (trunc_ln119_fu_1139_p1 & ap_const_lv4_0);
    p_shl5_fu_1195_p3 <= (trunc_ln119_1_fu_1191_p1 & ap_const_lv8_0);
    select_ln53_2_fu_790_p3 <= 
        ap_const_lv10_0 when (tmp_8_fu_776_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln53_3_fu_798_p3 <= 
        select_ln53_2_fu_790_p3 when (or_ln53_1_fu_784_p2(0) = '1') else 
        add_ln98_fu_757_p2;
    select_ln53_fu_664_p3 <= 
        ap_const_lv10_0 when (tmp_6_fu_656_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln102_1_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_828_p4),64));

        sext_ln102_2_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_2_fu_806_p3),64));

        sext_ln102_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_694_p3),20));

        sext_ln115_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_508_p4),64));

        sext_ln119_1_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_4_fu_1182_p2),22));

        sext_ln119_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln119_fu_1094_p2),17));

        sext_ln52_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_901_p4),64));

        sext_ln95_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln102_fu_706_p2),64));

        sext_ln98_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln98_1_fu_747_p2),10));

    shl_ln102_1_fu_694_p3 <= (yClamped_fu_678_p3 & ap_const_lv2_0);
    shl_ln102_2_fu_806_p3 <= (select_ln53_3_fu_798_p3 & ap_const_lv2_0);
    shl_ln_fu_686_p3 <= (yClamped_fu_678_p3 & ap_const_lv10_0);
    sub_ln102_fu_706_p2 <= std_logic_vector(unsigned(shl_ln_fu_686_p3) - unsigned(sext_ln102_fu_702_p1));
    sub_ln119_1_fu_1203_p2 <= std_logic_vector(unsigned(p_shl5_fu_1195_p3) - unsigned(sext_ln119_1_fu_1187_p1));
    sub_ln119_fu_1094_p2 <= std_logic_vector(unsigned(zext_ln119_2_fu_1090_p1) - unsigned(zext_ln119_1_fu_1078_p1));
    tmp_10_fu_1104_p3 <= (nout_2_reg_449 & ap_const_lv4_0);
    tmp_11_cast_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_862_p3),12));
    tmp_1_fu_548_p3 <= (tj_fu_172 & tj_fu_172);
    tmp_2_fu_593_p3 <= (ti_reg_301 & ti_reg_301);
    tmp_3_fu_1260_p4 <= bitcast_ln120_fu_1257_p1(30 downto 23);
    tmp_5_fu_642_p3 <= empty_55_fu_637_p2(9 downto 9);
    tmp_6_fu_656_p3 <= empty_55_fu_637_p2(9 downto 9);
    tmp_7_fu_762_p3 <= add_ln98_fu_757_p2(9 downto 9);
    tmp_8_fu_776_p3 <= add_ln98_fu_757_p2(9 downto 9);
    tmp_9_fu_1082_p3 <= (nout_2_reg_449 & ap_const_lv8_0);
        tmp_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_627_p2),10));

    tmp_fu_627_p2 <= std_logic_vector(unsigned(zext_ln94_1_fu_611_p1) + unsigned(ap_const_lv6_3C));
    tmp_s_fu_862_p3 <= (nout_reg_358 & ap_const_lv4_0);
    trunc_ln119_1_fu_1191_p1 <= add_ln119_4_fu_1182_p2(14 - 1 downto 0);
    trunc_ln119_fu_1139_p1 <= add_ln119_2_fu_1130_p2(11 - 1 downto 0);
    trunc_ln120_fu_1270_p1 <= bitcast_ln120_fu_1257_p1(23 - 1 downto 0);
    trunc_ln3_fu_901_p4 <= add_ln48_fu_896_p2(63 downto 2);
    trunc_ln4_fu_828_p4 <= add_ln102_1_fu_823_p2(63 downto 2);
    trunc_ln_fu_508_p4 <= conv1_biases(63 downto 2);
    tx_cast_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_392),15));
    ty_cast_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_380),12));
    yClamped_fu_678_p3 <= 
        select_ln53_fu_664_p3 when (or_ln53_fu_672_p2(0) = '1') else 
        empty_55_fu_637_p2;
    zext_ln102_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_2_fu_720_p2),64));
    zext_ln102_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_347),10));
    zext_ln116_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_461),8));
    zext_ln117_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_472),8));
    zext_ln119_10_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_6_reg_1593),64));
    zext_ln119_1_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_2_reg_449),16));
    zext_ln119_2_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1082_p3),16));
    zext_ln119_3_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1104_p3),12));
    zext_ln119_4_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_461),12));
    zext_ln119_5_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_2_fu_1130_p2),15));
    zext_ln119_6_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_65_fu_1173_p2),17));
    zext_ln119_7_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_472),15));
    zext_ln119_8_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_5_fu_1213_p2),64));
    zext_ln119_9_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_fu_1239_p2),22));
    zext_ln119_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_2_reg_449),12));
    zext_ln32_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_548_p3),10));
    zext_ln48_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul53_reg_369),64));
    zext_ln52_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_404),5));
    zext_ln53_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_426),5));
    zext_ln62_1_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1038_p2),10));
    zext_ln62_2_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_1048_p2),64));
    zext_ln94_1_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_324),6));
    zext_ln94_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_593_p3),10));
    zext_ln95_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_347),6));
end behav;
