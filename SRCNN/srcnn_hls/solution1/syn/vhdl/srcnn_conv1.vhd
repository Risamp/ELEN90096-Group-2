-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_ce : OUT STD_LOGIC;
    grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_ce : OUT STD_LOGIC;
    grp_fu_605_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_605_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_605_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_605_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv14_A2 : STD_LOGIC_VECTOR (13 downto 0) := "00000010100010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_fm_buffer_2_0_ce0 : STD_LOGIC;
    signal input_fm_buffer_2_0_we0 : STD_LOGIC;
    signal input_fm_buffer_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_fm_buffer_1_ce0 : STD_LOGIC;
    signal output_fm_buffer_1_we0 : STD_LOGIC;
    signal output_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln115_reg_2118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal gmem_addr_reg_1868 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_615_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_1874 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_fu_633_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1882 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_fu_639_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1887 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_647_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1892 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1900 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_108_fu_673_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_shl1_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_reg_1913 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ti_cast22_fu_692_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast22_reg_1918 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln94_1_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_reg_1923 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln94_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln94_reg_1931 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln95_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln95_reg_1936 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln94_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_2_0_addr_1_reg_1941 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln95_fu_832_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_reg_1949 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_10_reg_1954 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln95_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_10_read_reg_1960 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_1_fu_956_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln45_1_reg_1965 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_110_fu_978_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_110_reg_1970 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_990_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_reg_1978 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_1_fu_1004_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_1_reg_1983 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_11_fu_1009_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln62_11_reg_1988 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_113_fu_1039_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_113_reg_1993 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_fu_1051_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_reg_2001 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_1_addr_1_reg_2006 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_1077_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_2014 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln52_fu_1083_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln52_reg_2024 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln52_fu_1093_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_reg_2032 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1099_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_2037 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln52_4_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln62_fu_1117_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln62_reg_2042 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln53_fu_1133_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln53_reg_2050 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln62_13_fu_1149_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_13_reg_2055 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln53_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_12_reg_2060 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_8_fu_1217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln62_8_reg_2066 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_12_read_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal trunc_ln62_1_fu_1242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln62_1_reg_2081 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_2087 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln62_fu_1254_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln62_reg_2093 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln62_3_fu_1551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln62_3_reg_2098 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal input_fm_buffer_2_0_load_reg_2103 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_2108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln115_fu_1559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln115_fu_1565_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln115_reg_2122 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln115_5_fu_1571_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln115_5_reg_2127 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state50 : BOOLEAN;
    signal add_ln119_5_fu_1593_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_5_reg_2132 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_117_fu_1599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_117_reg_2137 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_2_fu_1607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_2_reg_2142 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_7_fu_1637_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_7_reg_2147 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal add_ln116_fu_1653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln116_reg_2155 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln119_fu_1688_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln119_reg_2160 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln116_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal add_ln117_fu_1714_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln117_reg_2173 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_11_reg_2178 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln117_fu_1708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fm_buffer_1_load_1_reg_2184 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_reg_2189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal select_ln120_fu_1821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln120_reg_2195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal empty_120_fu_1835_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ti_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6814_fu_1829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_389 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal by_reg_400 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_411 : STD_LOGIC_VECTOR (9 downto 0);
    signal bx_reg_423 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal nout_reg_434 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul50_reg_445 : STD_LOGIC_VECTOR (13 downto 0);
    signal ty_reg_456 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_468 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal add51_lcssa_lcssa24_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal add51_lcssa23_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_2_reg_525 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal phi_mul52_reg_537 : STD_LOGIC_VECTOR (23 downto 0);
    signal ty_3_reg_548 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_4_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_119_reg_570 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast55_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast62_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_12_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_9_fu_1703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast63_fu_1841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln119_fu_1770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_238 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln102_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal trunc_ln_fu_595_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln94_fu_702_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_718_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_cast_fu_724_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_109_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_747_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_733_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_755_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_769_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_1_fu_785_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_777_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln102_fu_793_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln102_fu_797_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln102_fu_807_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln102_2_fu_811_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_822_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln98_1_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln98_fu_856_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln98_fu_846_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_860_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_2_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_5_fu_894_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_6_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_2_fu_910_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln102_2_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_fu_922_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_1_fu_927_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_932_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_fu_966_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_cast_fu_974_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal nout_cast_fu_962_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln48_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_1_fu_1000_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ty_cast_fu_1014_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_111_fu_1018_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_112_fu_1027_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_1031_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast_fu_1023_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_cast_fu_1057_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_114_fu_1061_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_115_fu_1107_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_fu_1117_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_fu_1117_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_fu_1123_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_1139_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_11_fu_1145_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_12_fu_1154_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_7_fu_1159_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_7_fu_1163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln6_fu_1168_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_fu_1180_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_8_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_fu_1192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln62_3_fu_1197_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln62_2_fu_1184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln62_1_fu_1226_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_9_fu_1233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln62_fu_1237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln62_fu_1265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1270_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1280_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_1_fu_1288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln62_1_fu_1300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln62_3_fu_1310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1316_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln62_5_fu_1332_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln62_4_fu_1336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln62_13_fu_1342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln62_3_fu_1346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln62_2_fu_1352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln62_1_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln62_4_fu_1306_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_9_fu_1384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bit_select30_i_i_fu_1390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln62_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_1_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_5_fu_1428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln62_3_fu_1418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_4_fu_1434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln62_2_fu_1444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln62_5_fu_1450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln62_3_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln62_1_fu_1438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln62_fu_1454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1410_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln62_1_fu_1460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_6_fu_1468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_6_fu_1472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln62_2_fu_1478_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_1492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln62_6_fu_1508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln62_3_fu_1512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln62_2_fu_1500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_10_fu_1518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln62_10_fu_1488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1524_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_1531_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_1543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln766_fu_1547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1581_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln119_5_fu_1589_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_fu_1577_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln116_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_6_fu_1612_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_6_fu_1616_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln119_fu_1625_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_fu_1629_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln119_7_fu_1621_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln116_1_fu_1643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_118_fu_1659_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln5_fu_1664_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln119_1_fu_1676_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln119_1_fu_1672_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln119_2_fu_1684_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln119_8_fu_1694_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_8_fu_1698_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_fu_1720_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln119_3_fu_1725_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln119_1_fu_1729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln119_2_fu_1734_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln119_4_fu_1742_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln119_4_fu_1746_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln119_1_fu_1751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_3_fu_1755_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_1760_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln119_fu_1780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1783_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln120_fu_1793_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln120_1_fu_1803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_fu_1797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_fu_1809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_1815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal mul_ln62_fu_1117_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_2_0_U : component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_2_0_address0,
        ce0 => input_fm_buffer_2_0_ce0,
        we0 => input_fm_buffer_2_0_we0,
        d0 => input_fm_buffer_2_0_d0,
        q0 => input_fm_buffer_2_0_q0);

    output_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_1_address0,
        ce0 => output_fm_buffer_1_ce0,
        we0 => output_fm_buffer_1_we0,
        d0 => output_fm_buffer_1_d0,
        q0 => output_fm_buffer_1_q0);

    mul_5ns_6ns_10_1_1_U4 : component srcnn_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln62_fu_1117_p0,
        din1 => mul_ln62_fu_1117_p1,
        dout => mul_ln62_fu_1117_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add51_lcssa23_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                add51_lcssa23_reg_513 <= add51_lcssa_lcssa24_reg_491;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                add51_lcssa23_reg_513 <= grp_fu_597_p_dout0;
            end if; 
        end if;
    end process;

    add51_lcssa_lcssa24_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                add51_lcssa_lcssa24_reg_491 <= output_fm_buffer_1_q0;
            elsif (((icmp_ln53_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                add51_lcssa_lcssa24_reg_491 <= add51_lcssa23_reg_513;
            end if; 
        end if;
    end process;

    bx_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_706_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                bx_reg_423 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                bx_reg_423 <= add_ln95_reg_1949;
            end if; 
        end if;
    end process;

    by_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                by_reg_400 <= ap_const_lv5_0;
            elsif (((icmp_ln95_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                by_reg_400 <= add_ln94_reg_1931;
            end if; 
        end if;
    end process;

    empty_119_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_1))) then 
                empty_119_reg_570 <= ap_const_lv15_0;
            elsif (((exitcond6814_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                empty_119_reg_570 <= empty_120_fu_1835_p2;
            end if; 
        end if;
    end process;

    empty_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_667_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_389 <= empty_108_fu_673_p2;
            elsif (((icmp_ln32_fu_651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_389 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    kx_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                kx_reg_502 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                kx_reg_502 <= add_ln53_reg_2050;
            end if; 
        end if;
    end process;

    ky_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ky_reg_480 <= ap_const_lv4_0;
            elsif (((icmp_ln53_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                ky_reg_480 <= add_ln52_reg_2032;
            end if; 
        end if;
    end process;

    nout_2_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                nout_2_reg_525 <= ap_const_lv7_0;
            elsif (((icmp_ln116_fu_1647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                nout_2_reg_525 <= add_ln115_reg_2122;
            end if; 
        end if;
    end process;

    nout_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_706_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_434 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_1045_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                nout_reg_434 <= add_ln45_reg_1978;
            end if; 
        end if;
    end process;

    phi_mul50_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_706_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul50_reg_445 <= ap_const_lv14_0;
            elsif (((icmp_ln48_fu_1045_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul50_reg_445 <= add_ln45_1_reg_1965;
            end if; 
        end if;
    end process;

    phi_mul52_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                phi_mul52_reg_537 <= ap_const_lv24_0;
            elsif (((icmp_ln116_fu_1647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                phi_mul52_reg_537 <= add_ln115_5_reg_2127;
            end if; 
        end if;
    end process;

    phi_mul_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_411 <= ap_const_lv10_0;
            elsif (((icmp_ln95_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_411 <= add_ln94_1_reg_1923;
            end if; 
        end if;
    end process;

    ti_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_377 <= ap_const_lv4_0;
            elsif (((exitcond6814_fu_1829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                ti_reg_377 <= add_ln32_reg_1900;
            end if; 
        end if;
    end process;

    tj_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_238 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_238 <= add_ln31_reg_1882;
            end if; 
        end if;
    end process;

    tx_4_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_1647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                tx_4_reg_559 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                tx_4_reg_559 <= add_ln117_reg_2173;
            end if; 
        end if;
    end process;

    tx_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_468 <= ap_const_lv5_0;
            elsif (((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tx_reg_468 <= add_ln49_reg_2014;
            end if; 
        end if;
    end process;

    ty_3_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_0))) then 
                ty_3_reg_548 <= ap_const_lv5_0;
            elsif (((icmp_ln117_fu_1708_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                ty_3_reg_548 <= add_ln116_reg_2155;
            end if; 
        end if;
    end process;

    ty_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ty_reg_456 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_1071_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_456 <= add_ln48_reg_2001;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                add_i_reg_2189 <= grp_fu_597_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                add_ln115_5_reg_2127 <= add_ln115_5_fu_1571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln115_reg_2122 <= add_ln115_fu_1565_p2;
                icmp_ln115_reg_2118 <= icmp_ln115_fu_1559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                add_ln116_reg_2155 <= add_ln116_fu_1653_p2;
                add_ln119_7_reg_2147 <= add_ln119_7_fu_1637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                add_ln117_reg_2173 <= add_ln117_fu_1714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_0))) then
                add_ln119_2_reg_2142 <= add_ln119_2_fu_1607_p2;
                empty_117_reg_2137 <= empty_117_fu_1599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                add_ln119_5_reg_2132 <= add_ln119_5_fu_1593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1882 <= add_ln31_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1900 <= add_ln32_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln45_1_reg_1965 <= add_ln45_1_fu_956_p2;
                add_ln45_reg_1978 <= add_ln45_fu_990_p2;
                empty_110_reg_1970 <= empty_110_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln48_1_reg_1983 <= add_ln48_1_fu_1004_p2;
                add_ln62_11_reg_1988 <= add_ln62_11_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_reg_2001 <= add_ln48_fu_1051_p2;
                empty_113_reg_1993 <= empty_113_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_2014 <= add_ln49_fu_1077_p2;
                output_fm_buffer_1_addr_1_reg_2006 <= p_cast62_fu_1066_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln52_reg_2032 <= add_ln52_fu_1093_p2;
                    zext_ln52_reg_2024(3 downto 0) <= zext_ln52_fu_1083_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln53_reg_2050 <= add_ln53_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                add_ln62_13_reg_2055 <= add_ln62_13_fu_1149_p2;
                add_ln62_8_reg_2066 <= add_ln62_8_fu_1217_p2;
                gmem_addr_12_reg_2060 <= sext_ln62_fu_1207_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln94_1_reg_1923 <= add_ln94_1_fu_696_p2;
                add_ln94_reg_1931 <= add_ln94_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln95_reg_1949 <= add_ln95_fu_832_p2;
                input_fm_buffer_2_0_addr_1_reg_1941 <= zext_ln102_1_fu_817_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                gmem_addr_10_read_reg_1960 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_826_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_10_reg_1954 <= sext_ln102_1_fu_942_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_1708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                gmem_addr_11_reg_2178 <= sext_ln119_fu_1770_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                gmem_addr_12_read_reg_2071 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_1868 <= sext_ln115_fu_605_p1;
                trunc_ln48_reg_1874 <= trunc_ln48_fu_615_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                input_fm_buffer_2_0_load_reg_2103 <= input_fm_buffer_2_0_q0;
                select_ln62_3_reg_2098 <= select_ln62_3_fu_1551_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                mul_ln62_reg_2042 <= mul_ln62_fu_1117_p2;
                    tmp_4_reg_2037(6 downto 3) <= tmp_4_fu_1099_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul_reg_2108 <= grp_fu_601_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                output_fm_buffer_1_load_1_reg_2184 <= output_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    p_shl1_reg_1913(7 downto 4) <= p_shl1_fu_684_p3(7 downto 4);
                    ti_cast22_reg_1918(3 downto 0) <= ti_cast22_fu_692_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                select_ln120_reg_2195 <= select_ln120_fu_1821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_706_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sext_ln95_reg_1936(63 downto 2) <= sext_ln95_fu_803_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_1647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    sub_ln119_reg_2160(18 downto 2) <= sub_ln119_fu_1688_p2(18 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                sub_ln62_reg_2093 <= sub_ln62_fu_1254_p2;
                tmp_14_reg_2087 <= lshr_ln62_fu_1237_p2(15 downto 15);
                trunc_ln62_1_reg_2081 <= trunc_ln62_1_fu_1242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_7_reg_1887 <= tmp_7_fu_639_p3;
                    zext_ln32_reg_1892(7 downto 0) <= zext_ln32_fu_647_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_1892(9 downto 8) <= "00";
    p_shl1_reg_1913(3 downto 0) <= "0000";
    ti_cast22_reg_1918(4) <= '0';
    sext_ln95_reg_1936(1 downto 0) <= "00";
    zext_ln52_reg_2024(4) <= '0';
    tmp_4_reg_2037(2 downto 0) <= "000";
    sub_ln119_reg_2160(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state41, ap_CS_fsm_state50, icmp_ln115_reg_2118, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state31, ap_CS_fsm_state53, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state2, icmp_ln31_fu_627_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_667_p2, ap_CS_fsm_state5, icmp_ln94_fu_706_p2, ap_CS_fsm_state6, icmp_ln95_fu_826_p2, ap_CS_fsm_state17, icmp_ln45_fu_984_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, icmp_ln52_4_fu_1087_p2, ap_CS_fsm_state22, icmp_ln53_fu_1127_p2, ap_CS_fsm_state51, icmp_ln116_fu_1647_p2, ap_CS_fsm_state52, icmp_ln117_fu_1708_p2, ap_CS_fsm_state66, exitcond6814_fu_1829_p2, icmp_ln32_fu_651_p2, icmp_ln48_fu_1045_p2, icmp_ln49_fu_1071_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln94_fu_706_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln95_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln45_fu_984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_1045_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_1071_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln53_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if ((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                elsif ((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln116_fu_1647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln117_fu_1708_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((exitcond6814_fu_1829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LD_fu_1543_p1 <= pi_assign_fu_1531_p5(32 - 1 downto 0);
    add_ln102_1_fu_927_p2 <= std_logic_vector(unsigned(add_ln102_fu_922_p2) + unsigned(sext_ln95_reg_1936));
    add_ln102_2_fu_811_p2 <= std_logic_vector(unsigned(phi_mul_reg_411) + unsigned(zext_ln102_fu_807_p1));
    add_ln102_fu_922_p2 <= std_logic_vector(signed(sext_ln102_2_fu_918_p1) + signed(input_ftmap));
    add_ln115_5_fu_1571_p2 <= std_logic_vector(unsigned(phi_mul52_reg_537) + unsigned(ap_const_lv24_3F804));
    add_ln115_fu_1565_p2 <= std_logic_vector(unsigned(nout_2_reg_525) + unsigned(ap_const_lv7_1));
    add_ln116_fu_1653_p2 <= std_logic_vector(unsigned(ty_3_reg_548) + unsigned(ap_const_lv5_1));
    add_ln117_fu_1714_p2 <= std_logic_vector(unsigned(tx_4_reg_559) + unsigned(ap_const_lv5_1));
    add_ln119_1_fu_1729_p2 <= std_logic_vector(unsigned(zext_ln119_3_fu_1725_p1) + unsigned(p_shl1_reg_1913));
    add_ln119_2_fu_1607_p2 <= std_logic_vector(unsigned(zext_ln116_fu_1603_p1) + unsigned(output_ftmap));
    add_ln119_3_fu_1755_p2 <= std_logic_vector(signed(sext_ln119_1_fu_1751_p1) + signed(add_ln119_2_reg_2142));
    add_ln119_4_fu_1746_p2 <= std_logic_vector(unsigned(sub_ln119_reg_2160) + unsigned(zext_ln119_4_fu_1742_p1));
    add_ln119_5_fu_1593_p2 <= std_logic_vector(unsigned(zext_ln119_5_fu_1589_p1) + unsigned(zext_ln119_fu_1577_p1));
    add_ln119_6_fu_1616_p2 <= std_logic_vector(unsigned(add_ln119_5_reg_2132) + unsigned(zext_ln119_6_fu_1612_p1));
    add_ln119_7_fu_1637_p2 <= std_logic_vector(unsigned(p_shl5_fu_1629_p3) + unsigned(zext_ln119_7_fu_1621_p1));
    add_ln119_8_fu_1698_p2 <= std_logic_vector(unsigned(add_ln119_7_reg_2147) + unsigned(zext_ln119_8_fu_1694_p1));
    add_ln119_fu_1720_p2 <= std_logic_vector(unsigned(ti_cast22_reg_1918) + unsigned(tx_4_reg_559));
    add_ln31_fu_633_p2 <= std_logic_vector(unsigned(tj_fu_238) + unsigned(ap_const_lv4_1));
    add_ln32_fu_657_p2 <= std_logic_vector(unsigned(ti_reg_377) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_956_p2 <= std_logic_vector(unsigned(phi_mul50_reg_445) + unsigned(ap_const_lv14_A2));
    add_ln45_fu_990_p2 <= std_logic_vector(unsigned(nout_reg_434) + unsigned(ap_const_lv7_1));
    add_ln48_1_fu_1004_p2 <= std_logic_vector(unsigned(zext_ln48_fu_996_p1) + unsigned(conv1_weights));
    add_ln48_fu_1051_p2 <= std_logic_vector(unsigned(ty_reg_456) + unsigned(ap_const_lv5_1));
    add_ln49_fu_1077_p2 <= std_logic_vector(unsigned(tx_reg_468) + unsigned(ap_const_lv5_1));
    add_ln52_fu_1093_p2 <= std_logic_vector(unsigned(ky_reg_480) + unsigned(ap_const_lv4_1));
    add_ln53_fu_1133_p2 <= std_logic_vector(unsigned(kx_reg_502) + unsigned(ap_const_lv4_1));
    add_ln57_fu_1139_p2 <= std_logic_vector(unsigned(zext_ln53_fu_1123_p1) + unsigned(tx_reg_468));
    add_ln62_10_fu_1518_p2 <= std_logic_vector(unsigned(sub_ln62_3_fu_1512_p2) + unsigned(select_ln62_2_fu_1500_p3));
    add_ln62_11_fu_1009_p2 <= std_logic_vector(unsigned(trunc_ln48_1_fu_1000_p1) + unsigned(trunc_ln48_reg_1874));
    add_ln62_12_fu_1154_p2 <= std_logic_vector(unsigned(zext_ln52_reg_2024) + unsigned(zext_ln53_fu_1123_p1));
    add_ln62_13_fu_1149_p2 <= std_logic_vector(unsigned(mul_ln62_reg_2042) + unsigned(zext_ln62_11_fu_1145_p1));
    add_ln62_3_fu_1310_p2 <= std_logic_vector(unsigned(sub_ln62_1_fu_1300_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln62_5_fu_1428_p2 <= std_logic_vector(unsigned(sub_ln62_1_fu_1300_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln62_6_fu_1472_p2 <= std_logic_vector(unsigned(select_ln62_1_fu_1460_p3) + unsigned(zext_ln62_6_fu_1468_p1));
    add_ln62_7_fu_1163_p2 <= std_logic_vector(unsigned(zext_ln62_7_fu_1159_p1) + unsigned(tmp_4_reg_2037));
    add_ln62_8_fu_1217_p2 <= std_logic_vector(unsigned(add_ln62_11_reg_1988) + unsigned(trunc_ln62_2_fu_1184_p3));
    add_ln62_9_fu_1384_p2 <= std_logic_vector(unsigned(trunc_ln62_4_fu_1306_p1) + unsigned(ap_const_lv16_FFE8));
    add_ln62_fu_1192_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_1983) + unsigned(zext_ln62_8_fu_1176_p1));
    add_ln94_1_fu_696_p2 <= std_logic_vector(unsigned(phi_mul_reg_411) + unsigned(ap_const_lv10_19));
    add_ln94_fu_712_p2 <= std_logic_vector(unsigned(by_reg_400) + unsigned(ap_const_lv5_1));
    add_ln95_fu_832_p2 <= std_logic_vector(unsigned(bx_reg_423) + unsigned(ap_const_lv5_1));
    add_ln98_1_fu_850_p2 <= std_logic_vector(unsigned(zext_ln95_fu_822_p1) + unsigned(ap_const_lv6_3C));
    add_ln98_fu_860_p2 <= std_logic_vector(signed(sext_ln98_fu_856_p1) + signed(zext_ln98_fu_846_p1));
    and_ln120_fu_1815_p2 <= (or_ln120_fu_1809_p2 and grp_fu_605_p_dout0);
    and_ln62_1_fu_1398_p2 <= (xor_ln62_fu_1378_p2 and bit_select30_i_i_fu_1390_p3);
    and_ln62_2_fu_1352_p2 <= (select_ln62_fu_1265_p3 and lshr_ln62_3_fu_1346_p2);
    and_ln62_fu_1364_p2 <= (icmp_ln62_2_fu_1358_p2 and icmp_ln62_1_fu_1326_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(m_axi_gmem_RVALID, icmp_ln115_reg_2118)
    begin
        if (((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;

    ap_ST_fsm_state53_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state50_assign_proc : process(m_axi_gmem_RVALID, icmp_ln115_reg_2118)
    begin
                ap_block_state50 <= ((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_627_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_627_p2)
    begin
        if (((icmp_ln31_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bit_select30_i_i_fu_1390_p3 <= select_ln62_fu_1265_p3(to_integer(unsigned(add_ln62_9_fu_1384_p2)) downto to_integer(unsigned(add_ln62_9_fu_1384_p2))) when (to_integer(unsigned(add_ln62_9_fu_1384_p2)) >= 0 and to_integer(unsigned(add_ln62_9_fu_1384_p2)) <=15) else "-";
    bitcast_ln102_fu_952_p1 <= gmem_addr_10_read_reg_1960;
    bitcast_ln119_fu_1780_p1 <= add_i_reg_2189;
    bitcast_ln766_fu_1547_p1 <= LD_fu_1543_p1;
    empty_108_fu_673_p2 <= std_logic_vector(unsigned(empty_reg_389) + unsigned(ap_const_lv10_1));
    empty_109_fu_728_p2 <= std_logic_vector(signed(tmp2_cast_fu_724_p1) + signed(zext_ln32_reg_1892));
    empty_110_fu_978_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_974_p1) + unsigned(nout_cast_fu_962_p1));
    empty_111_fu_1018_p2 <= std_logic_vector(unsigned(empty_110_reg_1970) + unsigned(ty_cast_fu_1014_p1));
    empty_112_fu_1027_p1 <= empty_111_fu_1018_p2(11 - 1 downto 0);
    empty_113_fu_1039_p2 <= std_logic_vector(unsigned(p_shl3_fu_1031_p3) + unsigned(p_cast_fu_1023_p1));
    empty_114_fu_1061_p2 <= std_logic_vector(unsigned(empty_113_reg_1993) + unsigned(tx_cast_fu_1057_p1));
    empty_115_fu_1107_p2 <= std_logic_vector(unsigned(zext_ln52_fu_1083_p1) + unsigned(ty_reg_456));
    empty_117_fu_1599_p1 <= m_axi_gmem_RDATA;
    empty_118_fu_1659_p2 <= std_logic_vector(unsigned(zext_ln116_1_fu_1643_p1) + unsigned(tmp_7_reg_1887));
    empty_120_fu_1835_p2 <= std_logic_vector(unsigned(empty_119_reg_570) + unsigned(ap_const_lv15_1));
    exitcond3_fu_667_p2 <= "1" when (empty_reg_389 = ap_const_lv10_271) else "0";
    exitcond6814_fu_1829_p2 <= "1" when (empty_119_reg_570 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state50, icmp_ln115_reg_2118, ap_CS_fsm_state15, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_581_p0_assign_proc : process(output_fm_buffer_1_load_1_reg_2184, add51_lcssa23_reg_513, ap_CS_fsm_state37, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_581_p0 <= output_fm_buffer_1_load_1_reg_2184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_581_p0 <= add51_lcssa23_reg_513;
        else 
            grp_fu_581_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_581_p1_assign_proc : process(mul_reg_2108, empty_117_reg_2137, ap_CS_fsm_state37, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_581_p1 <= empty_117_reg_2137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_581_p1 <= mul_reg_2108;
        else 
            grp_fu_581_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_597_p_ce <= ap_const_logic_1;
    grp_fu_597_p_din0 <= grp_fu_581_p0;
    grp_fu_597_p_din1 <= grp_fu_581_p1;
    grp_fu_597_p_opcode <= ap_const_lv2_0;
    grp_fu_601_p_ce <= ap_const_logic_1;
    grp_fu_601_p_din0 <= select_ln62_3_reg_2098;
    grp_fu_601_p_din1 <= input_fm_buffer_2_0_load_reg_2103;
    grp_fu_605_p_ce <= ap_const_logic_1;
    grp_fu_605_p_din0 <= add_i_reg_2189;
    grp_fu_605_p_din1 <= ap_const_lv32_0;
    grp_fu_605_p_opcode <= ap_const_lv5_4;
    icmp_ln115_fu_1559_p2 <= "1" when (nout_2_reg_525 = ap_const_lv7_40) else "0";
    icmp_ln116_fu_1647_p2 <= "1" when (ty_3_reg_548 = ap_const_lv5_11) else "0";
    icmp_ln117_fu_1708_p2 <= "1" when (tx_4_reg_559 = ap_const_lv5_11) else "0";
    icmp_ln120_1_fu_1803_p2 <= "1" when (trunc_ln120_fu_1793_p1 = ap_const_lv23_0) else "0";
    icmp_ln120_fu_1797_p2 <= "0" when (tmp_8_fu_1783_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_fu_627_p2 <= "1" when (tj_fu_238 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_651_p2 <= "1" when (ti_reg_377 = ap_const_lv4_F) else "0";
    icmp_ln45_fu_984_p2 <= "1" when (nout_reg_434 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_1045_p2 <= "1" when (ty_reg_456 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_1071_p2 <= "1" when (tx_reg_468 = ap_const_lv5_11) else "0";
    icmp_ln52_3_fu_874_p2 <= "1" when (signed(add_ln98_fu_860_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln52_4_fu_1087_p2 <= "1" when (ky_reg_480 = ap_const_lv4_9) else "0";
    icmp_ln52_fu_741_p2 <= "1" when (signed(empty_109_fu_728_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln53_fu_1127_p2 <= "1" when (kx_reg_502 = ap_const_lv4_9) else "0";
    icmp_ln62_1_fu_1326_p2 <= "1" when (signed(tmp_15_fu_1316_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln62_2_fu_1358_p2 <= "0" when (and_ln62_2_fu_1352_p2 = ap_const_lv16_0) else "1";
    icmp_ln62_3_fu_1422_p2 <= "1" when (signed(add_ln62_3_fu_1310_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln62_fu_1260_p2 <= "1" when (trunc_ln62_1_reg_2081 = ap_const_lv16_0) else "0";
    icmp_ln94_fu_706_p2 <= "1" when (by_reg_400 = ap_const_lv5_19) else "0";
    icmp_ln95_fu_826_p2 <= "1" when (bx_reg_423 = ap_const_lv5_19) else "0";

    input_fm_buffer_2_0_address0_assign_proc : process(ap_CS_fsm_state4, input_fm_buffer_2_0_addr_1_reg_1941, ap_CS_fsm_state32, ap_CS_fsm_state16, p_cast55_fu_679_p1, zext_ln62_12_fu_1222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            input_fm_buffer_2_0_address0 <= zext_ln62_12_fu_1222_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_2_0_address0 <= input_fm_buffer_2_0_addr_1_reg_1941;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_2_0_address0 <= p_cast55_fu_679_p1(10 - 1 downto 0);
        else 
            input_fm_buffer_2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_2_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state32, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_2_0_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, bitcast_ln102_fu_952_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_2_0_d0 <= bitcast_ln102_fu_952_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_2_0_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_2_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_667_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond3_fu_667_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln62_1_fu_1438_p2 <= std_logic_vector(shift_right(unsigned(zext_ln62_3_fu_1418_p1),to_integer(unsigned('0' & zext_ln62_4_fu_1434_p1(31-1 downto 0)))));
    lshr_ln62_2_fu_1478_p4 <= add_ln62_6_fu_1472_p2(63 downto 1);
    lshr_ln62_3_fu_1346_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln62_13_fu_1342_p1(16-1 downto 0)))));
    lshr_ln62_fu_1237_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_12_read_reg_2071),to_integer(unsigned('0' & zext_ln62_9_fu_1233_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state23, gmem_addr_reg_1868, gmem_addr_10_reg_1954, gmem_addr_12_reg_2060)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1868;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                m_axi_gmem_ARADDR <= gmem_addr_12_reg_2060;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARADDR <= gmem_addr_10_reg_1954;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_40;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_1;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_11_reg_2178;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state53)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state50, icmp_ln115_reg_2118, ap_CS_fsm_state15, ap_CS_fsm_state31)
    begin
        if (((not(((icmp_ln115_reg_2118 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln115_reg_2118 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= select_ln120_reg_2195;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln62_fu_1117_p0 <= mul_ln62_fu_1117_p00(5 - 1 downto 0);
    mul_ln62_fu_1117_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_115_fu_1107_p2),10));
    mul_ln62_fu_1117_p1 <= ap_const_lv10_19(6 - 1 downto 0);
    nout_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_434),12));
    or_ln120_fu_1809_p2 <= (icmp_ln120_fu_1797_p2 or icmp_ln120_1_fu_1803_p2);
    or_ln51_2_fu_888_p2 <= (tmp_12_fu_866_p3 or icmp_ln52_3_fu_874_p2);
    or_ln51_fu_763_p2 <= (tmp_10_fu_733_p3 or icmp_ln52_fu_741_p2);
    or_ln62_fu_1404_p2 <= (and_ln62_fu_1364_p2 or and_ln62_1_fu_1398_p2);
    or_ln_fu_1410_p3 <= (ap_const_lv1_0 & or_ln62_fu_1404_p2);

    output_fm_buffer_1_address0_assign_proc : process(output_fm_buffer_1_addr_1_reg_2006, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state66, p_cast62_fu_1066_p1, zext_ln119_9_fu_1703_p1, p_cast63_fu_1841_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_fm_buffer_1_address0 <= p_cast63_fu_1841_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output_fm_buffer_1_address0 <= zext_ln119_9_fu_1703_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_1_address0 <= output_fm_buffer_1_addr_1_reg_2006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_fm_buffer_1_address0 <= p_cast62_fu_1066_p1(15 - 1 downto 0);
        else 
            output_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state66, add51_lcssa_lcssa24_reg_491)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_fm_buffer_1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_1_d0 <= add51_lcssa_lcssa24_reg_491;
        else 
            output_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln52_4_fu_1087_p2, ap_CS_fsm_state66, exitcond6814_fu_1829_p2)
    begin
        if ((((exitcond6814_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((icmp_ln52_4_fu_1087_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast55_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_389),64));
    p_cast62_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_114_fu_1061_p2),64));
    p_cast63_fu_1841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_119_reg_570),64));
    p_cast_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_111_fu_1018_p2),15));
    p_shl1_fu_684_p3 <= (ti_reg_377 & ap_const_lv4_0);
    p_shl3_fu_1031_p3 <= (empty_112_fu_1027_p1 & ap_const_lv4_0);
    p_shl5_fu_1629_p3 <= (trunc_ln119_fu_1625_p1 & ap_const_lv4_0);
    pi_assign_fu_1531_p5 <= (zext_ln62_10_fu_1488_p1(63 downto 32) & tmp_5_fu_1524_p3 & zext_ln62_10_fu_1488_p1(22 downto 0));
    select_ln120_fu_1821_p3 <= 
        ap_const_lv32_0 when (and_ln120_fu_1815_p2(0) = '1') else 
        bitcast_ln119_fu_1780_p1;
    select_ln51_5_fu_894_p3 <= 
        ap_const_lv10_0 when (tmp_13_fu_880_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln51_6_fu_902_p3 <= 
        select_ln51_5_fu_894_p3 when (or_ln51_2_fu_888_p2(0) = '1') else 
        add_ln98_fu_860_p2;
    select_ln51_fu_755_p3 <= 
        ap_const_lv10_0 when (tmp_11_fu_747_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln62_1_fu_1460_p3 <= 
        lshr_ln62_1_fu_1438_p2 when (icmp_ln62_3_fu_1422_p2(0) = '1') else 
        shl_ln62_fu_1454_p2;
    select_ln62_2_fu_1500_p3 <= 
        ap_const_lv8_7F when (tmp_17_fu_1492_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln62_3_fu_1551_p3 <= 
        ap_const_lv32_0 when (icmp_ln62_fu_1260_p2(0) = '1') else 
        bitcast_ln766_fu_1547_p1;
    select_ln62_fu_1265_p3 <= 
        sub_ln62_reg_2093 when (tmp_14_reg_2087(0) = '1') else 
        trunc_ln62_1_reg_2081;
        sext_ln102_1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_932_p4),64));

        sext_ln102_2_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_2_fu_910_p3),64));

        sext_ln102_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_785_p3),20));

        sext_ln115_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_595_p4),64));

        sext_ln119_1_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_4_fu_1746_p2),64));

        sext_ln119_fu_1770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_1760_p4),64));

        sext_ln62_1_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_1280_p3),32));

        sext_ln62_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln62_3_fu_1197_p4),64));

        sext_ln95_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln102_fu_797_p2),64));

        sext_ln98_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln98_1_fu_850_p2),10));

    shl_ln102_1_fu_785_p3 <= (yClamped_fu_769_p3 & ap_const_lv2_0);
    shl_ln102_2_fu_910_p3 <= (select_ln51_6_fu_902_p3 & ap_const_lv2_0);
    shl_ln119_1_fu_1676_p3 <= (empty_118_fu_1659_p2 & ap_const_lv2_0);
    shl_ln119_2_fu_1734_p3 <= (add_ln119_1_fu_1729_p2 & ap_const_lv2_0);
    shl_ln5_fu_1664_p3 <= (empty_118_fu_1659_p2 & ap_const_lv10_0);
    shl_ln62_1_fu_1226_p3 <= (add_ln62_8_reg_2066 & ap_const_lv3_0);
    shl_ln62_fu_1454_p2 <= std_logic_vector(shift_left(unsigned(zext_ln62_3_fu_1418_p1),to_integer(unsigned('0' & zext_ln62_5_fu_1450_p1(31-1 downto 0)))));
    shl_ln6_fu_1168_p3 <= (add_ln62_7_fu_1163_p2 & ap_const_lv1_0);
    shl_ln_fu_777_p3 <= (yClamped_fu_769_p3 & ap_const_lv10_0);
    sub_ln102_fu_797_p2 <= std_logic_vector(unsigned(shl_ln_fu_777_p3) - unsigned(sext_ln102_fu_793_p1));
    sub_ln119_fu_1688_p2 <= std_logic_vector(unsigned(zext_ln119_1_fu_1672_p1) - unsigned(zext_ln119_2_fu_1684_p1));
    sub_ln62_1_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_2_fu_1292_p3));
    sub_ln62_2_fu_1444_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln62_1_fu_1300_p2));
    sub_ln62_3_fu_1512_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(trunc_ln62_6_fu_1508_p1));
    sub_ln62_4_fu_1336_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(trunc_ln62_5_fu_1332_p1));
    sub_ln62_fu_1254_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln62_1_fu_1242_p1));
    ti_cast22_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_reg_377),5));
        tmp2_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_718_p2),10));

    tmp2_fu_718_p2 <= std_logic_vector(unsigned(zext_ln94_fu_702_p1) + unsigned(ap_const_lv6_3C));
    tmp5_fu_838_p3 <= (ti_reg_377 & ti_reg_377);
    tmp_10_fu_733_p3 <= empty_109_fu_728_p2(9 downto 9);
    tmp_11_fu_747_p3 <= empty_109_fu_728_p2(9 downto 9);
    tmp_12_fu_866_p3 <= add_ln98_fu_860_p2(9 downto 9);
    tmp_13_fu_880_p3 <= add_ln98_fu_860_p2(9 downto 9);
    tmp_15_fu_1316_p4 <= add_ln62_3_fu_1310_p2(31 downto 1);
    tmp_16_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_966_p3),12));
    tmp_16_fu_1370_p3 <= add_ln62_3_fu_1310_p2(31 downto 31);
    tmp_17_fu_1492_p3 <= add_ln62_6_fu_1472_p2(25 downto 25);
    tmp_1_fu_1280_p3 <= (ap_const_lv1_1 & tmp_fu_1270_p4);
    
    tmp_2_fu_1292_p3_proc : process(sext_ln62_1_fu_1288_p1)
    begin
        tmp_2_fu_1292_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln62_1_fu_1288_p1(i) = '1' then
                tmp_2_fu_1292_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_3_fu_1581_p3 <= (nout_2_reg_525 & ap_const_lv4_0);
    tmp_4_fu_1099_p3 <= (ky_reg_480 & ap_const_lv3_0);
    tmp_5_fu_1524_p3 <= (tmp_14_reg_2087 & add_ln62_10_fu_1518_p2);
    tmp_7_fu_639_p3 <= (tj_fu_238 & tj_fu_238);
    tmp_8_fu_1783_p4 <= bitcast_ln119_fu_1780_p1(30 downto 23);
    
    tmp_fu_1270_p4_proc : process(select_ln62_fu_1265_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_fu_1270_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := select_ln62_fu_1265_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_fu_1270_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_fu_1270_p4_i) := select_ln62_fu_1265_p3(16-1-tmp_fu_1270_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_1270_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_s_fu_966_p3 <= (nout_reg_434 & ap_const_lv4_0);
    trunc_ln119_fu_1625_p1 <= add_ln119_6_fu_1616_p2(11 - 1 downto 0);
    trunc_ln120_fu_1793_p1 <= bitcast_ln119_fu_1780_p1(23 - 1 downto 0);
    trunc_ln2_fu_932_p4 <= add_ln102_1_fu_927_p2(63 downto 2);
    trunc_ln3_fu_1760_p4 <= add_ln119_3_fu_1755_p2(63 downto 2);
    trunc_ln48_1_fu_1000_p1 <= phi_mul50_reg_445(2 - 1 downto 0);
    trunc_ln48_fu_615_p1 <= conv1_weights(2 - 1 downto 0);
    trunc_ln62_1_fu_1242_p1 <= lshr_ln62_fu_1237_p2(16 - 1 downto 0);
    trunc_ln62_2_fu_1184_p3 <= (trunc_ln62_fu_1180_p1 & ap_const_lv1_0);
    trunc_ln62_3_fu_1197_p4 <= add_ln62_fu_1192_p2(63 downto 2);
    trunc_ln62_4_fu_1306_p1 <= sub_ln62_1_fu_1300_p2(16 - 1 downto 0);
    trunc_ln62_5_fu_1332_p1 <= sub_ln62_1_fu_1300_p2(4 - 1 downto 0);
    trunc_ln62_6_fu_1508_p1 <= tmp_2_fu_1292_p3(8 - 1 downto 0);
    trunc_ln62_fu_1180_p1 <= add_ln62_7_fu_1163_p2(1 - 1 downto 0);
    trunc_ln_fu_595_p4 <= conv1_biases(63 downto 2);
    tx_cast_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_468),15));
    ty_cast_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_456),12));
    xor_ln62_fu_1378_p2 <= (tmp_16_fu_1370_p3 xor ap_const_lv1_1);
    yClamped_fu_769_p3 <= 
        select_ln51_fu_755_p3 when (or_ln51_fu_763_p2(0) = '1') else 
        empty_109_fu_728_p2;
    zext_ln102_1_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_2_fu_811_p2),64));
    zext_ln102_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_423),10));
    zext_ln116_1_fu_1643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_548),8));
    zext_ln116_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul52_reg_537),64));
    zext_ln119_1_fu_1672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_1664_p3),19));
    zext_ln119_2_fu_1684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln119_1_fu_1676_p3),19));
    zext_ln119_3_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_fu_1720_p2),8));
    zext_ln119_4_fu_1742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln119_2_fu_1734_p3),19));
    zext_ln119_5_fu_1589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1581_p3),12));
    zext_ln119_6_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_548),12));
    zext_ln119_7_fu_1621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_6_fu_1616_p2),15));
    zext_ln119_8_fu_1694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_4_reg_559),15));
    zext_ln119_9_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_8_fu_1698_p2),64));
    zext_ln119_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_2_reg_525),12));
    zext_ln32_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_639_p3),10));
    zext_ln48_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul50_reg_445),64));
    zext_ln52_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_480),5));
    zext_ln53_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_502),5));
    zext_ln62_10_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln62_2_fu_1478_p4),64));
    zext_ln62_11_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1139_p2),10));
    zext_ln62_12_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_13_reg_2055),64));
    zext_ln62_13_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln62_4_fu_1336_p2),16));
    zext_ln62_3_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln62_fu_1265_p3),64));
    zext_ln62_4_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_5_fu_1428_p2),64));
    zext_ln62_5_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln62_2_fu_1444_p2),64));
    zext_ln62_6_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1410_p3),64));
    zext_ln62_7_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_12_fu_1154_p2),7));
    zext_ln62_8_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_1168_p3),64));
    zext_ln62_9_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_1226_p3),32));
    zext_ln94_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_400),6));
    zext_ln95_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_423),6));
    zext_ln98_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_838_p3),10));
end behav;
