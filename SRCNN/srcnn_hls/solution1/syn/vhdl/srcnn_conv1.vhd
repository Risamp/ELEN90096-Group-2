-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_138 : STD_LOGIC_VECTOR (8 downto 0) := "100111000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv14_A2 : STD_LOGIC_VECTOR (13 downto 0) := "00000010100010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_fm_buffer_2_0_ce0 : STD_LOGIC;
    signal input_fm_buffer_2_0_we0 : STD_LOGIC;
    signal input_fm_buffer_2_0_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal input_fm_buffer_2_0_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_fm_buffer_1_ce0 : STD_LOGIC;
    signal output_fm_buffer_1_we0 : STD_LOGIC;
    signal output_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal empty_fu_540_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_1571 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_fu_544_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_1576 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_fu_562_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1584 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_568_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1589 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_576_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1594 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1602 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_112_fu_602_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln94_1_fu_613_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_reg_1615 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln94_fu_629_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln94_reg_1623 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln95_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln95_reg_1628 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln94_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_2_0_addr_1_reg_1633 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln95_fu_749_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_reg_1641 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_reg_1646 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln95_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln102_fu_869_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln102_reg_1652 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln45_1_fu_873_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln45_1_reg_1657 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_114_fu_895_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_114_reg_1662 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_907_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_reg_1670 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_1_fu_921_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_1_reg_1675 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_7_fu_926_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln62_7_reg_1680 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_117_fu_956_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_117_reg_1685 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_fu_968_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_reg_1693 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_1_addr_1_reg_1698 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_994_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1706 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln52_fu_1000_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln52_reg_1716 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln52_fu_1010_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_reg_1724 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1016_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1729 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln52_4_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln62_2_fu_1034_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln62_2_reg_1734 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln53_fu_1050_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln53_reg_1742 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln62_9_fu_1066_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_9_reg_1747 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln53_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_12_reg_1752 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_6_fu_1134_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln62_6_reg_1758 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_12_read_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln115_fu_1188_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln115_reg_1793 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln115_5_fu_1192_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln115_5_reg_1798 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln119_1_fu_1214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_1_reg_1803 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_fu_1226_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln115_reg_1811 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_10_reg_1816 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln115_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_123_fu_1279_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_123_reg_1822 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_10_read_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln119_fu_1300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln119_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal trunc_ln_fu_1310_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_reg_1837 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln119_3_fu_1343_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_3_reg_1842 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln116_fu_1359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln116_reg_1850 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_11_reg_1855 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln116_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln117_fu_1478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln117_reg_1869 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln120_fu_1506_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln120_reg_1874 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal empty_131_fu_1524_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ti_reg_337 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5412_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln32_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal by_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_371 : STD_LOGIC_VECTOR (9 downto 0);
    signal bx_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal nout_reg_394 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul48_reg_405 : STD_LOGIC_VECTOR (13 downto 0);
    signal ty_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_i_i_lcssa_lcssa11_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_i_i_lcssa10_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_2_reg_485 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul50_reg_496 : STD_LOGIC_VECTOR (23 downto 0);
    signal ty_3_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_3_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_130_reg_529 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast54_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast61_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_9_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_5_fu_1467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast62_fu_1530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_5_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast21_cast_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln117_fu_1448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln94_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_635_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_641_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_113_fu_645_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_672_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_686_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_1_fu_702_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_694_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln102_fu_710_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln102_fu_714_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln102_fu_724_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln102_2_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_739_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln98_1_fu_767_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln98_fu_773_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln98_fu_763_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_777_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_2_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_5_fu_811_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_6_fu_819_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_2_fu_827_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln102_2_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_1_fu_844_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln102_1_fu_849_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_fu_883_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_cast_fu_891_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal nout_cast_fu_879_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln48_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_1_fu_917_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ty_cast_fu_931_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_115_fu_935_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_116_fu_944_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_948_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast52_fu_940_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_cast_fu_974_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_118_fu_978_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_119_fu_1024_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_2_fu_1034_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_2_fu_1034_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_fu_1040_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_1056_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_8_fu_1062_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_8_fu_1071_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_5_fu_1076_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_5_fu_1080_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln6_fu_1085_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_fu_1097_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_6_fu_1093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_fu_1109_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln62_4_fu_1114_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_fu_1101_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln62_1_fu_1143_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_7_fu_1150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln62_fu_1154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln62_1_fu_1159_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln62_3_fu_1179_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_1535_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_2_fu_1202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln119_1_fu_1210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln119_fu_1198_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_120_fu_1232_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_121_fu_1242_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast37_fu_1238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_122_fu_1254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_1259_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_1246_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1284_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast38_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_124_fu_1295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_fu_1306_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln119_2_fu_1318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln119_2_fu_1322_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln119_1_fu_1331_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_1335_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln119_3_fu_1327_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln116_fu_1349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_125_fu_1365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_1370_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_fu_1382_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_1378_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl10_cast_fu_1390_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_126_fu_1394_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp7_fu_1404_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast27_fu_1400_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp12_fu_1418_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp12_cast_fu_1423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp11_fu_1427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_cast_fu_1414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_127_fu_1432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_1438_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln119_4_fu_1458_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_4_fu_1462_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln119_2_fu_1484_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln119_fu_1488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln120_fu_1493_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1535_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln117_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal mul_ln62_2_fu_1034_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_mac_muladd_24s_12s_34ns_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_2_0_U : component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 24,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_2_0_address0,
        ce0 => input_fm_buffer_2_0_ce0,
        we0 => input_fm_buffer_2_0_we0,
        d0 => input_fm_buffer_2_0_d0,
        q0 => input_fm_buffer_2_0_q0);

    output_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_1_address0,
        ce0 => output_fm_buffer_1_ce0,
        we0 => output_fm_buffer_1_we0,
        d0 => output_fm_buffer_1_d0,
        q0 => output_fm_buffer_1_q0);

    mul_5ns_6ns_10_1_1_U1 : component srcnn_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln62_2_fu_1034_p0,
        din1 => mul_ln62_2_fu_1034_p1,
        dout => mul_ln62_2_fu_1034_p2);

    mac_muladd_24s_12s_34ns_34_4_1_U2 : component srcnn_mac_muladd_24s_12s_34ns_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        din2_WIDTH => 34,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_fm_buffer_2_0_q0,
        din1 => trunc_ln62_1_fu_1159_p1,
        din2 => grp_fu_1535_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1535_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                bx_reg_383 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                bx_reg_383 <= add_ln95_reg_1641;
            end if; 
        end if;
    end process;

    by_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                by_reg_360 <= ap_const_lv5_0;
            elsif (((icmp_ln95_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                by_reg_360 <= add_ln94_reg_1623;
            end if; 
        end if;
    end process;

    conv_i_i_lcssa10_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                conv_i_i_lcssa10_reg_473 <= conv_i_i_lcssa_lcssa11_reg_451;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                conv_i_i_lcssa10_reg_473 <= trunc_ln62_3_fu_1179_p1(33 downto 2);
            end if; 
        end if;
    end process;

    conv_i_i_lcssa_lcssa11_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                conv_i_i_lcssa_lcssa11_reg_451 <= output_fm_buffer_1_q0;
            elsif (((icmp_ln53_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                conv_i_i_lcssa_lcssa11_reg_451 <= conv_i_i_lcssa10_reg_473;
            end if; 
        end if;
    end process;

    empty_111_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_111_reg_349 <= empty_112_fu_602_p2;
            elsif (((icmp_ln32_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_111_reg_349 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    empty_130_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                empty_130_reg_529 <= ap_const_lv15_0;
            elsif (((exitcond5412_fu_1518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                empty_130_reg_529 <= empty_131_fu_1524_p2;
            end if; 
        end if;
    end process;

    kx_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                kx_reg_462 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                kx_reg_462 <= add_ln53_reg_1742;
            end if; 
        end if;
    end process;

    ky_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ky_reg_440 <= ap_const_lv4_0;
            elsif (((icmp_ln53_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                ky_reg_440 <= add_ln52_reg_1724;
            end if; 
        end if;
    end process;

    nout_2_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                nout_2_reg_485 <= ap_const_lv7_0;
            elsif (((icmp_ln116_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                nout_2_reg_485 <= add_ln115_reg_1811;
            end if; 
        end if;
    end process;

    nout_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_394 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                nout_reg_394 <= add_ln45_reg_1670;
            end if; 
        end if;
    end process;

    phi_mul48_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul48_reg_405 <= ap_const_lv14_0;
            elsif (((icmp_ln48_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul48_reg_405 <= add_ln45_1_reg_1657;
            end if; 
        end if;
    end process;

    phi_mul50_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                phi_mul50_reg_496 <= ap_const_lv24_0;
            elsif (((icmp_ln116_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_mul50_reg_496 <= add_ln115_5_reg_1798;
            end if; 
        end if;
    end process;

    phi_mul_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_371 <= ap_const_lv10_0;
            elsif (((icmp_ln95_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_371 <= add_ln94_1_reg_1615;
            end if; 
        end if;
    end process;

    ti_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5412_fu_1518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                ti_reg_337 <= add_ln32_reg_1602;
            elsif (((icmp_ln31_fu_556_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_337 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tj_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_198 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_580_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_198 <= add_ln31_reg_1584;
            end if; 
        end if;
    end process;

    tx_3_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tx_3_reg_518 <= ap_const_lv5_0;
            elsif (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                tx_3_reg_518 <= add_ln117_reg_1869;
            end if; 
        end if;
    end process;

    tx_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_962_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_428 <= ap_const_lv5_0;
            elsif (((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tx_reg_428 <= add_ln49_reg_1706;
            end if; 
        end if;
    end process;

    ty_3_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                ty_3_reg_507 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                ty_3_reg_507 <= add_ln116_reg_1850;
            end if; 
        end if;
    end process;

    ty_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ty_reg_416 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_416 <= add_ln48_reg_1693;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln115_5_reg_1798 <= add_ln115_5_fu_1192_p2;
                add_ln115_reg_1811 <= add_ln115_fu_1226_p2;
                add_ln119_1_reg_1803 <= add_ln119_1_fu_1214_p2;
                    zext_ln115_reg_1793(23 downto 0) <= zext_ln115_fu_1188_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln116_reg_1850 <= add_ln116_fu_1359_p2;
                add_ln119_3_reg_1842 <= add_ln119_3_fu_1343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln117_reg_1869 <= add_ln117_fu_1478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1584 <= add_ln31_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1602 <= add_ln32_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln45_1_reg_1657 <= add_ln45_1_fu_873_p2;
                add_ln45_reg_1670 <= add_ln45_fu_907_p2;
                empty_114_reg_1662 <= empty_114_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln48_1_reg_1675 <= add_ln48_1_fu_921_p2;
                add_ln62_7_reg_1680 <= add_ln62_7_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_reg_1693 <= add_ln48_fu_968_p2;
                empty_117_reg_1685 <= empty_117_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_1706 <= add_ln49_fu_994_p2;
                output_fm_buffer_1_addr_1_reg_1698 <= p_cast61_fu_983_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln52_reg_1724 <= add_ln52_fu_1010_p2;
                    zext_ln52_reg_1716(3 downto 0) <= zext_ln52_fu_1000_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln53_reg_1742 <= add_ln53_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1044_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                add_ln62_6_reg_1758 <= add_ln62_6_fu_1134_p2;
                add_ln62_9_reg_1747 <= add_ln62_9_fu_1066_p2;
                gmem_addr_12_reg_1752 <= sext_ln62_5_fu_1124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln94_1_reg_1615 <= add_ln94_1_fu_613_p2;
                add_ln94_reg_1623 <= add_ln94_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln95_reg_1641 <= add_ln95_fu_749_p2;
                input_fm_buffer_2_0_addr_1_reg_1633 <= zext_ln102_1_fu_734_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                empty_123_reg_1822 <= empty_123_fu_1279_p2;
                gmem_addr_10_reg_1816 <= p_cast21_cast_fu_1269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_1571 <= empty_fu_540_p1;
                trunc_ln48_reg_1576 <= trunc_ln48_fu_544_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                gmem_addr_10_read_reg_1827 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_1353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                gmem_addr_11_reg_1855 <= sext_ln117_fu_1448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                gmem_addr_12_read_reg_1768 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_reg_1646 <= sext_ln102_1_fu_859_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                mul_ln62_2_reg_1734 <= mul_ln62_2_fu_1034_p2;
                    tmp_4_reg_1729(6 downto 3) <= tmp_4_fu_1016_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                select_ln120_reg_1874 <= select_ln120_fu_1506_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sext_ln95_reg_1628(63 downto 2) <= sext_ln95_fu_720_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    shl_ln119_reg_1832(31 downto 22) <= shl_ln119_fu_1300_p2(31 downto 22);
                    trunc_ln_reg_1837(30 downto 22) <= trunc_ln_fu_1310_p3(30 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_556_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1589 <= tmp_fu_568_p3;
                    zext_ln32_reg_1594(7 downto 0) <= zext_ln32_fu_576_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln102_reg_1652 <= trunc_ln102_fu_869_p1;
            end if;
        end if;
    end process;
    zext_ln32_reg_1594(9 downto 8) <= "00";
    sext_ln95_reg_1628(1 downto 0) <= "00";
    zext_ln52_reg_1716(4) <= '0';
    tmp_4_reg_1729(2 downto 0) <= "000";
    zext_ln115_reg_1793(24) <= '0';
    shl_ln119_reg_1832(21 downto 0) <= "0000000000000000000000";
    trunc_ln_reg_1837(21 downto 0) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state45, ap_CS_fsm_state48, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state2, icmp_ln31_fu_556_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln94_fu_623_p2, ap_CS_fsm_state6, icmp_ln95_fu_743_p2, ap_CS_fsm_state17, icmp_ln45_fu_901_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, icmp_ln52_4_fu_1004_p2, ap_CS_fsm_state22, icmp_ln53_fu_1044_p2, ap_CS_fsm_state36, icmp_ln115_fu_1220_p2, ap_CS_fsm_state47, icmp_ln116_fu_1353_p2, ap_CS_fsm_state49, ap_CS_fsm_state57, exitcond5412_fu_1518_p2, icmp_ln32_fu_580_p2, exitcond1_fu_596_p2, icmp_ln48_fu_962_p2, icmp_ln49_fu_988_p2, icmp_ln117_fu_1472_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_580_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln94_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln95_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln45_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln53_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln115_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln116_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln117_fu_1472_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((exitcond5412_fu_1518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln102_1_fu_844_p2 <= std_logic_vector(unsigned(add_ln102_fu_839_p2) + unsigned(sext_ln95_reg_1628));
    add_ln102_2_fu_728_p2 <= std_logic_vector(unsigned(phi_mul_reg_371) + unsigned(zext_ln102_fu_724_p1));
    add_ln102_fu_839_p2 <= std_logic_vector(signed(sext_ln102_2_fu_835_p1) + signed(input_ftmap));
    add_ln115_5_fu_1192_p2 <= std_logic_vector(unsigned(phi_mul50_reg_496) + unsigned(ap_const_lv24_3F804));
    add_ln115_fu_1226_p2 <= std_logic_vector(unsigned(nout_2_reg_485) + unsigned(ap_const_lv7_1));
    add_ln116_fu_1359_p2 <= std_logic_vector(unsigned(ty_3_reg_507) + unsigned(ap_const_lv5_1));
    add_ln117_fu_1478_p2 <= std_logic_vector(unsigned(tx_3_reg_518) + unsigned(ap_const_lv5_1));
    add_ln119_1_fu_1214_p2 <= std_logic_vector(unsigned(zext_ln119_1_fu_1210_p1) + unsigned(zext_ln119_fu_1198_p1));
    add_ln119_2_fu_1322_p2 <= std_logic_vector(unsigned(add_ln119_1_reg_1803) + unsigned(zext_ln119_2_fu_1318_p1));
    add_ln119_3_fu_1343_p2 <= std_logic_vector(unsigned(p_shl3_fu_1335_p3) + unsigned(zext_ln119_3_fu_1327_p1));
    add_ln119_4_fu_1462_p2 <= std_logic_vector(unsigned(add_ln119_3_reg_1842) + unsigned(zext_ln119_4_fu_1458_p1));
    add_ln119_fu_1488_p2 <= std_logic_vector(unsigned(output_fm_buffer_1_q0) + unsigned(shl_ln119_reg_1832));
    add_ln120_fu_1493_p2 <= std_logic_vector(unsigned(trunc_ln119_2_fu_1484_p1) + unsigned(trunc_ln_reg_1837));
    add_ln31_fu_562_p2 <= std_logic_vector(unsigned(tj_fu_198) + unsigned(ap_const_lv4_1));
    add_ln32_fu_586_p2 <= std_logic_vector(unsigned(ti_reg_337) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_873_p2 <= std_logic_vector(unsigned(phi_mul48_reg_405) + unsigned(ap_const_lv14_A2));
    add_ln45_fu_907_p2 <= std_logic_vector(unsigned(nout_reg_394) + unsigned(ap_const_lv7_1));
    add_ln48_1_fu_921_p2 <= std_logic_vector(unsigned(zext_ln48_fu_913_p1) + unsigned(conv1_weights));
    add_ln48_fu_968_p2 <= std_logic_vector(unsigned(ty_reg_416) + unsigned(ap_const_lv5_1));
    add_ln49_fu_994_p2 <= std_logic_vector(unsigned(tx_reg_428) + unsigned(ap_const_lv5_1));
    add_ln52_fu_1010_p2 <= std_logic_vector(unsigned(ky_reg_440) + unsigned(ap_const_lv4_1));
    add_ln53_fu_1050_p2 <= std_logic_vector(unsigned(kx_reg_462) + unsigned(ap_const_lv4_1));
    add_ln57_fu_1056_p2 <= std_logic_vector(unsigned(zext_ln53_fu_1040_p1) + unsigned(tx_reg_428));
    add_ln62_5_fu_1080_p2 <= std_logic_vector(unsigned(zext_ln62_5_fu_1076_p1) + unsigned(tmp_4_reg_1729));
    add_ln62_6_fu_1134_p2 <= std_logic_vector(unsigned(add_ln62_7_reg_1680) + unsigned(trunc_ln3_fu_1101_p3));
    add_ln62_7_fu_926_p2 <= std_logic_vector(unsigned(trunc_ln48_1_fu_917_p1) + unsigned(trunc_ln48_reg_1576));
    add_ln62_8_fu_1071_p2 <= std_logic_vector(unsigned(zext_ln52_reg_1716) + unsigned(zext_ln53_fu_1040_p1));
    add_ln62_9_fu_1066_p2 <= std_logic_vector(unsigned(mul_ln62_2_reg_1734) + unsigned(zext_ln62_8_fu_1062_p1));
    add_ln62_fu_1109_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_1675) + unsigned(zext_ln62_6_fu_1093_p1));
    add_ln94_1_fu_613_p2 <= std_logic_vector(unsigned(phi_mul_reg_371) + unsigned(ap_const_lv10_19));
    add_ln94_fu_629_p2 <= std_logic_vector(unsigned(by_reg_360) + unsigned(ap_const_lv5_1));
    add_ln95_fu_749_p2 <= std_logic_vector(unsigned(bx_reg_383) + unsigned(ap_const_lv5_1));
    add_ln98_1_fu_767_p2 <= std_logic_vector(unsigned(zext_ln95_fu_739_p1) + unsigned(ap_const_lv6_3C));
    add_ln98_fu_777_p2 <= std_logic_vector(signed(sext_ln98_fu_773_p1) + signed(zext_ln98_fu_763_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;

    ap_ST_fsm_state51_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;

    ap_ST_fsm_state56_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_556_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_556_p2)
    begin
        if (((icmp_ln31_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_112_fu_602_p2 <= std_logic_vector(unsigned(empty_111_reg_349) + unsigned(ap_const_lv9_1));
    empty_113_fu_645_p2 <= std_logic_vector(signed(tmp1_cast_fu_641_p1) + signed(zext_ln32_reg_1594));
    empty_114_fu_895_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_891_p1) + unsigned(nout_cast_fu_879_p1));
    empty_115_fu_935_p2 <= std_logic_vector(unsigned(empty_114_reg_1662) + unsigned(ty_cast_fu_931_p1));
    empty_116_fu_944_p1 <= empty_115_fu_935_p2(11 - 1 downto 0);
    empty_117_fu_956_p2 <= std_logic_vector(unsigned(p_shl1_fu_948_p3) + unsigned(p_cast52_fu_940_p1));
    empty_118_fu_978_p2 <= std_logic_vector(unsigned(empty_117_reg_1685) + unsigned(tx_cast_fu_974_p1));
    empty_119_fu_1024_p2 <= std_logic_vector(unsigned(zext_ln52_fu_1000_p1) + unsigned(ty_reg_416));
    empty_120_fu_1232_p2 <= std_logic_vector(shift_left(unsigned(nout_2_reg_485),to_integer(unsigned('0' & ap_const_lv7_1(7-1 downto 0)))));
    empty_121_fu_1242_p1 <= nout_2_reg_485(1 - 1 downto 0);
    empty_122_fu_1254_p2 <= std_logic_vector(unsigned(p_cast37_fu_1238_p1) + unsigned(conv1_biases));
    empty_123_fu_1279_p2 <= std_logic_vector(unsigned(p_cast_fu_1246_p3) + unsigned(empty_reg_1571));
    empty_124_fu_1295_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_10_read_reg_1827),to_integer(unsigned('0' & p_cast38_fu_1291_p1(31-1 downto 0)))));
    empty_125_fu_1365_p2 <= std_logic_vector(unsigned(zext_ln116_fu_1349_p1) + unsigned(tmp_reg_1589));
    empty_126_fu_1394_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1378_p1) - unsigned(p_shl10_cast_fu_1390_p1));
    empty_127_fu_1432_p2 <= std_logic_vector(unsigned(tmp11_fu_1427_p2) + unsigned(tmp10_cast_fu_1414_p1));
    empty_131_fu_1524_p2 <= std_logic_vector(unsigned(empty_130_reg_529) + unsigned(ap_const_lv15_1));
    empty_fu_540_p1 <= conv1_biases(2 - 1 downto 0);
    exitcond1_fu_596_p2 <= "1" when (empty_111_reg_349 = ap_const_lv9_138) else "0";
    exitcond5412_fu_1518_p2 <= "1" when (empty_130_reg_529 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1535_p2 <= (conv_i_i_lcssa10_reg_473 & ap_const_lv2_0);
    icmp_ln115_fu_1220_p2 <= "1" when (nout_2_reg_485 = ap_const_lv7_40) else "0";
    icmp_ln116_fu_1353_p2 <= "1" when (ty_3_reg_507 = ap_const_lv5_11) else "0";
    icmp_ln117_fu_1472_p2 <= "1" when (tx_3_reg_518 = ap_const_lv5_11) else "0";
    icmp_ln31_fu_556_p2 <= "1" when (tj_fu_198 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_580_p2 <= "1" when (ti_reg_337 = ap_const_lv4_F) else "0";
    icmp_ln45_fu_901_p2 <= "1" when (nout_reg_394 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_962_p2 <= "1" when (ty_reg_416 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_988_p2 <= "1" when (tx_reg_428 = ap_const_lv5_11) else "0";
    icmp_ln52_3_fu_791_p2 <= "1" when (signed(add_ln98_fu_777_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln52_4_fu_1004_p2 <= "1" when (ky_reg_440 = ap_const_lv4_9) else "0";
    icmp_ln52_fu_658_p2 <= "1" when (signed(empty_113_fu_645_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln53_fu_1044_p2 <= "1" when (kx_reg_462 = ap_const_lv4_9) else "0";
    icmp_ln94_fu_623_p2 <= "1" when (by_reg_360 = ap_const_lv5_19) else "0";
    icmp_ln95_fu_743_p2 <= "1" when (bx_reg_383 = ap_const_lv5_19) else "0";

    input_fm_buffer_2_0_address0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state4, input_fm_buffer_2_0_addr_1_reg_1633, ap_CS_fsm_state16, p_cast54_fu_608_p1, zext_ln62_9_fu_1139_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input_fm_buffer_2_0_address0 <= zext_ln62_9_fu_1139_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_2_0_address0 <= input_fm_buffer_2_0_addr_1_reg_1633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_2_0_address0 <= p_cast54_fu_608_p1(10 - 1 downto 0);
        else 
            input_fm_buffer_2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_2_0_ce0_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state31, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_2_0_d0_assign_proc : process(ap_CS_fsm_state4, trunc_ln102_reg_1652, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_2_0_d0 <= trunc_ln102_reg_1652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_2_0_d0 <= ap_const_lv24_0;
        else 
            input_fm_buffer_2_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_596_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond1_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln62_fu_1154_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_12_read_reg_1768),to_integer(unsigned('0' & zext_ln62_7_fu_1150_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state37, gmem_addr_reg_1646, gmem_addr_12_reg_1752, gmem_addr_10_reg_1816)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                m_axi_gmem_ARADDR <= gmem_addr_10_reg_1816;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                m_axi_gmem_ARADDR <= gmem_addr_12_reg_1752;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1646;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state37)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state37) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_11_reg_1855;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_11;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state48)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state45)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_reg_1874),32));
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state51)
    begin
        if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln62_2_fu_1034_p0 <= mul_ln62_2_fu_1034_p00(5 - 1 downto 0);
    mul_ln62_2_fu_1034_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_119_fu_1024_p2),10));
    mul_ln62_2_fu_1034_p1 <= ap_const_lv10_19(6 - 1 downto 0);
    nout_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_394),12));
    or_ln51_2_fu_805_p2 <= (tmp_11_fu_783_p3 or icmp_ln52_3_fu_791_p2);
    or_ln51_fu_680_p2 <= (tmp_9_fu_650_p3 or icmp_ln52_fu_658_p2);

    output_fm_buffer_1_address0_assign_proc : process(output_fm_buffer_1_addr_1_reg_1698, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state49, ap_CS_fsm_state57, p_cast61_fu_983_p1, zext_ln119_5_fu_1467_p1, p_cast62_fu_1530_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_1_address0 <= p_cast62_fu_1530_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_fm_buffer_1_address0 <= zext_ln119_5_fu_1467_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_1_address0 <= output_fm_buffer_1_addr_1_reg_1698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_fm_buffer_1_address0 <= p_cast61_fu_983_p1(15 - 1 downto 0);
        else 
            output_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state49, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_1_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state57, conv_i_i_lcssa_lcssa11_reg_451)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_fm_buffer_1_d0 <= conv_i_i_lcssa_lcssa11_reg_451;
        else 
            output_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln52_4_fu_1004_p2, ap_CS_fsm_state57, exitcond5412_fu_1518_p2)
    begin
        if ((((exitcond5412_fu_1518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((icmp_ln52_4_fu_1004_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast1_fu_1259_p4 <= empty_122_fu_1254_p2(63 downto 2);
        p_cast21_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_1259_p4),64));

        p_cast27_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_126_fu_1394_p2),25));

    p_cast37_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_120_fu_1232_p2),64));
    p_cast38_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1284_p3),32));
    p_cast52_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_115_fu_935_p2),15));
    p_cast54_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_111_reg_349),64));
    p_cast61_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_118_fu_978_p2),64));
    p_cast62_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_130_reg_529),64));
    p_cast_fu_1246_p3 <= (empty_121_fu_1242_p1 & ap_const_lv1_0);
    p_shl10_cast_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_1382_p3),19));
    p_shl1_fu_948_p3 <= (empty_116_fu_944_p1 & ap_const_lv4_0);
    p_shl2_fu_1382_p3 <= (empty_125_fu_1365_p2 & ap_const_lv2_0);
    p_shl3_fu_1335_p3 <= (trunc_ln119_1_fu_1331_p1 & ap_const_lv4_0);
    p_shl9_cast_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_1370_p3),19));
    p_shl9_fu_1370_p3 <= (empty_125_fu_1365_p2 & ap_const_lv10_0);
    select_ln120_fu_1506_p3 <= 
        ap_const_lv31_0 when (tmp_13_fu_1498_p3(0) = '1') else 
        add_ln120_fu_1493_p2;
    select_ln51_5_fu_811_p3 <= 
        ap_const_lv10_0 when (tmp_12_fu_797_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln51_6_fu_819_p3 <= 
        select_ln51_5_fu_811_p3 when (or_ln51_2_fu_805_p2(0) = '1') else 
        add_ln98_fu_777_p2;
    select_ln51_fu_672_p3 <= 
        ap_const_lv10_0 when (tmp_10_fu_664_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln102_1_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln102_1_fu_849_p4),64));

        sext_ln102_2_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_2_fu_827_p3),64));

        sext_ln102_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_702_p3),20));

        sext_ln117_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_1438_p4),64));

        sext_ln62_5_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln62_4_fu_1114_p4),64));

        sext_ln95_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln102_fu_714_p2),64));

        sext_ln98_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln98_1_fu_767_p2),10));

    shl_ln102_1_fu_702_p3 <= (yClamped_fu_686_p3 & ap_const_lv2_0);
    shl_ln102_2_fu_827_p3 <= (select_ln51_6_fu_819_p3 & ap_const_lv2_0);
    shl_ln119_fu_1300_p2 <= std_logic_vector(shift_left(unsigned(empty_124_fu_1295_p2),to_integer(unsigned('0' & ap_const_lv32_16(31-1 downto 0)))));
    shl_ln62_1_fu_1143_p3 <= (add_ln62_6_reg_1758 & ap_const_lv3_0);
    shl_ln6_fu_1085_p3 <= (add_ln62_5_fu_1080_p2 & ap_const_lv1_0);
    shl_ln_fu_694_p3 <= (yClamped_fu_686_p3 & ap_const_lv10_0);
    sub_ln102_fu_714_p2 <= std_logic_vector(unsigned(shl_ln_fu_694_p3) - unsigned(sext_ln102_fu_710_p1));
    tmp10_cast_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_1404_p4),64));
    tmp11_fu_1427_p2 <= std_logic_vector(signed(tmp12_cast_fu_1423_p1) + signed(output_ftmap));
        tmp12_cast_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_1418_p2),64));

    tmp12_fu_1418_p2 <= std_logic_vector(unsigned(zext_ln115_reg_1793) + unsigned(p_cast27_fu_1400_p1));
        tmp1_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_635_p2),10));

    tmp1_fu_635_p2 <= std_logic_vector(unsigned(zext_ln94_fu_619_p1) + unsigned(ap_const_lv6_3C));
    tmp4_fu_755_p3 <= (ti_reg_337 & ti_reg_337);
    tmp7_fu_1404_p4 <= ((ti_reg_337 & ti_reg_337) & ap_const_lv2_0);
    tmp_10_fu_664_p3 <= empty_113_fu_645_p2(9 downto 9);
    tmp_11_fu_783_p3 <= add_ln98_fu_777_p2(9 downto 9);
    tmp_12_fu_797_p3 <= add_ln98_fu_777_p2(9 downto 9);
    tmp_13_fu_1498_p3 <= add_ln119_fu_1488_p2(31 downto 31);
    tmp_17_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_883_p3),12));
    tmp_2_fu_1202_p3 <= (nout_2_reg_485 & ap_const_lv4_0);
    tmp_3_fu_1284_p3 <= (empty_123_reg_1822 & ap_const_lv3_0);
    tmp_4_fu_1016_p3 <= (ky_reg_440 & ap_const_lv3_0);
    tmp_9_fu_650_p3 <= empty_113_fu_645_p2(9 downto 9);
    tmp_fu_568_p3 <= (tj_fu_198 & tj_fu_198);
    tmp_s_fu_883_p3 <= (nout_reg_394 & ap_const_lv4_0);
    trunc_ln102_1_fu_849_p4 <= add_ln102_1_fu_844_p2(63 downto 2);
    trunc_ln102_fu_869_p1 <= m_axi_gmem_RDATA(24 - 1 downto 0);
    trunc_ln119_1_fu_1331_p1 <= add_ln119_2_fu_1322_p2(11 - 1 downto 0);
    trunc_ln119_2_fu_1484_p1 <= output_fm_buffer_1_q0(31 - 1 downto 0);
    trunc_ln119_fu_1306_p1 <= empty_124_fu_1295_p2(9 - 1 downto 0);
    trunc_ln2_fu_1438_p4 <= empty_127_fu_1432_p2(63 downto 2);
    trunc_ln3_fu_1101_p3 <= (trunc_ln62_fu_1097_p1 & ap_const_lv1_0);
    trunc_ln48_1_fu_917_p1 <= phi_mul48_reg_405(2 - 1 downto 0);
    trunc_ln48_fu_544_p1 <= conv1_weights(2 - 1 downto 0);
    trunc_ln62_1_fu_1159_p1 <= lshr_ln62_fu_1154_p2(12 - 1 downto 0);
    trunc_ln62_3_fu_1179_p1 <= grp_fu_1535_p3;
    trunc_ln62_4_fu_1114_p4 <= add_ln62_fu_1109_p2(63 downto 2);
    trunc_ln62_fu_1097_p1 <= add_ln62_5_fu_1080_p2(1 - 1 downto 0);
    trunc_ln_fu_1310_p3 <= (trunc_ln119_fu_1306_p1 & ap_const_lv22_0);
    tx_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_428),15));
    ty_cast_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_416),12));
    yClamped_fu_686_p3 <= 
        select_ln51_fu_672_p3 when (or_ln51_fu_680_p2(0) = '1') else 
        empty_113_fu_645_p2;
    zext_ln102_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_2_fu_728_p2),64));
    zext_ln102_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_383),10));
    zext_ln115_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul50_reg_496),25));
    zext_ln116_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_507),8));
    zext_ln119_1_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1202_p3),12));
    zext_ln119_2_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_3_reg_507),12));
    zext_ln119_3_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_2_fu_1322_p2),15));
    zext_ln119_4_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_3_reg_518),15));
    zext_ln119_5_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_4_fu_1462_p2),64));
    zext_ln119_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_2_reg_485),12));
    zext_ln32_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_568_p3),10));
    zext_ln48_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul48_reg_405),64));
    zext_ln52_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_440),5));
    zext_ln53_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_462),5));
    zext_ln62_5_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_8_fu_1071_p2),7));
    zext_ln62_6_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_1085_p3),64));
    zext_ln62_7_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_1143_p3),32));
    zext_ln62_8_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1056_p2),10));
    zext_ln62_9_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_9_reg_1747),64));
    zext_ln94_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_360),6));
    zext_ln95_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_383),6));
    zext_ln98_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_755_p3),10));
end behav;
