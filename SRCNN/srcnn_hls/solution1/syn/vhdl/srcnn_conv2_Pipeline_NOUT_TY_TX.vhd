-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_NOUT_TY_TX is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_buffer_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_0_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_1_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_2_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_3_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_4_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_5_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_6_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_buffer_0_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_buffer_0_0_7_ce0 : OUT STD_LOGIC;
    weights_buffer_0_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_fm_buffer_ce0 : OUT STD_LOGIC;
    output_fm_buffer_we0 : OUT STD_LOGIC;
    output_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_fm_buffer_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_fm_buffer_ce1 : OUT STD_LOGIC;
    output_fm_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_fm_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_fm_buffer_1_ce0 : OUT STD_LOGIC;
    input_fm_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_fm_buffer_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_fm_buffer_1_ce1 : OUT STD_LOGIC;
    input_fm_buffer_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_500_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_ce : OUT STD_LOGIC;
    grp_fu_504_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_504_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_504_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_504_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2_Pipeline_NOUT_TY_TX is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_121 : STD_LOGIC_VECTOR (10 downto 0) := "00100100001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_242 : STD_LOGIC_VECTOR (10 downto 0) := "01001000010";
    constant ap_const_lv11_363 : STD_LOGIC_VECTOR (10 downto 0) := "01101100011";
    constant ap_const_lv12_484 : STD_LOGIC_VECTOR (11 downto 0) := "010010000100";
    constant ap_const_lv12_5A5 : STD_LOGIC_VECTOR (11 downto 0) := "010110100101";
    constant ap_const_lv12_6C6 : STD_LOGIC_VECTOR (11 downto 0) := "011011000110";
    constant ap_const_lv12_7E7 : STD_LOGIC_VECTOR (11 downto 0) := "011111100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state32_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state40_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln55_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln55_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln55_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_776_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln72_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_reg_820 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln72_4_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_4_reg_825 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_9_fu_552_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln72_9_reg_831 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_fm_buffer_addr_reg_851 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_addr_reg_851_pp0_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal weights_buffer_0_0_0_load_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal weights_buffer_0_0_1_load_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_2_load_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_3_load_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_4_load_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_5_load_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_6_load_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_buffer_0_0_7_load_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_load_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_1_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_3_fu_676_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln72_3_reg_922 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal input_fm_buffer_1_load_2_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_3_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_fm_buffer_1_load_4_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_5_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_1_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_1_reg_973_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_6_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_load_7_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_2_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_2_reg_988_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_2_reg_988_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_3_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_3_reg_993_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_3_reg_993_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_3_reg_993_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_998_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_998_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_998_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_4_reg_998_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_5_reg_1003_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_6_reg_1008_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul49_7_reg_1013_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_1_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_2_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_3_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_4_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_5_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_6_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal add56_7_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln55_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln72_11_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_12_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_13_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln72_14_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_15_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln72_16_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_17_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln72_18_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bx_fu_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_fu_593_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ty_fu_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln57_1_fu_472_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten11_fu_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln57_2_fu_605_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nout_fu_102 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_2_fu_392_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten32_fu_106 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln55_2_fu_354_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_304_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_416_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_cast_fu_424_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln55_2_cast_fu_412_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln58_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_384_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln55_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln57_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_488_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln72_2_fu_496_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln72_1_fu_484_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_1_fu_510_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_428_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_99_fu_520_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_100_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_534_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_fu_526_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln57_fu_464_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln72_10_fu_556_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_8_fu_560_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_5_fu_516_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_9_fu_571_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_101_fu_542_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln72_8_fu_548_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_102_fu_582_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln57_1_fu_599_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_2_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_3_fu_647_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_6_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_10_fu_656_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln72_7_fu_652_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_11_fu_666_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_4_fu_679_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_12_fu_691_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_5_fu_685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_13_fu_701_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_6_fu_711_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_14_fu_721_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_7_fu_716_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_15_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter9_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U73 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_308_p0,
        din1 => grp_fu_308_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_308_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U75 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    bx_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                bx_fu_90 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then 
                bx_fu_90 <= add_ln58_fu_593_p2;
            end if; 
        end if;
    end process;

    indvar_flatten11_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten11_fu_98 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then 
                indvar_flatten11_fu_98 <= select_ln57_2_fu_605_p3;
            end if; 
        end if;
    end process;

    indvar_flatten32_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten32_fu_106 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then 
                indvar_flatten32_fu_106 <= add_ln55_2_fu_354_p2;
            end if; 
        end if;
    end process;

    nout_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                nout_fu_102 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then 
                nout_fu_102 <= select_ln55_2_fu_392_p3;
            end if; 
        end if;
    end process;

    ty_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ty_fu_94 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then 
                ty_fu_94 <= select_ln57_1_fu_472_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add56_1_reg_1023 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add56_2_reg_1028 <= grp_fu_500_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add56_3_reg_1033 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add56_4_reg_1038 <= grp_fu_500_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add56_5_reg_1043 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add56_6_reg_1048 <= grp_fu_500_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add56_7_reg_1053 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_fu_348_p2 = ap_const_lv1_0))) then
                add_ln72_reg_820 <= add_ln72_fu_500_p2;
                output_fm_buffer_addr_reg_851 <= p_cast6_fu_588_p1(14 - 1 downto 0);
                    zext_ln72_4_reg_825(9 downto 0) <= zext_ln72_4_fu_506_p1(9 downto 0);
                    zext_ln72_9_reg_831(4 downto 0) <= zext_ln72_9_fu_552_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_reg_1018 <= grp_fu_500_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln55_reg_776 <= icmp_ln55_fu_348_p2;
                icmp_ln55_reg_776_pp0_iter1_reg <= icmp_ln55_reg_776;
                icmp_ln55_reg_776_pp0_iter2_reg <= icmp_ln55_reg_776_pp0_iter1_reg;
                icmp_ln55_reg_776_pp0_iter3_reg <= icmp_ln55_reg_776_pp0_iter2_reg;
                icmp_ln55_reg_776_pp0_iter4_reg <= icmp_ln55_reg_776_pp0_iter3_reg;
                icmp_ln55_reg_776_pp0_iter5_reg <= icmp_ln55_reg_776_pp0_iter4_reg;
                icmp_ln55_reg_776_pp0_iter6_reg <= icmp_ln55_reg_776_pp0_iter5_reg;
                icmp_ln55_reg_776_pp0_iter7_reg <= icmp_ln55_reg_776_pp0_iter6_reg;
                icmp_ln55_reg_776_pp0_iter8_reg <= icmp_ln55_reg_776_pp0_iter7_reg;
                mul49_1_reg_973_pp0_iter2_reg <= mul49_1_reg_973;
                output_fm_buffer_addr_reg_851_pp0_iter1_reg <= output_fm_buffer_addr_reg_851;
                output_fm_buffer_addr_reg_851_pp0_iter2_reg <= output_fm_buffer_addr_reg_851_pp0_iter1_reg;
                output_fm_buffer_addr_reg_851_pp0_iter3_reg <= output_fm_buffer_addr_reg_851_pp0_iter2_reg;
                output_fm_buffer_addr_reg_851_pp0_iter4_reg <= output_fm_buffer_addr_reg_851_pp0_iter3_reg;
                output_fm_buffer_addr_reg_851_pp0_iter5_reg <= output_fm_buffer_addr_reg_851_pp0_iter4_reg;
                output_fm_buffer_addr_reg_851_pp0_iter6_reg <= output_fm_buffer_addr_reg_851_pp0_iter5_reg;
                output_fm_buffer_addr_reg_851_pp0_iter7_reg <= output_fm_buffer_addr_reg_851_pp0_iter6_reg;
                output_fm_buffer_addr_reg_851_pp0_iter8_reg <= output_fm_buffer_addr_reg_851_pp0_iter7_reg;
                output_fm_buffer_addr_reg_851_pp0_iter9_reg <= output_fm_buffer_addr_reg_851_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_776 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                input_fm_buffer_1_load_1_reg_917 <= input_fm_buffer_1_q0;
                input_fm_buffer_1_load_reg_912 <= input_fm_buffer_1_q1;
                output_fm_buffer_load_reg_907 <= output_fm_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_776 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                input_fm_buffer_1_load_2_reg_938 <= input_fm_buffer_1_q1;
                input_fm_buffer_1_load_3_reg_943 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_776 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_fm_buffer_1_load_4_reg_958 <= input_fm_buffer_1_q1;
                input_fm_buffer_1_load_5_reg_963 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_fm_buffer_1_load_6_reg_978 <= input_fm_buffer_1_q1;
                input_fm_buffer_1_load_7_reg_983 <= input_fm_buffer_1_q0;
                mul49_1_reg_973 <= grp_fu_316_p2;
                mul_reg_968 <= grp_fu_504_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul49_2_reg_988 <= grp_fu_504_p_dout0;
                mul49_3_reg_993 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul49_2_reg_988_pp0_iter2_reg <= mul49_2_reg_988;
                mul49_2_reg_988_pp0_iter3_reg <= mul49_2_reg_988_pp0_iter2_reg;
                mul49_3_reg_993_pp0_iter2_reg <= mul49_3_reg_993;
                mul49_3_reg_993_pp0_iter3_reg <= mul49_3_reg_993_pp0_iter2_reg;
                mul49_3_reg_993_pp0_iter4_reg <= mul49_3_reg_993_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul49_4_reg_998 <= grp_fu_504_p_dout0;
                mul49_5_reg_1003 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul49_4_reg_998_pp0_iter2_reg <= mul49_4_reg_998;
                mul49_4_reg_998_pp0_iter3_reg <= mul49_4_reg_998_pp0_iter2_reg;
                mul49_4_reg_998_pp0_iter4_reg <= mul49_4_reg_998_pp0_iter3_reg;
                mul49_4_reg_998_pp0_iter5_reg <= mul49_4_reg_998_pp0_iter4_reg;
                mul49_5_reg_1003_pp0_iter2_reg <= mul49_5_reg_1003;
                mul49_5_reg_1003_pp0_iter3_reg <= mul49_5_reg_1003_pp0_iter2_reg;
                mul49_5_reg_1003_pp0_iter4_reg <= mul49_5_reg_1003_pp0_iter3_reg;
                mul49_5_reg_1003_pp0_iter5_reg <= mul49_5_reg_1003_pp0_iter4_reg;
                mul49_5_reg_1003_pp0_iter6_reg <= mul49_5_reg_1003_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul49_6_reg_1008 <= grp_fu_504_p_dout0;
                mul49_7_reg_1013 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul49_6_reg_1008_pp0_iter3_reg <= mul49_6_reg_1008;
                mul49_6_reg_1008_pp0_iter4_reg <= mul49_6_reg_1008_pp0_iter3_reg;
                mul49_6_reg_1008_pp0_iter5_reg <= mul49_6_reg_1008_pp0_iter4_reg;
                mul49_6_reg_1008_pp0_iter6_reg <= mul49_6_reg_1008_pp0_iter5_reg;
                mul49_6_reg_1008_pp0_iter7_reg <= mul49_6_reg_1008_pp0_iter6_reg;
                mul49_6_reg_1008_pp0_iter8_reg <= mul49_6_reg_1008_pp0_iter7_reg;
                mul49_7_reg_1013_pp0_iter3_reg <= mul49_7_reg_1013;
                mul49_7_reg_1013_pp0_iter4_reg <= mul49_7_reg_1013_pp0_iter3_reg;
                mul49_7_reg_1013_pp0_iter5_reg <= mul49_7_reg_1013_pp0_iter4_reg;
                mul49_7_reg_1013_pp0_iter6_reg <= mul49_7_reg_1013_pp0_iter5_reg;
                mul49_7_reg_1013_pp0_iter7_reg <= mul49_7_reg_1013_pp0_iter6_reg;
                mul49_7_reg_1013_pp0_iter8_reg <= mul49_7_reg_1013_pp0_iter7_reg;
                mul49_7_reg_1013_pp0_iter9_reg <= mul49_7_reg_1013_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_776 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                weights_buffer_0_0_0_load_reg_857 <= weights_buffer_0_0_0_q0;
                weights_buffer_0_0_1_load_reg_862 <= weights_buffer_0_0_1_q0;
                weights_buffer_0_0_2_load_reg_867 <= weights_buffer_0_0_2_q0;
                weights_buffer_0_0_3_load_reg_872 <= weights_buffer_0_0_3_q0;
                weights_buffer_0_0_4_load_reg_877 <= weights_buffer_0_0_4_q0;
                weights_buffer_0_0_5_load_reg_882 <= weights_buffer_0_0_5_q0;
                weights_buffer_0_0_6_load_reg_887 <= weights_buffer_0_0_6_q0;
                weights_buffer_0_0_7_load_reg_892 <= weights_buffer_0_0_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_776 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    zext_ln72_3_reg_922(9 downto 0) <= zext_ln72_3_fu_676_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln72_4_reg_825(10) <= '0';
    zext_ln72_9_reg_831(11 downto 5) <= "0000000";
    zext_ln72_3_reg_922(11 downto 10) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter9_stage1, ap_idle_pp0_0to8, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to10, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln55_2_fu_354_p2 <= std_logic_vector(unsigned(indvar_flatten32_fu_106) + unsigned(ap_const_lv14_1));
    add_ln55_fu_372_p2 <= std_logic_vector(unsigned(nout_fu_102) + unsigned(ap_const_lv6_1));
    add_ln57_1_fu_599_p2 <= std_logic_vector(unsigned(indvar_flatten11_fu_98) + unsigned(ap_const_lv10_1));
    add_ln57_fu_452_p2 <= std_logic_vector(unsigned(select_ln55_fu_384_p3) + unsigned(ap_const_lv5_1));
    add_ln58_fu_593_p2 <= std_logic_vector(unsigned(select_ln57_fu_464_p3) + unsigned(ap_const_lv5_1));
    add_ln72_10_fu_656_p2 <= std_logic_vector(unsigned(zext_ln72_6_fu_643_p1) + unsigned(zext_ln72_9_reg_831));
    add_ln72_11_fu_666_p2 <= std_logic_vector(unsigned(zext_ln72_7_fu_652_p1) + unsigned(zext_ln72_9_reg_831));
    add_ln72_12_fu_691_p2 <= std_logic_vector(unsigned(add_ln72_4_fu_679_p2) + unsigned(zext_ln72_9_reg_831));
    add_ln72_13_fu_701_p2 <= std_logic_vector(unsigned(add_ln72_5_fu_685_p2) + unsigned(zext_ln72_9_reg_831));
    add_ln72_14_fu_721_p2 <= std_logic_vector(unsigned(add_ln72_6_fu_711_p2) + unsigned(zext_ln72_9_reg_831));
    add_ln72_15_fu_731_p2 <= std_logic_vector(unsigned(add_ln72_7_fu_716_p2) + unsigned(zext_ln72_9_reg_831));
    add_ln72_1_fu_510_p2 <= std_logic_vector(unsigned(zext_ln72_4_fu_506_p1) + unsigned(ap_const_lv11_121));
    add_ln72_2_fu_638_p2 <= std_logic_vector(unsigned(zext_ln72_4_reg_825) + unsigned(ap_const_lv11_242));
    add_ln72_3_fu_647_p2 <= std_logic_vector(unsigned(zext_ln72_4_reg_825) + unsigned(ap_const_lv11_363));
    add_ln72_4_fu_679_p2 <= std_logic_vector(unsigned(zext_ln72_3_fu_676_p1) + unsigned(ap_const_lv12_484));
    add_ln72_5_fu_685_p2 <= std_logic_vector(unsigned(zext_ln72_3_fu_676_p1) + unsigned(ap_const_lv12_5A5));
    add_ln72_6_fu_711_p2 <= std_logic_vector(unsigned(zext_ln72_3_reg_922) + unsigned(ap_const_lv12_6C6));
    add_ln72_7_fu_716_p2 <= std_logic_vector(unsigned(zext_ln72_3_reg_922) + unsigned(ap_const_lv12_7E7));
    add_ln72_8_fu_560_p2 <= std_logic_vector(unsigned(zext_ln72_4_fu_506_p1) + unsigned(zext_ln72_10_fu_556_p1));
    add_ln72_9_fu_571_p2 <= std_logic_vector(unsigned(zext_ln72_5_fu_516_p1) + unsigned(zext_ln72_9_fu_552_p1));
    add_ln72_fu_500_p2 <= std_logic_vector(unsigned(zext_ln72_2_fu_496_p1) + unsigned(zext_ln72_1_fu_484_p1));
    and_ln55_fu_446_p2 <= (xor_ln55_fu_434_p2 and icmp_ln58_fu_440_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln55_reg_776)
    begin
        if (((icmp_ln55_reg_776 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, icmp_ln55_reg_776_pp0_iter8_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_776_pp0_iter8_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter9_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_530_p1 <= empty_99_fu_520_p2(10 - 1 downto 0);
    empty_101_fu_542_p2 <= std_logic_vector(unsigned(p_shl3_fu_534_p3) + unsigned(p_cast_fu_526_p1));
    empty_102_fu_582_p2 <= std_logic_vector(unsigned(empty_101_fu_542_p2) + unsigned(zext_ln72_8_fu_548_p1));
    empty_99_fu_520_p2 <= std_logic_vector(unsigned(empty_fu_428_p2) + unsigned(zext_ln72_fu_480_p1));
    empty_fu_428_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_424_p1) + unsigned(select_ln55_2_cast_fu_412_p1));

    grp_fu_304_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, output_fm_buffer_load_reg_907, add56_1_reg_1023, add56_3_reg_1033, add56_5_reg_1043, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_304_p0 <= add56_5_reg_1043;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_304_p0 <= add56_3_reg_1033;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_304_p0 <= add56_1_reg_1023;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_304_p0 <= output_fm_buffer_load_reg_907;
        else 
            grp_fu_304_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul_reg_968, mul49_2_reg_988_pp0_iter3_reg, mul49_4_reg_998_pp0_iter5_reg, mul49_6_reg_1008_pp0_iter8_reg, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_304_p1 <= mul49_6_reg_1008_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_304_p1 <= mul49_4_reg_998_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_304_p1 <= mul49_2_reg_988_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_304_p1 <= mul_reg_968;
        else 
            grp_fu_304_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, add_reg_1018, add56_2_reg_1028, add56_4_reg_1038, add56_6_reg_1048, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_308_p0 <= add56_6_reg_1048;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_308_p0 <= add56_4_reg_1038;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_308_p0 <= add56_2_reg_1028;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_308_p0 <= add_reg_1018;
        else 
            grp_fu_308_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul49_1_reg_973_pp0_iter2_reg, mul49_3_reg_993_pp0_iter4_reg, mul49_5_reg_1003_pp0_iter6_reg, mul49_7_reg_1013_pp0_iter9_reg, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_308_p1 <= mul49_7_reg_1013_pp0_iter9_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_308_p1 <= mul49_5_reg_1003_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_308_p1 <= mul49_3_reg_993_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_308_p1 <= mul49_1_reg_973_pp0_iter2_reg;
        else 
            grp_fu_308_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, weights_buffer_0_0_0_load_reg_857, ap_CS_fsm_pp0_stage2, weights_buffer_0_0_2_load_reg_867, weights_buffer_0_0_4_load_reg_877, weights_buffer_0_0_6_load_reg_887, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_312_p0 <= weights_buffer_0_0_6_load_reg_887;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_312_p0 <= weights_buffer_0_0_4_load_reg_877;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_312_p0 <= weights_buffer_0_0_2_load_reg_867;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_312_p0 <= weights_buffer_0_0_0_load_reg_857;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, input_fm_buffer_1_load_reg_912, input_fm_buffer_1_load_2_reg_938, input_fm_buffer_1_load_4_reg_958, input_fm_buffer_1_load_6_reg_978, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_312_p1 <= input_fm_buffer_1_load_6_reg_978;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_312_p1 <= input_fm_buffer_1_load_4_reg_958;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_312_p1 <= input_fm_buffer_1_load_2_reg_938;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_312_p1 <= input_fm_buffer_1_load_reg_912;
        else 
            grp_fu_312_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, weights_buffer_0_0_1_load_reg_862, weights_buffer_0_0_3_load_reg_872, weights_buffer_0_0_5_load_reg_882, weights_buffer_0_0_7_load_reg_892, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_316_p0 <= weights_buffer_0_0_7_load_reg_892;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_316_p0 <= weights_buffer_0_0_5_load_reg_882;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_316_p0 <= weights_buffer_0_0_3_load_reg_872;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_316_p0 <= weights_buffer_0_0_1_load_reg_862;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, input_fm_buffer_1_load_1_reg_917, input_fm_buffer_1_load_3_reg_943, input_fm_buffer_1_load_5_reg_963, input_fm_buffer_1_load_7_reg_983, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_316_p1 <= input_fm_buffer_1_load_7_reg_983;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_316_p1 <= input_fm_buffer_1_load_5_reg_963;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_316_p1 <= input_fm_buffer_1_load_3_reg_943;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_316_p1 <= input_fm_buffer_1_load_1_reg_917;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_500_p_ce <= ap_const_logic_1;
    grp_fu_500_p_din0 <= grp_fu_304_p0;
    grp_fu_500_p_din1 <= grp_fu_304_p1;
    grp_fu_500_p_opcode <= ap_const_lv2_0;
    grp_fu_504_p_ce <= ap_const_logic_1;
    grp_fu_504_p_din0 <= grp_fu_312_p0;
    grp_fu_504_p_din1 <= grp_fu_312_p1;
    icmp_ln55_fu_348_p2 <= "1" when (indvar_flatten32_fu_106 = ap_const_lv14_2420) else "0";
    icmp_ln57_fu_378_p2 <= "1" when (indvar_flatten11_fu_98 = ap_const_lv10_121) else "0";
    icmp_ln58_fu_440_p2 <= "1" when (bx_fu_90 = ap_const_lv5_11) else "0";

    input_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln72_12_fu_577_p1, ap_block_pp0_stage2, zext_ln72_14_fu_671_p1, ap_block_pp0_stage3, zext_ln72_16_fu_706_p1, ap_block_pp0_stage0, zext_ln72_18_fu_736_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_fm_buffer_1_address0 <= zext_ln72_18_fu_736_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_fm_buffer_1_address0 <= zext_ln72_16_fu_706_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_fm_buffer_1_address0 <= zext_ln72_14_fu_671_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_fm_buffer_1_address0 <= zext_ln72_12_fu_577_p1(12 - 1 downto 0);
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln72_11_fu_566_p1, zext_ln72_13_fu_661_p1, ap_block_pp0_stage2, zext_ln72_15_fu_696_p1, ap_block_pp0_stage3, zext_ln72_17_fu_726_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_fm_buffer_1_address1 <= zext_ln72_17_fu_726_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_fm_buffer_1_address1 <= zext_ln72_15_fu_696_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_fm_buffer_1_address1 <= zext_ln72_13_fu_661_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_fm_buffer_1_address1 <= zext_ln72_11_fu_566_p1(12 - 1 downto 0);
        else 
            input_fm_buffer_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_fm_buffer_1_ce1 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_fu_458_p2 <= (icmp_ln57_fu_378_p2 or and_ln55_fu_446_p2);
    output_fm_buffer_address0 <= output_fm_buffer_addr_reg_851_pp0_iter9_reg;
    output_fm_buffer_address1 <= p_cast6_fu_588_p1(14 - 1 downto 0);

    output_fm_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_fm_buffer_ce1 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_fm_buffer_d0 <= add56_7_reg_1053;

    output_fm_buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast6_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_102_fu_582_p2),64));
    p_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_99_fu_520_p2),14));
    p_shl2_fu_488_p3 <= (select_ln57_1_fu_472_p3 & ap_const_lv4_0);
    p_shl3_fu_534_p3 <= (empty_100_fu_530_p1 & ap_const_lv4_0);
    select_ln55_2_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_2_fu_392_p3),11));
    select_ln55_2_fu_392_p3 <= 
        add_ln55_fu_372_p2 when (icmp_ln57_fu_378_p2(0) = '1') else 
        nout_fu_102;
    select_ln55_fu_384_p3 <= 
        ap_const_lv5_0 when (icmp_ln57_fu_378_p2(0) = '1') else 
        ty_fu_94;
    select_ln57_1_fu_472_p3 <= 
        add_ln57_fu_452_p2 when (and_ln55_fu_446_p2(0) = '1') else 
        select_ln55_fu_384_p3;
    select_ln57_2_fu_605_p3 <= 
        ap_const_lv10_1 when (icmp_ln57_fu_378_p2(0) = '1') else 
        add_ln57_1_fu_599_p2;
    select_ln57_fu_464_p3 <= 
        ap_const_lv5_0 when (or_ln57_fu_458_p2(0) = '1') else 
        bx_fu_90;
    tmp_14_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_416_p3),11));
    tmp_s_fu_416_p3 <= (select_ln55_2_fu_392_p3 & ap_const_lv4_0);
    weights_buffer_0_0_0_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_0_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_1_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_1_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_2_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_2_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_3_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_3_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_4_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_4_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_5_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_5_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_6_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_6_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_buffer_0_0_7_address0 <= zext_ln55_fu_400_p1(5 - 1 downto 0);

    weights_buffer_0_0_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_buffer_0_0_7_ce0 <= ap_const_logic_1;
        else 
            weights_buffer_0_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln55_fu_434_p2 <= (icmp_ln57_fu_378_p2 xor ap_const_lv1_1);
    zext_ln55_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_2_fu_392_p3),64));
    zext_ln72_10_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_464_p3),11));
    zext_ln72_11_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_8_fu_560_p2),64));
    zext_ln72_12_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_9_fu_571_p2),64));
    zext_ln72_13_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_10_fu_656_p2),64));
    zext_ln72_14_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_11_fu_666_p2),64));
    zext_ln72_15_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_12_fu_691_p2),64));
    zext_ln72_16_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_13_fu_701_p2),64));
    zext_ln72_17_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_14_fu_721_p2),64));
    zext_ln72_18_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_15_fu_731_p2),64));
    zext_ln72_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_472_p3),10));
    zext_ln72_2_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_488_p3),10));
    zext_ln72_3_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_reg_820),12));
    zext_ln72_4_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_500_p2),11));
    zext_ln72_5_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_1_fu_510_p2),12));
    zext_ln72_6_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_2_fu_638_p2),12));
    zext_ln72_7_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_3_fu_647_p2),12));
    zext_ln72_8_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_464_p3),14));
    zext_ln72_9_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_464_p3),12));
    zext_ln72_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_472_p3),11));
end behav;
