// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv1_weights,
        conv1_biases
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [15:0] m_axi_gmem_WDATA;
output  [1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [15:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [9:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv1_weights;
input  [63:0] conv1_biases;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg[31:0] m_axi_gmem_ARLEN;
reg m_axi_gmem_RREADY;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] input_fm_buffer_0_address0;
reg    input_fm_buffer_0_ce0;
reg    input_fm_buffer_0_we0;
reg   [15:0] input_fm_buffer_0_d0;
wire  signed [15:0] input_fm_buffer_0_q0;
reg   [14:0] output_fm_buffer_address0;
reg    output_fm_buffer_ce0;
reg    output_fm_buffer_we0;
reg   [15:0] output_fm_buffer_d0;
wire   [15:0] output_fm_buffer_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state30;
reg   [63:0] gmem_addr_reg_1062;
reg   [3:0] tj_1_reg_1068;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln31_fu_472_p2;
reg   [3:0] add_ln31_reg_1077;
wire   [3:0] add_ln32_fu_484_p2;
reg   [3:0] add_ln32_reg_1085;
wire    ap_CS_fsm_state3;
wire   [9:0] empty_33_fu_500_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln94_1_fu_511_p2;
reg   [9:0] add_ln94_1_reg_1098;
wire    ap_CS_fsm_state5;
wire   [4:0] add_ln94_fu_527_p2;
reg   [4:0] add_ln94_reg_1106;
wire  signed [63:0] sext_ln95_fu_629_p1;
reg  signed [63:0] sext_ln95_reg_1111;
wire   [0:0] icmp_ln94_fu_521_p2;
reg   [9:0] input_fm_buffer_0_addr_1_reg_1116;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln95_fu_658_p2;
reg   [4:0] add_ln95_reg_1124;
reg   [63:0] gmem_addr_2_reg_1129;
wire   [0:0] icmp_ln95_fu_652_p2;
reg   [15:0] gmem_addr_2_read_reg_1135;
wire   [13:0] add_ln45_1_fu_778_p2;
reg   [13:0] add_ln45_1_reg_1140;
wire    ap_CS_fsm_state17;
wire   [11:0] empty_35_fu_800_p2;
reg   [11:0] empty_35_reg_1145;
wire   [6:0] add_ln45_fu_812_p2;
reg   [6:0] add_ln45_reg_1153;
reg   [63:0] gmem_addr_1_reg_1158;
wire   [0:0] icmp_ln45_fu_806_p2;
wire   [14:0] empty_38_fu_872_p2;
reg   [14:0] empty_38_reg_1164;
wire    ap_CS_fsm_state18;
wire   [4:0] add_ln48_1_fu_884_p2;
reg   [4:0] add_ln48_1_reg_1172;
reg   [14:0] output_fm_buffer_addr_1_reg_1177;
wire    ap_CS_fsm_state19;
wire   [4:0] add_ln49_fu_910_p2;
reg   [4:0] add_ln49_reg_1185;
wire    ap_CS_fsm_state27;
wire   [3:0] add_ln52_fu_926_p2;
reg   [3:0] add_ln52_reg_1198;
wire    ap_CS_fsm_state28;
wire   [9:0] mul_ln62_1_fu_942_p2;
reg   [9:0] mul_ln62_1_reg_1203;
wire   [0:0] icmp_ln52_fu_920_p2;
wire   [3:0] add_ln53_fu_958_p2;
reg   [3:0] add_ln53_reg_1211;
wire    ap_CS_fsm_state29;
wire   [9:0] add_ln62_1_fu_974_p2;
reg   [9:0] add_ln62_1_reg_1216;
wire   [0:0] icmp_ln53_fu_952_p2;
reg  signed [15:0] gmem_addr_1_read_reg_1226;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [6:0] add_ln115_fu_1013_p2;
reg   [6:0] add_ln115_reg_1254;
wire    ap_CS_fsm_state43;
wire   [14:0] empty_45_fu_1025_p2;
wire    ap_CS_fsm_state45;
reg   [3:0] ti_reg_268;
wire   [0:0] icmp_ln31_fu_466_p2;
wire   [0:0] exitcond5515_fu_1019_p2;
reg   [9:0] empty_reg_280;
wire   [0:0] icmp_ln32_fu_478_p2;
wire   [0:0] exitcond4_fu_494_p2;
reg   [4:0] by_reg_291;
reg   [9:0] phi_mul_reg_302;
reg   [4:0] bx_reg_314;
wire    ap_CS_fsm_state16;
reg   [6:0] nout_reg_325;
wire   [0:0] icmp_ln48_fu_878_p2;
reg   [13:0] phi_mul37_reg_336;
reg   [4:0] ty_reg_347;
wire   [0:0] icmp_ln49_fu_904_p2;
reg   [4:0] tx_reg_359;
reg   [3:0] ky_reg_371;
reg   [15:0] conv_i_i_lcssa_lcssa11_reg_382;
reg   [3:0] kx_reg_393;
reg   [15:0] conv_i_i_lcssa10_reg_404;
reg   [6:0] nout_1_reg_416;
wire    ap_CS_fsm_state42;
reg   [14:0] empty_44_reg_427;
wire   [0:0] icmp_ln115_fu_1007_p2;
wire   [63:0] p_cast40_fu_506_p1;
wire   [63:0] zext_ln102_1_fu_643_p1;
wire   [63:0] p_cast45_fu_899_p1;
wire   [63:0] zext_ln62_2_fu_979_p1;
wire   [63:0] p_cast46_fu_1031_p1;
wire  signed [63:0] sext_ln115_fu_448_p1;
wire  signed [63:0] sext_ln102_1_fu_768_p1;
wire  signed [63:0] sext_ln52_fu_837_p1;
reg   [3:0] tj_fu_160;
wire    ap_CS_fsm_state26;
wire   [62:0] trunc_ln_fu_438_p4;
wire   [7:0] tmp2_fu_533_p3;
wire   [5:0] zext_ln94_fu_517_p1;
wire   [5:0] tmp3_fu_543_p2;
wire  signed [9:0] tmp3_cast_fu_549_p1;
wire   [9:0] tmp2_cast_fu_539_p1;
wire   [9:0] empty_34_fu_553_p2;
wire   [0:0] tmp_2_fu_573_p3;
wire   [0:0] tmp_1_fu_559_p3;
wire   [0:0] icmp_ln54_fu_567_p2;
wire   [0:0] or_ln53_fu_589_p2;
wire   [9:0] select_ln53_fu_581_p3;
wire   [9:0] yClamped_fu_595_p3;
wire   [10:0] shl_ln102_1_fu_611_p3;
wire   [18:0] shl_ln_fu_603_p3;
wire  signed [18:0] sext_ln102_fu_619_p1;
wire   [18:0] sub_ln102_fu_623_p2;
wire   [9:0] zext_ln102_fu_633_p1;
wire   [9:0] add_ln102_2_fu_637_p2;
wire   [7:0] tmp6_fu_664_p3;
wire   [5:0] zext_ln95_fu_648_p1;
wire   [5:0] add_ln98_1_fu_676_p2;
wire  signed [9:0] sext_ln98_fu_682_p1;
wire   [9:0] zext_ln98_fu_672_p1;
wire   [9:0] add_ln98_fu_686_p2;
wire   [0:0] tmp_3_fu_692_p3;
wire   [0:0] icmp_ln54_1_fu_700_p2;
wire   [0:0] tmp_4_fu_706_p3;
wire   [0:0] or_ln53_1_fu_714_p2;
wire   [9:0] select_ln53_2_fu_720_p3;
wire   [9:0] select_ln53_3_fu_728_p3;
wire   [10:0] shl_ln102_2_fu_736_p3;
wire  signed [63:0] sext_ln102_2_fu_744_p1;
wire   [63:0] add_ln102_fu_748_p2;
wire   [63:0] add_ln102_1_fu_753_p2;
wire   [62:0] trunc_ln3_fu_758_p4;
wire   [10:0] tmp_fu_788_p3;
wire   [11:0] tmp_cast_fu_796_p1;
wire   [11:0] nout_cast_fu_784_p1;
wire   [63:0] zext_ln48_fu_818_p1;
wire   [63:0] add_ln48_fu_822_p2;
wire   [62:0] trunc_ln2_fu_827_p4;
wire   [11:0] ty_cast_fu_847_p1;
wire   [11:0] empty_36_fu_851_p2;
wire   [10:0] empty_37_fu_860_p1;
wire   [14:0] p_shl1_fu_864_p3;
wire   [14:0] p_cast_fu_856_p1;
wire   [14:0] tx_cast_fu_890_p1;
wire   [14:0] empty_39_fu_894_p2;
wire   [4:0] zext_ln52_fu_916_p1;
wire   [4:0] empty_41_fu_932_p2;
wire   [4:0] mul_ln62_1_fu_942_p0;
wire   [5:0] mul_ln62_1_fu_942_p1;
wire   [4:0] zext_ln53_fu_948_p1;
wire   [4:0] add_ln57_fu_964_p2;
wire   [9:0] zext_ln62_1_fu_970_p1;
wire  signed [22:0] trunc_ln4_fu_998_p1;
wire   [22:0] grp_fu_1036_p3;
wire   [22:0] grp_fu_1036_p2;
reg   [44:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire   [9:0] mul_ln62_1_fu_942_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
end

srcnn_conv1_input_fm_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 625 ),
    .AddressWidth( 10 ))
input_fm_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_0_address0),
    .ce0(input_fm_buffer_0_ce0),
    .we0(input_fm_buffer_0_we0),
    .d0(input_fm_buffer_0_d0),
    .q0(input_fm_buffer_0_q0)
);

srcnn_conv1_output_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 18496 ),
    .AddressWidth( 15 ))
output_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_address0),
    .ce0(output_fm_buffer_ce0),
    .we0(output_fm_buffer_we0),
    .d0(output_fm_buffer_d0),
    .q0(output_fm_buffer_q0)
);

srcnn_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U1(
    .din0(mul_ln62_1_fu_942_p0),
    .din1(mul_ln62_1_fu_942_p1),
    .dout(mul_ln62_1_fu_942_p2)
);

srcnn_mac_muladd_16s_16s_23ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
mac_muladd_16s_16s_23ns_23_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_fm_buffer_0_q0),
    .din1(gmem_addr_1_read_reg_1226),
    .din2(grp_fu_1036_p2),
    .ce(1'b1),
    .dout(grp_fu_1036_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        bx_reg_314 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        bx_reg_314 <= add_ln95_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        by_reg_291 <= 5'd0;
    end else if (((icmp_ln95_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        by_reg_291 <= add_ln94_reg_1106;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        conv_i_i_lcssa10_reg_404 <= conv_i_i_lcssa_lcssa11_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        conv_i_i_lcssa10_reg_404 <= {{trunc_ln4_fu_998_p1[22:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv_i_i_lcssa_lcssa11_reg_382 <= output_fm_buffer_q0;
    end else if (((icmp_ln53_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        conv_i_i_lcssa_lcssa11_reg_382 <= conv_i_i_lcssa10_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        empty_44_reg_427 <= 15'd0;
    end else if (((exitcond5515_fu_1019_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        empty_44_reg_427 <= empty_45_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_280 <= empty_33_fu_500_p2;
    end else if (((icmp_ln32_fu_478_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_280 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        kx_reg_393 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        kx_reg_393 <= add_ln53_reg_1211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ky_reg_371 <= 4'd0;
    end else if (((icmp_ln53_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        ky_reg_371 <= add_ln52_reg_1198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        nout_1_reg_416 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state44) & (m_axi_gmem_RVALID == 1'b1))) begin
        nout_1_reg_416 <= add_ln115_reg_1254;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nout_reg_325 <= 7'd0;
    end else if (((icmp_ln48_fu_878_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        nout_reg_325 <= add_ln45_reg_1153;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul37_reg_336 <= 14'd0;
    end else if (((icmp_ln48_fu_878_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        phi_mul37_reg_336 <= add_ln45_1_reg_1140;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_302 <= 10'd0;
    end else if (((icmp_ln95_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_302 <= add_ln94_1_reg_1098;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5515_fu_1019_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        ti_reg_268 <= add_ln32_reg_1085;
    end else if (((icmp_ln31_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_268 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_160 <= 4'd0;
    end else if (((icmp_ln32_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_160 <= add_ln31_reg_1077;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_878_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tx_reg_359 <= 5'd0;
    end else if (((icmp_ln52_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        tx_reg_359 <= add_ln49_reg_1185;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        ty_reg_347 <= 5'd0;
    end else if (((icmp_ln49_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        ty_reg_347 <= add_ln48_1_reg_1172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln115_reg_1254 <= add_ln115_fu_1013_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_1077 <= add_ln31_fu_472_p2;
        tj_1_reg_1068 <= tj_fu_160;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_1085 <= add_ln32_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln45_1_reg_1140 <= add_ln45_1_fu_778_p2;
        add_ln45_reg_1153 <= add_ln45_fu_812_p2;
        empty_35_reg_1145 <= empty_35_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln48_1_reg_1172 <= add_ln48_1_fu_884_p2;
        empty_38_reg_1164 <= empty_38_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln49_reg_1185 <= add_ln49_fu_910_p2;
        output_fm_buffer_addr_1_reg_1177 <= p_cast45_fu_899_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln52_reg_1198 <= add_ln52_fu_926_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln53_reg_1211 <= add_ln53_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_952_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        add_ln62_1_reg_1216 <= add_ln62_1_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln94_1_reg_1098 <= add_ln94_1_fu_511_p2;
        add_ln94_reg_1106 <= add_ln94_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln95_reg_1124 <= add_ln95_fu_658_p2;
        input_fm_buffer_0_addr_1_reg_1116 <= zext_ln102_1_fu_643_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_addr_1_read_reg_1226 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        gmem_addr_1_reg_1158 <= sext_ln52_fu_837_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem_addr_2_read_reg_1135 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_addr_2_reg_1129 <= sext_ln102_1_fu_768_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_reg_1062 <= sext_ln115_fu_448_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        mul_ln62_1_reg_1203 <= mul_ln62_1_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln95_reg_1111[63 : 1] <= sext_ln95_fu_629_p1[63 : 1];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln31_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state35))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state44))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        input_fm_buffer_0_address0 = zext_ln62_2_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        input_fm_buffer_0_address0 = input_fm_buffer_0_addr_1_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_0_address0 = p_cast40_fu_506_p1;
    end else begin
        input_fm_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1)))) begin
        input_fm_buffer_0_ce0 = 1'b1;
    end else begin
        input_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_fm_buffer_0_d0 = gmem_addr_2_read_reg_1135;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_0_d0 = 16'd0;
    end else begin
        input_fm_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((exitcond4_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_0_we0 = 1'b1;
    end else begin
        input_fm_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1062;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_1158;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_1129;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            m_axi_gmem_ARLEN = 32'd64;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            m_axi_gmem_ARLEN = 32'd81;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_gmem_ARLEN = 32'd1;
        end else begin
            m_axi_gmem_ARLEN = 'bx;
        end
    end else begin
        m_axi_gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_fm_buffer_address0 = p_cast46_fu_1031_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state28))) begin
        output_fm_buffer_address0 = output_fm_buffer_addr_1_reg_1177;
    end else begin
        output_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state28))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_fm_buffer_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output_fm_buffer_d0 = conv_i_i_lcssa_lcssa11_reg_382;
    end else begin
        output_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond5515_fu_1019_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45)) | ((icmp_ln52_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)))) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond4_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln94_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln95_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln45_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln48_fu_878_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln49_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln52_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln53_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state35 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln115_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((exitcond5515_fu_1019_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_1_fu_753_p2 = ($signed(add_ln102_fu_748_p2) + $signed(sext_ln95_reg_1111));

assign add_ln102_2_fu_637_p2 = (phi_mul_reg_302 + zext_ln102_fu_633_p1);

assign add_ln102_fu_748_p2 = ($signed(sext_ln102_2_fu_744_p1) + $signed(input_ftmap));

assign add_ln115_fu_1013_p2 = (nout_1_reg_416 + 7'd1);

assign add_ln31_fu_472_p2 = (tj_fu_160 + 4'd1);

assign add_ln32_fu_484_p2 = (ti_reg_268 + 4'd1);

assign add_ln45_1_fu_778_p2 = (phi_mul37_reg_336 + 14'd162);

assign add_ln45_fu_812_p2 = (nout_reg_325 + 7'd1);

assign add_ln48_1_fu_884_p2 = (ty_reg_347 + 5'd1);

assign add_ln48_fu_822_p2 = (zext_ln48_fu_818_p1 + conv1_weights);

assign add_ln49_fu_910_p2 = (tx_reg_359 + 5'd1);

assign add_ln52_fu_926_p2 = (ky_reg_371 + 4'd1);

assign add_ln53_fu_958_p2 = (kx_reg_393 + 4'd1);

assign add_ln57_fu_964_p2 = (zext_ln53_fu_948_p1 + tx_reg_359);

assign add_ln62_1_fu_974_p2 = (mul_ln62_1_reg_1203 + zext_ln62_1_fu_970_p1);

assign add_ln94_1_fu_511_p2 = (phi_mul_reg_302 + 10'd25);

assign add_ln94_fu_527_p2 = (by_reg_291 + 5'd1);

assign add_ln95_fu_658_p2 = (bx_reg_314 + 5'd1);

assign add_ln98_1_fu_676_p2 = ($signed(zext_ln95_fu_648_p1) + $signed(6'd60));

assign add_ln98_fu_686_p2 = ($signed(sext_ln98_fu_682_p1) + $signed(zext_ln98_fu_672_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign empty_33_fu_500_p2 = (empty_reg_280 + 10'd1);

assign empty_34_fu_553_p2 = ($signed(tmp3_cast_fu_549_p1) + $signed(tmp2_cast_fu_539_p1));

assign empty_35_fu_800_p2 = (tmp_cast_fu_796_p1 + nout_cast_fu_784_p1);

assign empty_36_fu_851_p2 = (empty_35_reg_1145 + ty_cast_fu_847_p1);

assign empty_37_fu_860_p1 = empty_36_fu_851_p2[10:0];

assign empty_38_fu_872_p2 = (p_shl1_fu_864_p3 + p_cast_fu_856_p1);

assign empty_39_fu_894_p2 = (empty_38_reg_1164 + tx_cast_fu_890_p1);

assign empty_41_fu_932_p2 = (zext_ln52_fu_916_p1 + ty_reg_347);

assign empty_45_fu_1025_p2 = (empty_44_reg_427 + 15'd1);

assign exitcond4_fu_494_p2 = ((empty_reg_280 == 10'd625) ? 1'b1 : 1'b0);

assign exitcond5515_fu_1019_p2 = ((empty_44_reg_427 == 15'd18496) ? 1'b1 : 1'b0);

assign grp_fu_1036_p2 = {{conv_i_i_lcssa10_reg_404}, {7'd0}};

assign icmp_ln115_fu_1007_p2 = ((nout_1_reg_416 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_466_p2 = ((tj_fu_160 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_478_p2 = ((ti_reg_268 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_806_p2 = ((nout_reg_325 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_878_p2 = ((ty_reg_347 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_904_p2 = ((tx_reg_359 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_920_p2 = ((ky_reg_371 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_952_p2 = ((kx_reg_393 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_700_p2 = (($signed(add_ln98_fu_686_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_567_p2 = (($signed(empty_34_fu_553_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_521_p2 = ((by_reg_291 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_652_p2 = ((bx_reg_314 == 5'd25) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 16'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 2'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln62_1_fu_942_p0 = mul_ln62_1_fu_942_p00;

assign mul_ln62_1_fu_942_p00 = empty_41_fu_932_p2;

assign mul_ln62_1_fu_942_p1 = 10'd25;

assign nout_cast_fu_784_p1 = nout_reg_325;

assign or_ln53_1_fu_714_p2 = (tmp_3_fu_692_p3 | icmp_ln54_1_fu_700_p2);

assign or_ln53_fu_589_p2 = (tmp_1_fu_559_p3 | icmp_ln54_fu_567_p2);

assign p_cast40_fu_506_p1 = empty_reg_280;

assign p_cast45_fu_899_p1 = empty_39_fu_894_p2;

assign p_cast46_fu_1031_p1 = empty_44_reg_427;

assign p_cast_fu_856_p1 = empty_36_fu_851_p2;

assign p_shl1_fu_864_p3 = {{empty_37_fu_860_p1}, {4'd0}};

assign select_ln53_2_fu_720_p3 = ((tmp_4_fu_706_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln53_3_fu_728_p3 = ((or_ln53_1_fu_714_p2[0:0] == 1'b1) ? select_ln53_2_fu_720_p3 : add_ln98_fu_686_p2);

assign select_ln53_fu_581_p3 = ((tmp_2_fu_573_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln102_1_fu_768_p1 = $signed(trunc_ln3_fu_758_p4);

assign sext_ln102_2_fu_744_p1 = $signed(shl_ln102_2_fu_736_p3);

assign sext_ln102_fu_619_p1 = $signed(shl_ln102_1_fu_611_p3);

assign sext_ln115_fu_448_p1 = $signed(trunc_ln_fu_438_p4);

assign sext_ln52_fu_837_p1 = $signed(trunc_ln2_fu_827_p4);

assign sext_ln95_fu_629_p1 = $signed(sub_ln102_fu_623_p2);

assign sext_ln98_fu_682_p1 = $signed(add_ln98_1_fu_676_p2);

assign shl_ln102_1_fu_611_p3 = {{yClamped_fu_595_p3}, {1'd0}};

assign shl_ln102_2_fu_736_p3 = {{select_ln53_3_fu_728_p3}, {1'd0}};

assign shl_ln_fu_603_p3 = {{yClamped_fu_595_p3}, {9'd0}};

assign sub_ln102_fu_623_p2 = ($signed(shl_ln_fu_603_p3) - $signed(sext_ln102_fu_619_p1));

assign tmp2_cast_fu_539_p1 = tmp2_fu_533_p3;

assign tmp2_fu_533_p3 = {{tj_1_reg_1068}, {tj_1_reg_1068}};

assign tmp3_cast_fu_549_p1 = $signed(tmp3_fu_543_p2);

assign tmp3_fu_543_p2 = ($signed(zext_ln94_fu_517_p1) + $signed(6'd60));

assign tmp6_fu_664_p3 = {{ti_reg_268}, {ti_reg_268}};

assign tmp_1_fu_559_p3 = empty_34_fu_553_p2[32'd9];

assign tmp_2_fu_573_p3 = empty_34_fu_553_p2[32'd9];

assign tmp_3_fu_692_p3 = add_ln98_fu_686_p2[32'd9];

assign tmp_4_fu_706_p3 = add_ln98_fu_686_p2[32'd9];

assign tmp_cast_fu_796_p1 = tmp_fu_788_p3;

assign tmp_fu_788_p3 = {{nout_reg_325}, {4'd0}};

assign trunc_ln2_fu_827_p4 = {{add_ln48_fu_822_p2[63:1]}};

assign trunc_ln3_fu_758_p4 = {{add_ln102_1_fu_753_p2[63:1]}};

assign trunc_ln4_fu_998_p1 = grp_fu_1036_p3;

assign trunc_ln_fu_438_p4 = {{conv1_biases[63:1]}};

assign tx_cast_fu_890_p1 = tx_reg_359;

assign ty_cast_fu_847_p1 = ty_reg_347;

assign yClamped_fu_595_p3 = ((or_ln53_fu_589_p2[0:0] == 1'b1) ? select_ln53_fu_581_p3 : empty_34_fu_553_p2);

assign zext_ln102_1_fu_643_p1 = add_ln102_2_fu_637_p2;

assign zext_ln102_fu_633_p1 = bx_reg_314;

assign zext_ln48_fu_818_p1 = phi_mul37_reg_336;

assign zext_ln52_fu_916_p1 = ky_reg_371;

assign zext_ln53_fu_948_p1 = kx_reg_393;

assign zext_ln62_1_fu_970_p1 = add_ln57_fu_964_p2;

assign zext_ln62_2_fu_979_p1 = add_ln62_1_reg_1216;

assign zext_ln94_fu_517_p1 = by_reg_291;

assign zext_ln95_fu_648_p1 = bx_reg_314;

assign zext_ln98_fu_672_p1 = tmp6_fu_664_p3;

always @ (posedge ap_clk) begin
    sext_ln95_reg_1111[0] <= 1'b0;
end

endmodule //srcnn_conv1
