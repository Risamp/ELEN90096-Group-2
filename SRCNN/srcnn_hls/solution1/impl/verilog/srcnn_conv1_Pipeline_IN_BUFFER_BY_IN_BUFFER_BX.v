// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_IN_BUFFER_BY_IN_BUFFER_BX (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln30,
        zext_ln52,
        select_ln30,
        input_ftmap,
        input_fm_buffer_2_0_address0,
        input_fm_buffer_2_0_ce0,
        input_fm_buffer_2_0_we0,
        input_fm_buffer_2_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [7:0] zext_ln30;
input  [7:0] zext_ln52;
input  [3:0] select_ln30;
input  [63:0] input_ftmap;
output  [9:0] input_fm_buffer_2_0_address0;
output   input_fm_buffer_2_0_ce0;
output   input_fm_buffer_2_0_we0;
output  [31:0] input_fm_buffer_2_0_d0;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg input_fm_buffer_2_0_ce0;
reg input_fm_buffer_2_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_280_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln93_fu_307_p3;
reg   [4:0] select_ln93_reg_620;
reg   [4:0] select_ln93_reg_620_pp0_iter1_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter2_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter3_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter4_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter5_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter6_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter7_reg;
reg   [4:0] select_ln93_reg_620_pp0_iter8_reg;
wire   [4:0] select_ln93_1_fu_315_p3;
reg   [4:0] select_ln93_1_reg_625;
reg   [4:0] select_ln93_1_reg_625_pp0_iter1_reg;
reg   [4:0] select_ln93_1_reg_625_pp0_iter2_reg;
reg   [4:0] select_ln93_1_reg_625_pp0_iter3_reg;
reg   [4:0] select_ln93_1_reg_625_pp0_iter4_reg;
reg   [4:0] select_ln93_1_reg_625_pp0_iter5_reg;
reg   [4:0] select_ln93_1_reg_625_pp0_iter6_reg;
reg   [63:0] gmem_addr_17_reg_630;
reg   [31:0] gmem_addr_17_read_reg_646;
wire   [63:0] zext_ln101_4_fu_578_p1;
wire  signed [63:0] sext_ln101_1_fu_541_p1;
reg   [4:0] bx_fu_94;
wire   [4:0] add_ln94_fu_551_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_bx_load;
reg   [4:0] by_fu_98;
reg   [4:0] ap_sig_allocacmp_by_2;
reg   [9:0] indvar_flatten_fu_102;
wire   [9:0] add_ln93_1_fu_286_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [5:0] zext_ln93_fu_184_p1;
wire   [5:0] tmp_fu_188_p2;
wire  signed [9:0] tmp_cast_fu_194_p1;
wire   [9:0] zext_ln30_cast_fu_159_p1;
wire   [9:0] empty_fu_198_p2;
wire   [9:0] zext_ln52_cast_fu_155_p1;
wire   [0:0] tmp_10_fu_224_p3;
wire   [0:0] tmp_9_fu_204_p3;
wire   [0:0] icmp_ln52_fu_212_p2;
wire   [0:0] or_ln51_fu_240_p2;
wire   [9:0] select_ln51_fu_232_p3;
wire   [9:0] add_ln52_2_fu_218_p2;
wire   [9:0] yClamped_fu_246_p3;
wire   [11:0] shl_ln101_1_fu_262_p3;
wire   [19:0] shl_ln_fu_254_p3;
wire  signed [19:0] sext_ln101_fu_270_p1;
wire   [0:0] icmp_ln94_fu_301_p2;
wire   [4:0] add_ln93_fu_295_p2;
wire   [5:0] zext_ln93_1_fu_323_p1;
wire   [5:0] tmp_mid1_fu_327_p2;
wire  signed [9:0] tmp_cast_mid1_fu_333_p1;
wire   [9:0] p_mid1_fu_337_p2;
wire   [0:0] tmp_12_fu_363_p3;
wire   [0:0] tmp_11_fu_343_p3;
wire   [0:0] icmp_ln52_3_fu_351_p2;
wire   [0:0] or_ln51_3_fu_379_p2;
wire   [9:0] select_ln51_11_fu_371_p3;
wire   [9:0] add_ln52_fu_357_p2;
wire   [9:0] select_ln51_10_fu_385_p3;
wire   [11:0] shl_ln101_1_mid1_fu_401_p3;
wire   [19:0] shl_ln101_mid1_fu_393_p3;
wire  signed [19:0] sext_ln101_3_fu_409_p1;
wire   [19:0] sub_ln101_1_fu_413_p2;
wire   [19:0] sub_ln101_fu_274_p2;
wire   [19:0] select_ln93_2_fu_419_p3;
wire   [7:0] tmp4_fu_435_p3;
wire   [5:0] trunc_ln97_cast_fu_431_p1;
wire   [5:0] add_ln97_1_fu_447_p2;
wire  signed [9:0] sext_ln97_fu_453_p1;
wire   [9:0] zext_ln97_fu_443_p1;
wire   [9:0] add_ln97_fu_457_p2;
wire   [0:0] tmp_13_fu_463_p3;
wire   [0:0] icmp_ln52_2_fu_471_p2;
wire   [0:0] tmp_14_fu_477_p3;
wire   [0:0] or_ln51_2_fu_485_p2;
wire   [9:0] select_ln51_13_fu_491_p3;
wire   [9:0] select_ln51_12_fu_499_p3;
wire   [11:0] shl_ln101_2_fu_507_p3;
wire  signed [63:0] sext_ln101_2_fu_515_p1;
wire   [63:0] add_ln101_fu_519_p2;
wire  signed [63:0] sext_ln93_fu_427_p1;
wire   [63:0] add_ln101_1_fu_525_p2;
wire   [61:0] trunc_ln_fu_531_p4;
wire   [9:0] grp_fu_586_p3;
wire   [4:0] grp_fu_586_p0;
wire   [4:0] grp_fu_586_p1;
wire   [4:0] grp_fu_586_p2;
reg    grp_fu_586_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_586_p00;
wire   [9:0] grp_fu_586_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mac_muladd_5ns_5ns_5ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mac_muladd_5ns_5ns_5ns_10_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_586_p0),
    .din1(grp_fu_586_p1),
    .din2(grp_fu_586_p2),
    .ce(grp_fu_586_ce),
    .dout(grp_fu_586_p3)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_280_p2 == 1'd0))) begin
            bx_fu_94 <= add_ln94_fu_551_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            bx_fu_94 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_280_p2 == 1'd0))) begin
            by_fu_98 <= select_ln93_1_fu_315_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            by_fu_98 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_280_p2 == 1'd0))) begin
            indvar_flatten_fu_102 <= add_ln93_1_fu_286_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln93_1_reg_625_pp0_iter1_reg <= select_ln93_1_reg_625;
        select_ln93_reg_620_pp0_iter1_reg <= select_ln93_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_addr_17_read_reg_646 <= m_axi_gmem_RDATA;
        select_ln93_1_reg_625_pp0_iter2_reg <= select_ln93_1_reg_625_pp0_iter1_reg;
        select_ln93_1_reg_625_pp0_iter3_reg <= select_ln93_1_reg_625_pp0_iter2_reg;
        select_ln93_1_reg_625_pp0_iter4_reg <= select_ln93_1_reg_625_pp0_iter3_reg;
        select_ln93_1_reg_625_pp0_iter5_reg <= select_ln93_1_reg_625_pp0_iter4_reg;
        select_ln93_1_reg_625_pp0_iter6_reg <= select_ln93_1_reg_625_pp0_iter5_reg;
        select_ln93_reg_620_pp0_iter2_reg <= select_ln93_reg_620_pp0_iter1_reg;
        select_ln93_reg_620_pp0_iter3_reg <= select_ln93_reg_620_pp0_iter2_reg;
        select_ln93_reg_620_pp0_iter4_reg <= select_ln93_reg_620_pp0_iter3_reg;
        select_ln93_reg_620_pp0_iter5_reg <= select_ln93_reg_620_pp0_iter4_reg;
        select_ln93_reg_620_pp0_iter6_reg <= select_ln93_reg_620_pp0_iter5_reg;
        select_ln93_reg_620_pp0_iter7_reg <= select_ln93_reg_620_pp0_iter6_reg;
        select_ln93_reg_620_pp0_iter8_reg <= select_ln93_reg_620_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_fu_280_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_17_reg_630 <= sext_ln101_1_fu_541_p1;
        select_ln93_1_reg_625 <= select_ln93_1_fu_315_p3;
        select_ln93_reg_620 <= select_ln93_fu_307_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_fu_280_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bx_load = 5'd0;
    end else begin
        ap_sig_allocacmp_bx_load = bx_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_by_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_by_2 = by_fu_98;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_586_ce = 1'b1;
    end else begin
        grp_fu_586_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_2_0_ce0 = 1'b1;
    end else begin
        input_fm_buffer_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_2_0_we0 = 1'b1;
    end else begin
        input_fm_buffer_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_1_fu_525_p2 = ($signed(add_ln101_fu_519_p2) + $signed(sext_ln93_fu_427_p1));

assign add_ln101_fu_519_p2 = ($signed(sext_ln101_2_fu_515_p1) + $signed(input_ftmap));

assign add_ln52_2_fu_218_p2 = ($signed(tmp_cast_fu_194_p1) + $signed(zext_ln52_cast_fu_155_p1));

assign add_ln52_fu_357_p2 = ($signed(tmp_cast_mid1_fu_333_p1) + $signed(zext_ln52_cast_fu_155_p1));

assign add_ln93_1_fu_286_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln93_fu_295_p2 = (ap_sig_allocacmp_by_2 + 5'd1);

assign add_ln94_fu_551_p2 = (select_ln93_fu_307_p3 + 5'd1);

assign add_ln97_1_fu_447_p2 = ($signed(trunc_ln97_cast_fu_431_p1) + $signed(6'd60));

assign add_ln97_fu_457_p2 = ($signed(sext_ln97_fu_453_p1) + $signed(zext_ln97_fu_443_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_198_p2 = ($signed(tmp_cast_fu_194_p1) + $signed(zext_ln30_cast_fu_159_p1));

assign grp_fu_586_p0 = grp_fu_586_p00;

assign grp_fu_586_p00 = select_ln93_1_reg_625_pp0_iter6_reg;

assign grp_fu_586_p1 = 10'd25;

assign grp_fu_586_p2 = grp_fu_586_p20;

assign grp_fu_586_p20 = select_ln93_reg_620_pp0_iter8_reg;

assign icmp_ln52_2_fu_471_p2 = (($signed(add_ln97_fu_457_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_351_p2 = (($signed(p_mid1_fu_337_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_212_p2 = (($signed(empty_fu_198_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_280_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd625) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_301_p2 = ((ap_sig_allocacmp_bx_load == 5'd25) ? 1'b1 : 1'b0);

assign input_fm_buffer_2_0_address0 = zext_ln101_4_fu_578_p1;

assign input_fm_buffer_2_0_d0 = gmem_addr_17_read_reg_646;

assign m_axi_gmem_ARADDR = gmem_addr_17_reg_630;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln51_2_fu_485_p2 = (tmp_13_fu_463_p3 | icmp_ln52_2_fu_471_p2);

assign or_ln51_3_fu_379_p2 = (tmp_11_fu_343_p3 | icmp_ln52_3_fu_351_p2);

assign or_ln51_fu_240_p2 = (tmp_9_fu_204_p3 | icmp_ln52_fu_212_p2);

assign p_mid1_fu_337_p2 = ($signed(tmp_cast_mid1_fu_333_p1) + $signed(zext_ln30_cast_fu_159_p1));

assign select_ln51_10_fu_385_p3 = ((or_ln51_3_fu_379_p2[0:0] == 1'b1) ? select_ln51_11_fu_371_p3 : add_ln52_fu_357_p2);

assign select_ln51_11_fu_371_p3 = ((tmp_12_fu_363_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_12_fu_499_p3 = ((or_ln51_2_fu_485_p2[0:0] == 1'b1) ? select_ln51_13_fu_491_p3 : add_ln97_fu_457_p2);

assign select_ln51_13_fu_491_p3 = ((tmp_14_fu_477_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_fu_232_p3 = ((tmp_10_fu_224_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln93_1_fu_315_p3 = ((icmp_ln94_fu_301_p2[0:0] == 1'b1) ? add_ln93_fu_295_p2 : ap_sig_allocacmp_by_2);

assign select_ln93_2_fu_419_p3 = ((icmp_ln94_fu_301_p2[0:0] == 1'b1) ? sub_ln101_1_fu_413_p2 : sub_ln101_fu_274_p2);

assign select_ln93_fu_307_p3 = ((icmp_ln94_fu_301_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_bx_load);

assign sext_ln101_1_fu_541_p1 = $signed(trunc_ln_fu_531_p4);

assign sext_ln101_2_fu_515_p1 = $signed(shl_ln101_2_fu_507_p3);

assign sext_ln101_3_fu_409_p1 = $signed(shl_ln101_1_mid1_fu_401_p3);

assign sext_ln101_fu_270_p1 = $signed(shl_ln101_1_fu_262_p3);

assign sext_ln93_fu_427_p1 = $signed(select_ln93_2_fu_419_p3);

assign sext_ln97_fu_453_p1 = $signed(add_ln97_1_fu_447_p2);

assign shl_ln101_1_fu_262_p3 = {{yClamped_fu_246_p3}, {2'd0}};

assign shl_ln101_1_mid1_fu_401_p3 = {{select_ln51_10_fu_385_p3}, {2'd0}};

assign shl_ln101_2_fu_507_p3 = {{select_ln51_12_fu_499_p3}, {2'd0}};

assign shl_ln101_mid1_fu_393_p3 = {{select_ln51_10_fu_385_p3}, {10'd0}};

assign shl_ln_fu_254_p3 = {{yClamped_fu_246_p3}, {10'd0}};

assign sub_ln101_1_fu_413_p2 = ($signed(shl_ln101_mid1_fu_393_p3) - $signed(sext_ln101_3_fu_409_p1));

assign sub_ln101_fu_274_p2 = ($signed(shl_ln_fu_254_p3) - $signed(sext_ln101_fu_270_p1));

assign tmp4_fu_435_p3 = {{select_ln30}, {select_ln30}};

assign tmp_10_fu_224_p3 = empty_fu_198_p2[32'd9];

assign tmp_11_fu_343_p3 = p_mid1_fu_337_p2[32'd9];

assign tmp_12_fu_363_p3 = p_mid1_fu_337_p2[32'd9];

assign tmp_13_fu_463_p3 = add_ln97_fu_457_p2[32'd9];

assign tmp_14_fu_477_p3 = add_ln97_fu_457_p2[32'd9];

assign tmp_9_fu_204_p3 = empty_fu_198_p2[32'd9];

assign tmp_cast_fu_194_p1 = $signed(tmp_fu_188_p2);

assign tmp_cast_mid1_fu_333_p1 = $signed(tmp_mid1_fu_327_p2);

assign tmp_fu_188_p2 = ($signed(zext_ln93_fu_184_p1) + $signed(6'd60));

assign tmp_mid1_fu_327_p2 = ($signed(zext_ln93_1_fu_323_p1) + $signed(6'd60));

assign trunc_ln97_cast_fu_431_p1 = select_ln93_fu_307_p3;

assign trunc_ln_fu_531_p4 = {{add_ln101_1_fu_525_p2[63:2]}};

assign yClamped_fu_246_p3 = ((or_ln51_fu_240_p2[0:0] == 1'b1) ? select_ln51_fu_232_p3 : add_ln52_2_fu_218_p2);

assign zext_ln101_4_fu_578_p1 = grp_fu_586_p3;

assign zext_ln30_cast_fu_159_p1 = zext_ln30;

assign zext_ln52_cast_fu_155_p1 = zext_ln52;

assign zext_ln93_1_fu_323_p1 = add_ln93_fu_295_p2;

assign zext_ln93_fu_184_p1 = ap_sig_allocacmp_by_2;

assign zext_ln97_fu_443_p1 = tmp4_fu_435_p3;

endmodule //srcnn_conv1_Pipeline_IN_BUFFER_BY_IN_BUFFER_BX
