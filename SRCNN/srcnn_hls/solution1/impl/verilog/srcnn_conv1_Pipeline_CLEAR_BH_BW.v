// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_CLEAR_BH_BW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0;

reg ap_idle;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_141_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln76_fu_280_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] w_fu_62;
wire   [7:0] add_ln74_fu_294_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [3:0] h_fu_66;
wire   [3:0] select_ln72_1_fu_250_p3;
reg   [11:0] indvar_flatten314_fu_70;
wire   [11:0] select_ln72_2_fu_306_p3;
reg   [3:0] o_2_fu_74;
wire   [3:0] select_ln71_1_fu_182_p3;
reg   [14:0] indvar_flatten327_fu_78;
wire   [14:0] add_ln71_3_fu_147_p2;
wire   [0:0] tmp_fu_286_p3;
wire   [0:0] icmp_ln72_fu_168_p2;
wire   [3:0] add_ln71_fu_162_p2;
wire   [2:0] trunc_ln76_fu_194_p1;
wire   [6:0] tmp_367_cast_fu_198_p3;
wire   [6:0] select_ln71_1_cast_fu_190_p1;
wire   [0:0] icmp_ln74_fu_218_p2;
wire   [0:0] xor_ln71_fu_212_p2;
wire   [3:0] select_ln71_fu_174_p3;
wire   [0:0] and_ln71_fu_224_p2;
wire   [0:0] or_ln72_fu_236_p2;
wire   [3:0] add_ln72_fu_230_p2;
wire   [6:0] sub_ln76_fu_206_p2;
wire   [6:0] select_ln72_1_cast_fu_258_p1;
wire   [7:0] select_ln72_fu_242_p3;
wire   [6:0] add_ln76_fu_262_p2;
wire   [6:0] empty_fu_268_p1;
wire   [13:0] tmp_s_fu_272_p3;
wire   [11:0] add_ln72_1_fu_300_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            h_fu_66 <= 4'd0;
        end else if (((icmp_ln71_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            h_fu_66 <= select_ln72_1_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten314_fu_70 <= 12'd0;
        end else if (((icmp_ln71_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten314_fu_70 <= select_ln72_2_fu_306_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten327_fu_78 <= 15'd0;
        end else if (((icmp_ln71_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten327_fu_78 <= add_ln71_3_fu_147_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            o_2_fu_74 <= 4'd0;
        end else if (((icmp_ln71_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            o_2_fu_74 <= select_ln71_1_fu_182_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_fu_62 <= 8'd0;
        end else if (((icmp_ln71_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            w_fu_62 <= add_ln74_fu_294_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_286_p3 == 1'd0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_286_p3 == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_3_fu_147_p2 = (indvar_flatten327_fu_78 + 15'd1);

assign add_ln71_fu_162_p2 = (o_2_fu_74 + 4'd1);

assign add_ln72_1_fu_300_p2 = (indvar_flatten314_fu_70 + 12'd1);

assign add_ln72_fu_230_p2 = (select_ln71_fu_174_p3 + 4'd1);

assign add_ln74_fu_294_p2 = (select_ln72_fu_242_p3 + 8'd1);

assign add_ln76_fu_262_p2 = (sub_ln76_fu_206_p2 + select_ln72_1_cast_fu_258_p1);

assign and_ln71_fu_224_p2 = (xor_ln71_fu_212_p2 & icmp_ln74_fu_218_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 = zext_ln76_fu_280_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0 = 32'd0;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 = zext_ln76_fu_280_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0 = 32'd0;

assign empty_fu_268_p1 = select_ln72_fu_242_p3[6:0];

assign icmp_ln71_fu_141_p2 = ((indvar_flatten327_fu_78 == 15'd30600) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_168_p2 = ((indvar_flatten314_fu_70 == 12'd3825) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_218_p2 = ((w_fu_62 == 8'd255) ? 1'b1 : 1'b0);

assign or_ln72_fu_236_p2 = (icmp_ln72_fu_168_p2 | and_ln71_fu_224_p2);

assign select_ln71_1_cast_fu_190_p1 = select_ln71_1_fu_182_p3;

assign select_ln71_1_fu_182_p3 = ((icmp_ln72_fu_168_p2[0:0] == 1'b1) ? add_ln71_fu_162_p2 : o_2_fu_74);

assign select_ln71_fu_174_p3 = ((icmp_ln72_fu_168_p2[0:0] == 1'b1) ? 4'd0 : h_fu_66);

assign select_ln72_1_cast_fu_258_p1 = select_ln72_1_fu_250_p3;

assign select_ln72_1_fu_250_p3 = ((and_ln71_fu_224_p2[0:0] == 1'b1) ? add_ln72_fu_230_p2 : select_ln71_fu_174_p3);

assign select_ln72_2_fu_306_p3 = ((icmp_ln72_fu_168_p2[0:0] == 1'b1) ? 12'd1 : add_ln72_1_fu_300_p2);

assign select_ln72_fu_242_p3 = ((or_ln72_fu_236_p2[0:0] == 1'b1) ? 8'd0 : w_fu_62);

assign sub_ln76_fu_206_p2 = (tmp_367_cast_fu_198_p3 - select_ln71_1_cast_fu_190_p1);

assign tmp_367_cast_fu_198_p3 = {{trunc_ln76_fu_194_p1}, {4'd0}};

assign tmp_fu_286_p3 = select_ln72_fu_242_p3[32'd7];

assign tmp_s_fu_272_p3 = {{add_ln76_fu_262_p2}, {empty_fu_268_p1}};

assign trunc_ln76_fu_194_p1 = select_ln71_1_fu_182_p3[2:0];

assign xor_ln71_fu_212_p2 = (icmp_ln72_fu_168_p2 ^ 1'd1);

assign zext_ln76_fu_280_p1 = tmp_s_fu_272_p3;

endmodule //srcnn_conv1_Pipeline_CLEAR_BH_BW
