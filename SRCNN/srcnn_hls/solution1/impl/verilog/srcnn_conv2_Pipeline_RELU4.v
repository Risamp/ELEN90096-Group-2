// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_Pipeline_RELU4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln113_1,
        sext_ln110,
        sext_ln113,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_d0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_q0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_d0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_q0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_d0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_q0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_d0,
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_q0,
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0,
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0,
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0,
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_d0,
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] mul_ln113_1;
input  [29:0] sext_ln110;
input  [29:0] sext_ln113;
output  [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0;
output  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_d0;
input  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_q0;
output  [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0;
output  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_d0;
input  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_q0;
output  [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0;
output  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_d0;
input  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_q0;
output  [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0;
output   conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0;
output  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_d0;
input  [31:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_q0;
output  [9:0] conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0;
output   conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0;
output   conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0;
output  [31:0] conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_d0;
input  [31:0] conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_q0;

reg ap_idle;
reg[9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0;
reg[9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0;
reg[9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0;
reg[9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0;
reg conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0;
reg[9:0] conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0;
reg conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0;
reg conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln110_fu_206_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire  signed [30:0] sext_ln113_cast_fu_180_p1;
reg  signed [30:0] sext_ln113_cast_reg_366;
wire  signed [31:0] sext_ln110_cast_fu_184_p1;
reg  signed [31:0] sext_ln110_cast_reg_371;
wire   [7:0] add_ln110_fu_212_p2;
reg   [7:0] add_ln110_reg_379;
reg   [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_5_reg_384;
reg   [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_6_reg_389;
reg   [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_7_reg_394;
reg   [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_8_reg_399;
reg   [9:0] conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_9_reg_404;
wire   [63:0] zext_ln113_1_fu_228_p1;
reg   [7:0] phi_urem821_fu_82;
wire   [7:0] select_ln110_fu_323_p3;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_phi_urem821_load_1;
reg   [7:0] grp_load_fu_177_p1;
reg   [16:0] phi_mul819_fu_86;
wire   [16:0] add_ln110_1_fu_240_p2;
reg   [7:0] bw_2_fu_90;
reg   [7:0] ap_sig_allocacmp_bw;
wire   [2:0] trunc_ln110_1_fu_246_p4;
wire   [31:0] select_ln115_1_cast_fu_302_p1;
wire   [9:0] zext_ln113_fu_218_p1;
wire   [9:0] add_ln113_fu_222_p2;
wire   [2:0] tmp_56_fu_256_p6;
wire   [31:0] tmp_56_fu_256_p7;
wire   [30:0] trunc_ln113_fu_272_p1;
wire   [31:0] add_ln113_1_fu_276_p2;
wire   [0:0] tmp_fu_286_p3;
wire   [30:0] add_ln115_fu_281_p2;
wire   [30:0] select_ln115_fu_294_p3;
wire   [7:0] add_ln110_2_fu_311_p2;
wire   [0:0] icmp_ln110_1_fu_317_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

srcnn_mux_5_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_5_3_32_1_1_U491(
    .din0(conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_q0),
    .din1(conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_q0),
    .din2(conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_q0),
    .din3(conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_q0),
    .din4(conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_q0),
    .din5(tmp_56_fu_256_p6),
    .dout(tmp_56_fu_256_p7)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        bw_2_fu_90 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bw_2_fu_90 <= add_ln110_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        phi_mul819_fu_86 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_mul819_fu_86 <= add_ln110_1_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        phi_urem821_fu_82 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_urem821_fu_82 <= select_ln110_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln110_reg_379 <= add_ln110_fu_212_p2;
        sext_ln110_cast_reg_371 <= sext_ln110_cast_fu_184_p1;
        sext_ln113_cast_reg_366 <= sext_ln113_cast_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_5_reg_384 <= zext_ln113_1_fu_228_p1;
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_6_reg_389 <= zext_ln113_1_fu_228_p1;
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_7_reg_394 <= zext_ln113_1_fu_228_p1;
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_8_reg_399 <= zext_ln113_1_fu_228_p1;
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_9_reg_404 <= zext_ln113_1_fu_228_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln110_fu_206_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bw = 8'd0;
    end else begin
        ap_sig_allocacmp_bw = bw_2_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_urem821_load_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_phi_urem821_load_1 = phi_urem821_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd3))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 = conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_8_reg_399;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 = zext_ln113_1_fu_228_p1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd3)))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd3))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd2))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 = conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_7_reg_394;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 = zext_ln113_1_fu_228_p1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd2)))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd2))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 = conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_6_reg_389;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 = zext_ln113_1_fu_228_p1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd1)))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd0))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 = conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_5_reg_384;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 = zext_ln113_1_fu_228_p1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd0)))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln110_1_fu_246_p4 == 3'd0))) begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0 = 1'b1;
    end else begin
        conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln110_1_fu_246_p4 == 3'd3) & ~(trunc_ln110_1_fu_246_p4 == 3'd2) & ~(trunc_ln110_1_fu_246_p4 == 3'd1) & ~(trunc_ln110_1_fu_246_p4 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 = conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_9_reg_404;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 = zext_ln113_1_fu_228_p1;
    end else begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_206_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | (~(trunc_ln110_1_fu_246_p4 == 3'd3) & ~(trunc_ln110_1_fu_246_p4 == 3'd2) & ~(trunc_ln110_1_fu_246_p4 == 3'd1) & ~(trunc_ln110_1_fu_246_p4 == 3'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0 = 1'b1;
    end else begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln110_1_fu_246_p4 == 3'd3) & ~(trunc_ln110_1_fu_246_p4 == 3'd2) & ~(trunc_ln110_1_fu_246_p4 == 3'd1) & ~(trunc_ln110_1_fu_246_p4 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0 = 1'b1;
    end else begin
        conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_177_p1 = phi_urem821_fu_82;
    end else if (((icmp_ln110_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_load_fu_177_p1 = ap_sig_allocacmp_phi_urem821_load_1;
    end else begin
        grp_load_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln110_fu_206_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln110_1_fu_240_p2 = (phi_mul819_fu_86 + 17'd322);

assign add_ln110_2_fu_311_p2 = (grp_load_fu_177_p1 + 8'd1);

assign add_ln110_fu_212_p2 = (ap_sig_allocacmp_bw + 8'd1);

assign add_ln113_1_fu_276_p2 = ($signed(tmp_56_fu_256_p7) + $signed(sext_ln110_cast_reg_371));

assign add_ln113_fu_222_p2 = (mul_ln113_1 + zext_ln113_fu_218_p1);

assign add_ln115_fu_281_p2 = ($signed(trunc_ln113_fu_272_p1) + $signed(sext_ln113_cast_reg_366));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_1_d0 = select_ln115_1_cast_fu_302_p1;

assign conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_2_d0 = select_ln115_1_cast_fu_302_p1;

assign conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_3_d0 = select_ln115_1_cast_fu_302_p1;

assign conv2_ap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_4_d0 = select_ln115_1_cast_fu_302_p1;

assign conv2_mulmulmulmulap_fixed_255_255_ap_fixed_64_1_1_ap_fixed_ap_fixed_255_d0 = select_ln115_1_cast_fu_302_p1;

assign icmp_ln110_1_fu_317_p2 = ((add_ln110_2_fu_311_p2 < 8'd51) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_206_p2 = ((ap_sig_allocacmp_bw == 8'd255) ? 1'b1 : 1'b0);

assign select_ln110_fu_323_p3 = ((icmp_ln110_1_fu_317_p2[0:0] == 1'b1) ? add_ln110_2_fu_311_p2 : 8'd0);

assign select_ln115_1_cast_fu_302_p1 = select_ln115_fu_294_p3;

assign select_ln115_fu_294_p3 = ((tmp_fu_286_p3[0:0] == 1'b1) ? 31'd0 : add_ln115_fu_281_p2);

assign sext_ln110_cast_fu_184_p1 = $signed(sext_ln110);

assign sext_ln113_cast_fu_180_p1 = $signed(sext_ln113);

assign tmp_56_fu_256_p6 = {{phi_mul819_fu_86[16:14]}};

assign tmp_fu_286_p3 = add_ln113_1_fu_276_p2[32'd31];

assign trunc_ln110_1_fu_246_p4 = {{phi_mul819_fu_86[16:14]}};

assign trunc_ln113_fu_272_p1 = tmp_56_fu_256_p7[30:0];

assign zext_ln113_1_fu_228_p1 = add_ln113_fu_222_p2;

assign zext_ln113_fu_218_p1 = grp_load_fu_177_p1;

endmodule //srcnn_conv2_Pipeline_RELU4
