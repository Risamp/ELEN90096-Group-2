// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_OUT_BUFFER_TY_OUT_BUFFER_TX (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln30,
        p_shl_mid2,
        add_ln118_5,
        empty,
        ti_cast8,
        tmp_3,
        zext_ln115,
        conv1_output_ftmap,
        output_fm_buffer_1_address0,
        output_fm_buffer_1_ce0,
        output_fm_buffer_1_q0,
        grp_fu_822_p_din0,
        grp_fu_822_p_din1,
        grp_fu_822_p_opcode,
        grp_fu_822_p_dout0,
        grp_fu_822_p_ce,
        grp_fu_826_p_din0,
        grp_fu_826_p_din1,
        grp_fu_826_p_opcode,
        grp_fu_826_p_dout0,
        grp_fu_826_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [3:0] zext_ln30;
input  [7:0] p_shl_mid2;
input  [11:0] add_ln118_5;
input  [31:0] empty;
input  [3:0] ti_cast8;
input  [7:0] tmp_3;
input  [23:0] zext_ln115;
input  [63:0] conv1_output_ftmap;
output  [14:0] output_fm_buffer_1_address0;
output   output_fm_buffer_1_ce0;
input  [31:0] output_fm_buffer_1_q0;
output  [31:0] grp_fu_822_p_din0;
output  [31:0] grp_fu_822_p_din1;
output  [1:0] grp_fu_822_p_opcode;
input  [31:0] grp_fu_822_p_dout0;
output   grp_fu_822_p_ce;
output  [31:0] grp_fu_826_p_din0;
output  [31:0] grp_fu_826_p_din1;
output  [4:0] grp_fu_826_p_opcode;
input  [0:0] grp_fu_826_p_dout0;
output   grp_fu_826_p_ce;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg output_fm_buffer_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln115_fu_257_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln115_cast_fu_218_p1;
reg   [63:0] zext_ln115_cast_reg_614;
wire   [4:0] tmp_fu_251_p2;
reg   [4:0] tmp_reg_619;
reg   [4:0] tmp_reg_619_pp0_iter1_reg;
reg   [4:0] tmp_reg_619_pp0_iter2_reg;
reg   [4:0] tmp_reg_619_pp0_iter3_reg;
reg   [4:0] tmp_reg_619_pp0_iter4_reg;
reg   [4:0] tmp_reg_619_pp0_iter5_reg;
reg   [0:0] icmp_ln115_reg_624;
reg   [0:0] icmp_ln115_reg_624_pp0_iter1_reg;
reg   [0:0] icmp_ln115_reg_624_pp0_iter2_reg;
reg   [0:0] icmp_ln115_reg_624_pp0_iter3_reg;
reg   [0:0] icmp_ln115_reg_624_pp0_iter4_reg;
reg   [0:0] icmp_ln115_reg_624_pp0_iter5_reg;
wire   [0:0] icmp_ln116_fu_278_p2;
reg   [0:0] icmp_ln116_reg_628;
reg   [0:0] icmp_ln116_reg_628_pp0_iter1_reg;
reg   [0:0] icmp_ln116_reg_628_pp0_iter2_reg;
reg   [0:0] icmp_ln116_reg_628_pp0_iter3_reg;
reg   [0:0] icmp_ln116_reg_628_pp0_iter4_reg;
reg   [0:0] icmp_ln116_reg_628_pp0_iter5_reg;
wire   [4:0] tmp_mid1_fu_332_p2;
reg   [4:0] tmp_mid1_reg_633;
reg   [4:0] tmp_mid1_reg_633_pp0_iter1_reg;
reg   [4:0] tmp_mid1_reg_633_pp0_iter2_reg;
reg   [4:0] tmp_mid1_reg_633_pp0_iter3_reg;
reg   [4:0] tmp_mid1_reg_633_pp0_iter4_reg;
reg   [4:0] tmp_mid1_reg_633_pp0_iter5_reg;
wire   [4:0] add_ln118_fu_353_p2;
reg   [4:0] add_ln118_reg_643;
reg   [4:0] add_ln118_reg_643_pp0_iter1_reg;
reg   [4:0] add_ln118_reg_643_pp0_iter2_reg;
reg   [4:0] add_ln118_reg_643_pp0_iter3_reg;
reg   [4:0] add_ln118_reg_643_pp0_iter4_reg;
reg   [4:0] add_ln118_reg_643_pp0_iter5_reg;
reg   [31:0] output_fm_buffer_1_load_reg_648;
reg   [31:0] add_i4_i_reg_653;
reg   [31:0] add_i4_i_reg_653_pp0_iter6_reg;
reg   [63:0] gmem_addr_reg_659;
wire   [31:0] select_ln119_fu_564_p3;
reg   [31:0] select_ln119_reg_665;
reg    ap_condition_exit_pp0_iter6_stage0;
wire   [63:0] zext_ln118_9_fu_348_p1;
wire  signed [63:0] sext_ln118_fu_513_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] tx_fu_120;
wire   [4:0] add_ln116_fu_359_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_tx_load;
reg   [4:0] ty_fu_124;
wire   [4:0] select_ln115_1_fu_292_p3;
reg   [4:0] ap_sig_allocacmp_ty_1;
reg   [8:0] indvar_flatten_fu_128;
wire   [8:0] add_ln115_1_fu_263_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] zext_ln30_cast_fu_226_p1;
wire   [4:0] add_ln115_fu_272_p2;
wire   [11:0] zext_ln118_2_fu_300_p1;
wire   [11:0] add_ln118_6_fu_304_p2;
wire   [10:0] trunc_ln118_fu_314_p1;
wire   [14:0] p_shl_fu_318_p3;
wire   [14:0] zext_ln118_7_fu_310_p1;
wire   [4:0] select_ln115_fu_284_p3;
wire   [14:0] add_ln118_7_fu_326_p2;
wire   [14:0] zext_ln118_8_fu_338_p1;
wire   [14:0] add_ln118_8_fu_342_p2;
wire   [4:0] ti_cast8_cast_fu_222_p1;
wire   [7:0] tmp_cast_fu_380_p1;
wire   [7:0] empty_38_fu_383_p2;
wire   [17:0] shl_ln_fu_388_p3;
wire   [9:0] shl_ln118_1_fu_400_p3;
wire   [18:0] zext_ln118_fu_396_p1;
wire   [18:0] zext_ln118_1_fu_408_p1;
wire   [7:0] tmp_cast_mid1_fu_418_p1;
wire   [7:0] p_mid1_fu_421_p2;
wire   [17:0] shl_ln118_mid1_fu_426_p3;
wire   [9:0] shl_ln118_1_mid1_fu_438_p3;
wire   [18:0] zext_ln118_3_fu_434_p1;
wire   [18:0] zext_ln118_5_fu_446_p1;
wire   [18:0] sub_ln118_1_fu_450_p2;
wire   [18:0] sub_ln118_fu_412_p2;
wire   [7:0] zext_ln118_4_fu_463_p1;
wire   [7:0] add_ln118_1_fu_466_p2;
wire   [9:0] shl_ln118_2_fu_471_p3;
wire   [18:0] select_ln115_2_fu_456_p3;
wire   [18:0] zext_ln118_6_fu_479_p1;
wire   [18:0] add_ln118_4_fu_487_p2;
wire  signed [63:0] sext_ln118_1_fu_493_p1;
wire   [63:0] add_ln118_2_fu_483_p2;
wire   [63:0] add_ln118_3_fu_497_p2;
wire   [61:0] trunc_ln4_fu_503_p4;
wire   [31:0] bitcast_ln118_fu_523_p1;
wire   [7:0] tmp_1_fu_526_p4;
wire   [22:0] trunc_ln119_fu_536_p1;
wire   [0:0] icmp_ln119_1_fu_546_p2;
wire   [0:0] icmp_ln119_fu_540_p2;
wire   [0:0] or_ln119_fu_552_p2;
wire   [0:0] and_ln119_fu_558_p2;
reg    grp_fu_209_ce;
reg    grp_fu_213_ce;
reg    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter6_stage0)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln115_fu_257_p2 == 1'd0))) begin
            indvar_flatten_fu_128 <= add_ln115_1_fu_263_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_128 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln115_fu_257_p2 == 1'd0))) begin
            tx_fu_120 <= add_ln116_fu_359_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            tx_fu_120 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln115_fu_257_p2 == 1'd0))) begin
            ty_fu_124 <= select_ln115_1_fu_292_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ty_fu_124 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_624_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_i4_i_reg_653 <= grp_fu_822_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_i4_i_reg_653_pp0_iter6_reg <= add_i4_i_reg_653;
        add_ln118_reg_643_pp0_iter2_reg <= add_ln118_reg_643_pp0_iter1_reg;
        add_ln118_reg_643_pp0_iter3_reg <= add_ln118_reg_643_pp0_iter2_reg;
        add_ln118_reg_643_pp0_iter4_reg <= add_ln118_reg_643_pp0_iter3_reg;
        add_ln118_reg_643_pp0_iter5_reg <= add_ln118_reg_643_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln115_reg_624_pp0_iter2_reg <= icmp_ln115_reg_624_pp0_iter1_reg;
        icmp_ln115_reg_624_pp0_iter3_reg <= icmp_ln115_reg_624_pp0_iter2_reg;
        icmp_ln115_reg_624_pp0_iter4_reg <= icmp_ln115_reg_624_pp0_iter3_reg;
        icmp_ln115_reg_624_pp0_iter5_reg <= icmp_ln115_reg_624_pp0_iter4_reg;
        icmp_ln116_reg_628_pp0_iter2_reg <= icmp_ln116_reg_628_pp0_iter1_reg;
        icmp_ln116_reg_628_pp0_iter3_reg <= icmp_ln116_reg_628_pp0_iter2_reg;
        icmp_ln116_reg_628_pp0_iter4_reg <= icmp_ln116_reg_628_pp0_iter3_reg;
        icmp_ln116_reg_628_pp0_iter5_reg <= icmp_ln116_reg_628_pp0_iter4_reg;
        select_ln119_reg_665 <= select_ln119_fu_564_p3;
        tmp_mid1_reg_633_pp0_iter2_reg <= tmp_mid1_reg_633_pp0_iter1_reg;
        tmp_mid1_reg_633_pp0_iter3_reg <= tmp_mid1_reg_633_pp0_iter2_reg;
        tmp_mid1_reg_633_pp0_iter4_reg <= tmp_mid1_reg_633_pp0_iter3_reg;
        tmp_mid1_reg_633_pp0_iter5_reg <= tmp_mid1_reg_633_pp0_iter4_reg;
        tmp_reg_619_pp0_iter2_reg <= tmp_reg_619_pp0_iter1_reg;
        tmp_reg_619_pp0_iter3_reg <= tmp_reg_619_pp0_iter2_reg;
        tmp_reg_619_pp0_iter4_reg <= tmp_reg_619_pp0_iter3_reg;
        tmp_reg_619_pp0_iter5_reg <= tmp_reg_619_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln115_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln118_reg_643 <= add_ln118_fu_353_p2;
        icmp_ln116_reg_628 <= icmp_ln116_fu_278_p2;
        tmp_mid1_reg_633 <= tmp_mid1_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln118_reg_643_pp0_iter1_reg <= add_ln118_reg_643;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln115_reg_624 <= icmp_ln115_fu_257_p2;
        icmp_ln115_reg_624_pp0_iter1_reg <= icmp_ln115_reg_624;
        icmp_ln116_reg_628_pp0_iter1_reg <= icmp_ln116_reg_628;
        tmp_mid1_reg_633_pp0_iter1_reg <= tmp_mid1_reg_633;
        tmp_reg_619 <= tmp_fu_251_p2;
        tmp_reg_619_pp0_iter1_reg <= tmp_reg_619;
        zext_ln115_cast_reg_614[23 : 0] <= zext_ln115_cast_fu_218_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_624_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_659 <= sext_ln118_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_624 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_fm_buffer_1_load_reg_648 <= output_fm_buffer_1_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln115_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln115_reg_624_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_128;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_tx_load = 5'd0;
    end else begin
        ap_sig_allocacmp_tx_load = tx_fu_120;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ty_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_ty_1 = ty_fu_124;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_209_ce = 1'b1;
    end else begin
        grp_fu_209_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_213_ce = 1'b1;
    end else begin
        grp_fu_213_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_fm_buffer_1_ce0 = 1'b1;
    end else begin
        output_fm_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_1_fu_263_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln115_fu_272_p2 = (ap_sig_allocacmp_ty_1 + 5'd1);

assign add_ln116_fu_359_p2 = (select_ln115_fu_284_p3 + 5'd1);

assign add_ln118_1_fu_466_p2 = (zext_ln118_4_fu_463_p1 + tmp_3);

assign add_ln118_2_fu_483_p2 = (zext_ln115_cast_reg_614 + conv1_output_ftmap);

assign add_ln118_3_fu_497_p2 = ($signed(sext_ln118_1_fu_493_p1) + $signed(add_ln118_2_fu_483_p2));

assign add_ln118_4_fu_487_p2 = (select_ln115_2_fu_456_p3 + zext_ln118_6_fu_479_p1);

assign add_ln118_6_fu_304_p2 = (add_ln118_5 + zext_ln118_2_fu_300_p1);

assign add_ln118_7_fu_326_p2 = (p_shl_fu_318_p3 + zext_ln118_7_fu_310_p1);

assign add_ln118_8_fu_342_p2 = (add_ln118_7_fu_326_p2 + zext_ln118_8_fu_338_p1);

assign add_ln118_fu_353_p2 = (ti_cast8_cast_fu_222_p1 + select_ln115_fu_284_p3);

assign and_ln119_fu_558_p2 = (or_ln119_fu_552_p2 & grp_fu_826_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter13 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln118_fu_523_p1 = add_i4_i_reg_653_pp0_iter6_reg;

assign empty_38_fu_383_p2 = (tmp_cast_fu_380_p1 + p_shl_mid2);

assign grp_fu_822_p_ce = grp_fu_209_ce;

assign grp_fu_822_p_din0 = output_fm_buffer_1_load_reg_648;

assign grp_fu_822_p_din1 = empty;

assign grp_fu_822_p_opcode = 2'd0;

assign grp_fu_826_p_ce = grp_fu_213_ce;

assign grp_fu_826_p_din0 = add_i4_i_reg_653;

assign grp_fu_826_p_din1 = 32'd0;

assign grp_fu_826_p_opcode = 5'd4;

assign icmp_ln115_fu_257_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd289) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_278_p2 = ((ap_sig_allocacmp_tx_load == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln119_1_fu_546_p2 = ((trunc_ln119_fu_536_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_540_p2 = ((tmp_1_fu_526_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_659;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = select_ln119_reg_665;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln119_fu_552_p2 = (icmp_ln119_fu_540_p2 | icmp_ln119_1_fu_546_p2);

assign output_fm_buffer_1_address0 = zext_ln118_9_fu_348_p1;

assign p_mid1_fu_421_p2 = (tmp_cast_mid1_fu_418_p1 + p_shl_mid2);

assign p_shl_fu_318_p3 = {{trunc_ln118_fu_314_p1}, {4'd0}};

assign select_ln115_1_fu_292_p3 = ((icmp_ln116_fu_278_p2[0:0] == 1'b1) ? add_ln115_fu_272_p2 : ap_sig_allocacmp_ty_1);

assign select_ln115_2_fu_456_p3 = ((icmp_ln116_reg_628_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln118_1_fu_450_p2 : sub_ln118_fu_412_p2);

assign select_ln115_fu_284_p3 = ((icmp_ln116_fu_278_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_tx_load);

assign select_ln119_fu_564_p3 = ((and_ln119_fu_558_p2[0:0] == 1'b1) ? 32'd0 : bitcast_ln118_fu_523_p1);

assign sext_ln118_1_fu_493_p1 = $signed(add_ln118_4_fu_487_p2);

assign sext_ln118_fu_513_p1 = $signed(trunc_ln4_fu_503_p4);

assign shl_ln118_1_fu_400_p3 = {{empty_38_fu_383_p2}, {2'd0}};

assign shl_ln118_1_mid1_fu_438_p3 = {{p_mid1_fu_421_p2}, {2'd0}};

assign shl_ln118_2_fu_471_p3 = {{add_ln118_1_fu_466_p2}, {2'd0}};

assign shl_ln118_mid1_fu_426_p3 = {{p_mid1_fu_421_p2}, {10'd0}};

assign shl_ln_fu_388_p3 = {{empty_38_fu_383_p2}, {10'd0}};

assign sub_ln118_1_fu_450_p2 = (zext_ln118_3_fu_434_p1 - zext_ln118_5_fu_446_p1);

assign sub_ln118_fu_412_p2 = (zext_ln118_fu_396_p1 - zext_ln118_1_fu_408_p1);

assign ti_cast8_cast_fu_222_p1 = ti_cast8;

assign tmp_1_fu_526_p4 = {{bitcast_ln118_fu_523_p1[30:23]}};

assign tmp_cast_fu_380_p1 = tmp_reg_619_pp0_iter5_reg;

assign tmp_cast_mid1_fu_418_p1 = tmp_mid1_reg_633_pp0_iter5_reg;

assign tmp_fu_251_p2 = (zext_ln30_cast_fu_226_p1 + ap_sig_allocacmp_ty_1);

assign tmp_mid1_fu_332_p2 = (zext_ln30_cast_fu_226_p1 + add_ln115_fu_272_p2);

assign trunc_ln118_fu_314_p1 = add_ln118_6_fu_304_p2[10:0];

assign trunc_ln119_fu_536_p1 = bitcast_ln118_fu_523_p1[22:0];

assign trunc_ln4_fu_503_p4 = {{add_ln118_3_fu_497_p2[63:2]}};

assign zext_ln115_cast_fu_218_p1 = zext_ln115;

assign zext_ln118_1_fu_408_p1 = shl_ln118_1_fu_400_p3;

assign zext_ln118_2_fu_300_p1 = select_ln115_1_fu_292_p3;

assign zext_ln118_3_fu_434_p1 = shl_ln118_mid1_fu_426_p3;

assign zext_ln118_4_fu_463_p1 = add_ln118_reg_643_pp0_iter5_reg;

assign zext_ln118_5_fu_446_p1 = shl_ln118_1_mid1_fu_438_p3;

assign zext_ln118_6_fu_479_p1 = shl_ln118_2_fu_471_p3;

assign zext_ln118_7_fu_310_p1 = add_ln118_6_fu_304_p2;

assign zext_ln118_8_fu_338_p1 = select_ln115_fu_284_p3;

assign zext_ln118_9_fu_348_p1 = add_ln118_8_fu_342_p2;

assign zext_ln118_fu_396_p1 = shl_ln_fu_388_p3;

assign zext_ln30_cast_fu_226_p1 = zext_ln30;

always @ (posedge ap_clk) begin
    zext_ln115_cast_reg_614[63:24] <= 40'b0000000000000000000000000000000000000000;
end

endmodule //srcnn_srcnn_Pipeline_OUT_BUFFER_TY_OUT_BUFFER_TX
