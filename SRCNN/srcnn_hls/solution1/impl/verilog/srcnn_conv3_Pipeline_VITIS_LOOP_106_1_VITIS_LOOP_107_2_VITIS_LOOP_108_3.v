// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_i3_AWVALID,
        m_axi_i3_AWREADY,
        m_axi_i3_AWADDR,
        m_axi_i3_AWID,
        m_axi_i3_AWLEN,
        m_axi_i3_AWSIZE,
        m_axi_i3_AWBURST,
        m_axi_i3_AWLOCK,
        m_axi_i3_AWCACHE,
        m_axi_i3_AWPROT,
        m_axi_i3_AWQOS,
        m_axi_i3_AWREGION,
        m_axi_i3_AWUSER,
        m_axi_i3_WVALID,
        m_axi_i3_WREADY,
        m_axi_i3_WDATA,
        m_axi_i3_WSTRB,
        m_axi_i3_WLAST,
        m_axi_i3_WID,
        m_axi_i3_WUSER,
        m_axi_i3_ARVALID,
        m_axi_i3_ARREADY,
        m_axi_i3_ARADDR,
        m_axi_i3_ARID,
        m_axi_i3_ARLEN,
        m_axi_i3_ARSIZE,
        m_axi_i3_ARBURST,
        m_axi_i3_ARLOCK,
        m_axi_i3_ARCACHE,
        m_axi_i3_ARPROT,
        m_axi_i3_ARQOS,
        m_axi_i3_ARREGION,
        m_axi_i3_ARUSER,
        m_axi_i3_RVALID,
        m_axi_i3_RREADY,
        m_axi_i3_RDATA,
        m_axi_i3_RLAST,
        m_axi_i3_RID,
        m_axi_i3_RFIFONUM,
        m_axi_i3_RUSER,
        m_axi_i3_RRESP,
        m_axi_i3_BVALID,
        m_axi_i3_BREADY,
        m_axi_i3_BRESP,
        m_axi_i3_BID,
        m_axi_i3_BUSER,
        zext_ln31,
        zext_ln55,
        shl_ln2,
        select_ln31,
        input_ftmap,
        input_fm_buffer_address0,
        input_fm_buffer_ce0,
        input_fm_buffer_we0,
        input_fm_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_i3_AWVALID;
input   m_axi_i3_AWREADY;
output  [63:0] m_axi_i3_AWADDR;
output  [0:0] m_axi_i3_AWID;
output  [31:0] m_axi_i3_AWLEN;
output  [2:0] m_axi_i3_AWSIZE;
output  [1:0] m_axi_i3_AWBURST;
output  [1:0] m_axi_i3_AWLOCK;
output  [3:0] m_axi_i3_AWCACHE;
output  [2:0] m_axi_i3_AWPROT;
output  [3:0] m_axi_i3_AWQOS;
output  [3:0] m_axi_i3_AWREGION;
output  [0:0] m_axi_i3_AWUSER;
output   m_axi_i3_WVALID;
input   m_axi_i3_WREADY;
output  [31:0] m_axi_i3_WDATA;
output  [3:0] m_axi_i3_WSTRB;
output   m_axi_i3_WLAST;
output  [0:0] m_axi_i3_WID;
output  [0:0] m_axi_i3_WUSER;
output   m_axi_i3_ARVALID;
input   m_axi_i3_ARREADY;
output  [63:0] m_axi_i3_ARADDR;
output  [0:0] m_axi_i3_ARID;
output  [31:0] m_axi_i3_ARLEN;
output  [2:0] m_axi_i3_ARSIZE;
output  [1:0] m_axi_i3_ARBURST;
output  [1:0] m_axi_i3_ARLOCK;
output  [3:0] m_axi_i3_ARCACHE;
output  [2:0] m_axi_i3_ARPROT;
output  [3:0] m_axi_i3_ARQOS;
output  [3:0] m_axi_i3_ARREGION;
output  [0:0] m_axi_i3_ARUSER;
input   m_axi_i3_RVALID;
output   m_axi_i3_RREADY;
input  [31:0] m_axi_i3_RDATA;
input   m_axi_i3_RLAST;
input  [0:0] m_axi_i3_RID;
input  [12:0] m_axi_i3_RFIFONUM;
input  [0:0] m_axi_i3_RUSER;
input  [1:0] m_axi_i3_RRESP;
input   m_axi_i3_BVALID;
output   m_axi_i3_BREADY;
input  [1:0] m_axi_i3_BRESP;
input  [0:0] m_axi_i3_BID;
input  [0:0] m_axi_i3_BUSER;
input  [7:0] zext_ln31;
input  [7:0] zext_ln55;
input  [4:0] shl_ln2;
input  [3:0] select_ln31;
input  [63:0] input_ftmap;
output  [11:0] input_fm_buffer_address0;
output   input_fm_buffer_ce0;
output   input_fm_buffer_we0;
output  [31:0] input_fm_buffer_d0;

reg ap_idle;
reg m_axi_i3_ARVALID;
reg m_axi_i3_RREADY;
reg input_fm_buffer_ce0;
reg input_fm_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln106_fu_251_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i3_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    i3_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln55_cast2_fu_207_p1;
reg   [9:0] zext_ln55_cast2_reg_901;
wire   [9:0] zext_ln31_cast1_fu_211_p1;
reg   [9:0] zext_ln31_cast1_reg_907;
wire   [8:0] zext_ln55_cast_fu_215_p1;
reg   [8:0] zext_ln55_cast_reg_913;
wire   [8:0] zext_ln31_cast_fu_219_p1;
reg   [8:0] zext_ln31_cast_reg_918;
reg   [0:0] icmp_ln106_reg_923;
wire   [0:0] icmp_ln107_fu_266_p2;
reg   [0:0] icmp_ln107_reg_927;
wire   [4:0] select_ln107_fu_559_p3;
reg   [4:0] select_ln107_reg_936;
reg   [4:0] select_ln107_reg_936_pp0_iter2_reg;
reg   [63:0] i3_addr_reg_941;
wire   [11:0] grp_fu_840_p4;
reg   [11:0] add_ln115_4_reg_952;
reg   [11:0] add_ln115_4_reg_952_pp0_iter5_reg;
reg   [11:0] add_ln115_4_reg_952_pp0_iter6_reg;
reg   [11:0] add_ln115_4_reg_952_pp0_iter7_reg;
reg   [11:0] add_ln115_4_reg_952_pp0_iter8_reg;
reg   [11:0] add_ln115_4_reg_952_pp0_iter9_reg;
reg   [11:0] add_ln115_4_reg_952_pp0_iter10_reg;
reg   [31:0] i3_addr_read_reg_957;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln115_3_fu_832_p1;
wire  signed [63:0] sext_ln115_1_fu_798_p1;
reg   [4:0] bx_fu_132;
wire   [4:0] add_ln108_fu_808_p2;
wire    ap_loop_init;
reg   [4:0] by_fu_136;
wire   [4:0] select_ln107_1_fu_567_p3;
reg   [9:0] indvar_flatten_fu_140;
wire   [9:0] select_ln107_3_fu_278_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] nin_fu_144;
wire   [3:0] select_ln106_1_fu_412_p3;
reg   [11:0] indvar_flatten62_fu_148;
wire   [11:0] add_ln106_2_fu_257_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten62_load;
wire   [9:0] add_ln107_1_fu_272_p2;
wire   [5:0] zext_ln107_fu_299_p1;
wire   [5:0] tmp_fu_303_p2;
wire  signed [9:0] tmp_cast_fu_309_p1;
wire   [9:0] empty_fu_313_p2;
wire   [0:0] tmp_6_fu_337_p3;
wire   [0:0] tmp_5_fu_318_p3;
wire   [0:0] icmp_ln55_fu_326_p2;
wire   [0:0] or_ln54_fu_353_p2;
wire   [9:0] select_ln54_fu_345_p3;
wire   [9:0] add_ln55_fu_332_p2;
wire   [9:0] yClamped_fu_359_p3;
wire   [11:0] shl_ln115_1_fu_375_p3;
wire   [19:0] shl_ln3_fu_367_p3;
wire  signed [19:0] sext_ln115_fu_383_p1;
wire   [3:0] add_ln106_fu_399_p2;
wire   [3:0] mul_ln115_fu_423_p0;
wire   [5:0] mul_ln115_fu_423_p1;
wire   [4:0] zext_ln106_fu_429_p1;
wire   [4:0] add_ln106_1_fu_433_p2;
wire   [4:0] mul_ln106_fu_442_p0;
wire   [18:0] mul_ln106_fu_442_p1;
wire   [22:0] mul_ln106_fu_442_p2;
wire   [8:0] p_mid122_fu_452_p2;
wire   [0:0] tmp_8_fu_470_p3;
wire   [0:0] tmp_7_fu_457_p3;
wire   [8:0] select_ln54_2_fu_478_p3;
wire   [8:0] add_ln55_1_fu_465_p2;
wire   [8:0] select_ln54_3_fu_486_p3;
wire   [18:0] shl_ln115_mid_fu_494_p3;
wire   [10:0] shl_ln115_1_mid_fu_506_p3;
wire  signed [19:0] sext_ln115_6_fu_502_p1;
wire  signed [19:0] sext_ln115_4_fu_514_p1;
wire   [19:0] sub_ln115_1_fu_518_p2;
wire   [19:0] sub_ln115_fu_387_p2;
wire   [0:0] icmp_ln108_fu_536_p2;
wire   [0:0] xor_ln106_fu_531_p2;
wire   [4:0] select_ln106_fu_405_p3;
wire   [0:0] and_ln106_fu_542_p2;
wire   [0:0] or_ln107_fu_554_p2;
wire   [4:0] add_ln107_fu_548_p2;
wire   [5:0] zext_ln107_2_fu_579_p1;
wire   [5:0] tmp_mid1_fu_583_p2;
wire  signed [9:0] tmp_cast_mid1_fu_589_p1;
wire   [9:0] p_mid1_fu_593_p2;
wire   [0:0] tmp_10_fu_617_p3;
wire   [0:0] tmp_9_fu_598_p3;
wire   [0:0] icmp_ln55_2_fu_606_p2;
wire   [0:0] or_ln54_2_fu_633_p2;
wire   [9:0] select_ln54_4_fu_625_p3;
wire   [9:0] add_ln55_2_fu_612_p2;
wire   [9:0] select_ln54_5_fu_639_p3;
wire   [11:0] shl_ln115_1_mid1_fu_655_p3;
wire   [19:0] shl_ln115_mid1_fu_647_p3;
wire  signed [19:0] sext_ln115_5_fu_663_p1;
wire   [19:0] sub_ln115_2_fu_667_p2;
wire   [19:0] select_ln106_2_fu_524_p3;
wire   [7:0] tmp4_fu_685_p3;
wire   [5:0] trunc_ln111_cast_fu_681_p1;
wire   [5:0] add_ln111_1_fu_695_p2;
wire  signed [9:0] sext_ln111_fu_701_p1;
wire   [9:0] zext_ln111_fu_691_p1;
wire   [9:0] add_ln111_fu_705_p2;
wire   [0:0] tmp_11_fu_711_p3;
wire   [0:0] icmp_ln55_1_fu_719_p2;
wire   [0:0] tmp_12_fu_725_p3;
wire   [0:0] or_ln54_1_fu_733_p2;
wire   [9:0] select_ln54_6_fu_739_p3;
wire   [9:0] select_ln54_7_fu_747_p3;
wire   [11:0] shl_ln115_2_fu_755_p3;
wire   [63:0] zext_ln106_2_fu_448_p1;
wire   [19:0] select_ln107_2_fu_673_p3;
wire  signed [19:0] sext_ln115_2_fu_763_p1;
wire   [19:0] add_ln115_1_fu_772_p2;
wire  signed [63:0] sext_ln115_3_fu_778_p1;
wire   [63:0] add_ln115_fu_767_p2;
wire   [63:0] add_ln115_2_fu_782_p2;
wire   [61:0] trunc_ln7_fu_788_p4;
wire   [8:0] mul_ln115_fu_423_p2;
wire   [4:0] grp_fu_840_p1;
wire   [4:0] grp_fu_840_p2;
wire   [4:0] grp_fu_840_p3;
reg    grp_fu_840_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] grp_fu_840_p10;
wire   [11:0] grp_fu_840_p30;
wire   [22:0] mul_ln106_fu_442_p00;
wire   [8:0] mul_ln115_fu_423_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U199(
    .din0(mul_ln115_fu_423_p0),
    .din1(mul_ln115_fu_423_p1),
    .dout(mul_ln115_fu_423_p2)
);

srcnn_mul_5ns_19ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 23 ))
mul_5ns_19ns_23_1_1_U200(
    .din0(mul_ln106_fu_442_p0),
    .din1(mul_ln106_fu_442_p1),
    .dout(mul_ln106_fu_442_p2)
);

srcnn_ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln115_fu_423_p2),
    .din1(grp_fu_840_p1),
    .din2(grp_fu_840_p2),
    .din3(grp_fu_840_p3),
    .ce(grp_fu_840_ce),
    .dout(grp_fu_840_p4)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bx_fu_132 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln106_reg_923 == 1'd0))) begin
            bx_fu_132 <= add_ln108_fu_808_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            by_fu_136 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln106_reg_923 == 1'd0))) begin
            by_fu_136 <= select_ln107_1_fu_567_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_251_p2 == 1'd0))) begin
            indvar_flatten62_fu_148 <= add_ln106_2_fu_257_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten62_fu_148 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_251_p2 == 1'd0))) begin
            indvar_flatten_fu_140 <= select_ln107_3_fu_278_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            nin_fu_144 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln106_reg_923 == 1'd0))) begin
            nin_fu_144 <= select_ln106_1_fu_412_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln115_4_reg_952 <= grp_fu_840_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln115_4_reg_952_pp0_iter10_reg <= add_ln115_4_reg_952_pp0_iter9_reg;
        add_ln115_4_reg_952_pp0_iter5_reg <= add_ln115_4_reg_952;
        add_ln115_4_reg_952_pp0_iter6_reg <= add_ln115_4_reg_952_pp0_iter5_reg;
        add_ln115_4_reg_952_pp0_iter7_reg <= add_ln115_4_reg_952_pp0_iter6_reg;
        add_ln115_4_reg_952_pp0_iter8_reg <= add_ln115_4_reg_952_pp0_iter7_reg;
        add_ln115_4_reg_952_pp0_iter9_reg <= add_ln115_4_reg_952_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i3_addr_read_reg_957 <= m_axi_i3_RDATA;
        select_ln107_reg_936_pp0_iter2_reg <= select_ln107_reg_936;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln106_reg_923 <= icmp_ln106_fu_251_p2;
        zext_ln31_cast1_reg_907[7 : 0] <= zext_ln31_cast1_fu_211_p1[7 : 0];
        zext_ln31_cast_reg_918[7 : 0] <= zext_ln31_cast_fu_219_p1[7 : 0];
        zext_ln55_cast2_reg_901[7 : 0] <= zext_ln55_cast2_fu_207_p1[7 : 0];
        zext_ln55_cast_reg_913[7 : 0] <= zext_ln55_cast_fu_215_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i3_addr_reg_941 <= sext_ln115_1_fu_798_p1;
        select_ln107_reg_936 <= select_ln107_fu_559_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_251_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln107_reg_927 <= icmp_ln107_fu_266_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_251_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_reg_923 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten62_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten62_load = indvar_flatten62_fu_148;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_140;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_840_ce = 1'b1;
    end else begin
        grp_fu_840_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        i3_blk_n_AR = m_axi_i3_ARREADY;
    end else begin
        i3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        i3_blk_n_R = m_axi_i3_RVALID;
    end else begin
        i3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_i3_ARVALID = 1'b1;
    end else begin
        m_axi_i3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_i3_RREADY = 1'b1;
    end else begin
        m_axi_i3_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_1_fu_433_p2 = (zext_ln106_fu_429_p1 + shl_ln2);

assign add_ln106_2_fu_257_p2 = (ap_sig_allocacmp_indvar_flatten62_load + 12'd1);

assign add_ln106_fu_399_p2 = (nin_fu_144 + 4'd1);

assign add_ln107_1_fu_272_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln107_fu_548_p2 = (select_ln106_fu_405_p3 + 5'd1);

assign add_ln108_fu_808_p2 = (select_ln107_fu_559_p3 + 5'd1);

assign add_ln111_1_fu_695_p2 = ($signed(trunc_ln111_cast_fu_681_p1) + $signed(6'd62));

assign add_ln111_fu_705_p2 = ($signed(sext_ln111_fu_701_p1) + $signed(zext_ln111_fu_691_p1));

assign add_ln115_1_fu_772_p2 = ($signed(select_ln107_2_fu_673_p3) + $signed(sext_ln115_2_fu_763_p1));

assign add_ln115_2_fu_782_p2 = ($signed(sext_ln115_3_fu_778_p1) + $signed(add_ln115_fu_767_p2));

assign add_ln115_fu_767_p2 = (zext_ln106_2_fu_448_p1 + input_ftmap);

assign add_ln55_1_fu_465_p2 = ($signed(zext_ln55_cast_reg_913) + $signed(9'd510));

assign add_ln55_2_fu_612_p2 = ($signed(tmp_cast_mid1_fu_589_p1) + $signed(zext_ln55_cast2_reg_901));

assign add_ln55_fu_332_p2 = ($signed(tmp_cast_fu_309_p1) + $signed(zext_ln55_cast2_reg_901));

assign and_ln106_fu_542_p2 = (xor_ln106_fu_531_p2 & icmp_ln108_fu_536_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_i3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((m_axi_i3_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_i3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((m_axi_i3_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = (m_axi_i3_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_313_p2 = ($signed(tmp_cast_fu_309_p1) + $signed(zext_ln31_cast1_reg_907));

assign grp_fu_840_p1 = grp_fu_840_p10;

assign grp_fu_840_p10 = select_ln107_1_fu_567_p3;

assign grp_fu_840_p2 = 12'd21;

assign grp_fu_840_p3 = grp_fu_840_p30;

assign grp_fu_840_p30 = select_ln107_reg_936_pp0_iter2_reg;

assign icmp_ln106_fu_251_p2 = ((ap_sig_allocacmp_indvar_flatten62_load == 12'd3528) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_266_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd441) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_536_p2 = ((bx_fu_132 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_719_p2 = (($signed(add_ln111_fu_705_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_606_p2 = (($signed(p_mid1_fu_593_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_326_p2 = (($signed(empty_fu_313_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign input_fm_buffer_address0 = zext_ln115_3_fu_832_p1;

assign input_fm_buffer_d0 = i3_addr_read_reg_957;

assign m_axi_i3_ARADDR = i3_addr_reg_941;

assign m_axi_i3_ARBURST = 2'd0;

assign m_axi_i3_ARCACHE = 4'd0;

assign m_axi_i3_ARID = 1'd0;

assign m_axi_i3_ARLEN = 32'd1;

assign m_axi_i3_ARLOCK = 2'd0;

assign m_axi_i3_ARPROT = 3'd0;

assign m_axi_i3_ARQOS = 4'd0;

assign m_axi_i3_ARREGION = 4'd0;

assign m_axi_i3_ARSIZE = 3'd0;

assign m_axi_i3_ARUSER = 1'd0;

assign m_axi_i3_AWADDR = 64'd0;

assign m_axi_i3_AWBURST = 2'd0;

assign m_axi_i3_AWCACHE = 4'd0;

assign m_axi_i3_AWID = 1'd0;

assign m_axi_i3_AWLEN = 32'd0;

assign m_axi_i3_AWLOCK = 2'd0;

assign m_axi_i3_AWPROT = 3'd0;

assign m_axi_i3_AWQOS = 4'd0;

assign m_axi_i3_AWREGION = 4'd0;

assign m_axi_i3_AWSIZE = 3'd0;

assign m_axi_i3_AWUSER = 1'd0;

assign m_axi_i3_AWVALID = 1'b0;

assign m_axi_i3_BREADY = 1'b0;

assign m_axi_i3_WDATA = 32'd0;

assign m_axi_i3_WID = 1'd0;

assign m_axi_i3_WLAST = 1'b0;

assign m_axi_i3_WSTRB = 4'd0;

assign m_axi_i3_WUSER = 1'd0;

assign m_axi_i3_WVALID = 1'b0;

assign mul_ln106_fu_442_p0 = mul_ln106_fu_442_p00;

assign mul_ln106_fu_442_p00 = add_ln106_1_fu_433_p2;

assign mul_ln106_fu_442_p1 = 23'd260100;

assign mul_ln115_fu_423_p0 = mul_ln115_fu_423_p00;

assign mul_ln115_fu_423_p00 = select_ln106_1_fu_412_p3;

assign mul_ln115_fu_423_p1 = 9'd21;

assign or_ln107_fu_554_p2 = (icmp_ln107_reg_927 | and_ln106_fu_542_p2);

assign or_ln54_1_fu_733_p2 = (tmp_11_fu_711_p3 | icmp_ln55_1_fu_719_p2);

assign or_ln54_2_fu_633_p2 = (tmp_9_fu_598_p3 | icmp_ln55_2_fu_606_p2);

assign or_ln54_fu_353_p2 = (tmp_5_fu_318_p3 | icmp_ln55_fu_326_p2);

assign p_mid122_fu_452_p2 = ($signed(zext_ln31_cast_reg_918) + $signed(9'd510));

assign p_mid1_fu_593_p2 = ($signed(tmp_cast_mid1_fu_589_p1) + $signed(zext_ln31_cast1_reg_907));

assign select_ln106_1_fu_412_p3 = ((icmp_ln107_reg_927[0:0] == 1'b1) ? add_ln106_fu_399_p2 : nin_fu_144);

assign select_ln106_2_fu_524_p3 = ((icmp_ln107_reg_927[0:0] == 1'b1) ? sub_ln115_1_fu_518_p2 : sub_ln115_fu_387_p2);

assign select_ln106_fu_405_p3 = ((icmp_ln107_reg_927[0:0] == 1'b1) ? 5'd0 : by_fu_136);

assign select_ln107_1_fu_567_p3 = ((and_ln106_fu_542_p2[0:0] == 1'b1) ? add_ln107_fu_548_p2 : select_ln106_fu_405_p3);

assign select_ln107_2_fu_673_p3 = ((and_ln106_fu_542_p2[0:0] == 1'b1) ? sub_ln115_2_fu_667_p2 : select_ln106_2_fu_524_p3);

assign select_ln107_3_fu_278_p3 = ((icmp_ln107_fu_266_p2[0:0] == 1'b1) ? 10'd1 : add_ln107_1_fu_272_p2);

assign select_ln107_fu_559_p3 = ((or_ln107_fu_554_p2[0:0] == 1'b1) ? 5'd0 : bx_fu_132);

assign select_ln54_2_fu_478_p3 = ((tmp_8_fu_470_p3[0:0] == 1'b1) ? 9'd0 : 9'd254);

assign select_ln54_3_fu_486_p3 = ((tmp_7_fu_457_p3[0:0] == 1'b1) ? select_ln54_2_fu_478_p3 : add_ln55_1_fu_465_p2);

assign select_ln54_4_fu_625_p3 = ((tmp_10_fu_617_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln54_5_fu_639_p3 = ((or_ln54_2_fu_633_p2[0:0] == 1'b1) ? select_ln54_4_fu_625_p3 : add_ln55_2_fu_612_p2);

assign select_ln54_6_fu_739_p3 = ((tmp_12_fu_725_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln54_7_fu_747_p3 = ((or_ln54_1_fu_733_p2[0:0] == 1'b1) ? select_ln54_6_fu_739_p3 : add_ln111_fu_705_p2);

assign select_ln54_fu_345_p3 = ((tmp_6_fu_337_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln111_fu_701_p1 = $signed(add_ln111_1_fu_695_p2);

assign sext_ln115_1_fu_798_p1 = $signed(trunc_ln7_fu_788_p4);

assign sext_ln115_2_fu_763_p1 = $signed(shl_ln115_2_fu_755_p3);

assign sext_ln115_3_fu_778_p1 = $signed(add_ln115_1_fu_772_p2);

assign sext_ln115_4_fu_514_p1 = $signed(shl_ln115_1_mid_fu_506_p3);

assign sext_ln115_5_fu_663_p1 = $signed(shl_ln115_1_mid1_fu_655_p3);

assign sext_ln115_6_fu_502_p1 = $signed(shl_ln115_mid_fu_494_p3);

assign sext_ln115_fu_383_p1 = $signed(shl_ln115_1_fu_375_p3);

assign shl_ln115_1_fu_375_p3 = {{yClamped_fu_359_p3}, {2'd0}};

assign shl_ln115_1_mid1_fu_655_p3 = {{select_ln54_5_fu_639_p3}, {2'd0}};

assign shl_ln115_1_mid_fu_506_p3 = {{select_ln54_3_fu_486_p3}, {2'd0}};

assign shl_ln115_2_fu_755_p3 = {{select_ln54_7_fu_747_p3}, {2'd0}};

assign shl_ln115_mid1_fu_647_p3 = {{select_ln54_5_fu_639_p3}, {10'd0}};

assign shl_ln115_mid_fu_494_p3 = {{select_ln54_3_fu_486_p3}, {10'd0}};

assign shl_ln3_fu_367_p3 = {{yClamped_fu_359_p3}, {10'd0}};

assign sub_ln115_1_fu_518_p2 = ($signed(sext_ln115_6_fu_502_p1) - $signed(sext_ln115_4_fu_514_p1));

assign sub_ln115_2_fu_667_p2 = ($signed(shl_ln115_mid1_fu_647_p3) - $signed(sext_ln115_5_fu_663_p1));

assign sub_ln115_fu_387_p2 = ($signed(shl_ln3_fu_367_p3) - $signed(sext_ln115_fu_383_p1));

assign tmp4_fu_685_p3 = {{select_ln31}, {select_ln31}};

assign tmp_10_fu_617_p3 = p_mid1_fu_593_p2[32'd9];

assign tmp_11_fu_711_p3 = add_ln111_fu_705_p2[32'd9];

assign tmp_12_fu_725_p3 = add_ln111_fu_705_p2[32'd9];

assign tmp_5_fu_318_p3 = empty_fu_313_p2[32'd9];

assign tmp_6_fu_337_p3 = empty_fu_313_p2[32'd9];

assign tmp_7_fu_457_p3 = p_mid122_fu_452_p2[32'd8];

assign tmp_8_fu_470_p3 = p_mid122_fu_452_p2[32'd8];

assign tmp_9_fu_598_p3 = p_mid1_fu_593_p2[32'd9];

assign tmp_cast_fu_309_p1 = $signed(tmp_fu_303_p2);

assign tmp_cast_mid1_fu_589_p1 = $signed(tmp_mid1_fu_583_p2);

assign tmp_fu_303_p2 = ($signed(zext_ln107_fu_299_p1) + $signed(6'd62));

assign tmp_mid1_fu_583_p2 = ($signed(zext_ln107_2_fu_579_p1) + $signed(6'd62));

assign trunc_ln111_cast_fu_681_p1 = select_ln107_fu_559_p3;

assign trunc_ln7_fu_788_p4 = {{add_ln115_2_fu_782_p2[63:2]}};

assign xor_ln106_fu_531_p2 = (icmp_ln107_reg_927 ^ 1'd1);

assign yClamped_fu_359_p3 = ((or_ln54_fu_353_p2[0:0] == 1'b1) ? select_ln54_fu_345_p3 : add_ln55_fu_332_p2);

assign zext_ln106_2_fu_448_p1 = mul_ln106_fu_442_p2;

assign zext_ln106_fu_429_p1 = select_ln106_1_fu_412_p3;

assign zext_ln107_2_fu_579_p1 = add_ln107_fu_548_p2;

assign zext_ln107_fu_299_p1 = by_fu_136;

assign zext_ln111_fu_691_p1 = tmp4_fu_685_p3;

assign zext_ln115_3_fu_832_p1 = add_ln115_4_reg_952_pp0_iter10_reg;

assign zext_ln31_cast1_fu_211_p1 = zext_ln31;

assign zext_ln31_cast_fu_219_p1 = zext_ln31;

assign zext_ln55_cast2_fu_207_p1 = zext_ln55;

assign zext_ln55_cast_fu_215_p1 = zext_ln55;

always @ (posedge ap_clk) begin
    zext_ln55_cast2_reg_901[9:8] <= 2'b00;
    zext_ln31_cast1_reg_907[9:8] <= 2'b00;
    zext_ln55_cast_reg_913[8] <= 1'b0;
    zext_ln31_cast_reg_918[8] <= 1'b0;
end

endmodule //srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3
