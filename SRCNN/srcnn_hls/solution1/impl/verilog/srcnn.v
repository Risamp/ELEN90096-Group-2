// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=534881165,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=3808,HLS_SYN_LUT=8759,HLS_VERSION=2023_1}" *)

module srcnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        conv3_biases,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0,
        output_ftmap_q0
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
input  [31:0] conv3_biases;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;
input  [31:0] output_ftmap_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv2_weights_ce0;
reg conv2_biases_ce0;
reg conv3_weights_ce0;
reg[15:0] output_ftmap_address0;
reg output_ftmap_ce0;
reg output_ftmap_we0;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [21:0] conv1_output_ftmap_address0;
reg    conv1_output_ftmap_ce0;
reg    conv1_output_ftmap_we0;
wire   [31:0] conv1_output_ftmap_q0;
reg   [20:0] conv2_output_ftmap_address0;
reg    conv2_output_ftmap_ce0;
reg    conv2_output_ftmap_we0;
wire   [31:0] conv2_output_ftmap_d0;
wire   [31:0] conv2_output_ftmap_q0;
reg   [31:0] reg_382;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_373_p2;
reg   [31:0] reg_388;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state31;
wire   [31:0] grp_fu_365_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state35;
reg   [31:0] reg_399;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state38;
wire  signed [15:0] sext_ln34_fu_443_p1;
reg  signed [15:0] sext_ln34_reg_1088;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_4_fu_447_p3;
reg   [10:0] tmp_4_reg_1093;
wire   [5:0] add_ln17_fu_461_p2;
reg   [5:0] add_ln17_reg_1101;
wire   [0:0] icmp_ln17_fu_455_p2;
wire   [31:0] empty_24_fu_467_p1;
reg   [31:0] empty_24_reg_1118;
wire   [31:0] empty_19_fu_476_p1;
reg   [31:0] empty_19_reg_1123;
wire    ap_CS_fsm_state4;
wire   [16:0] h_2_cast11_fu_480_p1;
reg   [16:0] h_2_cast11_reg_1128;
wire    ap_CS_fsm_state5;
wire   [20:0] empty_22_fu_509_p2;
reg   [20:0] empty_22_reg_1133;
wire   [7:0] add_ln21_1_fu_521_p2;
reg   [7:0] add_ln21_1_reg_1141;
wire   [21:0] w_2_cast12_fu_531_p1;
reg   [21:0] w_2_cast12_reg_1146;
wire    ap_CS_fsm_state6;
reg   [20:0] conv2_output_ftmap_addr_reg_1151;
wire   [7:0] add_ln22_1_fu_555_p2;
reg   [7:0] add_ln22_1_reg_1159;
wire    ap_CS_fsm_state8;
wire   [6:0] add_ln33_fu_644_p2;
reg   [6:0] add_ln33_reg_1177;
reg   [31:0] conv2_weights_load_reg_1182;
wire    ap_CS_fsm_state9;
reg   [31:0] conv1_output_ftmap_load_reg_1187;
wire   [31:0] bitcast_ln34_1_fu_650_p1;
wire    ap_CS_fsm_state10;
wire   [15:0] sub_ln34_fu_720_p2;
reg   [15:0] sub_ln34_reg_1197;
wire    ap_CS_fsm_state22;
wire   [9:0] zext_ln21_fu_726_p1;
reg   [9:0] zext_ln21_reg_1202;
wire   [7:0] add_ln21_fu_736_p2;
reg   [7:0] add_ln21_reg_1210;
reg   [15:0] output_ftmap_addr_reg_1215;
wire    ap_CS_fsm_state23;
wire   [9:0] zext_ln22_fu_756_p1;
reg   [9:0] zext_ln22_reg_1220;
wire   [7:0] add_ln22_fu_766_p2;
reg   [7:0] add_ln22_reg_1228;
wire   [31:0] bitcast_ln34_fu_776_p1;
wire    ap_CS_fsm_state24;
wire   [8:0] zext_ln25_fu_780_p1;
reg   [8:0] zext_ln25_reg_1238;
wire    ap_CS_fsm_state25;
wire   [2:0] add_ln25_fu_790_p2;
reg   [2:0] add_ln25_reg_1246;
wire  signed [15:0] sext_ln26_fu_855_p1;
reg  signed [15:0] sext_ln26_reg_1251;
wire   [0:0] icmp_ln25_fu_784_p2;
wire   [9:0] zext_ln26_fu_859_p1;
reg   [9:0] zext_ln26_reg_1256;
wire    ap_CS_fsm_state26;
wire   [2:0] add_ln26_fu_869_p2;
reg   [2:0] add_ln26_reg_1264;
wire  signed [20:0] sext_ln33_fu_934_p1;
reg  signed [20:0] sext_ln33_reg_1269;
wire   [0:0] icmp_ln26_fu_863_p2;
wire    ap_CS_fsm_state27;
wire   [5:0] add_ln33_1_fu_1066_p2;
reg   [5:0] add_ln33_1_reg_1287;
reg   [31:0] conv3_weights_load_reg_1292;
wire   [31:0] bitcast_ln34_2_fu_1072_p1;
wire    ap_CS_fsm_state29;
wire    grp_conv1_fu_353_ap_start;
wire    grp_conv1_fu_353_ap_done;
wire    grp_conv1_fu_353_ap_idle;
wire    grp_conv1_fu_353_ap_ready;
wire   [15:0] grp_conv1_fu_353_input_ftmap_address0;
wire    grp_conv1_fu_353_input_ftmap_ce0;
wire   [12:0] grp_conv1_fu_353_conv1_weights_address0;
wire    grp_conv1_fu_353_conv1_weights_ce0;
wire   [5:0] grp_conv1_fu_353_conv1_biases_address0;
wire    grp_conv1_fu_353_conv1_biases_ce0;
wire   [21:0] grp_conv1_fu_353_conv1_output_ftmap_address0;
wire    grp_conv1_fu_353_conv1_output_ftmap_ce0;
wire    grp_conv1_fu_353_conv1_output_ftmap_we0;
wire   [31:0] grp_conv1_fu_353_conv1_output_ftmap_d0;
wire   [31:0] grp_conv1_fu_353_grp_fu_365_p_din0;
wire   [31:0] grp_conv1_fu_353_grp_fu_365_p_din1;
wire   [1:0] grp_conv1_fu_353_grp_fu_365_p_opcode;
wire    grp_conv1_fu_353_grp_fu_365_p_ce;
wire   [31:0] grp_conv1_fu_353_grp_fu_373_p_din0;
wire   [31:0] grp_conv1_fu_353_grp_fu_373_p_din1;
wire    grp_conv1_fu_353_grp_fu_373_p_ce;
wire   [31:0] grp_conv1_fu_353_grp_fu_377_p_din0;
wire   [31:0] grp_conv1_fu_353_grp_fu_377_p_din1;
wire   [4:0] grp_conv1_fu_353_grp_fu_377_p_opcode;
wire    grp_conv1_fu_353_grp_fu_377_p_ce;
reg   [7:0] h_3_reg_232;
wire   [0:0] icmp_ln22_1_fu_549_p2;
reg   [7:0] w_2_reg_243;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln21_1_fu_515_p2;
reg   [6:0] n1_reg_254;
wire   [31:0] ap_phi_mux_add4227_i_phi_fu_268_p4;
reg   [31:0] add4227_i_reg_265;
reg   [7:0] w_reg_275;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln21_fu_730_p2;
reg   [2:0] f3h_reg_286;
reg   [31:0] add42_lcssa_lcssa21_i_reg_297;
reg   [2:0] f3w_reg_307;
wire   [0:0] icmp_ln33_1_fu_1060_p2;
reg   [31:0] add42_lcssa20_i_reg_318;
reg   [5:0] n2_1_reg_330;
reg   [31:0] empty_26_reg_341;
reg    grp_conv1_fu_353_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln17_fu_416_p1;
wire   [63:0] p_cast19_fu_544_p1;
wire   [63:0] zext_ln34_6_fu_623_p1;
wire   [63:0] zext_ln34_7_fu_633_p1;
wire   [63:0] zext_ln34_2_fu_751_p1;
wire   [63:0] zext_ln34_11_fu_1000_p1;
wire   [63:0] zext_ln34_14_fu_1055_p1;
reg   [5:0] n2_fu_132;
reg   [7:0] h_fu_136;
wire   [0:0] icmp_ln22_fu_760_p2;
reg   [31:0] grp_fu_365_p0;
reg   [31:0] grp_fu_365_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state32;
reg   [31:0] grp_fu_373_p0;
reg   [31:0] grp_fu_373_p1;
reg   [31:0] grp_fu_377_p0;
reg   [31:0] grp_fu_377_p1;
wire    ap_CS_fsm_state20;
wire   [13:0] tmp_3_fu_425_p3;
wire   [14:0] tmp_3_cast_fu_433_p1;
wire   [14:0] n2_cast_fu_421_p1;
wire   [14:0] empty_fu_437_p2;
wire   [4:0] trunc_ln17_fu_412_p1;
wire   [15:0] h_2_cast_fu_484_p1;
wire  signed [15:0] empty_20_fu_488_p2;
wire   [12:0] empty_21_fu_497_p1;
wire   [20:0] p_shl1_fu_501_p3;
wire  signed [20:0] p_cast10_fu_493_p1;
wire   [20:0] w_2_cast_fu_535_p1;
wire   [20:0] empty_23_fu_539_p2;
wire   [14:0] tmp_7_fu_569_p3;
wire   [15:0] zext_ln34_5_fu_577_p1;
wire   [15:0] zext_ln34_4_fu_565_p1;
wire   [15:0] sub_ln34_1_fu_581_p2;
wire  signed [16:0] sext_ln34_1_fu_587_p1;
wire  signed [16:0] add_ln34_1_fu_591_p2;
wire   [13:0] trunc_ln34_fu_600_p1;
wire   [21:0] p_shl2_fu_604_p3;
wire  signed [21:0] sext_ln34_2_fu_596_p1;
wire   [21:0] sub_ln34_2_fu_612_p2;
wire   [21:0] add_ln34_2_fu_618_p2;
wire   [10:0] zext_ln34_3_fu_561_p1;
wire   [10:0] add_ln34_3_fu_628_p2;
wire   [31:0] bitcast_ln41_fu_654_p1;
wire   [7:0] tmp_1_fu_658_p4;
wire   [22:0] trunc_ln41_fu_668_p1;
wire   [0:0] icmp_ln41_1_fu_678_p2;
wire   [0:0] icmp_ln41_fu_672_p2;
wire   [0:0] or_ln41_fu_684_p2;
wire   [0:0] grp_fu_377_p2;
wire   [0:0] and_ln41_fu_690_p2;
wire   [15:0] tmp_5_fu_712_p3;
wire   [15:0] zext_ln34_fu_708_p1;
wire   [15:0] zext_ln34_1_fu_742_p1;
wire   [15:0] add_ln34_fu_746_p2;
wire   [2:0] tmp_fu_796_p2;
wire  signed [9:0] tmp_cast_fu_802_p1;
wire   [9:0] empty_25_fu_806_p2;
wire   [0:0] tmp_8_fu_825_p3;
wire   [0:0] tmp_6_fu_811_p3;
wire   [0:0] icmp_ln84_fu_819_p2;
wire   [0:0] or_ln83_fu_841_p2;
wire   [9:0] select_ln83_fu_833_p3;
wire   [9:0] yPixelClamped_1_fu_847_p3;
wire   [2:0] add_ln30_fu_875_p2;
wire  signed [9:0] sext_ln30_fu_881_p1;
wire   [9:0] add_ln30_1_fu_885_p2;
wire   [0:0] tmp_12_fu_904_p3;
wire   [0:0] tmp_10_fu_890_p3;
wire   [0:0] icmp_ln84_1_fu_898_p2;
wire   [0:0] or_ln83_1_fu_920_p2;
wire   [9:0] select_ln83_2_fu_912_p3;
wire   [9:0] xPixelClamped_1_fu_926_p3;
wire   [13:0] tmp_9_fu_946_p3;
wire   [14:0] zext_ln34_10_fu_954_p1;
wire   [14:0] zext_ln34_9_fu_942_p1;
wire   [14:0] sub_ln34_3_fu_958_p2;
wire  signed [15:0] sext_ln34_3_fu_964_p1;
wire  signed [15:0] add_ln34_4_fu_968_p2;
wire   [12:0] trunc_ln34_1_fu_977_p1;
wire   [20:0] p_shl7_fu_981_p3;
wire  signed [20:0] sext_ln34_4_fu_973_p1;
wire   [20:0] sub_ln34_4_fu_989_p2;
wire   [20:0] add_ln34_5_fu_995_p2;
wire   [7:0] tmp_s_fu_1005_p3;
wire   [8:0] zext_ln34_12_fu_1013_p1;
wire   [8:0] zext_ln34_8_fu_938_p1;
wire   [8:0] add_ln34_6_fu_1017_p2;
wire   [8:0] add_ln34_7_fu_1023_p2;
wire   [7:0] trunc_ln34_2_fu_1032_p1;
wire   [9:0] p_shl5_fu_1036_p3;
wire   [9:0] zext_ln34_13_fu_1028_p1;
wire   [9:0] add_ln34_8_fu_1044_p2;
wire   [9:0] add_ln34_9_fu_1050_p2;
reg    grp_fu_365_ce;
reg    grp_fu_373_ce;
reg    grp_fu_377_ce;
reg   [4:0] grp_fu_377_opcode;
wire   [0:0] icmp_ln33_fu_638_p2;
reg   [38:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 grp_conv1_fu_353_ap_start_reg = 1'b0;
end

srcnn_conv1_output_ftmap_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4161600 ),
    .AddressWidth( 22 ))
conv1_output_ftmap_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_output_ftmap_address0),
    .ce0(conv1_output_ftmap_ce0),
    .we0(conv1_output_ftmap_we0),
    .d0(grp_conv1_fu_353_conv1_output_ftmap_d0),
    .q0(conv1_output_ftmap_q0)
);

srcnn_conv2_output_ftmap_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2080800 ),
    .AddressWidth( 21 ))
conv2_output_ftmap_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_output_ftmap_address0),
    .ce0(conv2_output_ftmap_ce0),
    .we0(conv2_output_ftmap_we0),
    .d0(conv2_output_ftmap_d0),
    .q0(conv2_output_ftmap_q0)
);

srcnn_conv1 grp_conv1_fu_353(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv1_fu_353_ap_start),
    .ap_done(grp_conv1_fu_353_ap_done),
    .ap_idle(grp_conv1_fu_353_ap_idle),
    .ap_ready(grp_conv1_fu_353_ap_ready),
    .input_ftmap_address0(grp_conv1_fu_353_input_ftmap_address0),
    .input_ftmap_ce0(grp_conv1_fu_353_input_ftmap_ce0),
    .input_ftmap_q0(input_ftmap_q0),
    .conv1_weights_address0(grp_conv1_fu_353_conv1_weights_address0),
    .conv1_weights_ce0(grp_conv1_fu_353_conv1_weights_ce0),
    .conv1_weights_q0(conv1_weights_q0),
    .conv1_biases_address0(grp_conv1_fu_353_conv1_biases_address0),
    .conv1_biases_ce0(grp_conv1_fu_353_conv1_biases_ce0),
    .conv1_biases_q0(conv1_biases_q0),
    .conv1_output_ftmap_address0(grp_conv1_fu_353_conv1_output_ftmap_address0),
    .conv1_output_ftmap_ce0(grp_conv1_fu_353_conv1_output_ftmap_ce0),
    .conv1_output_ftmap_we0(grp_conv1_fu_353_conv1_output_ftmap_we0),
    .conv1_output_ftmap_d0(grp_conv1_fu_353_conv1_output_ftmap_d0),
    .conv1_output_ftmap_q0(conv1_output_ftmap_q0),
    .grp_fu_365_p_din0(grp_conv1_fu_353_grp_fu_365_p_din0),
    .grp_fu_365_p_din1(grp_conv1_fu_353_grp_fu_365_p_din1),
    .grp_fu_365_p_opcode(grp_conv1_fu_353_grp_fu_365_p_opcode),
    .grp_fu_365_p_dout0(grp_fu_365_p2),
    .grp_fu_365_p_ce(grp_conv1_fu_353_grp_fu_365_p_ce),
    .grp_fu_373_p_din0(grp_conv1_fu_353_grp_fu_373_p_din0),
    .grp_fu_373_p_din1(grp_conv1_fu_353_grp_fu_373_p_din1),
    .grp_fu_373_p_dout0(grp_fu_373_p2),
    .grp_fu_373_p_ce(grp_conv1_fu_353_grp_fu_373_p_ce),
    .grp_fu_377_p_din0(grp_conv1_fu_353_grp_fu_377_p_din0),
    .grp_fu_377_p_din1(grp_conv1_fu_353_grp_fu_377_p_din1),
    .grp_fu_377_p_opcode(grp_conv1_fu_353_grp_fu_377_p_opcode),
    .grp_fu_377_p_dout0(grp_fu_377_p2),
    .grp_fu_377_p_ce(grp_conv1_fu_353_grp_fu_377_p_ce)
);

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .ce(grp_fu_365_ce),
    .dout(grp_fu_365_p2)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .ce(grp_fu_373_ce),
    .dout(grp_fu_373_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(grp_fu_377_ce),
    .opcode(grp_fu_377_opcode),
    .dout(grp_fu_377_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv1_fu_353_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_conv1_fu_353_ap_start_reg <= 1'b1;
        end else if ((grp_conv1_fu_353_ap_ready == 1'b1)) begin
            grp_conv1_fu_353_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add4227_i_reg_265 <= conv2_output_ftmap_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        add4227_i_reg_265 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_784_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        add42_lcssa20_i_reg_318 <= add42_lcssa_lcssa21_i_reg_297;
    end else if (((icmp_ln33_1_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        add42_lcssa20_i_reg_318 <= empty_26_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        add42_lcssa_lcssa21_i_reg_297 <= bitcast_ln34_fu_776_p1;
    end else if (((icmp_ln26_fu_863_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        add42_lcssa_lcssa21_i_reg_297 <= add42_lcssa20_i_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        empty_26_reg_341 <= add42_lcssa20_i_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        empty_26_reg_341 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        f3h_reg_286 <= 3'd0;
    end else if (((icmp_ln26_fu_863_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        f3h_reg_286 <= add_ln25_reg_1246;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_784_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        f3w_reg_307 <= 3'd0;
    end else if (((icmp_ln33_1_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        f3w_reg_307 <= add_ln26_reg_1264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_3_reg_232 <= 8'd0;
    end else if (((icmp_ln22_1_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        h_3_reg_232 <= add_ln21_1_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_455_p2 == 1'd1))) begin
        h_fu_136 <= 8'd0;
    end else if (((icmp_ln22_fu_760_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        h_fu_136 <= add_ln21_reg_1210;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n1_reg_254 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        n1_reg_254 <= add_ln33_reg_1177;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        n2_1_reg_330 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        n2_1_reg_330 <= add_ln33_1_reg_1287;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n2_fu_132 <= 6'd0;
    end else if (((icmp_ln21_1_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        n2_fu_132 <= add_ln17_reg_1101;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_1_fu_515_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_2_reg_243 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        w_2_reg_243 <= add_ln22_1_reg_1159;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        w_reg_275 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        w_reg_275 <= add_ln22_reg_1228;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln17_reg_1101 <= add_ln17_fu_461_p2;
        sext_ln34_reg_1088 <= sext_ln34_fu_443_p1;
        tmp_4_reg_1093[10 : 6] <= tmp_4_fu_447_p3[10 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_1_reg_1141 <= add_ln21_1_fu_521_p2;
        empty_22_reg_1133 <= empty_22_fu_509_p2;
        h_2_cast11_reg_1128[7 : 0] <= h_2_cast11_fu_480_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln21_reg_1210 <= add_ln21_fu_736_p2;
        sub_ln34_reg_1197 <= sub_ln34_fu_720_p2;
        zext_ln21_reg_1202[7 : 0] <= zext_ln21_fu_726_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln22_1_reg_1159 <= add_ln22_1_fu_555_p2;
        conv2_output_ftmap_addr_reg_1151 <= p_cast19_fu_544_p1;
        w_2_cast12_reg_1146[7 : 0] <= w_2_cast12_fu_531_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln22_reg_1228 <= add_ln22_fu_766_p2;
        output_ftmap_addr_reg_1215 <= zext_ln34_2_fu_751_p1;
        zext_ln22_reg_1220[7 : 0] <= zext_ln22_fu_756_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln25_reg_1246 <= add_ln25_fu_790_p2;
        zext_ln25_reg_1238[2 : 0] <= zext_ln25_fu_780_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln26_reg_1264 <= add_ln26_fu_869_p2;
        zext_ln26_reg_1256[2 : 0] <= zext_ln26_fu_859_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln33_1_reg_1287 <= add_ln33_1_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln33_reg_1177 <= add_ln33_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv1_output_ftmap_load_reg_1187 <= conv1_output_ftmap_q0;
        conv2_weights_load_reg_1182 <= conv2_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        conv3_weights_load_reg_1292 <= conv3_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_19_reg_1123 <= empty_19_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_455_p2 == 1'd1))) begin
        empty_24_reg_1118 <= empty_24_fu_467_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_382 <= conv2_output_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_388 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_399 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_784_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        sext_ln26_reg_1251 <= sext_ln26_fu_855_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        sext_ln33_reg_1269 <= sext_ln33_fu_934_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((grp_conv1_fu_353_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln21_fu_730_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_730_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_output_ftmap_address0 = zext_ln34_6_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_output_ftmap_address0 = grp_conv1_fu_353_conv1_output_ftmap_address0;
    end else begin
        conv1_output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_output_ftmap_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_output_ftmap_ce0 = grp_conv1_fu_353_conv1_output_ftmap_ce0;
    end else begin
        conv1_output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_output_ftmap_we0 = grp_conv1_fu_353_conv1_output_ftmap_we0;
    end else begin
        conv1_output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv2_biases_ce0 = 1'b1;
    end else begin
        conv2_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv2_output_ftmap_address0 = zext_ln34_11_fu_1000_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv2_output_ftmap_address0 = conv2_output_ftmap_addr_reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_output_ftmap_address0 = p_cast19_fu_544_p1;
    end else begin
        conv2_output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state6))) begin
        conv2_output_ftmap_ce0 = 1'b1;
    end else begin
        conv2_output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv2_output_ftmap_we0 = 1'b1;
    end else begin
        conv2_output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv3_weights_ce0 = 1'b1;
    end else begin
        conv3_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_365_ce = grp_conv1_fu_353_grp_fu_365_p_ce;
    end else begin
        grp_fu_365_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_365_p0 = grp_conv1_fu_353_grp_fu_365_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_365_p0 = empty_26_reg_341;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_365_p0 = add42_lcssa_lcssa21_i_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_365_p0 = add4227_i_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_365_p0 = ap_phi_mux_add4227_i_phi_fu_268_p4;
    end else begin
        grp_fu_365_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_365_p1 = grp_conv1_fu_353_grp_fu_365_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_365_p1 = empty_24_reg_1118;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_365_p1 = reg_388;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_365_p1 = empty_19_reg_1123;
    end else begin
        grp_fu_365_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_373_ce = grp_conv1_fu_353_grp_fu_373_p_ce;
    end else begin
        grp_fu_373_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_373_p0 = grp_conv1_fu_353_grp_fu_373_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_373_p0 = bitcast_ln34_2_fu_1072_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_373_p0 = bitcast_ln34_1_fu_650_p1;
    end else begin
        grp_fu_373_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_373_p1 = grp_conv1_fu_353_grp_fu_373_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_373_p1 = reg_382;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_373_p1 = conv1_output_ftmap_load_reg_1187;
    end else begin
        grp_fu_373_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_377_ce = grp_conv1_fu_353_grp_fu_377_p_ce;
    end else begin
        grp_fu_377_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_377_opcode = grp_conv1_fu_353_grp_fu_377_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_377_opcode = 5'd4;
    end else begin
        grp_fu_377_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_377_p0 = grp_conv1_fu_353_grp_fu_377_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_377_p0 = reg_399;
    end else begin
        grp_fu_377_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_377_p1 = grp_conv1_fu_353_grp_fu_377_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_377_p1 = 32'd0;
    end else begin
        grp_fu_377_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_ftmap_address0 = output_ftmap_addr_reg_1215;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_ftmap_address0 = zext_ln34_2_fu_751_p1;
    end else begin
        output_ftmap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state23))) begin
        output_ftmap_ce0 = 1'b1;
    end else begin
        output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_ftmap_we0 = 1'b1;
    end else begin
        output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_conv1_fu_353_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln21_1_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln22_1_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln33_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln21_fu_730_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln22_fu_760_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln25_fu_784_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln26_fu_863_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln33_1_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_461_p2 = (n2_fu_132 + 6'd1);

assign add_ln21_1_fu_521_p2 = (h_3_reg_232 + 8'd1);

assign add_ln21_fu_736_p2 = (h_fu_136 + 8'd1);

assign add_ln22_1_fu_555_p2 = (w_2_reg_243 + 8'd1);

assign add_ln22_fu_766_p2 = (w_reg_275 + 8'd1);

assign add_ln25_fu_790_p2 = (f3h_reg_286 + 3'd1);

assign add_ln26_fu_869_p2 = (f3w_reg_307 + 3'd1);

assign add_ln30_1_fu_885_p2 = ($signed(sext_ln30_fu_881_p1) + $signed(zext_ln22_reg_1220));

assign add_ln30_fu_875_p2 = ($signed(f3w_reg_307) + $signed(3'd6));

assign add_ln33_1_fu_1066_p2 = (n2_1_reg_330 + 6'd1);

assign add_ln33_fu_644_p2 = (n1_reg_254 + 7'd1);

assign add_ln34_1_fu_591_p2 = ($signed(sext_ln34_1_fu_587_p1) + $signed(h_2_cast11_reg_1128));

assign add_ln34_2_fu_618_p2 = (sub_ln34_2_fu_612_p2 + w_2_cast12_reg_1146);

assign add_ln34_3_fu_628_p2 = (tmp_4_reg_1093 + zext_ln34_3_fu_561_p1);

assign add_ln34_4_fu_968_p2 = ($signed(sext_ln34_3_fu_964_p1) + $signed(sext_ln26_reg_1251));

assign add_ln34_5_fu_995_p2 = ($signed(sub_ln34_4_fu_989_p2) + $signed(sext_ln33_reg_1269));

assign add_ln34_6_fu_1017_p2 = (zext_ln34_12_fu_1013_p1 + zext_ln34_8_fu_938_p1);

assign add_ln34_7_fu_1023_p2 = (add_ln34_6_fu_1017_p2 + zext_ln25_reg_1238);

assign add_ln34_8_fu_1044_p2 = (p_shl5_fu_1036_p3 + zext_ln34_13_fu_1028_p1);

assign add_ln34_9_fu_1050_p2 = (add_ln34_8_fu_1044_p2 + zext_ln26_reg_1256);

assign add_ln34_fu_746_p2 = (sub_ln34_reg_1197 + zext_ln34_1_fu_742_p1);

assign and_ln41_fu_690_p2 = (or_ln41_fu_684_p2 & grp_fu_377_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_add4227_i_phi_fu_268_p4 = add4227_i_reg_265;

assign bitcast_ln34_1_fu_650_p1 = conv2_weights_load_reg_1182;

assign bitcast_ln34_2_fu_1072_p1 = conv3_weights_load_reg_1292;

assign bitcast_ln34_fu_776_p1 = output_ftmap_q0;

assign bitcast_ln41_fu_654_p1 = reg_399;

assign conv1_biases_address0 = grp_conv1_fu_353_conv1_biases_address0;

assign conv1_biases_ce0 = grp_conv1_fu_353_conv1_biases_ce0;

assign conv1_weights_address0 = grp_conv1_fu_353_conv1_weights_address0;

assign conv1_weights_ce0 = grp_conv1_fu_353_conv1_weights_ce0;

assign conv2_biases_address0 = zext_ln17_fu_416_p1;

assign conv2_output_ftmap_d0 = ((and_ln41_fu_690_p2[0:0] == 1'b1) ? 32'd0 : reg_399);

assign conv2_weights_address0 = zext_ln34_7_fu_633_p1;

assign conv3_weights_address0 = zext_ln34_14_fu_1055_p1;

assign empty_19_fu_476_p1 = conv2_biases_q0;

assign empty_20_fu_488_p2 = ($signed(sext_ln34_reg_1088) + $signed(h_2_cast_fu_484_p1));

assign empty_21_fu_497_p1 = empty_20_fu_488_p2[12:0];

assign empty_22_fu_509_p2 = ($signed(p_shl1_fu_501_p3) - $signed(p_cast10_fu_493_p1));

assign empty_23_fu_539_p2 = (empty_22_reg_1133 + w_2_cast_fu_535_p1);

assign empty_24_fu_467_p1 = conv3_biases;

assign empty_25_fu_806_p2 = ($signed(tmp_cast_fu_802_p1) + $signed(zext_ln21_reg_1202));

assign empty_fu_437_p2 = (tmp_3_cast_fu_433_p1 - n2_cast_fu_421_p1);

assign grp_conv1_fu_353_ap_start = grp_conv1_fu_353_ap_start_reg;

assign h_2_cast11_fu_480_p1 = h_3_reg_232;

assign h_2_cast_fu_484_p1 = h_3_reg_232;

assign icmp_ln17_fu_455_p2 = ((n2_fu_132 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_515_p2 = ((h_3_reg_232 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_730_p2 = ((h_fu_136 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_549_p2 = ((w_2_reg_243 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_760_p2 = ((w_reg_275 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_784_p2 = ((f3h_reg_286 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_863_p2 = ((f3w_reg_307 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_1060_p2 = ((n2_1_reg_330 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_638_p2 = ((n1_reg_254 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_678_p2 = ((trunc_ln41_fu_668_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_672_p2 = ((tmp_1_fu_658_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_898_p2 = (($signed(add_ln30_1_fu_885_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_819_p2 = (($signed(empty_25_fu_806_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = grp_conv1_fu_353_input_ftmap_address0;

assign input_ftmap_ce0 = grp_conv1_fu_353_input_ftmap_ce0;

assign n2_cast_fu_421_p1 = n2_fu_132;

assign or_ln41_fu_684_p2 = (icmp_ln41_fu_672_p2 | icmp_ln41_1_fu_678_p2);

assign or_ln83_1_fu_920_p2 = (tmp_10_fu_890_p3 | icmp_ln84_1_fu_898_p2);

assign or_ln83_fu_841_p2 = (tmp_6_fu_811_p3 | icmp_ln84_fu_819_p2);

assign output_ftmap_d0 = reg_399;

assign p_cast10_fu_493_p1 = empty_20_fu_488_p2;

assign p_cast19_fu_544_p1 = empty_23_fu_539_p2;

assign p_shl1_fu_501_p3 = {{empty_21_fu_497_p1}, {8'd0}};

assign p_shl2_fu_604_p3 = {{trunc_ln34_fu_600_p1}, {8'd0}};

assign p_shl5_fu_1036_p3 = {{trunc_ln34_2_fu_1032_p1}, {2'd0}};

assign p_shl7_fu_981_p3 = {{trunc_ln34_1_fu_977_p1}, {8'd0}};

assign select_ln83_2_fu_912_p3 = ((tmp_12_fu_904_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_fu_833_p3 = ((tmp_8_fu_825_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln26_fu_855_p1 = $signed(yPixelClamped_1_fu_847_p3);

assign sext_ln30_fu_881_p1 = $signed(add_ln30_fu_875_p2);

assign sext_ln33_fu_934_p1 = $signed(xPixelClamped_1_fu_926_p3);

assign sext_ln34_1_fu_587_p1 = $signed(sub_ln34_1_fu_581_p2);

assign sext_ln34_2_fu_596_p1 = add_ln34_1_fu_591_p2;

assign sext_ln34_3_fu_964_p1 = $signed(sub_ln34_3_fu_958_p2);

assign sext_ln34_4_fu_973_p1 = add_ln34_4_fu_968_p2;

assign sext_ln34_fu_443_p1 = $signed(empty_fu_437_p2);

assign sub_ln34_1_fu_581_p2 = (zext_ln34_5_fu_577_p1 - zext_ln34_4_fu_565_p1);

assign sub_ln34_2_fu_612_p2 = ($signed(p_shl2_fu_604_p3) - $signed(sext_ln34_2_fu_596_p1));

assign sub_ln34_3_fu_958_p2 = (zext_ln34_10_fu_954_p1 - zext_ln34_9_fu_942_p1);

assign sub_ln34_4_fu_989_p2 = ($signed(p_shl7_fu_981_p3) - $signed(sext_ln34_4_fu_973_p1));

assign sub_ln34_fu_720_p2 = (tmp_5_fu_712_p3 - zext_ln34_fu_708_p1);

assign tmp_10_fu_890_p3 = add_ln30_1_fu_885_p2[32'd9];

assign tmp_12_fu_904_p3 = add_ln30_1_fu_885_p2[32'd9];

assign tmp_1_fu_658_p4 = {{bitcast_ln41_fu_654_p1[30:23]}};

assign tmp_3_cast_fu_433_p1 = tmp_3_fu_425_p3;

assign tmp_3_fu_425_p3 = {{n2_fu_132}, {8'd0}};

assign tmp_4_fu_447_p3 = {{trunc_ln17_fu_412_p1}, {6'd0}};

assign tmp_5_fu_712_p3 = {{h_fu_136}, {8'd0}};

assign tmp_6_fu_811_p3 = empty_25_fu_806_p2[32'd9];

assign tmp_7_fu_569_p3 = {{n1_reg_254}, {8'd0}};

assign tmp_8_fu_825_p3 = empty_25_fu_806_p2[32'd9];

assign tmp_9_fu_946_p3 = {{n2_1_reg_330}, {8'd0}};

assign tmp_cast_fu_802_p1 = $signed(tmp_fu_796_p2);

assign tmp_fu_796_p2 = ($signed(f3h_reg_286) + $signed(3'd6));

assign tmp_s_fu_1005_p3 = {{n2_1_reg_330}, {2'd0}};

assign trunc_ln17_fu_412_p1 = n2_fu_132[4:0];

assign trunc_ln34_1_fu_977_p1 = add_ln34_4_fu_968_p2[12:0];

assign trunc_ln34_2_fu_1032_p1 = add_ln34_7_fu_1023_p2[7:0];

assign trunc_ln34_fu_600_p1 = add_ln34_1_fu_591_p2[13:0];

assign trunc_ln41_fu_668_p1 = bitcast_ln41_fu_654_p1[22:0];

assign w_2_cast12_fu_531_p1 = w_2_reg_243;

assign w_2_cast_fu_535_p1 = w_2_reg_243;

assign xPixelClamped_1_fu_926_p3 = ((or_ln83_1_fu_920_p2[0:0] == 1'b1) ? select_ln83_2_fu_912_p3 : add_ln30_1_fu_885_p2);

assign yPixelClamped_1_fu_847_p3 = ((or_ln83_fu_841_p2[0:0] == 1'b1) ? select_ln83_fu_833_p3 : empty_25_fu_806_p2);

assign zext_ln17_fu_416_p1 = n2_fu_132;

assign zext_ln21_fu_726_p1 = h_fu_136;

assign zext_ln22_fu_756_p1 = w_reg_275;

assign zext_ln25_fu_780_p1 = f3h_reg_286;

assign zext_ln26_fu_859_p1 = f3w_reg_307;

assign zext_ln34_10_fu_954_p1 = tmp_9_fu_946_p3;

assign zext_ln34_11_fu_1000_p1 = add_ln34_5_fu_995_p2;

assign zext_ln34_12_fu_1013_p1 = tmp_s_fu_1005_p3;

assign zext_ln34_13_fu_1028_p1 = add_ln34_7_fu_1023_p2;

assign zext_ln34_14_fu_1055_p1 = add_ln34_9_fu_1050_p2;

assign zext_ln34_1_fu_742_p1 = w_reg_275;

assign zext_ln34_2_fu_751_p1 = add_ln34_fu_746_p2;

assign zext_ln34_3_fu_561_p1 = n1_reg_254;

assign zext_ln34_4_fu_565_p1 = n1_reg_254;

assign zext_ln34_5_fu_577_p1 = tmp_7_fu_569_p3;

assign zext_ln34_6_fu_623_p1 = add_ln34_2_fu_618_p2;

assign zext_ln34_7_fu_633_p1 = add_ln34_3_fu_628_p2;

assign zext_ln34_8_fu_938_p1 = n2_1_reg_330;

assign zext_ln34_9_fu_942_p1 = n2_1_reg_330;

assign zext_ln34_fu_708_p1 = h_fu_136;

always @ (posedge ap_clk) begin
    tmp_4_reg_1093[5:0] <= 6'b000000;
    h_2_cast11_reg_1128[16:8] <= 9'b000000000;
    w_2_cast12_reg_1146[21:8] <= 14'b00000000000000;
    zext_ln21_reg_1202[9:8] <= 2'b00;
    zext_ln22_reg_1220[9:8] <= 2'b00;
    zext_ln25_reg_1238[8:3] <= 6'b000000;
    zext_ln26_reg_1256[9:3] <= 7'b0000000;
end

endmodule //srcnn
