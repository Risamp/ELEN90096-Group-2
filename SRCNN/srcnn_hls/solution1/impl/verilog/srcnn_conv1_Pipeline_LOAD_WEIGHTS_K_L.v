// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_LOAD_WEIGHTS_K_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_w1_AWVALID,
        m_axi_w1_AWREADY,
        m_axi_w1_AWADDR,
        m_axi_w1_AWID,
        m_axi_w1_AWLEN,
        m_axi_w1_AWSIZE,
        m_axi_w1_AWBURST,
        m_axi_w1_AWLOCK,
        m_axi_w1_AWCACHE,
        m_axi_w1_AWPROT,
        m_axi_w1_AWQOS,
        m_axi_w1_AWREGION,
        m_axi_w1_AWUSER,
        m_axi_w1_WVALID,
        m_axi_w1_WREADY,
        m_axi_w1_WDATA,
        m_axi_w1_WSTRB,
        m_axi_w1_WLAST,
        m_axi_w1_WID,
        m_axi_w1_WUSER,
        m_axi_w1_ARVALID,
        m_axi_w1_ARREADY,
        m_axi_w1_ARADDR,
        m_axi_w1_ARID,
        m_axi_w1_ARLEN,
        m_axi_w1_ARSIZE,
        m_axi_w1_ARBURST,
        m_axi_w1_ARLOCK,
        m_axi_w1_ARCACHE,
        m_axi_w1_ARPROT,
        m_axi_w1_ARQOS,
        m_axi_w1_ARREGION,
        m_axi_w1_ARUSER,
        m_axi_w1_RVALID,
        m_axi_w1_RREADY,
        m_axi_w1_RDATA,
        m_axi_w1_RLAST,
        m_axi_w1_RID,
        m_axi_w1_RFIFONUM,
        m_axi_w1_RUSER,
        m_axi_w1_RRESP,
        m_axi_w1_BVALID,
        m_axi_w1_BREADY,
        m_axi_w1_BRESP,
        m_axi_w1_BID,
        m_axi_w1_BUSER,
        sext_ln110,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_w1_AWVALID;
input   m_axi_w1_AWREADY;
output  [63:0] m_axi_w1_AWADDR;
output  [0:0] m_axi_w1_AWID;
output  [31:0] m_axi_w1_AWLEN;
output  [2:0] m_axi_w1_AWSIZE;
output  [1:0] m_axi_w1_AWBURST;
output  [1:0] m_axi_w1_AWLOCK;
output  [3:0] m_axi_w1_AWCACHE;
output  [2:0] m_axi_w1_AWPROT;
output  [3:0] m_axi_w1_AWQOS;
output  [3:0] m_axi_w1_AWREGION;
output  [0:0] m_axi_w1_AWUSER;
output   m_axi_w1_WVALID;
input   m_axi_w1_WREADY;
output  [31:0] m_axi_w1_WDATA;
output  [3:0] m_axi_w1_WSTRB;
output   m_axi_w1_WLAST;
output  [0:0] m_axi_w1_WID;
output  [0:0] m_axi_w1_WUSER;
output   m_axi_w1_ARVALID;
input   m_axi_w1_ARREADY;
output  [63:0] m_axi_w1_ARADDR;
output  [0:0] m_axi_w1_ARID;
output  [31:0] m_axi_w1_ARLEN;
output  [2:0] m_axi_w1_ARSIZE;
output  [1:0] m_axi_w1_ARBURST;
output  [1:0] m_axi_w1_ARLOCK;
output  [3:0] m_axi_w1_ARCACHE;
output  [2:0] m_axi_w1_ARPROT;
output  [3:0] m_axi_w1_ARQOS;
output  [3:0] m_axi_w1_ARREGION;
output  [0:0] m_axi_w1_ARUSER;
input   m_axi_w1_RVALID;
output   m_axi_w1_RREADY;
input  [31:0] m_axi_w1_RDATA;
input   m_axi_w1_RLAST;
input  [0:0] m_axi_w1_RID;
input  [12:0] m_axi_w1_RFIFONUM;
input  [0:0] m_axi_w1_RUSER;
input  [1:0] m_axi_w1_RRESP;
input   m_axi_w1_BVALID;
output   m_axi_w1_BREADY;
input  [1:0] m_axi_w1_BRESP;
input  [0:0] m_axi_w1_BID;
input  [0:0] m_axi_w1_BUSER;
input  [61:0] sext_ln110;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_d0;
output  [6:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_d0;

reg ap_idle;
reg m_axi_w1_RREADY;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln110_reg_506;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln110_fu_265_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln112_fu_300_p2;
reg   [0:0] icmp_ln112_reg_510;
wire   [2:0] trunc_ln110_fu_314_p1;
reg   [2:0] trunc_ln110_reg_517;
reg   [31:0] w1_addr_read_reg_521;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] p_cast_fu_427_p1;
reg   [3:0] loop_index_i20_fu_98;
wire   [3:0] empty_fu_450_p2;
wire    ap_loop_init;
reg   [3:0] k_fu_102;
wire   [3:0] select_ln112_1_fu_391_p3;
reg   [7:0] indvar_flatten_fu_106;
wire   [7:0] select_ln112_2_fu_324_p3;
reg   [3:0] bout_fu_110;
wire   [3:0] select_ln110_1_fu_306_p3;
reg   [9:0] indvar_flatten12_fu_114;
wire   [9:0] add_ln110_fu_271_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [31:0] empty_94_fu_439_p1;
wire   [3:0] add_ln110_1_fu_294_p2;
wire   [7:0] add_ln112_1_fu_318_p2;
wire   [0:0] exitcond317227_fu_360_p2;
wire   [0:0] xor_ln110_fu_355_p2;
wire   [3:0] select_ln110_fu_348_p3;
wire   [0:0] and_ln110_fu_366_p2;
wire   [0:0] or_ln112_fu_378_p2;
wire   [3:0] add_ln112_fu_372_p2;
wire   [6:0] p_shl_fu_403_p3;
wire   [6:0] select_ln112_1_cast_fu_399_p1;
wire   [3:0] select_ln112_fu_383_p3;
wire   [6:0] empty_92_fu_411_p2;
wire   [6:0] select_ln112_cast_fu_417_p1;
wire   [6:0] empty_93_fu_421_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bout_fu_110 <= 4'd0;
        end else if (((icmp_ln110_reg_506 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            bout_fu_110 <= select_ln110_1_fu_306_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln110_fu_265_p2 == 1'd0))) begin
            indvar_flatten12_fu_114 <= add_ln110_fu_271_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_114 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_106 <= 8'd0;
        end else if (((icmp_ln110_reg_506 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_106 <= select_ln112_2_fu_324_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_fu_102 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_102 <= select_ln112_1_fu_391_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            loop_index_i20_fu_98 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            loop_index_i20_fu_98 <= empty_fu_450_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln110_reg_506 <= icmp_ln110_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln110_reg_506 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln112_reg_510 <= icmp_ln112_fu_300_p2;
        trunc_ln110_reg_517 <= trunc_ln110_fu_314_p1;
        w1_addr_read_reg_521 <= m_axi_w1_RDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_fu_265_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln110_reg_506 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd7))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd6))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd5))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd4))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd3))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln110_reg_517 == 3'd2))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_we_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln110_reg_506 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_w1_RREADY = 1'b1;
    end else begin
        m_axi_w1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln110_reg_506 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_blk_n_R = m_axi_w1_RVALID;
    end else begin
        w1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln110_1_fu_294_p2 = (bout_fu_110 + 4'd1);

assign add_ln110_fu_271_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln112_1_fu_318_p2 = (indvar_flatten_fu_106 + 8'd1);

assign add_ln112_fu_372_p2 = (select_ln110_fu_348_p3 + 4'd1);

assign and_ln110_fu_366_p2 = (xor_ln110_fu_355_p2 & exitcond317227_fu_360_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln110_reg_506 == 1'd0) & (m_axi_w1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln110_reg_506 == 1'd0) & (m_axi_w1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln110_reg_506 == 1'd0) & (m_axi_w1_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_1_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_2_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_3_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_4_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_5_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_6_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_7_d0 = empty_94_fu_439_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_address0 = p_cast_fu_427_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_we_d0 = empty_94_fu_439_p1;

assign empty_92_fu_411_p2 = (p_shl_fu_403_p3 + select_ln112_1_cast_fu_399_p1);

assign empty_93_fu_421_p2 = (empty_92_fu_411_p2 + select_ln112_cast_fu_417_p1);

assign empty_94_fu_439_p1 = w1_addr_read_reg_521;

assign empty_fu_450_p2 = (select_ln112_fu_383_p3 + 4'd1);

assign exitcond317227_fu_360_p2 = ((loop_index_i20_fu_98 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_265_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd648) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_300_p2 = ((indvar_flatten_fu_106 == 8'd81) ? 1'b1 : 1'b0);

assign m_axi_w1_ARADDR = 64'd0;

assign m_axi_w1_ARBURST = 2'd0;

assign m_axi_w1_ARCACHE = 4'd0;

assign m_axi_w1_ARID = 1'd0;

assign m_axi_w1_ARLEN = 32'd0;

assign m_axi_w1_ARLOCK = 2'd0;

assign m_axi_w1_ARPROT = 3'd0;

assign m_axi_w1_ARQOS = 4'd0;

assign m_axi_w1_ARREGION = 4'd0;

assign m_axi_w1_ARSIZE = 3'd0;

assign m_axi_w1_ARUSER = 1'd0;

assign m_axi_w1_ARVALID = 1'b0;

assign m_axi_w1_AWADDR = 64'd0;

assign m_axi_w1_AWBURST = 2'd0;

assign m_axi_w1_AWCACHE = 4'd0;

assign m_axi_w1_AWID = 1'd0;

assign m_axi_w1_AWLEN = 32'd0;

assign m_axi_w1_AWLOCK = 2'd0;

assign m_axi_w1_AWPROT = 3'd0;

assign m_axi_w1_AWQOS = 4'd0;

assign m_axi_w1_AWREGION = 4'd0;

assign m_axi_w1_AWSIZE = 3'd0;

assign m_axi_w1_AWUSER = 1'd0;

assign m_axi_w1_AWVALID = 1'b0;

assign m_axi_w1_BREADY = 1'b0;

assign m_axi_w1_WDATA = 32'd0;

assign m_axi_w1_WID = 1'd0;

assign m_axi_w1_WLAST = 1'b0;

assign m_axi_w1_WSTRB = 4'd0;

assign m_axi_w1_WUSER = 1'd0;

assign m_axi_w1_WVALID = 1'b0;

assign or_ln112_fu_378_p2 = (icmp_ln112_reg_510 | and_ln110_fu_366_p2);

assign p_cast_fu_427_p1 = empty_93_fu_421_p2;

assign p_shl_fu_403_p3 = {{select_ln112_1_fu_391_p3}, {3'd0}};

assign select_ln110_1_fu_306_p3 = ((icmp_ln112_fu_300_p2[0:0] == 1'b1) ? add_ln110_1_fu_294_p2 : bout_fu_110);

assign select_ln110_fu_348_p3 = ((icmp_ln112_reg_510[0:0] == 1'b1) ? 4'd0 : k_fu_102);

assign select_ln112_1_cast_fu_399_p1 = select_ln112_1_fu_391_p3;

assign select_ln112_1_fu_391_p3 = ((and_ln110_fu_366_p2[0:0] == 1'b1) ? add_ln112_fu_372_p2 : select_ln110_fu_348_p3);

assign select_ln112_2_fu_324_p3 = ((icmp_ln112_fu_300_p2[0:0] == 1'b1) ? 8'd1 : add_ln112_1_fu_318_p2);

assign select_ln112_cast_fu_417_p1 = select_ln112_fu_383_p3;

assign select_ln112_fu_383_p3 = ((or_ln112_fu_378_p2[0:0] == 1'b1) ? 4'd0 : loop_index_i20_fu_98);

assign trunc_ln110_fu_314_p1 = select_ln110_1_fu_306_p3[2:0];

assign xor_ln110_fu_355_p2 = (icmp_ln112_reg_510 ^ 1'd1);

endmodule //srcnn_conv1_Pipeline_LOAD_WEIGHTS_K_L
