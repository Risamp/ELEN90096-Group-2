// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_input_buffer_c1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_i1_AWVALID,
        m_axi_i1_AWREADY,
        m_axi_i1_AWADDR,
        m_axi_i1_AWID,
        m_axi_i1_AWLEN,
        m_axi_i1_AWSIZE,
        m_axi_i1_AWBURST,
        m_axi_i1_AWLOCK,
        m_axi_i1_AWCACHE,
        m_axi_i1_AWPROT,
        m_axi_i1_AWQOS,
        m_axi_i1_AWREGION,
        m_axi_i1_AWUSER,
        m_axi_i1_WVALID,
        m_axi_i1_WREADY,
        m_axi_i1_WDATA,
        m_axi_i1_WSTRB,
        m_axi_i1_WLAST,
        m_axi_i1_WID,
        m_axi_i1_WUSER,
        m_axi_i1_ARVALID,
        m_axi_i1_ARREADY,
        m_axi_i1_ARADDR,
        m_axi_i1_ARID,
        m_axi_i1_ARLEN,
        m_axi_i1_ARSIZE,
        m_axi_i1_ARBURST,
        m_axi_i1_ARLOCK,
        m_axi_i1_ARCACHE,
        m_axi_i1_ARPROT,
        m_axi_i1_ARQOS,
        m_axi_i1_ARREGION,
        m_axi_i1_ARUSER,
        m_axi_i1_RVALID,
        m_axi_i1_RREADY,
        m_axi_i1_RDATA,
        m_axi_i1_RLAST,
        m_axi_i1_RID,
        m_axi_i1_RFIFONUM,
        m_axi_i1_RUSER,
        m_axi_i1_RRESP,
        m_axi_i1_BVALID,
        m_axi_i1_BREADY,
        m_axi_i1_BRESP,
        m_axi_i1_BID,
        m_axi_i1_BUSER,
        input_ftmap,
        h,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_i1_AWVALID;
input   m_axi_i1_AWREADY;
output  [63:0] m_axi_i1_AWADDR;
output  [0:0] m_axi_i1_AWID;
output  [31:0] m_axi_i1_AWLEN;
output  [2:0] m_axi_i1_AWSIZE;
output  [1:0] m_axi_i1_AWBURST;
output  [1:0] m_axi_i1_AWLOCK;
output  [3:0] m_axi_i1_AWCACHE;
output  [2:0] m_axi_i1_AWPROT;
output  [3:0] m_axi_i1_AWQOS;
output  [3:0] m_axi_i1_AWREGION;
output  [0:0] m_axi_i1_AWUSER;
output   m_axi_i1_WVALID;
input   m_axi_i1_WREADY;
output  [31:0] m_axi_i1_WDATA;
output  [3:0] m_axi_i1_WSTRB;
output   m_axi_i1_WLAST;
output  [0:0] m_axi_i1_WID;
output  [0:0] m_axi_i1_WUSER;
output   m_axi_i1_ARVALID;
input   m_axi_i1_ARREADY;
output  [63:0] m_axi_i1_ARADDR;
output  [0:0] m_axi_i1_ARID;
output  [31:0] m_axi_i1_ARLEN;
output  [2:0] m_axi_i1_ARSIZE;
output  [1:0] m_axi_i1_ARBURST;
output  [1:0] m_axi_i1_ARLOCK;
output  [3:0] m_axi_i1_ARCACHE;
output  [2:0] m_axi_i1_ARPROT;
output  [3:0] m_axi_i1_ARQOS;
output  [3:0] m_axi_i1_ARREGION;
output  [0:0] m_axi_i1_ARUSER;
input   m_axi_i1_RVALID;
output   m_axi_i1_RREADY;
input  [31:0] m_axi_i1_RDATA;
input   m_axi_i1_RLAST;
input  [0:0] m_axi_i1_RID;
input  [12:0] m_axi_i1_RFIFONUM;
input  [0:0] m_axi_i1_RUSER;
input  [1:0] m_axi_i1_RRESP;
input   m_axi_i1_BVALID;
output   m_axi_i1_BREADY;
input  [1:0] m_axi_i1_BRESP;
input  [0:0] m_axi_i1_BID;
input  [0:0] m_axi_i1_BUSER;
input  [63:0] input_ftmap;
input  [7:0] h;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0;
output  [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_i1_ARVALID;
reg[63:0] m_axi_i1_ARADDR;
reg[31:0] m_axi_i1_ARLEN;
reg m_axi_i1_RREADY;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0;
reg[10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    i1_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    i1_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_512_p1;
reg   [31:0] reg_523;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state30;
wire   [9:0] h_cast2_fu_535_p1;
reg   [9:0] h_cast2_reg_1180;
wire  signed [9:0] sext_ln98_fu_549_p1;
reg  signed [9:0] sext_ln98_reg_1185;
wire   [1:0] trunc_ln95_fu_565_p1;
reg   [1:0] trunc_ln95_reg_1190;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln95_fu_575_p2;
reg   [4:0] add_ln95_reg_1197;
reg   [2:0] lshr_ln_reg_1202;
wire   [0:0] icmp_ln95_fu_569_p2;
reg   [63:0] i1_addr_reg_1207;
reg   [63:0] i1_addr_1_reg_1213;
reg   [0:0] xs_sign_reg_1219;
reg   [7:0] xs_exp_reg_1224;
wire   [22:0] trunc_ln371_fu_758_p1;
reg   [22:0] trunc_ln371_reg_1230;
wire   [31:0] result_fu_865_p3;
reg   [31:0] result_reg_1235;
wire    ap_CS_fsm_state12;
reg   [31:0] data_1_reg_1240;
reg   [7:0] xs_exp_1_reg_1245;
wire   [22:0] trunc_ln371_1_fu_882_p1;
reg   [22:0] trunc_ln371_1_reg_1251;
wire   [10:0] trunc_ln107_fu_903_p1;
reg   [10:0] trunc_ln107_reg_1256;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_reg_1261;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_reg_1266;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1271;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1276;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1281;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1286;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1291;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1296;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_16_reg_1301;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_17_reg_1306;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_18_reg_1311;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_19_reg_1316;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_22_reg_1321;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_23_reg_1326;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_24_reg_1331;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_25_reg_1336;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_26_reg_1341;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_27_reg_1346;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_30_reg_1351;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_31_reg_1356;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_32_reg_1361;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_33_reg_1366;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_34_reg_1371;
reg   [10:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_35_reg_1376;
wire   [31:0] val_1_fu_1094_p3;
reg   [31:0] val_1_reg_1381;
wire   [31:0] result_6_fu_1102_p2;
reg   [31:0] result_6_reg_1386;
wire   [7:0] empty_66_fu_1118_p2;
reg   [7:0] empty_66_reg_1394;
wire    ap_CS_fsm_state25;
wire   [10:0] empty_68_fu_1134_p2;
reg   [10:0] empty_68_reg_1399;
wire   [0:0] exitcond2_fu_1112_p2;
wire   [31:0] result_7_fu_1146_p3;
wire   [31:0] empty_67_fu_1153_p1;
reg   [31:0] empty_67_reg_1409;
reg   [7:0] loop_index_reg_501;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state27;
wire   [63:0] zext_ln107_1_fu_895_p1;
wire   [63:0] zext_ln107_2_fu_913_p1;
wire   [63:0] zext_ln107_3_fu_927_p1;
wire   [63:0] zext_ln107_4_fu_941_p1;
wire   [63:0] zext_ln116_fu_955_p1;
wire   [63:0] zext_ln116_1_fu_969_p1;
wire   [63:0] zext_ln116_2_fu_983_p1;
wire   [63:0] zext_ln116_3_fu_997_p1;
wire   [63:0] p_cast_fu_1157_p1;
wire  signed [63:0] sext_ln100_1_fu_704_p1;
wire  signed [63:0] sext_ln101_fu_730_p1;
reg   [4:0] bh_fu_158;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_512_p0;
wire    ap_CS_fsm_state13;
wire   [8:0] zext_ln95_fu_539_p1;
wire   [8:0] add_ln98_fu_543_p2;
wire   [9:0] zext_ln95_1_fu_561_p1;
wire   [9:0] add_ln98_1_fu_595_p2;
wire   [5:0] zext_ln98_fu_591_p1;
wire   [5:0] add_ln55_1_fu_614_p2;
wire  signed [9:0] sext_ln55_fu_620_p1;
wire   [0:0] tmp_1_fu_629_p3;
wire   [0:0] tmp_fu_600_p3;
wire   [0:0] icmp_ln55_fu_608_p2;
wire   [0:0] or_ln54_fu_645_p2;
wire   [9:0] select_ln54_fu_637_p3;
wire   [9:0] add_ln55_fu_624_p2;
wire   [9:0] hclamp_fu_651_p3;
wire   [11:0] shl_ln100_1_fu_667_p3;
wire   [19:0] shl_ln_fu_659_p3;
wire  signed [19:0] sext_ln100_fu_675_p1;
wire   [19:0] sub_ln100_fu_679_p2;
wire  signed [63:0] sext_ln100_2_fu_685_p1;
wire   [63:0] add_ln100_fu_689_p2;
wire   [61:0] trunc_ln3_fu_694_p4;
wire   [63:0] add_ln101_fu_714_p2;
wire   [61:0] trunc_ln4_fu_720_p4;
wire   [24:0] mantissa_fu_762_p4;
wire   [8:0] zext_ln346_fu_775_p1;
wire   [8:0] add_ln346_fu_778_p2;
wire   [7:0] sub_ln18_fu_792_p2;
wire   [0:0] tmp_5_fu_784_p3;
wire  signed [8:0] sext_ln18_fu_797_p1;
wire   [8:0] select_ln18_fu_801_p3;
wire  signed [31:0] sext_ln18_1_fu_809_p1;
wire   [78:0] zext_ln15_fu_771_p1;
wire   [78:0] zext_ln18_fu_813_p1;
wire   [78:0] lshr_ln18_fu_817_p2;
wire   [0:0] tmp_6_fu_829_p3;
wire   [78:0] shl_ln18_fu_823_p2;
wire   [31:0] zext_ln21_fu_837_p1;
wire   [31:0] tmp_2_fu_841_p4;
wire   [31:0] val_fu_851_p3;
wire   [31:0] result_2_fu_859_p2;
wire   [2:0] mul_ln107_fu_889_p0;
wire   [9:0] mul_ln107_fu_889_p1;
wire   [11:0] mul_ln107_fu_889_p2;
wire   [10:0] add_ln107_fu_907_p2;
wire   [10:0] add_ln107_1_fu_921_p2;
wire   [10:0] add_ln107_2_fu_935_p2;
wire   [10:0] add_ln116_fu_949_p2;
wire   [10:0] add_ln116_1_fu_963_p2;
wire   [10:0] add_ln116_2_fu_977_p2;
wire   [10:0] add_ln116_3_fu_991_p2;
wire   [24:0] mantissa_1_fu_1005_p4;
wire   [8:0] zext_ln346_1_fu_1018_p1;
wire   [8:0] add_ln346_1_fu_1021_p2;
wire   [7:0] sub_ln18_1_fu_1035_p2;
wire   [0:0] tmp_7_fu_1027_p3;
wire  signed [8:0] sext_ln18_2_fu_1040_p1;
wire   [8:0] select_ln18_2_fu_1044_p3;
wire  signed [31:0] sext_ln18_3_fu_1052_p1;
wire   [78:0] zext_ln15_1_fu_1014_p1;
wire   [78:0] zext_ln18_1_fu_1056_p1;
wire   [78:0] lshr_ln18_1_fu_1060_p2;
wire   [0:0] tmp_8_fu_1072_p3;
wire   [78:0] shl_ln18_1_fu_1066_p2;
wire   [31:0] zext_ln21_1_fu_1080_p1;
wire   [31:0] tmp_4_fu_1084_p4;
wire   [8:0] loop_index_cast_fu_1108_p1;
wire   [8:0] arrayidx31612_sum_fu_1124_p2;
wire   [10:0] arrayidx31612_sum_cast219_fu_1130_p1;
wire   [0:0] xs_sign_1_fu_1139_p3;
reg    grp_fu_512_ce;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg   [30:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire   [11:0] mul_ln107_fu_889_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

srcnn_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_512_p0),
    .ce(grp_fu_512_ce),
    .dout(grp_fu_512_p1)
);

srcnn_mul_3ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_3ns_10ns_12_1_1_U6(
    .din0(mul_ln107_fu_889_p0),
    .din1(mul_ln107_fu_889_p1),
    .dout(mul_ln107_fu_889_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bh_fu_158 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        bh_fu_158 <= add_ln95_reg_1197;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        loop_index_reg_501 <= empty_66_reg_1394;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        loop_index_reg_501 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln95_reg_1197 <= add_ln95_fu_575_p2;
        trunc_ln95_reg_1190 <= trunc_ln95_fu_565_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1281 <= zext_ln116_2_fu_983_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1286 <= zext_ln116_3_fu_997_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1291 <= zext_ln107_3_fu_927_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1296 <= zext_ln107_4_fu_941_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_16_reg_1301 <= zext_ln116_fu_955_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_17_reg_1306 <= zext_ln116_1_fu_969_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_18_reg_1311 <= zext_ln116_2_fu_983_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_19_reg_1316 <= zext_ln116_3_fu_997_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_22_reg_1321 <= zext_ln107_3_fu_927_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_23_reg_1326 <= zext_ln107_4_fu_941_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_24_reg_1331 <= zext_ln116_fu_955_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_25_reg_1336 <= zext_ln116_1_fu_969_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_26_reg_1341 <= zext_ln116_2_fu_983_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_27_reg_1346 <= zext_ln116_3_fu_997_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_30_reg_1351 <= zext_ln107_3_fu_927_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_31_reg_1356 <= zext_ln107_4_fu_941_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_32_reg_1361 <= zext_ln116_fu_955_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_33_reg_1366 <= zext_ln116_1_fu_969_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_34_reg_1371 <= zext_ln116_2_fu_983_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_35_reg_1376 <= zext_ln116_3_fu_997_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_reg_1261 <= zext_ln107_3_fu_927_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_reg_1266 <= zext_ln107_4_fu_941_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1271 <= zext_ln116_fu_955_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1276 <= zext_ln116_1_fu_969_p1;
        result_6_reg_1386 <= result_6_fu_1102_p2;
        trunc_ln107_reg_1256 <= trunc_ln107_fu_903_p1;
        val_1_reg_1381 <= val_1_fu_1094_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_1_reg_1240 <= m_axi_i1_RDATA;
        trunc_ln371_1_reg_1251 <= trunc_ln371_1_fu_882_p1;
        xs_exp_1_reg_1245 <= {{m_axi_i1_RDATA[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        empty_66_reg_1394 <= empty_66_fu_1118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        empty_67_reg_1409 <= empty_67_fu_1153_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        empty_68_reg_1399 <= empty_68_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        h_cast2_reg_1180[7 : 0] <= h_cast2_fu_535_p1[7 : 0];
        sext_ln98_reg_1185 <= sext_ln98_fu_549_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_addr_1_reg_1213 <= sext_ln101_fu_730_p1;
        i1_addr_reg_1207 <= sext_ln100_1_fu_704_p1;
        lshr_ln_reg_1202 <= {{bh_fu_158[4:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_523 <= grp_fu_512_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        result_reg_1235 <= result_fu_865_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln371_reg_1230 <= trunc_ln371_fu_758_p1;
        xs_exp_reg_1224 <= {{m_axi_i1_RDATA[30:23]}};
        xs_sign_reg_1219 <= m_axi_i1_RDATA[32'd31];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((m_axi_i1_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((m_axi_i1_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((m_axi_i1_ARREADY == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((m_axi_i1_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

always @ (*) begin
    if ((m_axi_i1_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_i1_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln95_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_26_reg_1341;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_24_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = p_cast_fu_1157_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_23_reg_1326;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = zext_ln107_2_fu_913_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_27_reg_1346;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_25_reg_1336;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_22_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1 = zext_ln107_1_fu_895_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 = empty_67_reg_1409;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state27)) | ((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_18_reg_1311;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_16_reg_1301;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = p_cast_fu_1157_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1296;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = zext_ln107_2_fu_913_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_19_reg_1316;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_17_reg_1306;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1291;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1 = zext_ln107_1_fu_895_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 = empty_67_reg_1409;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state27)) | ((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd3) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1281;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1271;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = p_cast_fu_1157_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_reg_1266;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = zext_ln107_2_fu_913_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1286;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1276;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_reg_1261;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1 = zext_ln107_1_fu_895_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 = empty_67_reg_1409;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state27)) | ((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_34_reg_1371;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_32_reg_1361;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = p_cast_fu_1157_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_31_reg_1356;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = zext_ln107_2_fu_913_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_35_reg_1376;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_33_reg_1366;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_30_reg_1351;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = zext_ln107_1_fu_895_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = empty_67_reg_1409;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = reg_523;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = grp_fu_512_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state27)) | ((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state31)) | ((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state30)) | ((trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_i1_ARREADY == 1'b1) & (trunc_ln95_reg_1190 == 2'd2) & (1'b1 == ap_CS_fsm_state17)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        grp_fu_512_ce = 1'b1;
    end else begin
        grp_fu_512_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_512_p0 = result_7_fu_1146_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_512_p0 = result_reg_1235;
    end else begin
        grp_fu_512_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state3))) begin
        i1_blk_n_AR = m_axi_i1_ARREADY;
    end else begin
        i1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11))) begin
        i1_blk_n_R = m_axi_i1_RVALID;
    end else begin
        i1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_i1_ARADDR = i1_addr_1_reg_1213;
    end else if ((((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_i1_ARADDR = i1_addr_reg_1207;
    end else begin
        m_axi_i1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_i1_ARLEN = 32'd255;
    end else if ((((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_i1_ARLEN = 32'd1;
    end else begin
        m_axi_i1_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_i1_ARVALID = 1'b1;
    end else begin
        m_axi_i1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        m_axi_i1_RREADY = 1'b1;
    end else begin
        m_axi_i1_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln95_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_i1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((exitcond2_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_i1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_689_p2 = ($signed(sext_ln100_2_fu_685_p1) + $signed(input_ftmap));

assign add_ln101_fu_714_p2 = (add_ln100_fu_689_p2 + 64'd1016);

assign add_ln107_1_fu_921_p2 = (trunc_ln107_fu_903_p1 + 11'd2);

assign add_ln107_2_fu_935_p2 = (trunc_ln107_fu_903_p1 + 11'd3);

assign add_ln107_fu_907_p2 = (trunc_ln107_fu_903_p1 + 11'd1);

assign add_ln116_1_fu_963_p2 = (trunc_ln107_fu_903_p1 + 11'd260);

assign add_ln116_2_fu_977_p2 = (trunc_ln107_fu_903_p1 + 11'd261);

assign add_ln116_3_fu_991_p2 = (trunc_ln107_fu_903_p1 + 11'd262);

assign add_ln116_fu_949_p2 = (trunc_ln107_fu_903_p1 + 11'd259);

assign add_ln346_1_fu_1021_p2 = ($signed(zext_ln346_1_fu_1018_p1) + $signed(9'd385));

assign add_ln346_fu_778_p2 = ($signed(zext_ln346_fu_775_p1) + $signed(9'd385));

assign add_ln55_1_fu_614_p2 = ($signed(zext_ln98_fu_591_p1) + $signed(6'd60));

assign add_ln55_fu_624_p2 = ($signed(sext_ln55_fu_620_p1) + $signed(h_cast2_reg_1180));

assign add_ln95_fu_575_p2 = (bh_fu_158 + 5'd1);

assign add_ln98_1_fu_595_p2 = ($signed(sext_ln98_reg_1185) + $signed(zext_ln95_1_fu_561_p1));

assign add_ln98_fu_543_p2 = ($signed(zext_ln95_fu_539_p1) + $signed(9'd508));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign arrayidx31612_sum_cast219_fu_1130_p1 = arrayidx31612_sum_fu_1124_p2;

assign arrayidx31612_sum_fu_1124_p2 = (loop_index_cast_fu_1108_p1 + 9'd4);

assign empty_66_fu_1118_p2 = (loop_index_reg_501 + 8'd1);

assign empty_67_fu_1153_p1 = m_axi_i1_RDATA;

assign empty_68_fu_1134_p2 = (trunc_ln107_reg_1256 + arrayidx31612_sum_cast219_fu_1130_p1);

assign exitcond2_fu_1112_p2 = ((loop_index_reg_501 == 8'd255) ? 1'b1 : 1'b0);

assign h_cast2_fu_535_p1 = h;

assign hclamp_fu_651_p3 = ((or_ln54_fu_645_p2[0:0] == 1'b1) ? select_ln54_fu_637_p3 : add_ln55_fu_624_p2);

assign icmp_ln55_fu_608_p2 = (($signed(add_ln98_1_fu_595_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_569_p2 = ((bh_fu_158 == 5'd23) ? 1'b1 : 1'b0);

assign loop_index_cast_fu_1108_p1 = loop_index_reg_501;

assign lshr_ln18_1_fu_1060_p2 = zext_ln15_1_fu_1014_p1 >> zext_ln18_1_fu_1056_p1;

assign lshr_ln18_fu_817_p2 = zext_ln15_fu_771_p1 >> zext_ln18_fu_813_p1;

assign m_axi_i1_ARBURST = 2'd0;

assign m_axi_i1_ARCACHE = 4'd0;

assign m_axi_i1_ARID = 1'd0;

assign m_axi_i1_ARLOCK = 2'd0;

assign m_axi_i1_ARPROT = 3'd0;

assign m_axi_i1_ARQOS = 4'd0;

assign m_axi_i1_ARREGION = 4'd0;

assign m_axi_i1_ARSIZE = 3'd0;

assign m_axi_i1_ARUSER = 1'd0;

assign m_axi_i1_AWADDR = 64'd0;

assign m_axi_i1_AWBURST = 2'd0;

assign m_axi_i1_AWCACHE = 4'd0;

assign m_axi_i1_AWID = 1'd0;

assign m_axi_i1_AWLEN = 32'd0;

assign m_axi_i1_AWLOCK = 2'd0;

assign m_axi_i1_AWPROT = 3'd0;

assign m_axi_i1_AWQOS = 4'd0;

assign m_axi_i1_AWREGION = 4'd0;

assign m_axi_i1_AWSIZE = 3'd0;

assign m_axi_i1_AWUSER = 1'd0;

assign m_axi_i1_AWVALID = 1'b0;

assign m_axi_i1_BREADY = 1'b0;

assign m_axi_i1_WDATA = 32'd0;

assign m_axi_i1_WID = 1'd0;

assign m_axi_i1_WLAST = 1'b0;

assign m_axi_i1_WSTRB = 4'd0;

assign m_axi_i1_WUSER = 1'd0;

assign m_axi_i1_WVALID = 1'b0;

assign mantissa_1_fu_1005_p4 = {{{{1'd1}, {trunc_ln371_1_reg_1251}}}, {1'd0}};

assign mantissa_fu_762_p4 = {{{{1'd1}, {trunc_ln371_reg_1230}}}, {1'd0}};

assign mul_ln107_fu_889_p0 = mul_ln107_fu_889_p00;

assign mul_ln107_fu_889_p00 = lshr_ln_reg_1202;

assign mul_ln107_fu_889_p1 = 12'd263;

assign or_ln54_fu_645_p2 = (tmp_fu_600_p3 | icmp_ln55_fu_608_p2);

assign p_cast_fu_1157_p1 = empty_68_reg_1399;

assign result_2_fu_859_p2 = (32'd0 - val_fu_851_p3);

assign result_6_fu_1102_p2 = (32'd0 - val_1_fu_1094_p3);

assign result_7_fu_1146_p3 = ((xs_sign_1_fu_1139_p3[0:0] == 1'b1) ? result_6_reg_1386 : val_1_reg_1381);

assign result_fu_865_p3 = ((xs_sign_reg_1219[0:0] == 1'b1) ? result_2_fu_859_p2 : val_fu_851_p3);

assign select_ln18_2_fu_1044_p3 = ((tmp_7_fu_1027_p3[0:0] == 1'b1) ? sext_ln18_2_fu_1040_p1 : add_ln346_1_fu_1021_p2);

assign select_ln18_fu_801_p3 = ((tmp_5_fu_784_p3[0:0] == 1'b1) ? sext_ln18_fu_797_p1 : add_ln346_fu_778_p2);

assign select_ln54_fu_637_p3 = ((tmp_1_fu_629_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln100_1_fu_704_p1 = $signed(trunc_ln3_fu_694_p4);

assign sext_ln100_2_fu_685_p1 = $signed(sub_ln100_fu_679_p2);

assign sext_ln100_fu_675_p1 = $signed(shl_ln100_1_fu_667_p3);

assign sext_ln101_fu_730_p1 = $signed(trunc_ln4_fu_720_p4);

assign sext_ln18_1_fu_809_p1 = $signed(select_ln18_fu_801_p3);

assign sext_ln18_2_fu_1040_p1 = $signed(sub_ln18_1_fu_1035_p2);

assign sext_ln18_3_fu_1052_p1 = $signed(select_ln18_2_fu_1044_p3);

assign sext_ln18_fu_797_p1 = $signed(sub_ln18_fu_792_p2);

assign sext_ln55_fu_620_p1 = $signed(add_ln55_1_fu_614_p2);

assign sext_ln98_fu_549_p1 = $signed(add_ln98_fu_543_p2);

assign shl_ln100_1_fu_667_p3 = {{hclamp_fu_651_p3}, {2'd0}};

assign shl_ln18_1_fu_1066_p2 = zext_ln15_1_fu_1014_p1 << zext_ln18_1_fu_1056_p1;

assign shl_ln18_fu_823_p2 = zext_ln15_fu_771_p1 << zext_ln18_fu_813_p1;

assign shl_ln_fu_659_p3 = {{hclamp_fu_651_p3}, {10'd0}};

assign sub_ln100_fu_679_p2 = ($signed(shl_ln_fu_659_p3) - $signed(sext_ln100_fu_675_p1));

assign sub_ln18_1_fu_1035_p2 = (8'd127 - xs_exp_1_reg_1245);

assign sub_ln18_fu_792_p2 = (8'd127 - xs_exp_reg_1224);

assign tmp_1_fu_629_p3 = add_ln98_1_fu_595_p2[32'd9];

assign tmp_2_fu_841_p4 = {{shl_ln18_fu_823_p2[55:24]}};

assign tmp_4_fu_1084_p4 = {{shl_ln18_1_fu_1066_p2[55:24]}};

assign tmp_5_fu_784_p3 = add_ln346_fu_778_p2[32'd8];

assign tmp_6_fu_829_p3 = lshr_ln18_fu_817_p2[32'd24];

assign tmp_7_fu_1027_p3 = add_ln346_1_fu_1021_p2[32'd8];

assign tmp_8_fu_1072_p3 = lshr_ln18_1_fu_1060_p2[32'd24];

assign tmp_fu_600_p3 = add_ln98_1_fu_595_p2[32'd9];

assign trunc_ln107_fu_903_p1 = mul_ln107_fu_889_p2[10:0];

assign trunc_ln371_1_fu_882_p1 = m_axi_i1_RDATA[22:0];

assign trunc_ln371_fu_758_p1 = m_axi_i1_RDATA[22:0];

assign trunc_ln3_fu_694_p4 = {{add_ln100_fu_689_p2[63:2]}};

assign trunc_ln4_fu_720_p4 = {{add_ln101_fu_714_p2[63:2]}};

assign trunc_ln95_fu_565_p1 = bh_fu_158[1:0];

assign val_1_fu_1094_p3 = ((tmp_7_fu_1027_p3[0:0] == 1'b1) ? zext_ln21_1_fu_1080_p1 : tmp_4_fu_1084_p4);

assign val_fu_851_p3 = ((tmp_5_fu_784_p3[0:0] == 1'b1) ? zext_ln21_fu_837_p1 : tmp_2_fu_841_p4);

assign xs_sign_1_fu_1139_p3 = data_1_reg_1240[32'd31];

assign zext_ln107_1_fu_895_p1 = mul_ln107_fu_889_p2;

assign zext_ln107_2_fu_913_p1 = add_ln107_fu_907_p2;

assign zext_ln107_3_fu_927_p1 = add_ln107_1_fu_921_p2;

assign zext_ln107_4_fu_941_p1 = add_ln107_2_fu_935_p2;

assign zext_ln116_1_fu_969_p1 = add_ln116_1_fu_963_p2;

assign zext_ln116_2_fu_983_p1 = add_ln116_2_fu_977_p2;

assign zext_ln116_3_fu_997_p1 = add_ln116_3_fu_991_p2;

assign zext_ln116_fu_955_p1 = add_ln116_fu_949_p2;

assign zext_ln15_1_fu_1014_p1 = mantissa_1_fu_1005_p4;

assign zext_ln15_fu_771_p1 = mantissa_fu_762_p4;

assign zext_ln18_1_fu_1056_p1 = $unsigned(sext_ln18_3_fu_1052_p1);

assign zext_ln18_fu_813_p1 = $unsigned(sext_ln18_1_fu_809_p1);

assign zext_ln21_1_fu_1080_p1 = tmp_8_fu_1072_p3;

assign zext_ln21_fu_837_p1 = tmp_6_fu_829_p3;

assign zext_ln346_1_fu_1018_p1 = xs_exp_1_reg_1245;

assign zext_ln346_fu_775_p1 = xs_exp_reg_1224;

assign zext_ln95_1_fu_561_p1 = bh_fu_158;

assign zext_ln95_fu_539_p1 = h;

assign zext_ln98_fu_591_p1 = bh_fu_158;

always @ (posedge ap_clk) begin
    h_cast2_reg_1180[9:8] <= 2'b00;
end

endmodule //srcnn_load_input_buffer_c1
