// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_input_buffer_c1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RFIFONUM,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_ftmap,
        h,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [63:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [63:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [8:0] m_axi_input_r_RFIFONUM;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [63:0] input_ftmap;
input  [7:0] h;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0;
output  [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg[63:0] m_axi_input_r_ARADDR;
reg[31:0] m_axi_input_r_ARLEN;
reg m_axi_input_r_RREADY;
reg[9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0;
reg[9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0;
reg[9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0;
reg[9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1;
reg[31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    input_r_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_404_p1;
reg   [31:0] reg_411;
wire    ap_CS_fsm_state33;
wire   [9:0] h_cast2_fu_419_p1;
reg   [9:0] h_cast2_reg_1060;
wire  signed [9:0] sext_ln76_fu_433_p1;
reg  signed [9:0] sext_ln76_reg_1065;
wire   [9:0] or_ln_fu_445_p3;
reg   [9:0] or_ln_reg_1070;
wire    ap_CS_fsm_state2;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105;
reg   [9:0] conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110;
wire   [4:0] add_ln74_fu_545_p2;
reg   [4:0] add_ln74_reg_1118;
reg   [63:0] input_r_addr_reg_1123;
wire   [0:0] icmp_ln74_fu_539_p2;
reg   [63:0] input_r_addr_1_reg_1129;
reg   [0:0] xs_sign_reg_1135;
reg   [7:0] xs_exp_reg_1140;
wire   [22:0] trunc_ln371_fu_718_p1;
reg   [22:0] trunc_ln371_reg_1146;
wire   [31:0] result_fu_825_p3;
reg   [31:0] result_reg_1151;
wire    ap_CS_fsm_state12;
reg   [31:0] data_1_reg_1156;
reg   [7:0] xs_exp_1_reg_1161;
wire   [22:0] trunc_ln371_1_fu_842_p1;
reg   [22:0] trunc_ln371_1_reg_1167;
wire   [55:0] smantissa_fu_925_p3;
reg   [55:0] smantissa_reg_1172;
wire    ap_CS_fsm_state17;
wire   [7:0] empty_69_fu_943_p2;
reg   [7:0] empty_69_reg_1180;
wire    ap_CS_fsm_state18;
wire   [8:0] arrayidx31612_sum_fu_949_p2;
wire   [0:0] exitcond2_fu_937_p2;
reg   [2:0] p_cast_reg_1190;
wire   [31:0] result_7_fu_1003_p3;
reg   [31:0] input_r_addr_read_reg_1199;
reg   [7:0] loop_index_reg_393;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln85_fu_453_p1;
wire   [63:0] zext_ln85_1_fu_464_p1;
wire   [63:0] zext_ln85_2_fu_475_p1;
wire   [63:0] zext_ln85_3_fu_486_p1;
wire   [63:0] zext_ln94_fu_497_p1;
wire   [63:0] zext_ln94_1_fu_508_p1;
wire   [63:0] zext_ln94_2_fu_519_p1;
wire   [63:0] zext_ln94_3_fu_530_p1;
wire   [63:0] p_cast103_fu_1036_p1;
wire  signed [63:0] sext_ln78_1_fu_664_p1;
wire  signed [63:0] sext_ln79_fu_690_p1;
reg   [4:0] bh_fu_182;
wire   [31:0] empty_70_fu_1016_p1;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_404_p0;
wire    ap_CS_fsm_state13;
wire   [8:0] zext_ln74_fu_423_p1;
wire   [8:0] add_ln76_fu_427_p2;
wire   [9:0] add_ln85_fu_458_p2;
wire   [9:0] add_ln85_1_fu_469_p2;
wire   [9:0] add_ln85_2_fu_480_p2;
wire   [9:0] add_ln94_fu_491_p2;
wire   [9:0] add_ln94_1_fu_502_p2;
wire   [9:0] add_ln94_2_fu_513_p2;
wire   [9:0] add_ln94_3_fu_524_p2;
wire   [9:0] zext_ln74_1_fu_535_p1;
wire   [9:0] add_ln76_1_fu_555_p2;
wire   [5:0] zext_ln76_fu_551_p1;
wire   [5:0] add_ln55_1_fu_574_p2;
wire  signed [9:0] sext_ln55_fu_580_p1;
wire   [0:0] tmp_1_fu_589_p3;
wire   [0:0] tmp_fu_560_p3;
wire   [0:0] icmp_ln55_fu_568_p2;
wire   [0:0] or_ln54_fu_605_p2;
wire   [9:0] select_ln54_fu_597_p3;
wire   [9:0] add_ln55_fu_584_p2;
wire   [9:0] hclamp_fu_611_p3;
wire   [11:0] shl_ln78_1_fu_627_p3;
wire   [19:0] shl_ln_fu_619_p3;
wire  signed [19:0] sext_ln78_fu_635_p1;
wire   [19:0] sub_ln78_fu_639_p2;
wire  signed [63:0] sext_ln78_2_fu_645_p1;
wire   [63:0] add_ln78_fu_649_p2;
wire   [61:0] trunc_ln2_fu_654_p4;
wire   [63:0] add_ln79_fu_674_p2;
wire   [61:0] trunc_ln3_fu_680_p4;
wire   [24:0] mantissa_fu_722_p4;
wire   [8:0] zext_ln346_fu_735_p1;
wire   [8:0] add_ln346_fu_738_p2;
wire   [7:0] sub_ln18_fu_752_p2;
wire   [0:0] tmp_4_fu_744_p3;
wire  signed [8:0] sext_ln18_fu_757_p1;
wire   [8:0] select_ln18_fu_761_p3;
wire  signed [31:0] sext_ln18_1_fu_769_p1;
wire   [78:0] zext_ln15_fu_731_p1;
wire   [78:0] zext_ln18_fu_773_p1;
wire   [78:0] lshr_ln18_fu_777_p2;
wire   [0:0] tmp_5_fu_789_p3;
wire   [78:0] shl_ln18_fu_783_p2;
wire   [31:0] zext_ln21_fu_797_p1;
wire   [31:0] tmp_3_fu_801_p4;
wire   [31:0] val_fu_811_p3;
wire   [31:0] result_2_fu_819_p2;
wire   [24:0] mantissa_1_fu_846_p4;
wire   [8:0] zext_ln346_1_fu_859_p1;
wire   [8:0] add_ln346_1_fu_862_p2;
wire   [7:0] sub_ln18_1_fu_876_p2;
wire   [0:0] tmp_6_fu_868_p3;
wire  signed [8:0] sext_ln18_2_fu_881_p1;
wire   [8:0] select_ln18_2_fu_885_p3;
wire  signed [31:0] sext_ln18_3_fu_893_p1;
wire   [24:0] sext_ln18_3cast_fu_901_p1;
wire   [24:0] lshr_ln18_1_fu_905_p2;
wire   [78:0] zext_ln15_1_fu_855_p1;
wire   [78:0] zext_ln18_1_fu_897_p1;
wire   [78:0] shl_ln18_1_fu_915_p2;
wire   [55:0] zext_ln18_2_fu_911_p1;
wire   [55:0] trunc_ln18_1_fu_921_p1;
wire   [8:0] loop_index_cast_fu_933_p1;
wire   [6:0] grp_fu_955_p1;
wire   [8:0] mul_fu_965_p0;
wire   [10:0] mul_fu_965_p1;
wire   [18:0] mul_fu_965_p2;
wire   [31:0] val_1_fu_981_p4;
wire   [0:0] xs_sign_1_fu_996_p3;
wire   [31:0] result_6_fu_990_p2;
wire   [8:0] grp_fu_955_p2;
wire   [9:0] p_cast99_fu_1027_p1;
wire   [9:0] empty_72_fu_1031_p2;
reg    grp_fu_404_ce;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg    grp_fu_955_ap_start;
wire    grp_fu_955_ap_done;
reg    grp_fu_955_ce;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg   [33:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire   [18:0] mul_fu_965_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

srcnn_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_404_p0),
    .ce(grp_fu_404_ce),
    .dout(grp_fu_404_p1)
);

srcnn_urem_9ns_7ns_9_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 9 ))
urem_9ns_7ns_9_13_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_955_ap_start),
    .done(grp_fu_955_ap_done),
    .din0(arrayidx31612_sum_fu_949_p2),
    .din1(grp_fu_955_p1),
    .ce(grp_fu_955_ce),
    .dout(grp_fu_955_p2)
);

srcnn_mul_9ns_11ns_19_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
mul_9ns_11ns_19_1_1_U7(
    .din0(mul_fu_965_p0),
    .din1(mul_fu_965_p1),
    .dout(mul_fu_965_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bh_fu_182 <= 5'd0;
    end else if (((exitcond2_fu_937_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        bh_fu_182 <= add_ln74_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        loop_index_reg_393 <= empty_69_reg_1180;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        loop_index_reg_393 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln74_reg_1118 <= add_ln74_fu_545_p2;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085 <= zext_ln85_2_fu_475_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090 <= zext_ln85_3_fu_486_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095 <= zext_ln94_fu_497_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100 <= zext_ln94_1_fu_508_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105 <= zext_ln94_2_fu_519_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110 <= zext_ln94_3_fu_530_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075 <= zext_ln85_fu_453_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080 <= zext_ln85_1_fu_464_p1;
        or_ln_reg_1070 <= or_ln_fu_445_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        data_1_reg_1156 <= m_axi_input_r_RDATA;
        trunc_ln371_1_reg_1167 <= trunc_ln371_1_fu_842_p1;
        xs_exp_1_reg_1161 <= {{m_axi_input_r_RDATA[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        empty_69_reg_1180 <= empty_69_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        h_cast2_reg_1060[7 : 0] <= h_cast2_fu_419_p1[7 : 0];
        sext_ln76_reg_1065 <= sext_ln76_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_r_addr_1_reg_1129 <= sext_ln79_fu_690_p1;
        input_r_addr_reg_1123 <= sext_ln78_1_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        input_r_addr_read_reg_1199 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_937_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        p_cast_reg_1190 <= {{mul_fu_965_p2[17:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_411 <= grp_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        result_reg_1151 <= result_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        smantissa_reg_1172 <= smantissa_fu_925_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln371_reg_1146 <= trunc_ln371_fu_718_p1;
        xs_exp_reg_1140 <= {{m_axi_input_r_RDATA[30:23]}};
        xs_sign_reg_1135 <= m_axi_input_r_RDATA[32'd31];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((m_axi_input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((m_axi_input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((m_axi_input_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_input_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_input_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln74_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd6) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd5) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd4) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd3) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd2) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast_reg_1190 == 3'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 = p_cast103_fu_1036_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_11_reg_1090;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_9_reg_1080;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_10_reg_1085;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_8_reg_1075;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 = empty_70_fu_1016_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 = grp_fu_404_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 = grp_fu_404_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((p_cast_reg_1190 == 3'd0) & (1'b1 == ap_CS_fsm_state30)) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_14_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_13_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = p_cast103_fu_1036_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_15_reg_1110;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_in_12_reg_1095;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = grp_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = empty_70_fu_1016_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = grp_fu_404_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | ((p_cast_reg_1190 == 3'd7) & (1'b1 == ap_CS_fsm_state30)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_in_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state33) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_404_ce = 1'b1;
    end else begin
        grp_fu_404_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_404_p0 = result_7_fu_1003_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_404_p0 = result_reg_1151;
    end else begin
        grp_fu_404_p0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_937_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_955_ap_start = 1'b1;
    end else begin
        grp_fu_955_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_955_ce = 1'b1;
    end else begin
        grp_fu_955_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state11))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_input_r_ARADDR = input_r_addr_1_reg_1129;
    end else if ((((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_input_r_ARADDR = input_r_addr_reg_1123;
    end else begin
        m_axi_input_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_input_r_ARLEN = 32'd255;
    end else if ((((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_input_r_ARLEN = 32'd1;
    end else begin
        m_axi_input_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln74_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((exitcond2_fu_937_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((m_axi_input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln346_1_fu_862_p2 = ($signed(zext_ln346_1_fu_859_p1) + $signed(9'd385));

assign add_ln346_fu_738_p2 = ($signed(zext_ln346_fu_735_p1) + $signed(9'd385));

assign add_ln55_1_fu_574_p2 = ($signed(zext_ln76_fu_551_p1) + $signed(6'd60));

assign add_ln55_fu_584_p2 = ($signed(sext_ln55_fu_580_p1) + $signed(h_cast2_reg_1060));

assign add_ln74_fu_545_p2 = (bh_fu_182 + 5'd1);

assign add_ln76_1_fu_555_p2 = ($signed(sext_ln76_reg_1065) + $signed(zext_ln74_1_fu_535_p1));

assign add_ln76_fu_427_p2 = ($signed(zext_ln74_fu_423_p1) + $signed(9'd508));

assign add_ln78_fu_649_p2 = ($signed(sext_ln78_2_fu_645_p1) + $signed(input_ftmap));

assign add_ln79_fu_674_p2 = (add_ln78_fu_649_p2 + 64'd1016);

assign add_ln85_1_fu_469_p2 = (or_ln_fu_445_p3 + 10'd2);

assign add_ln85_2_fu_480_p2 = (or_ln_fu_445_p3 + 10'd3);

assign add_ln85_fu_458_p2 = (or_ln_fu_445_p3 + 10'd1);

assign add_ln94_1_fu_502_p2 = (or_ln_fu_445_p3 + 10'd29);

assign add_ln94_2_fu_513_p2 = (or_ln_fu_445_p3 + 10'd30);

assign add_ln94_3_fu_524_p2 = (or_ln_fu_445_p3 + 10'd31);

assign add_ln94_fu_491_p2 = (or_ln_fu_445_p3 + 10'd28);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign arrayidx31612_sum_fu_949_p2 = (loop_index_cast_fu_933_p1 + 9'd4);

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_d0 = empty_70_fu_1016_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_d0 = empty_70_fu_1016_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_d0 = empty_70_fu_1016_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_4_d0 = empty_70_fu_1016_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_5_d0 = empty_70_fu_1016_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_address0 = p_cast103_fu_1036_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_in_6_d0 = empty_70_fu_1016_p1;

assign empty_69_fu_943_p2 = (loop_index_reg_393 + 8'd1);

assign empty_70_fu_1016_p1 = input_r_addr_read_reg_1199;

assign empty_72_fu_1031_p2 = (or_ln_reg_1070 + p_cast99_fu_1027_p1);

assign exitcond2_fu_937_p2 = ((loop_index_reg_393 == 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_955_p1 = 9'd33;

assign h_cast2_fu_419_p1 = h;

assign hclamp_fu_611_p3 = ((or_ln54_fu_605_p2[0:0] == 1'b1) ? select_ln54_fu_597_p3 : add_ln55_fu_584_p2);

assign icmp_ln55_fu_568_p2 = (($signed(add_ln76_1_fu_555_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_539_p2 = ((bh_fu_182 == 5'd23) ? 1'b1 : 1'b0);

assign loop_index_cast_fu_933_p1 = loop_index_reg_393;

assign lshr_ln18_1_fu_905_p2 = mantissa_1_fu_846_p4 >> sext_ln18_3cast_fu_901_p1;

assign lshr_ln18_fu_777_p2 = zext_ln15_fu_731_p1 >> zext_ln18_fu_773_p1;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 64'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 32'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 4'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign mantissa_1_fu_846_p4 = {{{{1'd1}, {trunc_ln371_1_reg_1167}}}, {1'd0}};

assign mantissa_fu_722_p4 = {{{{1'd1}, {trunc_ln371_reg_1146}}}, {1'd0}};

assign mul_fu_965_p0 = mul_fu_965_p00;

assign mul_fu_965_p00 = arrayidx31612_sum_fu_949_p2;

assign mul_fu_965_p1 = 19'd993;

assign or_ln54_fu_605_p2 = (tmp_fu_560_p3 | icmp_ln55_fu_568_p2);

assign or_ln_fu_445_p3 = {{bh_fu_182}, {bh_fu_182}};

assign p_cast103_fu_1036_p1 = empty_72_fu_1031_p2;

assign p_cast99_fu_1027_p1 = grp_fu_955_p2;

assign result_2_fu_819_p2 = (32'd0 - val_fu_811_p3);

assign result_6_fu_990_p2 = (32'd0 - val_1_fu_981_p4);

assign result_7_fu_1003_p3 = ((xs_sign_1_fu_996_p3[0:0] == 1'b1) ? result_6_fu_990_p2 : val_1_fu_981_p4);

assign result_fu_825_p3 = ((xs_sign_reg_1135[0:0] == 1'b1) ? result_2_fu_819_p2 : val_fu_811_p3);

assign select_ln18_2_fu_885_p3 = ((tmp_6_fu_868_p3[0:0] == 1'b1) ? sext_ln18_2_fu_881_p1 : add_ln346_1_fu_862_p2);

assign select_ln18_fu_761_p3 = ((tmp_4_fu_744_p3[0:0] == 1'b1) ? sext_ln18_fu_757_p1 : add_ln346_fu_738_p2);

assign select_ln54_fu_597_p3 = ((tmp_1_fu_589_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln18_1_fu_769_p1 = $signed(select_ln18_fu_761_p3);

assign sext_ln18_2_fu_881_p1 = $signed(sub_ln18_1_fu_876_p2);

assign sext_ln18_3_fu_893_p1 = $signed(select_ln18_2_fu_885_p3);

assign sext_ln18_3cast_fu_901_p1 = sext_ln18_3_fu_893_p1[24:0];

assign sext_ln18_fu_757_p1 = $signed(sub_ln18_fu_752_p2);

assign sext_ln55_fu_580_p1 = $signed(add_ln55_1_fu_574_p2);

assign sext_ln76_fu_433_p1 = $signed(add_ln76_fu_427_p2);

assign sext_ln78_1_fu_664_p1 = $signed(trunc_ln2_fu_654_p4);

assign sext_ln78_2_fu_645_p1 = $signed(sub_ln78_fu_639_p2);

assign sext_ln78_fu_635_p1 = $signed(shl_ln78_1_fu_627_p3);

assign sext_ln79_fu_690_p1 = $signed(trunc_ln3_fu_680_p4);

assign shl_ln18_1_fu_915_p2 = zext_ln15_1_fu_855_p1 << zext_ln18_1_fu_897_p1;

assign shl_ln18_fu_783_p2 = zext_ln15_fu_731_p1 << zext_ln18_fu_773_p1;

assign shl_ln78_1_fu_627_p3 = {{hclamp_fu_611_p3}, {2'd0}};

assign shl_ln_fu_619_p3 = {{hclamp_fu_611_p3}, {10'd0}};

assign smantissa_fu_925_p3 = ((tmp_6_fu_868_p3[0:0] == 1'b1) ? zext_ln18_2_fu_911_p1 : trunc_ln18_1_fu_921_p1);

assign sub_ln18_1_fu_876_p2 = (8'd127 - xs_exp_1_reg_1161);

assign sub_ln18_fu_752_p2 = (8'd127 - xs_exp_reg_1140);

assign sub_ln78_fu_639_p2 = ($signed(shl_ln_fu_619_p3) - $signed(sext_ln78_fu_635_p1));

assign tmp_1_fu_589_p3 = add_ln76_1_fu_555_p2[32'd9];

assign tmp_3_fu_801_p4 = {{shl_ln18_fu_783_p2[55:24]}};

assign tmp_4_fu_744_p3 = add_ln346_fu_738_p2[32'd8];

assign tmp_5_fu_789_p3 = lshr_ln18_fu_777_p2[32'd24];

assign tmp_6_fu_868_p3 = add_ln346_1_fu_862_p2[32'd8];

assign tmp_fu_560_p3 = add_ln76_1_fu_555_p2[32'd9];

assign trunc_ln18_1_fu_921_p1 = shl_ln18_1_fu_915_p2[55:0];

assign trunc_ln2_fu_654_p4 = {{add_ln78_fu_649_p2[63:2]}};

assign trunc_ln371_1_fu_842_p1 = m_axi_input_r_RDATA[22:0];

assign trunc_ln371_fu_718_p1 = m_axi_input_r_RDATA[22:0];

assign trunc_ln3_fu_680_p4 = {{add_ln79_fu_674_p2[63:2]}};

assign val_1_fu_981_p4 = {{smantissa_reg_1172[55:24]}};

assign val_fu_811_p3 = ((tmp_4_fu_744_p3[0:0] == 1'b1) ? zext_ln21_fu_797_p1 : tmp_3_fu_801_p4);

assign xs_sign_1_fu_996_p3 = data_1_reg_1156[32'd31];

assign zext_ln15_1_fu_855_p1 = mantissa_1_fu_846_p4;

assign zext_ln15_fu_731_p1 = mantissa_fu_722_p4;

assign zext_ln18_1_fu_897_p1 = $unsigned(sext_ln18_3_fu_893_p1);

assign zext_ln18_2_fu_911_p1 = lshr_ln18_1_fu_905_p2;

assign zext_ln18_fu_773_p1 = $unsigned(sext_ln18_1_fu_769_p1);

assign zext_ln21_fu_797_p1 = tmp_5_fu_789_p3;

assign zext_ln346_1_fu_859_p1 = xs_exp_1_reg_1161;

assign zext_ln346_fu_735_p1 = xs_exp_reg_1140;

assign zext_ln74_1_fu_535_p1 = bh_fu_182;

assign zext_ln74_fu_423_p1 = h;

assign zext_ln76_fu_551_p1 = bh_fu_182;

assign zext_ln85_1_fu_464_p1 = add_ln85_fu_458_p2;

assign zext_ln85_2_fu_475_p1 = add_ln85_1_fu_469_p2;

assign zext_ln85_3_fu_486_p1 = add_ln85_2_fu_480_p2;

assign zext_ln85_fu_453_p1 = or_ln_fu_445_p3;

assign zext_ln94_1_fu_508_p1 = add_ln94_1_fu_502_p2;

assign zext_ln94_2_fu_519_p1 = add_ln94_2_fu_513_p2;

assign zext_ln94_3_fu_530_p1 = add_ln94_3_fu_524_p2;

assign zext_ln94_fu_497_p1 = add_ln94_fu_491_p2;

always @ (posedge ap_clk) begin
    h_cast2_reg_1060[9:8] <= 2'b00;
end

endmodule //srcnn_load_input_buffer_c1
