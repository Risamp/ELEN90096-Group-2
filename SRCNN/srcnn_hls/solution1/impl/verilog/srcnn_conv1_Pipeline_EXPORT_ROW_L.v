// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_EXPORT_ROW_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_i2_AWVALID,
        m_axi_i2_AWREADY,
        m_axi_i2_AWADDR,
        m_axi_i2_AWID,
        m_axi_i2_AWLEN,
        m_axi_i2_AWSIZE,
        m_axi_i2_AWBURST,
        m_axi_i2_AWLOCK,
        m_axi_i2_AWCACHE,
        m_axi_i2_AWPROT,
        m_axi_i2_AWQOS,
        m_axi_i2_AWREGION,
        m_axi_i2_AWUSER,
        m_axi_i2_WVALID,
        m_axi_i2_WREADY,
        m_axi_i2_WDATA,
        m_axi_i2_WSTRB,
        m_axi_i2_WLAST,
        m_axi_i2_WID,
        m_axi_i2_WUSER,
        m_axi_i2_ARVALID,
        m_axi_i2_ARREADY,
        m_axi_i2_ARADDR,
        m_axi_i2_ARID,
        m_axi_i2_ARLEN,
        m_axi_i2_ARSIZE,
        m_axi_i2_ARBURST,
        m_axi_i2_ARLOCK,
        m_axi_i2_ARCACHE,
        m_axi_i2_ARPROT,
        m_axi_i2_ARQOS,
        m_axi_i2_ARREGION,
        m_axi_i2_ARUSER,
        m_axi_i2_RVALID,
        m_axi_i2_RREADY,
        m_axi_i2_RDATA,
        m_axi_i2_RLAST,
        m_axi_i2_RID,
        m_axi_i2_RFIFONUM,
        m_axi_i2_RUSER,
        m_axi_i2_RRESP,
        m_axi_i2_BVALID,
        m_axi_i2_BREADY,
        m_axi_i2_BRESP,
        m_axi_i2_BID,
        m_axi_i2_BUSER,
        trunc_ln141_mid2,
        output_ftmap,
        sext_ln158,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_i2_AWVALID;
input   m_axi_i2_AWREADY;
output  [63:0] m_axi_i2_AWADDR;
output  [0:0] m_axi_i2_AWID;
output  [31:0] m_axi_i2_AWLEN;
output  [2:0] m_axi_i2_AWSIZE;
output  [1:0] m_axi_i2_AWBURST;
output  [1:0] m_axi_i2_AWLOCK;
output  [3:0] m_axi_i2_AWCACHE;
output  [2:0] m_axi_i2_AWPROT;
output  [3:0] m_axi_i2_AWQOS;
output  [3:0] m_axi_i2_AWREGION;
output  [0:0] m_axi_i2_AWUSER;
output   m_axi_i2_WVALID;
input   m_axi_i2_WREADY;
output  [31:0] m_axi_i2_WDATA;
output  [3:0] m_axi_i2_WSTRB;
output   m_axi_i2_WLAST;
output  [0:0] m_axi_i2_WID;
output  [0:0] m_axi_i2_WUSER;
output   m_axi_i2_ARVALID;
input   m_axi_i2_ARREADY;
output  [63:0] m_axi_i2_ARADDR;
output  [0:0] m_axi_i2_ARID;
output  [31:0] m_axi_i2_ARLEN;
output  [2:0] m_axi_i2_ARSIZE;
output  [1:0] m_axi_i2_ARBURST;
output  [1:0] m_axi_i2_ARLOCK;
output  [3:0] m_axi_i2_ARCACHE;
output  [2:0] m_axi_i2_ARPROT;
output  [3:0] m_axi_i2_ARQOS;
output  [3:0] m_axi_i2_ARREGION;
output  [0:0] m_axi_i2_ARUSER;
input   m_axi_i2_RVALID;
output   m_axi_i2_RREADY;
input  [31:0] m_axi_i2_RDATA;
input   m_axi_i2_RLAST;
input  [0:0] m_axi_i2_RID;
input  [12:0] m_axi_i2_RFIFONUM;
input  [0:0] m_axi_i2_RUSER;
input  [1:0] m_axi_i2_RRESP;
input   m_axi_i2_BVALID;
output   m_axi_i2_BREADY;
input  [1:0] m_axi_i2_BRESP;
input  [0:0] m_axi_i2_BID;
input  [0:0] m_axi_i2_BUSER;
input  [5:0] trunc_ln141_mid2;
input  [63:0] output_ftmap;
input  [18:0] sext_ln158;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0;
output  [11:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0;

reg ap_idle;
reg m_axi_i2_AWVALID;
reg m_axi_i2_WVALID;
reg m_axi_i2_BREADY;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] or_ln159_reg_787;
reg   [0:0] or_ln159_2_reg_796;
reg    ap_predicate_op119_writereq_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] empty_99_reg_841;
reg   [0:0] empty_99_reg_841_pp0_iter7_reg;
reg   [0:0] icmp_ln159_1_reg_845;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter7_reg;
reg    ap_predicate_op137_writeresp_state9;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln158_fu_361_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i2_blk_n_B;
wire    ap_block_pp0_stage0;
reg    i2_blk_n_W;
reg    i2_blk_n_AW;
reg   [0:0] first_iter_0_reg_288;
reg   [0:0] first_iter_01_reg_299;
reg    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln158_cast_fu_311_p1;
reg  signed [63:0] sext_ln158_cast_reg_773;
reg   [0:0] icmp_ln158_reg_778;
reg   [61:0] sext_ln159_mid2_v_reg_782;
wire   [0:0] or_ln159_fu_500_p2;
wire   [2:0] select_ln159_1_fu_524_p3;
reg   [2:0] select_ln159_1_reg_791;
wire   [0:0] or_ln159_2_fu_594_p2;
wire   [0:0] empty_99_fu_636_p2;
reg   [0:0] empty_99_reg_841_pp0_iter2_reg;
reg   [0:0] empty_99_reg_841_pp0_iter3_reg;
reg   [0:0] empty_99_reg_841_pp0_iter4_reg;
reg   [0:0] empty_99_reg_841_pp0_iter5_reg;
reg   [0:0] empty_99_reg_841_pp0_iter6_reg;
wire   [0:0] icmp_ln159_1_fu_642_p2;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter2_reg;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter3_reg;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter4_reg;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter5_reg;
reg   [0:0] icmp_ln159_1_reg_845_pp0_iter6_reg;
wire   [31:0] tmp_4_fu_697_p10;
reg   [31:0] tmp_4_reg_849;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_292_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_first_iter_01_phi_fu_303_p4;
wire   [63:0] p_cast1_fu_618_p1;
wire  signed [63:0] sext_ln158_1_fu_687_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] loop_index_i42_fu_126;
wire   [7:0] empty_98_fu_630_p2;
reg   [3:0] bh_1_fu_130;
wire   [3:0] select_ln159_3_fu_600_p3;
reg   [11:0] indvar_flatten89_fu_134;
wire   [11:0] select_ln159_4_fu_654_p3;
reg   [3:0] bout_fu_138;
wire   [3:0] select_ln158_1_fu_405_p3;
reg   [14:0] indvar_flatten120_fu_142;
wire   [14:0] add_ln158_4_fu_367_p2;
wire   [0:0] icmp_ln159_fu_385_p2;
wire   [3:0] add_ln158_fu_379_p2;
wire   [5:0] zext_ln158_fu_413_p1;
wire   [5:0] add_ln158_1_fu_417_p2;
wire   [5:0] mul_ln158_fu_426_p0;
wire   [18:0] mul_ln158_fu_426_p1;
wire   [23:0] mul_ln158_fu_426_p2;
wire   [63:0] zext_ln158_2_fu_432_p1;
wire   [63:0] add_ln158_2_fu_436_p2;
wire   [63:0] add_ln158_3_fu_441_p2;
wire   [2:0] trunc_ln159_fu_349_p1;
wire   [0:0] tmp_fu_353_p3;
wire   [0:0] xor_ln158_1_fu_464_p2;
wire   [0:0] exitcond142251005_fu_482_p2;
wire   [0:0] xor_ln158_fu_476_p2;
wire   [3:0] select_ln158_fu_391_p3;
wire   [0:0] and_ln158_fu_488_p2;
wire   [0:0] or_ln158_fu_399_p2;
wire   [0:0] or_ln159_1_fu_506_p2;
wire   [3:0] add_ln159_fu_494_p2;
wire   [2:0] trunc_ln159_1_fu_520_p1;
wire   [2:0] select_ln158_2_fu_456_p3;
wire   [0:0] tmp_17_fu_532_p3;
wire   [0:0] and_ln158_1_fu_470_p2;
wire   [0:0] select_ln159_2_fu_540_p3;
wire   [5:0] tmp_s_fu_552_p4;
wire   [2:0] empty_101_fu_548_p1;
wire   [11:0] p_shl4_fu_566_p4;
wire   [11:0] tmp_38_cast_fu_562_p1;
wire   [0:0] xor_ln159_fu_582_p2;
wire   [0:0] and_ln159_fu_588_p2;
wire   [7:0] select_ln159_fu_512_p3;
wire   [11:0] empty_102_fu_576_p2;
wire   [11:0] select_ln159_cast_fu_608_p1;
wire   [11:0] empty_103_fu_612_p2;
wire   [11:0] add_ln159_1_fu_648_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] mul_ln158_fu_426_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_6ns_19ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 24 ))
mul_6ns_19ns_24_1_1_U159(
    .din0(mul_ln158_fu_426_p0),
    .din1(mul_ln158_fu_426_p1),
    .dout(mul_ln158_fu_426_p2)
);

srcnn_mux_8_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_8_3_32_1_1_U160(
    .din0(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_q0),
    .din1(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_q0),
    .din2(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_q0),
    .din3(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_q0),
    .din4(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_q0),
    .din5(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_q0),
    .din6(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0),
    .din7(conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0),
    .din8(select_ln159_1_reg_791),
    .dout(tmp_4_fu_697_p10)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bh_1_fu_130 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_fu_361_p2 == 1'd0))) begin
            bh_1_fu_130 <= select_ln159_3_fu_600_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bout_fu_138 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_fu_361_p2 == 1'd0))) begin
            bout_fu_138 <= select_ln158_1_fu_405_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_778 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_01_reg_299 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_01_reg_299 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_778 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_288 <= or_ln159_2_reg_796;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_288 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten120_fu_142 <= 15'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_fu_361_p2 == 1'd0))) begin
            indvar_flatten120_fu_142 <= add_ln158_4_fu_367_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten89_fu_134 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_fu_361_p2 == 1'd0))) begin
            indvar_flatten89_fu_134 <= select_ln159_4_fu_654_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            loop_index_i42_fu_126 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_fu_361_p2 == 1'd0))) begin
            loop_index_i42_fu_126 <= empty_98_fu_630_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln158_reg_778 <= icmp_ln158_fu_361_p2;
        sext_ln158_cast_reg_773 <= sext_ln158_cast_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        empty_99_reg_841_pp0_iter2_reg <= empty_99_reg_841;
        empty_99_reg_841_pp0_iter3_reg <= empty_99_reg_841_pp0_iter2_reg;
        empty_99_reg_841_pp0_iter4_reg <= empty_99_reg_841_pp0_iter3_reg;
        empty_99_reg_841_pp0_iter5_reg <= empty_99_reg_841_pp0_iter4_reg;
        empty_99_reg_841_pp0_iter6_reg <= empty_99_reg_841_pp0_iter5_reg;
        empty_99_reg_841_pp0_iter7_reg <= empty_99_reg_841_pp0_iter6_reg;
        icmp_ln159_1_reg_845_pp0_iter2_reg <= icmp_ln159_1_reg_845;
        icmp_ln159_1_reg_845_pp0_iter3_reg <= icmp_ln159_1_reg_845_pp0_iter2_reg;
        icmp_ln159_1_reg_845_pp0_iter4_reg <= icmp_ln159_1_reg_845_pp0_iter3_reg;
        icmp_ln159_1_reg_845_pp0_iter5_reg <= icmp_ln159_1_reg_845_pp0_iter4_reg;
        icmp_ln159_1_reg_845_pp0_iter6_reg <= icmp_ln159_1_reg_845_pp0_iter5_reg;
        icmp_ln159_1_reg_845_pp0_iter7_reg <= icmp_ln159_1_reg_845_pp0_iter6_reg;
        tmp_4_reg_849 <= tmp_4_fu_697_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_fu_361_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_99_reg_841 <= empty_99_fu_636_p2;
        icmp_ln159_1_reg_845 <= icmp_ln159_1_fu_642_p2;
        or_ln159_reg_787 <= or_ln159_fu_500_p2;
        select_ln159_1_reg_791 <= select_ln159_1_fu_524_p3;
        sext_ln159_mid2_v_reg_782 <= {{add_ln158_3_fu_441_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_fu_361_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln159_2_reg_796 <= or_ln159_2_fu_594_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_fu_361_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_778 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_01_phi_fu_303_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_01_phi_fu_303_p4 = first_iter_01_reg_299;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_778 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_292_p4 = or_ln159_2_reg_796;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_292_p4 = first_iter_0_reg_288;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op119_writereq_state3 == 1'b1))) begin
        i2_blk_n_AW = m_axi_i2_AWREADY;
    end else begin
        i2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op137_writeresp_state9 == 1'b1))) begin
        i2_blk_n_B = m_axi_i2_BVALID;
    end else begin
        i2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        i2_blk_n_W = m_axi_i2_WREADY;
    end else begin
        i2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op119_writereq_state3 == 1'b1))) begin
        m_axi_i2_AWVALID = 1'b1;
    end else begin
        m_axi_i2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op137_writeresp_state9 == 1'b1))) begin
        m_axi_i2_BREADY = 1'b1;
    end else begin
        m_axi_i2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_i2_WVALID = 1'b1;
    end else begin
        m_axi_i2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln158_1_fu_417_p2 = (zext_ln158_fu_413_p1 + trunc_ln141_mid2);

assign add_ln158_2_fu_436_p2 = (zext_ln158_2_fu_432_p1 + output_ftmap);

assign add_ln158_3_fu_441_p2 = ($signed(add_ln158_2_fu_436_p2) + $signed(sext_ln158_cast_reg_773));

assign add_ln158_4_fu_367_p2 = (indvar_flatten120_fu_142 + 15'd1);

assign add_ln158_fu_379_p2 = (bout_fu_138 + 4'd1);

assign add_ln159_1_fu_648_p2 = (indvar_flatten89_fu_134 + 12'd1);

assign add_ln159_fu_494_p2 = (select_ln158_fu_391_p3 + 4'd1);

assign and_ln158_1_fu_470_p2 = (xor_ln158_1_fu_464_p2 & tmp_fu_353_p3);

assign and_ln158_fu_488_p2 = (xor_ln158_fu_476_p2 & exitcond142251005_fu_482_p2);

assign and_ln159_fu_588_p2 = (xor_ln159_fu_582_p2 & ap_phi_mux_first_iter_0_phi_fu_292_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_i2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op137_writeresp_state9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_i2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op137_writeresp_state9 == 1'b1)) | ((m_axi_i2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_i2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op137_writeresp_state9 == 1'b1)) | ((m_axi_i2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_i2_AWREADY == 1'b0) & (ap_predicate_op119_writereq_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((m_axi_i2_BVALID == 1'b0) & (ap_predicate_op137_writeresp_state9 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op119_writereq_state3 = ((or_ln159_2_reg_796 == 1'd1) & (or_ln159_reg_787 == 1'd1));
end

always @ (*) begin
    ap_predicate_op137_writeresp_state9 = ((icmp_ln159_1_reg_845_pp0_iter7_reg == 1'd1) & (empty_99_reg_841_pp0_iter7_reg == 1'd1));
end

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_address0 = p_cast1_fu_618_p1;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 = p_cast1_fu_618_p1;

assign empty_101_fu_548_p1 = select_ln158_1_fu_405_p3[2:0];

assign empty_102_fu_576_p2 = (p_shl4_fu_566_p4 - tmp_38_cast_fu_562_p1);

assign empty_103_fu_612_p2 = (empty_102_fu_576_p2 + select_ln159_cast_fu_608_p1);

assign empty_98_fu_630_p2 = (select_ln159_fu_512_p3 + 8'd1);

assign empty_99_fu_636_p2 = ((empty_98_fu_630_p2 == 8'd255) ? 1'b1 : 1'b0);

assign exitcond142251005_fu_482_p2 = ((loop_index_i42_fu_126 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_361_p2 = ((indvar_flatten120_fu_142 == 15'd30600) ? 1'b1 : 1'b0);

assign icmp_ln159_1_fu_642_p2 = ((select_ln159_3_fu_600_p3 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_385_p2 = ((indvar_flatten89_fu_134 == 12'd3825) ? 1'b1 : 1'b0);

assign m_axi_i2_ARADDR = 64'd0;

assign m_axi_i2_ARBURST = 2'd0;

assign m_axi_i2_ARCACHE = 4'd0;

assign m_axi_i2_ARID = 1'd0;

assign m_axi_i2_ARLEN = 32'd0;

assign m_axi_i2_ARLOCK = 2'd0;

assign m_axi_i2_ARPROT = 3'd0;

assign m_axi_i2_ARQOS = 4'd0;

assign m_axi_i2_ARREGION = 4'd0;

assign m_axi_i2_ARSIZE = 3'd0;

assign m_axi_i2_ARUSER = 1'd0;

assign m_axi_i2_ARVALID = 1'b0;

assign m_axi_i2_AWADDR = sext_ln158_1_fu_687_p1;

assign m_axi_i2_AWBURST = 2'd0;

assign m_axi_i2_AWCACHE = 4'd0;

assign m_axi_i2_AWID = 1'd0;

assign m_axi_i2_AWLEN = 32'd3825;

assign m_axi_i2_AWLOCK = 2'd0;

assign m_axi_i2_AWPROT = 3'd0;

assign m_axi_i2_AWQOS = 4'd0;

assign m_axi_i2_AWREGION = 4'd0;

assign m_axi_i2_AWSIZE = 3'd0;

assign m_axi_i2_AWUSER = 1'd0;

assign m_axi_i2_RREADY = 1'b0;

assign m_axi_i2_WDATA = tmp_4_reg_849;

assign m_axi_i2_WID = 1'd0;

assign m_axi_i2_WLAST = 1'b0;

assign m_axi_i2_WSTRB = 4'd15;

assign m_axi_i2_WUSER = 1'd0;

assign mul_ln158_fu_426_p0 = mul_ln158_fu_426_p00;

assign mul_ln158_fu_426_p00 = add_ln158_1_fu_417_p2;

assign mul_ln158_fu_426_p1 = 24'd260100;

assign or_ln158_fu_399_p2 = (icmp_ln159_fu_385_p2 | ap_phi_mux_first_iter_01_phi_fu_303_p4);

assign or_ln159_1_fu_506_p2 = (icmp_ln159_fu_385_p2 | and_ln158_fu_488_p2);

assign or_ln159_2_fu_594_p2 = (icmp_ln159_fu_385_p2 | and_ln159_fu_588_p2);

assign or_ln159_fu_500_p2 = (or_ln158_fu_399_p2 | and_ln158_fu_488_p2);

assign p_cast1_fu_618_p1 = empty_103_fu_612_p2;

assign p_shl4_fu_566_p4 = {{{empty_101_fu_548_p1}, {select_ln159_2_fu_540_p3}}, {8'd0}};

assign select_ln158_1_fu_405_p3 = ((icmp_ln159_fu_385_p2[0:0] == 1'b1) ? add_ln158_fu_379_p2 : bout_fu_138);

assign select_ln158_2_fu_456_p3 = ((icmp_ln159_fu_385_p2[0:0] == 1'b1) ? 3'd0 : trunc_ln159_fu_349_p1);

assign select_ln158_fu_391_p3 = ((icmp_ln159_fu_385_p2[0:0] == 1'b1) ? 4'd0 : bh_1_fu_130);

assign select_ln159_1_fu_524_p3 = ((and_ln158_fu_488_p2[0:0] == 1'b1) ? trunc_ln159_1_fu_520_p1 : select_ln158_2_fu_456_p3);

assign select_ln159_2_fu_540_p3 = ((and_ln158_fu_488_p2[0:0] == 1'b1) ? tmp_17_fu_532_p3 : and_ln158_1_fu_470_p2);

assign select_ln159_3_fu_600_p3 = ((and_ln158_fu_488_p2[0:0] == 1'b1) ? add_ln159_fu_494_p2 : select_ln158_fu_391_p3);

assign select_ln159_4_fu_654_p3 = ((icmp_ln159_fu_385_p2[0:0] == 1'b1) ? 12'd1 : add_ln159_1_fu_648_p2);

assign select_ln159_cast_fu_608_p1 = select_ln159_fu_512_p3;

assign select_ln159_fu_512_p3 = ((or_ln159_1_fu_506_p2[0:0] == 1'b1) ? 8'd0 : loop_index_i42_fu_126);

assign sext_ln158_1_fu_687_p1 = $signed(sext_ln159_mid2_v_reg_782);

assign sext_ln158_cast_fu_311_p1 = $signed(sext_ln158);

assign tmp_17_fu_532_p3 = add_ln159_fu_494_p2[32'd3];

assign tmp_38_cast_fu_562_p1 = tmp_s_fu_552_p4;

assign tmp_fu_353_p3 = bh_1_fu_130[32'd3];

assign tmp_s_fu_552_p4 = {{{{1'd0}, {select_ln158_1_fu_405_p3}}}, {select_ln159_2_fu_540_p3}};

assign trunc_ln159_1_fu_520_p1 = add_ln159_fu_494_p2[2:0];

assign trunc_ln159_fu_349_p1 = bh_1_fu_130[2:0];

assign xor_ln158_1_fu_464_p2 = (icmp_ln159_fu_385_p2 ^ 1'd1);

assign xor_ln158_fu_476_p2 = (icmp_ln159_fu_385_p2 ^ 1'd1);

assign xor_ln159_fu_582_p2 = (exitcond142251005_fu_482_p2 ^ 1'd1);

assign zext_ln158_2_fu_432_p1 = mul_ln158_fu_426_p2;

assign zext_ln158_fu_413_p1 = select_ln158_1_fu_405_p3;

endmodule //srcnn_conv1_Pipeline_EXPORT_ROW_L
