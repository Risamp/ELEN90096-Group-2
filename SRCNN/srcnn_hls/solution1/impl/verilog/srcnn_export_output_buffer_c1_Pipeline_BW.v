// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_export_output_buffer_c1_Pipeline_BW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bitcast_ln124,
        tmp_11,
        tmp_10,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d1,
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q1,
        grp_fu_1025_p_din0,
        grp_fu_1025_p_din1,
        grp_fu_1025_p_opcode,
        grp_fu_1025_p_dout0,
        grp_fu_1025_p_ce,
        grp_fu_1029_p_din0,
        grp_fu_1029_p_din1,
        grp_fu_1029_p_opcode,
        grp_fu_1029_p_dout0,
        grp_fu_1029_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bitcast_ln124;
input  [13:0] tmp_11;
input  [6:0] tmp_10;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d1;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q1;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0;
output  [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce1;
output   conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we1;
output  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d1;
input  [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q1;
output  [31:0] grp_fu_1025_p_din0;
output  [31:0] grp_fu_1025_p_din1;
output  [1:0] grp_fu_1025_p_opcode;
input  [31:0] grp_fu_1025_p_dout0;
output   grp_fu_1025_p_ce;
output  [31:0] grp_fu_1029_p_din0;
output  [31:0] grp_fu_1029_p_din1;
output  [4:0] grp_fu_1029_p_opcode;
input  [0:0] grp_fu_1029_p_dout0;
output   grp_fu_1029_p_ce;

reg ap_idle;
reg[13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0;
reg[13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we1;
reg[13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0;
reg[13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce1;
reg conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln126_1_reg_486;
reg   [0:0] icmp_ln126_reg_462;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln126_fu_166_p2;
reg   [0:0] icmp_ln126_reg_462_pp0_iter1_reg;
reg   [0:0] icmp_ln126_reg_462_pp0_iter2_reg;
reg   [0:0] icmp_ln126_reg_462_pp0_iter3_reg;
reg   [0:0] icmp_ln126_reg_462_pp0_iter4_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter1_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter2_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter3_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter1_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter2_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter3_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter1_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter2_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter3_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter4_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter1_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter2_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter3_reg;
reg   [13:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter4_reg;
wire   [0:0] icmp_ln126_1_fu_238_p2;
reg   [0:0] icmp_ln126_1_reg_486_pp0_iter1_reg;
reg   [0:0] icmp_ln126_1_reg_486_pp0_iter2_reg;
reg   [0:0] icmp_ln126_1_reg_486_pp0_iter3_reg;
reg   [0:0] icmp_ln126_1_reg_486_pp0_iter4_reg;
reg   [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_reg_490;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_reg_495;
reg   [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_9_reg_500;
reg   [31:0] conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_reg_505;
reg   [31:0] add_reg_510;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] add15_1_reg_517;
reg   [31:0] add15_2_reg_524;
reg   [31:0] add15_3_reg_531;
wire   [31:0] select_ln132_2_fu_394_p3;
reg   [31:0] select_ln132_2_reg_538;
wire   [31:0] select_ln132_3_fu_442_p3;
reg   [31:0] select_ln132_3_reg_543;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln130_1_fu_196_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln130_2_fu_226_p1;
reg   [8:0] bw_fu_68;
wire   [8:0] add_ln126_fu_244_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_bw_1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_144_p0;
reg   [31:0] grp_fu_148_p0;
reg   [31:0] grp_fu_153_p0;
wire   [7:0] lshr_ln_fu_176_p4;
wire   [13:0] zext_ln130_fu_186_p1;
wire   [13:0] add_ln130_fu_190_p2;
wire   [6:0] trunc_ln126_1_fu_202_p4;
wire   [6:0] or_ln130_fu_212_p2;
wire   [13:0] tmp_s_fu_218_p3;
wire   [7:0] trunc_ln126_fu_172_p1;
wire   [7:0] or_ln126_fu_232_p2;
wire   [31:0] bitcast_ln132_fu_255_p1;
wire   [7:0] tmp_1_fu_258_p4;
wire   [22:0] trunc_ln132_fu_268_p1;
wire   [0:0] icmp_ln132_1_fu_278_p2;
wire   [0:0] icmp_ln132_fu_272_p2;
wire   [0:0] or_ln132_fu_284_p2;
wire   [0:0] and_ln132_fu_290_p2;
wire   [31:0] bitcast_ln132_1_fu_304_p1;
wire   [7:0] tmp_3_fu_307_p4;
wire   [22:0] trunc_ln132_1_fu_317_p1;
wire   [0:0] icmp_ln132_3_fu_327_p2;
wire   [0:0] icmp_ln132_2_fu_321_p2;
wire   [0:0] or_ln132_1_fu_333_p2;
wire   [0:0] grp_fu_153_p2;
wire   [0:0] and_ln132_1_fu_339_p2;
wire   [31:0] bitcast_ln132_2_fu_353_p1;
wire   [7:0] tmp_5_fu_356_p4;
wire   [22:0] trunc_ln132_2_fu_366_p1;
wire   [0:0] icmp_ln132_5_fu_376_p2;
wire   [0:0] icmp_ln132_4_fu_370_p2;
wire   [0:0] or_ln132_2_fu_382_p2;
wire   [0:0] and_ln132_2_fu_388_p2;
wire   [31:0] bitcast_ln132_3_fu_401_p1;
wire   [7:0] tmp_7_fu_404_p4;
wire   [22:0] trunc_ln132_3_fu_414_p1;
wire   [0:0] icmp_ln132_7_fu_424_p2;
wire   [0:0] icmp_ln132_6_fu_418_p2;
wire   [0:0] or_ln132_3_fu_430_p2;
wire   [0:0] and_ln132_3_fu_436_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_542;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(bitcast_ln124),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_153_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
            ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage1_11001)) begin
            ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_542)) begin
            bw_fu_68 <= add_ln126_fu_244_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            bw_fu_68 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_462_pp0_iter2_reg == 1'd1))) begin
        add15_1_reg_517 <= grp_fu_144_p2;
        add_reg_510 <= grp_fu_1025_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_reg_462_pp0_iter2_reg == 1'd1))) begin
        add15_2_reg_524 <= grp_fu_1025_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_1_reg_486_pp0_iter2_reg == 1'd0) & (icmp_ln126_reg_462_pp0_iter2_reg == 1'd1))) begin
        add15_3_reg_531 <= grp_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_reg_462 == 1'd1) & (icmp_ln126_1_reg_486 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_reg_505 <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_fu_166_p2 == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466 <= zext_ln130_1_fu_196_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471 <= zext_ln130_1_fu_196_p1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476[13 : 1] <= zext_ln130_2_fu_226_p1[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481[13 : 1] <= zext_ln130_2_fu_226_p1[13 : 1];
        icmp_ln126_1_reg_486 <= icmp_ln126_1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter1_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter2_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter1_reg;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter3_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter2_reg;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter1_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter2_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter1_reg;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter3_reg <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter2_reg;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter1_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter2_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter1_reg[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter3_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter2_reg[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter4_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter3_reg[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter1_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter2_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter1_reg[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter3_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter2_reg[13 : 1];
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter4_reg[13 : 1] <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter3_reg[13 : 1];
        icmp_ln126_1_reg_486_pp0_iter1_reg <= icmp_ln126_1_reg_486;
        icmp_ln126_1_reg_486_pp0_iter2_reg <= icmp_ln126_1_reg_486_pp0_iter1_reg;
        icmp_ln126_1_reg_486_pp0_iter3_reg <= icmp_ln126_1_reg_486_pp0_iter2_reg;
        icmp_ln126_1_reg_486_pp0_iter4_reg <= icmp_ln126_1_reg_486_pp0_iter3_reg;
        icmp_ln126_reg_462 <= icmp_ln126_fu_166_p2;
        icmp_ln126_reg_462_pp0_iter1_reg <= icmp_ln126_reg_462;
        icmp_ln126_reg_462_pp0_iter2_reg <= icmp_ln126_reg_462_pp0_iter1_reg;
        icmp_ln126_reg_462_pp0_iter3_reg <= icmp_ln126_reg_462_pp0_iter2_reg;
        icmp_ln126_reg_462_pp0_iter4_reg <= icmp_ln126_reg_462_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_reg_462 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_reg_490 <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_reg_495 <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_q1;
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_9_reg_500 <= conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_reg_462_pp0_iter3_reg == 1'd1))) begin
        select_ln132_2_reg_538 <= select_ln132_2_fu_394_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_1_reg_486_pp0_iter3_reg == 1'd0) & (icmp_ln126_reg_462_pp0_iter3_reg == 1'd1))) begin
        select_ln132_3_reg_543 <= select_ln132_3_fu_442_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln126_reg_462 == 1'd0) | (icmp_ln126_1_reg_486 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_bw_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_bw_1 = bw_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 = zext_ln130_2_fu_226_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_3_reg_466_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1 = zext_ln130_1_fu_196_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_462_pp0_iter4_reg == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_462_pp0_iter3_reg == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 = zext_ln130_2_fu_226_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_4_reg_471_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1 = zext_ln130_1_fu_196_p1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_1_reg_486_pp0_iter4_reg == 1'd0) & (icmp_ln126_reg_462_pp0_iter4_reg == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_462_pp0_iter3_reg == 1'd1))) begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we1 = 1'b1;
    end else begin
        conv1_float_255_255_float_1_9_9_float_float_255_255_ou_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_9_reg_500;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_5_reg_490;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_144_p0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_2_reg_505;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_144_p0 = conv1_float_255_255_float_1_9_9_float_float_255_255_ou_6_reg_495;
        end else begin
            grp_fu_144_p0 = 'bx;
        end
    end else begin
        grp_fu_144_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_148_p0 = add15_2_reg_524;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_148_p0 = add_reg_510;
        end else begin
            grp_fu_148_p0 = 'bx;
        end
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_153_p0 = add15_3_reg_531;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_153_p0 = add15_1_reg_517;
        end else begin
            grp_fu_153_p0 = 'bx;
        end
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_fu_244_p2 = (ap_sig_allocacmp_bw_1 + 9'd4);

assign add_ln130_fu_190_p2 = (tmp_11 + zext_ln130_fu_186_p1);

assign and_ln132_1_fu_339_p2 = (or_ln132_1_fu_333_p2 & grp_fu_153_p2);

assign and_ln132_2_fu_388_p2 = (or_ln132_2_fu_382_p2 & grp_fu_1029_p_dout0);

assign and_ln132_3_fu_436_p2 = (or_ln132_3_fu_430_p2 & grp_fu_153_p2);

assign and_ln132_fu_290_p2 = (or_ln132_fu_284_p2 & grp_fu_1029_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_542 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln126_1_fu_238_p2 == 1'd0) & (icmp_ln126_fu_166_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln132_1_fu_304_p1 = add15_1_reg_517;

assign bitcast_ln132_2_fu_353_p1 = add15_2_reg_524;

assign bitcast_ln132_3_fu_401_p1 = add15_3_reg_531;

assign bitcast_ln132_fu_255_p1 = add_reg_510;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d0 = select_ln132_2_reg_538;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_1_d1 = ((and_ln132_fu_290_p2[0:0] == 1'b1) ? 32'd0 : add_reg_510);

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d0 = select_ln132_3_reg_543;

assign conv1_float_255_255_float_1_9_9_float_float_255_255_ou_d1 = ((and_ln132_1_fu_339_p2[0:0] == 1'b1) ? 32'd0 : add15_1_reg_517);

assign grp_fu_1025_p_ce = 1'b1;

assign grp_fu_1025_p_din0 = grp_fu_140_p0;

assign grp_fu_1025_p_din1 = bitcast_ln124;

assign grp_fu_1025_p_opcode = 2'd0;

assign grp_fu_1029_p_ce = 1'b1;

assign grp_fu_1029_p_din0 = grp_fu_148_p0;

assign grp_fu_1029_p_din1 = 32'd0;

assign grp_fu_1029_p_opcode = 5'd4;

assign icmp_ln126_1_fu_238_p2 = ((or_ln126_fu_232_p2 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_166_p2 = ((ap_sig_allocacmp_bw_1 < 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln132_1_fu_278_p2 = ((trunc_ln132_fu_268_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_2_fu_321_p2 = ((tmp_3_fu_307_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln132_3_fu_327_p2 = ((trunc_ln132_1_fu_317_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_4_fu_370_p2 = ((tmp_5_fu_356_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln132_5_fu_376_p2 = ((trunc_ln132_2_fu_366_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_6_fu_418_p2 = ((tmp_7_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln132_7_fu_424_p2 = ((trunc_ln132_3_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_272_p2 = ((tmp_1_fu_258_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln_fu_176_p4 = {{ap_sig_allocacmp_bw_1[8:1]}};

assign or_ln126_fu_232_p2 = (trunc_ln126_fu_172_p1 | 8'd3);

assign or_ln130_fu_212_p2 = (trunc_ln126_1_fu_202_p4 | 7'd1);

assign or_ln132_1_fu_333_p2 = (icmp_ln132_3_fu_327_p2 | icmp_ln132_2_fu_321_p2);

assign or_ln132_2_fu_382_p2 = (icmp_ln132_5_fu_376_p2 | icmp_ln132_4_fu_370_p2);

assign or_ln132_3_fu_430_p2 = (icmp_ln132_7_fu_424_p2 | icmp_ln132_6_fu_418_p2);

assign or_ln132_fu_284_p2 = (icmp_ln132_fu_272_p2 | icmp_ln132_1_fu_278_p2);

assign select_ln132_2_fu_394_p3 = ((and_ln132_2_fu_388_p2[0:0] == 1'b1) ? 32'd0 : add15_2_reg_524);

assign select_ln132_3_fu_442_p3 = ((and_ln132_3_fu_436_p2[0:0] == 1'b1) ? 32'd0 : add15_3_reg_531);

assign tmp_1_fu_258_p4 = {{bitcast_ln132_fu_255_p1[30:23]}};

assign tmp_3_fu_307_p4 = {{bitcast_ln132_1_fu_304_p1[30:23]}};

assign tmp_5_fu_356_p4 = {{bitcast_ln132_2_fu_353_p1[30:23]}};

assign tmp_7_fu_404_p4 = {{bitcast_ln132_3_fu_401_p1[30:23]}};

assign tmp_s_fu_218_p3 = {{tmp_10}, {or_ln130_fu_212_p2}};

assign trunc_ln126_1_fu_202_p4 = {{ap_sig_allocacmp_bw_1[7:1]}};

assign trunc_ln126_fu_172_p1 = ap_sig_allocacmp_bw_1[7:0];

assign trunc_ln132_1_fu_317_p1 = bitcast_ln132_1_fu_304_p1[22:0];

assign trunc_ln132_2_fu_366_p1 = bitcast_ln132_2_fu_353_p1[22:0];

assign trunc_ln132_3_fu_414_p1 = bitcast_ln132_3_fu_401_p1[22:0];

assign trunc_ln132_fu_268_p1 = bitcast_ln132_fu_255_p1[22:0];

assign zext_ln130_1_fu_196_p1 = add_ln130_fu_190_p2;

assign zext_ln130_2_fu_226_p1 = tmp_s_fu_218_p3;

assign zext_ln130_fu_186_p1 = lshr_ln_fu_176_p4;

always @ (posedge ap_clk) begin
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter1_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter2_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter3_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_7_reg_476_pp0_iter4_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter1_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter2_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter3_reg[0] <= 1'b1;
    conv1_float_255_255_float_1_9_9_float_float_255_255_ou_8_reg_481_pp0_iter4_reg[0] <= 1'b1;
end

endmodule //srcnn_export_output_buffer_c1_Pipeline_BW
