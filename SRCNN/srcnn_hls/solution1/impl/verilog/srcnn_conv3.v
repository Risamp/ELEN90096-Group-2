// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv3_weights,
        conv3_biases_0_0_val,
        output_ftmap
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv3_weights;
input  [14:0] conv3_biases_0_0_val;
input  [63:0] output_ftmap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[31:0] m_axi_gmem_AWLEN;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] input_fm_buffer_address0;
reg    input_fm_buffer_ce0;
reg    input_fm_buffer_we0;
reg   [31:0] input_fm_buffer_d0;
wire  signed [31:0] input_fm_buffer_q0;
reg   [8:0] output_fm_buffer_0_address0;
reg    output_fm_buffer_0_ce0;
reg    output_fm_buffer_0_we0;
reg   [31:0] output_fm_buffer_0_d0;
wire   [31:0] output_fm_buffer_0_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state38;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state41;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire   [3:0] add_ln31_fu_623_p2;
reg   [3:0] add_ln31_reg_1590;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_fu_629_p3;
reg   [7:0] tmp_reg_1595;
wire   [0:0] icmp_ln31_fu_617_p2;
wire   [9:0] zext_ln32_fu_637_p1;
reg   [9:0] zext_ln32_reg_1600;
wire  signed [31:0] sext_ln79_fu_648_p1;
reg  signed [31:0] sext_ln79_reg_1612;
wire  signed [30:0] sext_ln82_1_fu_652_p1;
reg  signed [30:0] sext_ln82_1_reg_1617;
wire   [3:0] add_ln32_fu_667_p2;
reg   [3:0] add_ln32_reg_1625;
wire    ap_CS_fsm_state3;
wire   [13:0] empty_78_fu_683_p2;
wire    ap_CS_fsm_state4;
wire   [22:0] add_ln106_1_fu_694_p2;
reg   [22:0] add_ln106_1_reg_1638;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln106_2_fu_700_p2;
reg   [9:0] add_ln106_2_reg_1643;
wire   [5:0] add_ln106_fu_712_p2;
reg   [5:0] add_ln106_reg_1651;
wire   [63:0] add_ln115_fu_722_p2;
reg   [63:0] add_ln115_reg_1656;
wire   [0:0] icmp_ln106_fu_706_p2;
wire   [13:0] mul_ln107_fu_741_p2;
reg   [13:0] mul_ln107_reg_1661;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln107_fu_757_p2;
reg   [4:0] add_ln107_reg_1669;
wire   [19:0] sub_ln115_fu_842_p2;
reg   [19:0] sub_ln115_reg_1674;
wire   [0:0] icmp_ln107_fu_751_p2;
reg   [13:0] input_fm_buffer_addr_1_reg_1679;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln108_fu_872_p2;
reg   [4:0] add_ln108_reg_1687;
reg   [63:0] gmem_addr_5_reg_1692;
wire   [0:0] icmp_ln108_fu_866_p2;
reg   [31:0] gmem_addr_5_read_reg_1698;
wire   [8:0] empty_80_fu_1008_p2;
reg   [8:0] empty_80_reg_1703;
wire    ap_CS_fsm_state18;
wire   [4:0] add_ln48_fu_1020_p2;
reg   [4:0] add_ln48_reg_1711;
reg   [8:0] output_fm_buffer_0_addr_reg_1716;
wire    ap_CS_fsm_state19;
wire   [4:0] add_ln49_fu_1046_p2;
reg   [4:0] add_ln49_reg_1724;
wire    ap_CS_fsm_state20;
wire   [2:0] add_ln52_fu_1062_p2;
reg   [2:0] add_ln52_reg_1737;
wire    ap_CS_fsm_state21;
wire   [9:0] zext_ln62_fu_1074_p1;
reg   [9:0] zext_ln62_reg_1742;
wire   [0:0] icmp_ln52_2_fu_1056_p2;
wire   [63:0] zext_ln62_1_fu_1104_p1;
reg   [63:0] zext_ln62_1_reg_1747;
wire   [2:0] add_ln53_fu_1118_p2;
reg   [2:0] add_ln53_reg_1755;
wire    ap_CS_fsm_state22;
wire   [13:0] zext_ln62_2_fu_1130_p1;
reg   [13:0] zext_ln62_2_reg_1760;
wire   [0:0] icmp_ln53_fu_1112_p2;
wire   [11:0] zext_ln61_fu_1142_p1;
reg   [11:0] zext_ln61_reg_1765;
wire   [9:0] add_ln62_7_fu_1146_p2;
reg   [9:0] add_ln62_7_reg_1770;
wire    ap_CS_fsm_state23;
reg   [13:0] input_fm_buffer_addr_2_reg_1775;
wire    ap_CS_fsm_state26;
wire   [5:0] add_ln61_fu_1162_p2;
reg   [5:0] add_ln61_reg_1783;
wire   [11:0] add_ln62_8_fu_1168_p2;
reg   [11:0] add_ln62_8_reg_1788;
wire   [0:0] icmp_ln61_fu_1156_p2;
reg   [63:0] gmem_addr_6_reg_1793;
wire   [19:0] trunc_ln62_fu_1213_p1;
reg  signed [19:0] trunc_ln62_reg_1799;
wire    ap_CS_fsm_state36;
wire   [8:0] add_ln131_fu_1262_p2;
reg   [8:0] add_ln131_reg_1809;
wire    ap_CS_fsm_state37;
wire   [4:0] add_ln128_fu_1278_p2;
reg   [4:0] add_ln128_reg_1817;
reg   [63:0] gmem_addr_4_reg_1822;
wire   [0:0] icmp_ln128_fu_1272_p2;
wire    ap_CS_fsm_state39;
wire   [4:0] add_ln129_fu_1388_p2;
reg   [4:0] add_ln129_reg_1836;
reg   [31:0] output_fm_buffer_0_load_1_reg_1841;
wire    ap_CS_fsm_state40;
wire   [8:0] empty_90_fu_1400_p2;
wire    ap_CS_fsm_state47;
wire   [7:0] add_ln79_fu_1420_p2;
reg   [7:0] add_ln79_reg_1857;
wire    ap_CS_fsm_state48;
wire  signed [63:0] sext_ln80_fu_1456_p1;
reg  signed [63:0] sext_ln80_reg_1862;
wire   [0:0] icmp_ln79_fu_1414_p2;
wire   [7:0] add_ln80_fu_1466_p2;
reg   [7:0] add_ln80_reg_1870;
wire    ap_CS_fsm_state49;
reg   [63:0] gmem_addr_reg_1875;
wire   [0:0] icmp_ln80_fu_1460_p2;
reg   [31:0] gmem_addr_read_reg_1882;
wire   [30:0] trunc_ln82_fu_1518_p1;
reg   [30:0] trunc_ln82_reg_1887;
wire   [30:0] select_ln83_fu_1538_p3;
reg   [30:0] select_ln83_reg_1892;
reg   [3:0] ti_reg_368;
wire   [0:0] exitcond6414_fu_1394_p2;
reg   [13:0] empty_reg_380;
wire   [0:0] icmp_ln32_fu_661_p2;
wire   [0:0] exitcond273_fu_677_p2;
reg   [5:0] nin_reg_391;
reg   [9:0] phi_mul_reg_402;
reg   [22:0] phi_mul49_reg_414;
reg   [4:0] by_reg_425;
reg   [4:0] bx_reg_436;
wire    ap_CS_fsm_state17;
reg   [4:0] ty_reg_447;
wire   [0:0] icmp_ln49_fu_1040_p2;
reg   [4:0] tx_reg_459;
wire   [0:0] icmp_ln48_fu_1014_p2;
reg   [2:0] ky_reg_471;
reg   [31:0] conv_i_i102_lcssa_lcssa15_reg_482;
reg   [2:0] kx_reg_493;
reg   [31:0] conv_i_i102_lcssa14_reg_504;
reg   [9:0] phi_mul51_reg_516;
reg   [5:0] nin_1_reg_527;
reg   [31:0] empty_83_reg_538;
reg   [11:0] phi_mul53_reg_550;
reg   [4:0] ty_1_reg_561;
reg   [4:0] tx_1_reg_572;
reg   [8:0] empty_89_reg_583;
reg   [7:0] xr_reg_594;
wire   [63:0] p_cast56_fu_689_p1;
wire   [63:0] zext_ln115_2_fu_857_p1;
wire   [63:0] p_cast60_fu_1035_p1;
wire   [63:0] zext_ln62_5_fu_1152_p1;
wire   [63:0] zext_ln131_2_fu_1377_p1;
wire   [63:0] p_cast64_fu_1406_p1;
wire  signed [63:0] sext_ln115_1_fu_986_p1;
wire  signed [63:0] sext_ln62_fu_1203_p1;
wire  signed [63:0] sext_ln129_fu_1358_p1;
wire  signed [63:0] sext_ln82_fu_1504_p1;
wire   [31:0] select_ln83_cast_fu_1546_p1;
reg   [3:0] tj_fu_216;
reg   [7:0] yr_fu_220;
wire  signed [29:0] shl_ln_fu_641_p3;
wire   [63:0] zext_ln107_fu_718_p1;
wire   [9:0] zext_ln115_fu_727_p1;
wire   [9:0] add_ln115_3_fu_731_p2;
wire   [9:0] mul_ln107_fu_741_p0;
wire   [5:0] mul_ln107_fu_741_p1;
wire   [5:0] zext_ln107_2_fu_747_p1;
wire   [5:0] tmp1_fu_763_p2;
wire  signed [9:0] tmp1_cast_fu_769_p1;
wire   [9:0] empty_79_fu_773_p2;
wire   [0:0] tmp_5_fu_792_p3;
wire   [0:0] tmp_4_fu_778_p3;
wire   [0:0] icmp_ln52_fu_786_p2;
wire   [0:0] or_ln51_fu_808_p2;
wire   [9:0] select_ln51_fu_800_p3;
wire   [9:0] yClamped_fu_814_p3;
wire   [11:0] shl_ln115_1_fu_830_p3;
wire   [19:0] shl_ln1_fu_822_p3;
wire  signed [19:0] sext_ln115_fu_838_p1;
wire   [13:0] zext_ln115_1_fu_848_p1;
wire   [13:0] add_ln115_4_fu_852_p2;
wire   [7:0] tmp4_fu_878_p3;
wire   [5:0] zext_ln108_fu_862_p1;
wire   [5:0] add_ln111_1_fu_890_p2;
wire  signed [9:0] sext_ln111_fu_896_p1;
wire   [9:0] zext_ln111_fu_886_p1;
wire   [9:0] add_ln111_fu_900_p2;
wire   [0:0] tmp_6_fu_906_p3;
wire   [0:0] icmp_ln52_1_fu_914_p2;
wire   [0:0] tmp_7_fu_920_p3;
wire   [0:0] or_ln51_1_fu_928_p2;
wire   [9:0] select_ln51_2_fu_934_p3;
wire   [9:0] select_ln51_3_fu_942_p3;
wire   [11:0] shl_ln115_2_fu_950_p3;
wire  signed [19:0] sext_ln115_2_fu_958_p1;
wire   [19:0] add_ln115_1_fu_962_p2;
wire  signed [63:0] sext_ln115_3_fu_967_p1;
wire   [63:0] add_ln115_2_fu_971_p2;
wire   [61:0] trunc_ln5_fu_976_p4;
wire   [8:0] tmp_2_fu_1000_p3;
wire   [8:0] ty_cast_fu_996_p1;
wire   [8:0] tx_cast_fu_1026_p1;
wire   [8:0] empty_81_fu_1030_p2;
wire   [4:0] zext_ln52_fu_1052_p1;
wire   [4:0] empty_82_fu_1068_p2;
wire   [4:0] shl_ln62_1_fu_1086_p3;
wire   [6:0] shl_ln2_fu_1078_p3;
wire   [6:0] zext_ln53_fu_1094_p1;
wire   [6:0] add_ln62_fu_1098_p2;
wire   [4:0] zext_ln53_1_fu_1108_p1;
wire   [4:0] add_ln57_fu_1124_p2;
wire   [4:0] shl_ln62_2_fu_1134_p3;
wire   [13:0] grp_fu_1550_p4;
wire   [11:0] add_ln62_1_fu_1174_p2;
wire   [63:0] zext_ln62_4_fu_1179_p1;
wire   [63:0] add_ln62_4_fu_1183_p2;
wire   [63:0] add_ln62_2_fu_1188_p2;
wire   [61:0] trunc_ln62_2_fu_1193_p4;
wire   [50:0] shl_ln62_3_fu_1226_p3;
wire   [50:0] mul_ln62_1_fu_605_p2;
wire   [50:0] add_ln62_3_fu_1234_p2;
wire   [8:0] tmp_3_fu_1254_p3;
wire   [8:0] zext_ln131_fu_1250_p1;
wire   [7:0] zext_ln128_fu_1268_p1;
wire   [7:0] empty_84_fu_1284_p2;
wire   [17:0] p_shl9_fu_1289_p3;
wire   [9:0] p_shl1_fu_1301_p3;
wire   [18:0] p_shl9_cast_fu_1297_p1;
wire   [18:0] p_shl10_cast_fu_1309_p1;
wire   [18:0] empty_85_fu_1313_p2;
wire   [9:0] tmp3_fu_1323_p4;
wire  signed [63:0] p_cast35_fu_1319_p1;
wire   [63:0] tmp14_fu_1337_p2;
wire   [63:0] tmp13_cast_fu_1333_p1;
wire   [63:0] empty_86_fu_1342_p2;
wire   [61:0] trunc_ln4_fu_1348_p4;
wire   [8:0] zext_ln131_1_fu_1368_p1;
wire   [8:0] add_ln131_1_fu_1372_p2;
wire   [17:0] shl_ln82_1_fu_1426_p3;
wire   [9:0] shl_ln82_2_fu_1438_p3;
wire   [18:0] zext_ln82_fu_1434_p1;
wire   [18:0] zext_ln82_1_fu_1446_p1;
wire   [18:0] sub_ln82_fu_1450_p2;
wire   [9:0] shl_ln82_3_fu_1472_p3;
wire   [63:0] zext_ln82_2_fu_1480_p1;
wire   [63:0] add_ln82_fu_1484_p2;
wire   [63:0] add_ln82_1_fu_1489_p2;
wire   [61:0] trunc_ln_fu_1494_p4;
wire   [31:0] add_ln82_2_fu_1522_p2;
wire   [0:0] tmp_1_fu_1530_p3;
wire   [30:0] add_ln83_fu_1526_p2;
wire   [4:0] grp_fu_1550_p1;
wire   [4:0] grp_fu_1550_p2;
wire   [4:0] grp_fu_1550_p3;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln129_fu_1382_p2;
reg   [64:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
wire   [13:0] mul_ln107_fu_741_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
end

srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 14112 ),
    .AddressWidth( 14 ))
input_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_address0),
    .ce0(input_fm_buffer_ce0),
    .we0(input_fm_buffer_we0),
    .d0(input_fm_buffer_d0),
    .q0(input_fm_buffer_q0)
);

srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 289 ),
    .AddressWidth( 9 ))
output_fm_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_0_address0),
    .ce0(output_fm_buffer_0_ce0),
    .we0(output_fm_buffer_0_we0),
    .d0(output_fm_buffer_0_d0),
    .q0(output_fm_buffer_0_q0)
);

srcnn_mul_32s_20s_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 51 ))
mul_32s_20s_51_1_1_U20(
    .din0(input_fm_buffer_q0),
    .din1(trunc_ln62_reg_1799),
    .dout(mul_ln62_1_fu_605_p2)
);

srcnn_mul_10ns_6ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
mul_10ns_6ns_14_1_1_U21(
    .din0(mul_ln107_fu_741_p0),
    .din1(mul_ln107_fu_741_p1),
    .dout(mul_ln107_fu_741_p2)
);

srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul51_reg_516),
    .din1(grp_fu_1550_p1),
    .din2(grp_fu_1550_p2),
    .din3(grp_fu_1550_p3),
    .ce(1'b1),
    .dout(grp_fu_1550_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        bx_reg_436 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bx_reg_436 <= add_ln108_reg_1687;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_706_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        by_reg_425 <= 5'd0;
    end else if (((icmp_ln108_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        by_reg_425 <= add_ln107_reg_1669;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        conv_i_i102_lcssa14_reg_504 <= conv_i_i102_lcssa_lcssa15_reg_482;
    end else if (((icmp_ln61_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        conv_i_i102_lcssa14_reg_504 <= empty_83_reg_538;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_i_i102_lcssa_lcssa15_reg_482 <= output_fm_buffer_0_q0;
    end else if (((icmp_ln53_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        conv_i_i102_lcssa_lcssa15_reg_482 <= conv_i_i102_lcssa14_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        empty_83_reg_538 <= {{add_ln62_3_fu_1234_p2[50:19]}};
    end else if (((icmp_ln53_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        empty_83_reg_538 <= conv_i_i102_lcssa14_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        empty_89_reg_583 <= 9'd0;
    end else if (((exitcond6414_fu_1394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        empty_89_reg_583 <= empty_90_fu_1400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_380 <= empty_78_fu_683_p2;
    end else if (((icmp_ln32_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_380 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        kx_reg_493 <= 3'd0;
    end else if (((icmp_ln61_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        kx_reg_493 <= add_ln53_reg_1755;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ky_reg_471 <= 3'd0;
    end else if (((icmp_ln53_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ky_reg_471 <= add_ln52_reg_1737;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        nin_1_reg_527 <= add_ln61_reg_1783;
    end else if (((icmp_ln53_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        nin_1_reg_527 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nin_reg_391 <= 6'd0;
    end else if (((icmp_ln107_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nin_reg_391 <= add_ln106_reg_1651;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul49_reg_414 <= 23'd0;
    end else if (((icmp_ln107_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul49_reg_414 <= add_ln106_1_reg_1638;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_mul51_reg_516 <= add_ln62_7_reg_1770;
    end else if (((icmp_ln53_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul51_reg_516 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_mul53_reg_550 <= add_ln62_8_reg_1788;
    end else if (((icmp_ln53_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul53_reg_550 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_402 <= 10'd0;
    end else if (((icmp_ln107_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_402 <= add_ln106_2_reg_1643;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6414_fu_1394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ti_reg_368 <= add_ln32_reg_1625;
    end else if (((icmp_ln31_fu_617_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_368 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_216 <= 4'd0;
    end else if (((icmp_ln32_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_216 <= add_ln31_reg_1590;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        tx_1_reg_572 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1))) begin
        tx_1_reg_572 <= add_ln129_reg_1836;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1014_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tx_reg_459 <= 5'd0;
    end else if (((icmp_ln52_2_fu_1056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        tx_reg_459 <= add_ln49_reg_1724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1014_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ty_1_reg_561 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1))) begin
        ty_1_reg_561 <= add_ln128_reg_1817;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_706_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ty_reg_447 <= 5'd0;
    end else if (((icmp_ln49_fu_1040_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        ty_reg_447 <= add_ln48_reg_1711;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1))) begin
        xr_reg_594 <= add_ln80_reg_1870;
    end else if (((icmp_ln79_fu_1414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        xr_reg_594 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_617_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        yr_fu_220 <= 8'd0;
    end else if (((icmp_ln80_fu_1460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        yr_fu_220 <= add_ln79_reg_1857;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln106_1_reg_1638 <= add_ln106_1_fu_694_p2;
        add_ln106_2_reg_1643 <= add_ln106_2_fu_700_p2;
        add_ln106_reg_1651 <= add_ln106_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln107_reg_1669 <= add_ln107_fu_757_p2;
        mul_ln107_reg_1661 <= mul_ln107_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln108_reg_1687 <= add_ln108_fu_872_p2;
        input_fm_buffer_addr_1_reg_1679 <= zext_ln115_2_fu_857_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_706_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln115_reg_1656 <= add_ln115_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln128_reg_1817 <= add_ln128_fu_1278_p2;
        add_ln131_reg_1809 <= add_ln131_fu_1262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add_ln129_reg_1836 <= add_ln129_fu_1388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_1590 <= add_ln31_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_1625 <= add_ln32_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln48_reg_1711 <= add_ln48_fu_1020_p2;
        empty_80_reg_1703 <= empty_80_fu_1008_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln49_reg_1724 <= add_ln49_fu_1046_p2;
        output_fm_buffer_0_addr_reg_1716 <= p_cast60_fu_1035_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln52_reg_1737 <= add_ln52_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln53_reg_1755 <= add_ln53_fu_1118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln61_reg_1783 <= add_ln61_fu_1162_p2;
        input_fm_buffer_addr_2_reg_1775 <= zext_ln62_5_fu_1152_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln62_7_reg_1770 <= add_ln62_7_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln62_8_reg_1788 <= add_ln62_8_fu_1168_p2;
        gmem_addr_6_reg_1793 <= sext_ln62_fu_1203_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        add_ln79_reg_1857 <= add_ln79_fu_1420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        add_ln80_reg_1870 <= add_ln80_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1272_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_addr_4_reg_1822 <= sext_ln129_fu_1358_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_5_read_reg_1698 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        gmem_addr_5_reg_1692 <= sext_ln115_1_fu_986_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_addr_read_reg_1882 <= m_axi_gmem_RDATA;
        trunc_ln82_reg_1887 <= trunc_ln82_fu_1518_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_1460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        gmem_addr_reg_1875 <= sext_ln82_fu_1504_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_fm_buffer_0_load_1_reg_1841 <= output_fm_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        select_ln83_reg_1892 <= select_ln83_fu_1538_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_617_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln79_reg_1612[31 : 15] <= sext_ln79_fu_648_p1[31 : 15];
        sext_ln82_1_reg_1617[30 : 15] <= sext_ln82_1_fu_652_p1[30 : 15];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_1414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        sext_ln80_reg_1862[63 : 2] <= sext_ln80_fu_1456_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln115_reg_1674[19 : 2] <= sub_ln115_fu_842_p2[19 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_617_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_1595 <= tmp_fu_629_p3;
        zext_ln32_reg_1600[7 : 0] <= zext_ln32_fu_637_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        trunc_ln62_reg_1799 <= trunc_ln62_fu_1213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        zext_ln61_reg_1765[4 : 2] <= zext_ln61_fu_1142_p1[4 : 2];
        zext_ln62_2_reg_1760[4 : 0] <= zext_ln62_2_fu_1130_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        zext_ln62_1_reg_1747[6 : 2] <= zext_ln62_1_fu_1104_p1[6 : 2];
        zext_ln62_reg_1742[4 : 0] <= zext_ln62_fu_1074_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln79_fu_1414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state8))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state38))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state46))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_2_reg_1775;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_1679;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_address0 = p_cast56_fu_689_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_d0 = gmem_addr_5_read_reg_1698;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond273_fu_677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1875;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            m_axi_gmem_ARADDR = gmem_addr_6_reg_1793;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            m_axi_gmem_ARADDR = gmem_addr_5_reg_1692;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_gmem_AWADDR = gmem_addr_reg_1875;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            m_axi_gmem_AWADDR = gmem_addr_4_reg_1822;
        end else begin
            m_axi_gmem_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_gmem_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            m_axi_gmem_AWLEN = 32'd17;
        end else begin
            m_axi_gmem_AWLEN = 'bx;
        end
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        m_axi_gmem_WDATA = select_ln83_cast_fu_1546_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        m_axi_gmem_WDATA = output_fm_buffer_0_load_1_reg_1841;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        output_fm_buffer_0_address0 = p_cast64_fu_1406_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        output_fm_buffer_0_address0 = zext_ln131_2_fu_1377_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_address0 = output_fm_buffer_0_addr_reg_1716;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_fm_buffer_0_address0 = p_cast60_fu_1035_p1;
    end else begin
        output_fm_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        output_fm_buffer_0_ce0 = 1'b1;
    end else begin
        output_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        output_fm_buffer_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_d0 = conv_i_i102_lcssa_lcssa15_reg_482;
    end else begin
        output_fm_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond6414_fu_1394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47)) | ((icmp_ln52_2_fu_1056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        output_fm_buffer_0_we0 = 1'b1;
    end else begin
        output_fm_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_617_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond273_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln106_fu_706_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln107_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln108_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln48_fu_1014_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln49_fu_1040_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln52_2_fu_1056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln53_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln61_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln128_fu_1272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (icmp_ln129_fu_1382_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((exitcond6414_fu_1394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln79_fu_1414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln80_fu_1460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_1_fu_694_p2 = (phi_mul49_reg_414 + 23'd260100);

assign add_ln106_2_fu_700_p2 = (phi_mul_reg_402 + 10'd21);

assign add_ln106_fu_712_p2 = (nin_reg_391 + 6'd1);

assign add_ln107_fu_757_p2 = (by_reg_425 + 5'd1);

assign add_ln108_fu_872_p2 = (bx_reg_436 + 5'd1);

assign add_ln111_1_fu_890_p2 = ($signed(zext_ln108_fu_862_p1) + $signed(6'd62));

assign add_ln111_fu_900_p2 = ($signed(sext_ln111_fu_896_p1) + $signed(zext_ln111_fu_886_p1));

assign add_ln115_1_fu_962_p2 = ($signed(sub_ln115_reg_1674) + $signed(sext_ln115_2_fu_958_p1));

assign add_ln115_2_fu_971_p2 = ($signed(sext_ln115_3_fu_967_p1) + $signed(add_ln115_reg_1656));

assign add_ln115_3_fu_731_p2 = (phi_mul_reg_402 + zext_ln115_fu_727_p1);

assign add_ln115_4_fu_852_p2 = (mul_ln107_reg_1661 + zext_ln115_1_fu_848_p1);

assign add_ln115_fu_722_p2 = (zext_ln107_fu_718_p1 + input_ftmap);

assign add_ln128_fu_1278_p2 = (ty_1_reg_561 + 5'd1);

assign add_ln129_fu_1388_p2 = (tx_1_reg_572 + 5'd1);

assign add_ln131_1_fu_1372_p2 = (add_ln131_reg_1809 + zext_ln131_1_fu_1368_p1);

assign add_ln131_fu_1262_p2 = (tmp_3_fu_1254_p3 + zext_ln131_fu_1250_p1);

assign add_ln31_fu_623_p2 = (tj_fu_216 + 4'd1);

assign add_ln32_fu_667_p2 = (ti_reg_368 + 4'd1);

assign add_ln48_fu_1020_p2 = (ty_reg_447 + 5'd1);

assign add_ln49_fu_1046_p2 = (tx_reg_459 + 5'd1);

assign add_ln52_fu_1062_p2 = (ky_reg_471 + 3'd1);

assign add_ln53_fu_1118_p2 = (kx_reg_493 + 3'd1);

assign add_ln57_fu_1124_p2 = (zext_ln53_1_fu_1108_p1 + tx_reg_459);

assign add_ln61_fu_1162_p2 = (nin_1_reg_527 + 6'd1);

assign add_ln62_1_fu_1174_p2 = (zext_ln61_reg_1765 + phi_mul53_reg_550);

assign add_ln62_2_fu_1188_p2 = (add_ln62_4_fu_1183_p2 + zext_ln62_1_reg_1747);

assign add_ln62_3_fu_1234_p2 = (shl_ln62_3_fu_1226_p3 + mul_ln62_1_fu_605_p2);

assign add_ln62_4_fu_1183_p2 = (zext_ln62_4_fu_1179_p1 + conv3_weights);

assign add_ln62_7_fu_1146_p2 = (phi_mul51_reg_516 + 10'd21);

assign add_ln62_8_fu_1168_p2 = (phi_mul53_reg_550 + 12'd100);

assign add_ln62_fu_1098_p2 = (shl_ln2_fu_1078_p3 + zext_ln53_fu_1094_p1);

assign add_ln79_fu_1420_p2 = (yr_fu_220 + 8'd1);

assign add_ln80_fu_1466_p2 = (xr_reg_594 + 8'd1);

assign add_ln82_1_fu_1489_p2 = ($signed(add_ln82_fu_1484_p2) + $signed(sext_ln80_reg_1862));

assign add_ln82_2_fu_1522_p2 = ($signed(gmem_addr_read_reg_1882) + $signed(sext_ln79_reg_1612));

assign add_ln82_fu_1484_p2 = (zext_ln82_2_fu_1480_p1 + output_ftmap);

assign add_ln83_fu_1526_p2 = ($signed(trunc_ln82_reg_1887) + $signed(sext_ln82_1_reg_1617));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign empty_78_fu_683_p2 = (empty_reg_380 + 14'd1);

assign empty_79_fu_773_p2 = ($signed(tmp1_cast_fu_769_p1) + $signed(zext_ln32_reg_1600));

assign empty_80_fu_1008_p2 = (tmp_2_fu_1000_p3 + ty_cast_fu_996_p1);

assign empty_81_fu_1030_p2 = (empty_80_reg_1703 + tx_cast_fu_1026_p1);

assign empty_82_fu_1068_p2 = (zext_ln52_fu_1052_p1 + ty_reg_447);

assign empty_84_fu_1284_p2 = (zext_ln128_fu_1268_p1 + tmp_reg_1595);

assign empty_85_fu_1313_p2 = (p_shl9_cast_fu_1297_p1 - p_shl10_cast_fu_1309_p1);

assign empty_86_fu_1342_p2 = (tmp14_fu_1337_p2 + tmp13_cast_fu_1333_p1);

assign empty_90_fu_1400_p2 = (empty_89_reg_583 + 9'd1);

assign exitcond273_fu_677_p2 = ((empty_reg_380 == 14'd14112) ? 1'b1 : 1'b0);

assign exitcond6414_fu_1394_p2 = ((empty_89_reg_583 == 9'd289) ? 1'b1 : 1'b0);

assign grp_fu_1550_p1 = zext_ln62_reg_1742;

assign grp_fu_1550_p2 = 14'd21;

assign grp_fu_1550_p3 = zext_ln62_2_reg_1760;

assign icmp_ln106_fu_706_p2 = ((nin_reg_391 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_751_p2 = ((by_reg_425 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_866_p2 = ((bx_reg_436 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_1272_p2 = ((ty_1_reg_561 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1382_p2 = ((tx_1_reg_572 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_617_p2 = ((tj_fu_216 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_661_p2 = ((ti_reg_368 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1014_p2 = ((ty_reg_447 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1040_p2 = ((tx_reg_459 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_914_p2 = (($signed(add_ln111_fu_900_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_1056_p2 = ((ky_reg_471 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_786_p2 = (($signed(empty_79_fu_773_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_1112_p2 = ((kx_reg_493 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1156_p2 = ((nin_1_reg_527 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1414_p2 = ((yr_fu_220 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1460_p2 = ((xr_reg_594 == 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln107_fu_741_p0 = mul_ln107_fu_741_p00;

assign mul_ln107_fu_741_p00 = add_ln115_3_fu_731_p2;

assign mul_ln107_fu_741_p1 = 14'd21;

assign or_ln51_1_fu_928_p2 = (tmp_6_fu_906_p3 | icmp_ln52_1_fu_914_p2);

assign or_ln51_fu_808_p2 = (tmp_4_fu_778_p3 | icmp_ln52_fu_786_p2);

assign p_cast35_fu_1319_p1 = $signed(empty_85_fu_1313_p2);

assign p_cast56_fu_689_p1 = empty_reg_380;

assign p_cast60_fu_1035_p1 = empty_81_fu_1030_p2;

assign p_cast64_fu_1406_p1 = empty_89_reg_583;

assign p_shl10_cast_fu_1309_p1 = p_shl1_fu_1301_p3;

assign p_shl1_fu_1301_p3 = {{empty_84_fu_1284_p2}, {2'd0}};

assign p_shl9_cast_fu_1297_p1 = p_shl9_fu_1289_p3;

assign p_shl9_fu_1289_p3 = {{empty_84_fu_1284_p2}, {10'd0}};

assign select_ln51_2_fu_934_p3 = ((tmp_7_fu_920_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_3_fu_942_p3 = ((or_ln51_1_fu_928_p2[0:0] == 1'b1) ? select_ln51_2_fu_934_p3 : add_ln111_fu_900_p2);

assign select_ln51_fu_800_p3 = ((tmp_5_fu_792_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_cast_fu_1546_p1 = select_ln83_reg_1892;

assign select_ln83_fu_1538_p3 = ((tmp_1_fu_1530_p3[0:0] == 1'b1) ? 31'd0 : add_ln83_fu_1526_p2);

assign sext_ln111_fu_896_p1 = $signed(add_ln111_1_fu_890_p2);

assign sext_ln115_1_fu_986_p1 = $signed(trunc_ln5_fu_976_p4);

assign sext_ln115_2_fu_958_p1 = $signed(shl_ln115_2_fu_950_p3);

assign sext_ln115_3_fu_967_p1 = $signed(add_ln115_1_fu_962_p2);

assign sext_ln115_fu_838_p1 = $signed(shl_ln115_1_fu_830_p3);

assign sext_ln129_fu_1358_p1 = $signed(trunc_ln4_fu_1348_p4);

assign sext_ln62_fu_1203_p1 = $signed(trunc_ln62_2_fu_1193_p4);

assign sext_ln79_fu_648_p1 = shl_ln_fu_641_p3;

assign sext_ln80_fu_1456_p1 = $signed(sub_ln82_fu_1450_p2);

assign sext_ln82_1_fu_652_p1 = shl_ln_fu_641_p3;

assign sext_ln82_fu_1504_p1 = $signed(trunc_ln_fu_1494_p4);

assign shl_ln115_1_fu_830_p3 = {{yClamped_fu_814_p3}, {2'd0}};

assign shl_ln115_2_fu_950_p3 = {{select_ln51_3_fu_942_p3}, {2'd0}};

assign shl_ln1_fu_822_p3 = {{yClamped_fu_814_p3}, {10'd0}};

assign shl_ln2_fu_1078_p3 = {{ky_reg_471}, {4'd0}};

assign shl_ln62_1_fu_1086_p3 = {{ky_reg_471}, {2'd0}};

assign shl_ln62_2_fu_1134_p3 = {{kx_reg_493}, {2'd0}};

assign shl_ln62_3_fu_1226_p3 = {{empty_83_reg_538}, {19'd0}};

assign shl_ln82_1_fu_1426_p3 = {{yr_fu_220}, {10'd0}};

assign shl_ln82_2_fu_1438_p3 = {{yr_fu_220}, {2'd0}};

assign shl_ln82_3_fu_1472_p3 = {{xr_reg_594}, {2'd0}};

assign shl_ln_fu_641_p3 = {{conv3_biases_0_0_val}, {15'd0}};

assign sub_ln115_fu_842_p2 = ($signed(shl_ln1_fu_822_p3) - $signed(sext_ln115_fu_838_p1));

assign sub_ln82_fu_1450_p2 = (zext_ln82_fu_1434_p1 - zext_ln82_1_fu_1446_p1);

assign tmp13_cast_fu_1333_p1 = tmp3_fu_1323_p4;

assign tmp14_fu_1337_p2 = ($signed(p_cast35_fu_1319_p1) + $signed(output_ftmap));

assign tmp1_cast_fu_769_p1 = $signed(tmp1_fu_763_p2);

assign tmp1_fu_763_p2 = ($signed(zext_ln107_2_fu_747_p1) + $signed(6'd62));

assign tmp3_fu_1323_p4 = {{{ti_reg_368}, {ti_reg_368}}, {2'd0}};

assign tmp4_fu_878_p3 = {{ti_reg_368}, {ti_reg_368}};

assign tmp_1_fu_1530_p3 = add_ln82_2_fu_1522_p2[32'd31];

assign tmp_2_fu_1000_p3 = {{ty_reg_447}, {4'd0}};

assign tmp_3_fu_1254_p3 = {{ty_1_reg_561}, {4'd0}};

assign tmp_4_fu_778_p3 = empty_79_fu_773_p2[32'd9];

assign tmp_5_fu_792_p3 = empty_79_fu_773_p2[32'd9];

assign tmp_6_fu_906_p3 = add_ln111_fu_900_p2[32'd9];

assign tmp_7_fu_920_p3 = add_ln111_fu_900_p2[32'd9];

assign tmp_fu_629_p3 = {{tj_fu_216}, {tj_fu_216}};

assign trunc_ln4_fu_1348_p4 = {{empty_86_fu_1342_p2[63:2]}};

assign trunc_ln5_fu_976_p4 = {{add_ln115_2_fu_971_p2[63:2]}};

assign trunc_ln62_2_fu_1193_p4 = {{add_ln62_2_fu_1188_p2[63:2]}};

assign trunc_ln62_fu_1213_p1 = m_axi_gmem_RDATA[19:0];

assign trunc_ln82_fu_1518_p1 = m_axi_gmem_RDATA[30:0];

assign trunc_ln_fu_1494_p4 = {{add_ln82_1_fu_1489_p2[63:2]}};

assign tx_cast_fu_1026_p1 = tx_reg_459;

assign ty_cast_fu_996_p1 = ty_reg_447;

assign yClamped_fu_814_p3 = ((or_ln51_fu_808_p2[0:0] == 1'b1) ? select_ln51_fu_800_p3 : empty_79_fu_773_p2);

assign zext_ln107_2_fu_747_p1 = by_reg_425;

assign zext_ln107_fu_718_p1 = phi_mul49_reg_414;

assign zext_ln108_fu_862_p1 = bx_reg_436;

assign zext_ln111_fu_886_p1 = tmp4_fu_878_p3;

assign zext_ln115_1_fu_848_p1 = bx_reg_436;

assign zext_ln115_2_fu_857_p1 = add_ln115_4_fu_852_p2;

assign zext_ln115_fu_727_p1 = by_reg_425;

assign zext_ln128_fu_1268_p1 = ty_1_reg_561;

assign zext_ln131_1_fu_1368_p1 = tx_1_reg_572;

assign zext_ln131_2_fu_1377_p1 = add_ln131_1_fu_1372_p2;

assign zext_ln131_fu_1250_p1 = ty_1_reg_561;

assign zext_ln32_fu_637_p1 = tmp_fu_629_p3;

assign zext_ln52_fu_1052_p1 = ky_reg_471;

assign zext_ln53_1_fu_1108_p1 = kx_reg_493;

assign zext_ln53_fu_1094_p1 = shl_ln62_1_fu_1086_p3;

assign zext_ln61_fu_1142_p1 = shl_ln62_2_fu_1134_p3;

assign zext_ln62_1_fu_1104_p1 = add_ln62_fu_1098_p2;

assign zext_ln62_2_fu_1130_p1 = add_ln57_fu_1124_p2;

assign zext_ln62_4_fu_1179_p1 = add_ln62_1_fu_1174_p2;

assign zext_ln62_5_fu_1152_p1 = grp_fu_1550_p4;

assign zext_ln62_fu_1074_p1 = empty_82_fu_1068_p2;

assign zext_ln82_1_fu_1446_p1 = shl_ln82_2_fu_1438_p3;

assign zext_ln82_2_fu_1480_p1 = shl_ln82_3_fu_1472_p3;

assign zext_ln82_fu_1434_p1 = shl_ln82_1_fu_1426_p3;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1600[9:8] <= 2'b00;
    sext_ln79_reg_1612[14:0] <= 15'b000000000000000;
    sext_ln82_1_reg_1617[14:0] <= 15'b000000000000000;
    sub_ln115_reg_1674[1:0] <= 2'b00;
    zext_ln62_reg_1742[9:5] <= 5'b00000;
    zext_ln62_1_reg_1747[1:0] <= 2'b00;
    zext_ln62_1_reg_1747[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln62_2_reg_1760[13:5] <= 9'b000000000;
    zext_ln61_reg_1765[1:0] <= 2'b00;
    zext_ln61_reg_1765[11:5] <= 7'b0000000;
    sext_ln80_reg_1862[1:0] <= 2'b00;
end

endmodule //srcnn_conv3
