// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv3_weights,
        conv3_biases_0_0_val,
        output_ftmap,
        grp_fu_597_p_din0,
        grp_fu_597_p_din1,
        grp_fu_597_p_opcode,
        grp_fu_597_p_dout0,
        grp_fu_597_p_ce,
        grp_fu_601_p_din0,
        grp_fu_601_p_din1,
        grp_fu_601_p_dout0,
        grp_fu_601_p_ce,
        grp_fu_605_p_din0,
        grp_fu_605_p_din1,
        grp_fu_605_p_opcode,
        grp_fu_605_p_dout0,
        grp_fu_605_p_ce
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv3_weights;
input  [31:0] conv3_biases_0_0_val;
input  [63:0] output_ftmap;
output  [31:0] grp_fu_597_p_din0;
output  [31:0] grp_fu_597_p_din1;
output  [1:0] grp_fu_597_p_opcode;
input  [31:0] grp_fu_597_p_dout0;
output   grp_fu_597_p_ce;
output  [31:0] grp_fu_601_p_din0;
output  [31:0] grp_fu_601_p_din1;
input  [31:0] grp_fu_601_p_dout0;
output   grp_fu_601_p_ce;
output  [31:0] grp_fu_605_p_din0;
output  [31:0] grp_fu_605_p_din1;
output  [4:0] grp_fu_605_p_opcode;
input  [0:0] grp_fu_605_p_dout0;
output   grp_fu_605_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[31:0] m_axi_gmem_AWLEN;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] input_fm_buffer_address0;
reg    input_fm_buffer_ce0;
reg    input_fm_buffer_we0;
reg   [31:0] input_fm_buffer_d0;
wire   [31:0] input_fm_buffer_q0;
reg   [8:0] output_fm_buffer_0_address0;
reg    output_fm_buffer_0_ce0;
reg    output_fm_buffer_0_we0;
reg   [31:0] output_fm_buffer_0_d0;
wire   [31:0] output_fm_buffer_0_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state44;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state47;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state76;
reg   [31:0] reg_607;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state68;
wire   [3:0] add_ln31_fu_627_p2;
reg   [3:0] add_ln31_reg_1576;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_fu_633_p3;
reg   [7:0] tmp_reg_1581;
wire   [0:0] icmp_ln31_fu_621_p2;
wire   [9:0] zext_ln32_fu_641_p1;
reg   [9:0] zext_ln32_reg_1586;
wire   [3:0] add_ln32_fu_656_p2;
reg   [3:0] add_ln32_reg_1601;
wire    ap_CS_fsm_state3;
wire   [13:0] empty_78_fu_672_p2;
wire    ap_CS_fsm_state4;
wire   [22:0] add_ln106_1_fu_683_p2;
reg   [22:0] add_ln106_1_reg_1614;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln106_2_fu_689_p2;
reg   [9:0] add_ln106_2_reg_1619;
wire   [5:0] add_ln106_fu_701_p2;
reg   [5:0] add_ln106_reg_1627;
wire   [63:0] add_ln115_fu_711_p2;
reg   [63:0] add_ln115_reg_1632;
wire   [0:0] icmp_ln106_fu_695_p2;
wire   [13:0] mul_ln107_fu_730_p2;
reg   [13:0] mul_ln107_reg_1637;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln107_fu_746_p2;
reg   [4:0] add_ln107_reg_1645;
wire   [19:0] sub_ln115_fu_831_p2;
reg   [19:0] sub_ln115_reg_1650;
wire   [0:0] icmp_ln107_fu_740_p2;
reg   [13:0] input_fm_buffer_addr_1_reg_1655;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln108_fu_861_p2;
reg   [4:0] add_ln108_reg_1663;
reg   [63:0] gmem_addr_5_reg_1668;
wire   [0:0] icmp_ln108_fu_855_p2;
reg   [31:0] gmem_addr_5_read_reg_1674;
wire   [8:0] empty_80_fu_1001_p2;
reg   [8:0] empty_80_reg_1679;
wire    ap_CS_fsm_state18;
wire   [4:0] add_ln48_fu_1013_p2;
reg   [4:0] add_ln48_reg_1687;
reg   [8:0] output_fm_buffer_0_addr_reg_1692;
wire    ap_CS_fsm_state19;
wire   [4:0] add_ln49_fu_1039_p2;
reg   [4:0] add_ln49_reg_1700;
wire    ap_CS_fsm_state20;
wire   [2:0] add_ln52_fu_1055_p2;
reg   [2:0] add_ln52_reg_1713;
wire    ap_CS_fsm_state21;
wire   [9:0] zext_ln62_fu_1067_p1;
reg   [9:0] zext_ln62_reg_1718;
wire   [0:0] icmp_ln52_2_fu_1049_p2;
wire   [63:0] zext_ln62_1_fu_1097_p1;
reg   [63:0] zext_ln62_1_reg_1723;
wire   [2:0] add_ln53_fu_1111_p2;
reg   [2:0] add_ln53_reg_1731;
wire    ap_CS_fsm_state22;
wire   [13:0] zext_ln62_2_fu_1123_p1;
reg   [13:0] zext_ln62_2_reg_1736;
wire   [0:0] icmp_ln53_fu_1105_p2;
wire   [11:0] zext_ln61_fu_1135_p1;
reg   [11:0] zext_ln61_reg_1741;
wire   [9:0] add_ln62_6_fu_1139_p2;
reg   [9:0] add_ln62_6_reg_1746;
wire    ap_CS_fsm_state23;
reg   [13:0] input_fm_buffer_addr_2_reg_1751;
wire    ap_CS_fsm_state26;
wire   [5:0] add_ln61_fu_1155_p2;
reg   [5:0] add_ln61_reg_1759;
wire   [11:0] add_ln62_7_fu_1161_p2;
reg   [11:0] add_ln62_7_reg_1764;
wire   [0:0] icmp_ln61_fu_1149_p2;
reg   [63:0] gmem_addr_6_reg_1769;
reg   [31:0] gmem_addr_6_read_reg_1775;
reg   [31:0] input_fm_buffer_load_reg_1780;
wire   [31:0] bitcast_ln62_fu_1206_p1;
reg   [31:0] mul_reg_1790;
wire    ap_CS_fsm_state38;
wire   [8:0] add_ln131_fu_1222_p2;
reg   [8:0] add_ln131_reg_1795;
wire    ap_CS_fsm_state43;
wire   [4:0] add_ln128_fu_1238_p2;
reg   [4:0] add_ln128_reg_1803;
reg   [63:0] gmem_addr_4_reg_1808;
wire   [0:0] icmp_ln128_fu_1232_p2;
wire    ap_CS_fsm_state45;
wire   [4:0] add_ln129_fu_1348_p2;
reg   [4:0] add_ln129_reg_1822;
reg   [31:0] output_fm_buffer_0_load_1_reg_1827;
wire    ap_CS_fsm_state46;
wire   [8:0] empty_90_fu_1364_p2;
wire    ap_CS_fsm_state53;
wire   [7:0] add_ln79_fu_1384_p2;
reg   [7:0] add_ln79_reg_1843;
wire    ap_CS_fsm_state54;
wire  signed [63:0] sext_ln80_fu_1420_p1;
reg  signed [63:0] sext_ln80_reg_1848;
wire   [0:0] icmp_ln79_fu_1378_p2;
wire   [7:0] add_ln80_fu_1430_p2;
reg   [7:0] add_ln80_reg_1856;
wire    ap_CS_fsm_state55;
reg   [63:0] gmem_addr_reg_1861;
wire   [0:0] icmp_ln80_fu_1424_p2;
reg   [31:0] gmem_addr_read_reg_1868;
wire   [31:0] bitcast_ln82_fu_1482_p1;
wire   [31:0] select_ln83_fu_1528_p3;
reg   [31:0] select_ln83_reg_1878;
wire    ap_CS_fsm_state70;
reg   [3:0] ti_reg_356;
wire   [0:0] exitcond7514_fu_1358_p2;
reg   [13:0] empty_reg_368;
wire   [0:0] icmp_ln32_fu_650_p2;
wire   [0:0] exitcond383_fu_666_p2;
reg   [5:0] nin_reg_379;
reg   [9:0] phi_mul_reg_390;
reg   [22:0] phi_mul49_reg_402;
reg   [4:0] by_reg_413;
reg   [4:0] bx_reg_424;
wire    ap_CS_fsm_state17;
reg   [4:0] ty_reg_435;
wire   [0:0] icmp_ln49_fu_1033_p2;
reg   [4:0] tx_reg_447;
wire   [0:0] icmp_ln48_fu_1007_p2;
reg   [2:0] ky_reg_459;
reg   [31:0] add51_lcssa_lcssa27_reg_470;
reg   [2:0] kx_reg_481;
reg   [31:0] add51_lcssa26_reg_492;
reg   [9:0] phi_mul51_reg_504;
reg   [5:0] nin_1_reg_515;
reg   [31:0] empty_83_reg_526;
reg   [11:0] phi_mul53_reg_538;
reg   [4:0] ty_1_reg_549;
reg   [4:0] tx_1_reg_560;
reg   [8:0] empty_89_reg_571;
reg   [7:0] xr_reg_582;
wire   [63:0] p_cast55_fu_678_p1;
wire   [63:0] zext_ln115_2_fu_846_p1;
wire   [63:0] p_cast59_fu_1028_p1;
wire   [63:0] zext_ln62_5_fu_1145_p1;
wire   [63:0] zext_ln131_2_fu_1337_p1;
wire   [63:0] p_cast64_fu_1370_p1;
wire  signed [63:0] sext_ln115_1_fu_975_p1;
wire  signed [63:0] sext_ln62_fu_1196_p1;
wire  signed [63:0] sext_ln129_fu_1318_p1;
wire  signed [63:0] sext_ln82_fu_1468_p1;
wire   [31:0] bitcast_ln131_fu_1354_p1;
reg   [3:0] tj_fu_204;
reg   [7:0] yr_fu_208;
wire   [31:0] bitcast_ln115_fu_985_p1;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_593_p0;
reg   [31:0] grp_fu_593_p1;
wire    ap_CS_fsm_state39;
wire   [63:0] zext_ln107_fu_707_p1;
wire   [9:0] zext_ln115_fu_716_p1;
wire   [9:0] add_ln115_3_fu_720_p2;
wire   [9:0] mul_ln107_fu_730_p0;
wire   [5:0] mul_ln107_fu_730_p1;
wire   [5:0] zext_ln107_2_fu_736_p1;
wire   [5:0] tmp1_fu_752_p2;
wire  signed [9:0] tmp1_cast_fu_758_p1;
wire   [9:0] empty_79_fu_762_p2;
wire   [0:0] tmp_6_fu_781_p3;
wire   [0:0] tmp_5_fu_767_p3;
wire   [0:0] icmp_ln52_fu_775_p2;
wire   [0:0] or_ln51_fu_797_p2;
wire   [9:0] select_ln51_fu_789_p3;
wire   [9:0] yClamped_fu_803_p3;
wire   [11:0] shl_ln115_1_fu_819_p3;
wire   [19:0] shl_ln1_fu_811_p3;
wire  signed [19:0] sext_ln115_fu_827_p1;
wire   [13:0] zext_ln115_1_fu_837_p1;
wire   [13:0] add_ln115_4_fu_841_p2;
wire   [7:0] tmp4_fu_867_p3;
wire   [5:0] zext_ln108_fu_851_p1;
wire   [5:0] add_ln111_1_fu_879_p2;
wire  signed [9:0] sext_ln111_fu_885_p1;
wire   [9:0] zext_ln111_fu_875_p1;
wire   [9:0] add_ln111_fu_889_p2;
wire   [0:0] tmp_7_fu_895_p3;
wire   [0:0] icmp_ln52_1_fu_903_p2;
wire   [0:0] tmp_8_fu_909_p3;
wire   [0:0] or_ln51_1_fu_917_p2;
wire   [9:0] select_ln51_2_fu_923_p3;
wire   [9:0] select_ln51_3_fu_931_p3;
wire   [11:0] shl_ln115_2_fu_939_p3;
wire  signed [19:0] sext_ln115_2_fu_947_p1;
wire   [19:0] add_ln115_1_fu_951_p2;
wire  signed [63:0] sext_ln115_3_fu_956_p1;
wire   [63:0] add_ln115_2_fu_960_p2;
wire   [61:0] trunc_ln6_fu_965_p4;
wire   [8:0] tmp_3_fu_993_p3;
wire   [8:0] ty_cast_fu_989_p1;
wire   [8:0] tx_cast_fu_1019_p1;
wire   [8:0] empty_81_fu_1023_p2;
wire   [4:0] zext_ln52_fu_1045_p1;
wire   [4:0] empty_82_fu_1061_p2;
wire   [4:0] shl_ln62_1_fu_1079_p3;
wire   [6:0] shl_ln2_fu_1071_p3;
wire   [6:0] zext_ln53_fu_1087_p1;
wire   [6:0] add_ln62_fu_1091_p2;
wire   [4:0] zext_ln53_1_fu_1101_p1;
wire   [4:0] add_ln57_fu_1117_p2;
wire   [4:0] shl_ln62_2_fu_1127_p3;
wire   [13:0] grp_fu_1536_p4;
wire   [11:0] add_ln62_1_fu_1167_p2;
wire   [63:0] zext_ln62_4_fu_1172_p1;
wire   [63:0] add_ln62_3_fu_1176_p2;
wire   [63:0] add_ln62_2_fu_1181_p2;
wire   [61:0] trunc_ln7_fu_1186_p4;
wire   [8:0] tmp_4_fu_1214_p3;
wire   [8:0] zext_ln131_fu_1210_p1;
wire   [7:0] zext_ln128_fu_1228_p1;
wire   [7:0] empty_84_fu_1244_p2;
wire   [17:0] p_shl8_fu_1249_p3;
wire   [9:0] p_shl9_fu_1261_p3;
wire   [18:0] p_shl8_cast_fu_1257_p1;
wire   [18:0] p_shl9_cast_fu_1269_p1;
wire   [18:0] empty_85_fu_1273_p2;
wire   [9:0] tmp3_fu_1283_p4;
wire  signed [63:0] p_cast33_fu_1279_p1;
wire   [63:0] tmp14_fu_1297_p2;
wire   [63:0] tmp13_cast_fu_1293_p1;
wire   [63:0] empty_86_fu_1302_p2;
wire   [61:0] trunc_ln5_fu_1308_p4;
wire   [8:0] zext_ln131_1_fu_1328_p1;
wire   [8:0] add_ln131_1_fu_1332_p2;
wire   [17:0] shl_ln_fu_1390_p3;
wire   [9:0] shl_ln82_1_fu_1402_p3;
wire   [18:0] zext_ln82_fu_1398_p1;
wire   [18:0] zext_ln82_1_fu_1410_p1;
wire   [18:0] sub_ln82_fu_1414_p2;
wire   [9:0] shl_ln82_2_fu_1436_p3;
wire   [63:0] zext_ln82_2_fu_1444_p1;
wire   [63:0] add_ln82_fu_1448_p2;
wire   [63:0] add_ln82_1_fu_1453_p2;
wire   [61:0] trunc_ln_fu_1458_p4;
wire   [31:0] bitcast_ln82_1_fu_1486_p1;
wire   [7:0] tmp_1_fu_1490_p4;
wire   [22:0] trunc_ln83_fu_1500_p1;
wire   [0:0] icmp_ln83_1_fu_1510_p2;
wire   [0:0] icmp_ln83_fu_1504_p2;
wire   [0:0] or_ln83_fu_1516_p2;
wire   [0:0] and_ln83_fu_1522_p2;
wire   [4:0] grp_fu_1536_p1;
wire   [4:0] grp_fu_1536_p2;
wire   [4:0] grp_fu_1536_p3;
wire    ap_CS_fsm_state25;
reg    grp_fu_593_ce;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire   [0:0] icmp_ln129_fu_1342_p2;
reg   [75:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire   [13:0] mul_ln107_fu_730_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
end

srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 14112 ),
    .AddressWidth( 14 ))
input_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_address0),
    .ce0(input_fm_buffer_ce0),
    .we0(input_fm_buffer_we0),
    .d0(input_fm_buffer_d0),
    .q0(input_fm_buffer_q0)
);

srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 289 ),
    .AddressWidth( 9 ))
output_fm_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_0_address0),
    .ce0(output_fm_buffer_0_ce0),
    .we0(output_fm_buffer_0_we0),
    .d0(output_fm_buffer_0_d0),
    .q0(output_fm_buffer_0_q0)
);

srcnn_mul_10ns_6ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
mul_10ns_6ns_14_1_1_U25(
    .din0(mul_ln107_fu_730_p0),
    .din1(mul_ln107_fu_730_p1),
    .dout(mul_ln107_fu_730_p2)
);

srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul51_reg_504),
    .din1(grp_fu_1536_p1),
    .din2(grp_fu_1536_p2),
    .din3(grp_fu_1536_p3),
    .ce(1'b1),
    .dout(grp_fu_1536_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1049_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        add51_lcssa26_reg_492 <= add51_lcssa_lcssa27_reg_470;
    end else if (((icmp_ln61_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        add51_lcssa26_reg_492 <= empty_83_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add51_lcssa_lcssa27_reg_470 <= output_fm_buffer_0_q0;
    end else if (((icmp_ln53_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        add51_lcssa_lcssa27_reg_470 <= add51_lcssa26_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_740_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        bx_reg_424 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bx_reg_424 <= add_ln108_reg_1663;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_695_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        by_reg_413 <= 5'd0;
    end else if (((icmp_ln108_fu_855_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        by_reg_413 <= add_ln107_reg_1645;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        empty_83_reg_526 <= add51_lcssa26_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        empty_83_reg_526 <= grp_fu_597_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        empty_89_reg_571 <= 9'd0;
    end else if (((exitcond7514_fu_1358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        empty_89_reg_571 <= empty_90_fu_1364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond383_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_368 <= empty_78_fu_672_p2;
    end else if (((icmp_ln32_fu_650_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_368 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1049_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        kx_reg_481 <= 3'd0;
    end else if (((icmp_ln61_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        kx_reg_481 <= add_ln53_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ky_reg_459 <= 3'd0;
    end else if (((icmp_ln53_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ky_reg_459 <= add_ln52_reg_1713;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        nin_1_reg_515 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        nin_1_reg_515 <= add_ln61_reg_1759;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond383_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nin_reg_379 <= 6'd0;
    end else if (((icmp_ln107_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nin_reg_379 <= add_ln106_reg_1627;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond383_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul49_reg_402 <= 23'd0;
    end else if (((icmp_ln107_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul49_reg_402 <= add_ln106_1_reg_1614;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul51_reg_504 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        phi_mul51_reg_504 <= add_ln62_6_reg_1746;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul53_reg_538 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        phi_mul53_reg_538 <= add_ln62_7_reg_1764;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond383_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_390 <= 10'd0;
    end else if (((icmp_ln107_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_390 <= add_ln106_2_reg_1619;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_356 <= 4'd0;
    end else if (((exitcond7514_fu_1358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        ti_reg_356 <= add_ln32_reg_1601;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_204 <= 4'd0;
    end else if (((icmp_ln32_fu_650_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_204 <= add_ln31_reg_1576;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        tx_1_reg_560 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1))) begin
        tx_1_reg_560 <= add_ln129_reg_1822;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1007_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tx_reg_447 <= 5'd0;
    end else if (((icmp_ln52_2_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        tx_reg_447 <= add_ln49_reg_1700;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ty_1_reg_549 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1))) begin
        ty_1_reg_549 <= add_ln128_reg_1803;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_695_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ty_reg_435 <= 5'd0;
    end else if (((icmp_ln49_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        ty_reg_435 <= add_ln48_reg_1687;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_BVALID == 1'b1))) begin
        xr_reg_582 <= add_ln80_reg_1856;
    end else if (((icmp_ln79_fu_1378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state54))) begin
        xr_reg_582 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        yr_fu_208 <= 8'd0;
    end else if (((icmp_ln80_fu_1424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        yr_fu_208 <= add_ln79_reg_1843;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln106_1_reg_1614 <= add_ln106_1_fu_683_p2;
        add_ln106_2_reg_1619 <= add_ln106_2_fu_689_p2;
        add_ln106_reg_1627 <= add_ln106_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln107_reg_1645 <= add_ln107_fu_746_p2;
        mul_ln107_reg_1637 <= mul_ln107_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln108_reg_1663 <= add_ln108_fu_861_p2;
        input_fm_buffer_addr_1_reg_1655 <= zext_ln115_2_fu_846_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_695_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln115_reg_1632 <= add_ln115_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln128_reg_1803 <= add_ln128_fu_1238_p2;
        add_ln131_reg_1795 <= add_ln131_fu_1222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln129_reg_1822 <= add_ln129_fu_1348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_1576 <= add_ln31_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_1601 <= add_ln32_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln48_reg_1687 <= add_ln48_fu_1013_p2;
        empty_80_reg_1679 <= empty_80_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln49_reg_1700 <= add_ln49_fu_1039_p2;
        output_fm_buffer_0_addr_reg_1692 <= p_cast59_fu_1028_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln52_reg_1713 <= add_ln52_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln53_reg_1731 <= add_ln53_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln61_reg_1759 <= add_ln61_fu_1155_p2;
        input_fm_buffer_addr_2_reg_1751 <= zext_ln62_5_fu_1145_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln62_6_reg_1746 <= add_ln62_6_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_1149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln62_7_reg_1764 <= add_ln62_7_fu_1161_p2;
        gmem_addr_6_reg_1769 <= sext_ln62_fu_1196_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        add_ln79_reg_1843 <= add_ln79_fu_1384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        add_ln80_reg_1856 <= add_ln80_fu_1430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_addr_4_reg_1808 <= sext_ln129_fu_1318_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_5_read_reg_1674 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_855_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        gmem_addr_5_reg_1668 <= sext_ln115_1_fu_975_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gmem_addr_6_read_reg_1775 <= m_axi_gmem_RDATA;
        input_fm_buffer_load_reg_1780 <= input_fm_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        gmem_addr_read_reg_1868 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_1424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
        gmem_addr_reg_1861 <= sext_ln82_fu_1468_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        mul_reg_1790 <= grp_fu_601_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        output_fm_buffer_0_load_1_reg_1827 <= output_fm_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_607 <= grp_fu_597_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        select_ln83_reg_1878 <= select_ln83_fu_1528_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_1378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state54))) begin
        sext_ln80_reg_1848[63 : 2] <= sext_ln80_fu_1420_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_740_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln115_reg_1650[19 : 2] <= sub_ln115_fu_831_p2[19 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_1581 <= tmp_fu_633_p3;
        zext_ln32_reg_1586[7 : 0] <= zext_ln32_fu_641_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        zext_ln61_reg_1741[4 : 2] <= zext_ln61_fu_1135_p1[4 : 2];
        zext_ln62_2_reg_1736[4 : 0] <= zext_ln62_2_fu_1123_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1049_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        zext_ln62_1_reg_1723[6 : 2] <= zext_ln62_1_fu_1097_p1[6 : 2];
        zext_ln62_reg_1718[4 : 0] <= zext_ln62_fu_1067_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln79_fu_1378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state8))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state44))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state52))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state47))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65)))) begin
        grp_fu_593_ce = 1'b1;
    end else begin
        grp_fu_593_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_593_p0 = bitcast_ln82_fu_1482_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_593_p0 = empty_83_reg_526;
    end else begin
        grp_fu_593_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_593_p1 = conv3_biases_0_0_val;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_593_p1 = mul_reg_1790;
    end else begin
        grp_fu_593_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_2_reg_1751;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_1655;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_address0 = p_cast55_fu_678_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_d0 = bitcast_ln115_fu_985_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond383_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state56)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1861;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            m_axi_gmem_ARADDR = gmem_addr_6_reg_1769;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            m_axi_gmem_ARADDR = gmem_addr_5_reg_1668;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state65)) begin
            m_axi_gmem_AWADDR = gmem_addr_reg_1861;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_gmem_AWADDR = gmem_addr_4_reg_1808;
        end else begin
            m_axi_gmem_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state65)) begin
            m_axi_gmem_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_gmem_AWLEN = 32'd17;
        end else begin
            m_axi_gmem_AWLEN = 'bx;
        end
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state64) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        m_axi_gmem_WDATA = select_ln83_reg_1878;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        m_axi_gmem_WDATA = bitcast_ln131_fu_1354_p1;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state71) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        output_fm_buffer_0_address0 = p_cast64_fu_1370_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        output_fm_buffer_0_address0 = zext_ln131_2_fu_1337_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_address0 = output_fm_buffer_0_addr_reg_1692;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_fm_buffer_0_address0 = p_cast59_fu_1028_p1;
    end else begin
        output_fm_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        output_fm_buffer_0_ce0 = 1'b1;
    end else begin
        output_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        output_fm_buffer_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_d0 = add51_lcssa_lcssa27_reg_470;
    end else begin
        output_fm_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond7514_fu_1358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln52_2_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        output_fm_buffer_0_we0 = 1'b1;
    end else begin
        output_fm_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_650_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond383_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln106_fu_695_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln107_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln108_fu_855_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln48_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln49_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln52_2_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln53_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln61_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln128_fu_1232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln129_fu_1342_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((exitcond7514_fu_1358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln79_fu_1378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln80_fu_1424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_1_fu_683_p2 = (phi_mul49_reg_402 + 23'd260100);

assign add_ln106_2_fu_689_p2 = (phi_mul_reg_390 + 10'd21);

assign add_ln106_fu_701_p2 = (nin_reg_379 + 6'd1);

assign add_ln107_fu_746_p2 = (by_reg_413 + 5'd1);

assign add_ln108_fu_861_p2 = (bx_reg_424 + 5'd1);

assign add_ln111_1_fu_879_p2 = ($signed(zext_ln108_fu_851_p1) + $signed(6'd62));

assign add_ln111_fu_889_p2 = ($signed(sext_ln111_fu_885_p1) + $signed(zext_ln111_fu_875_p1));

assign add_ln115_1_fu_951_p2 = ($signed(sub_ln115_reg_1650) + $signed(sext_ln115_2_fu_947_p1));

assign add_ln115_2_fu_960_p2 = ($signed(sext_ln115_3_fu_956_p1) + $signed(add_ln115_reg_1632));

assign add_ln115_3_fu_720_p2 = (phi_mul_reg_390 + zext_ln115_fu_716_p1);

assign add_ln115_4_fu_841_p2 = (mul_ln107_reg_1637 + zext_ln115_1_fu_837_p1);

assign add_ln115_fu_711_p2 = (zext_ln107_fu_707_p1 + input_ftmap);

assign add_ln128_fu_1238_p2 = (ty_1_reg_549 + 5'd1);

assign add_ln129_fu_1348_p2 = (tx_1_reg_560 + 5'd1);

assign add_ln131_1_fu_1332_p2 = (add_ln131_reg_1795 + zext_ln131_1_fu_1328_p1);

assign add_ln131_fu_1222_p2 = (tmp_4_fu_1214_p3 + zext_ln131_fu_1210_p1);

assign add_ln31_fu_627_p2 = (tj_fu_204 + 4'd1);

assign add_ln32_fu_656_p2 = (ti_reg_356 + 4'd1);

assign add_ln48_fu_1013_p2 = (ty_reg_435 + 5'd1);

assign add_ln49_fu_1039_p2 = (tx_reg_447 + 5'd1);

assign add_ln52_fu_1055_p2 = (ky_reg_459 + 3'd1);

assign add_ln53_fu_1111_p2 = (kx_reg_481 + 3'd1);

assign add_ln57_fu_1117_p2 = (zext_ln53_1_fu_1101_p1 + tx_reg_447);

assign add_ln61_fu_1155_p2 = (nin_1_reg_515 + 6'd1);

assign add_ln62_1_fu_1167_p2 = (zext_ln61_reg_1741 + phi_mul53_reg_538);

assign add_ln62_2_fu_1181_p2 = (add_ln62_3_fu_1176_p2 + zext_ln62_1_reg_1723);

assign add_ln62_3_fu_1176_p2 = (zext_ln62_4_fu_1172_p1 + conv3_weights);

assign add_ln62_6_fu_1139_p2 = (phi_mul51_reg_504 + 10'd21);

assign add_ln62_7_fu_1161_p2 = (phi_mul53_reg_538 + 12'd100);

assign add_ln62_fu_1091_p2 = (shl_ln2_fu_1071_p3 + zext_ln53_fu_1087_p1);

assign add_ln79_fu_1384_p2 = (yr_fu_208 + 8'd1);

assign add_ln80_fu_1430_p2 = (xr_reg_582 + 8'd1);

assign add_ln82_1_fu_1453_p2 = ($signed(add_ln82_fu_1448_p2) + $signed(sext_ln80_reg_1848));

assign add_ln82_fu_1448_p2 = (zext_ln82_2_fu_1444_p1 + output_ftmap);

assign and_ln83_fu_1522_p2 = (or_ln83_fu_1516_p2 & grp_fu_605_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln115_fu_985_p1 = gmem_addr_5_read_reg_1674;

assign bitcast_ln131_fu_1354_p1 = output_fm_buffer_0_load_1_reg_1827;

assign bitcast_ln62_fu_1206_p1 = gmem_addr_6_read_reg_1775;

assign bitcast_ln82_1_fu_1486_p1 = reg_607;

assign bitcast_ln82_fu_1482_p1 = gmem_addr_read_reg_1868;

assign empty_78_fu_672_p2 = (empty_reg_368 + 14'd1);

assign empty_79_fu_762_p2 = ($signed(tmp1_cast_fu_758_p1) + $signed(zext_ln32_reg_1586));

assign empty_80_fu_1001_p2 = (tmp_3_fu_993_p3 + ty_cast_fu_989_p1);

assign empty_81_fu_1023_p2 = (empty_80_reg_1679 + tx_cast_fu_1019_p1);

assign empty_82_fu_1061_p2 = (zext_ln52_fu_1045_p1 + ty_reg_435);

assign empty_84_fu_1244_p2 = (zext_ln128_fu_1228_p1 + tmp_reg_1581);

assign empty_85_fu_1273_p2 = (p_shl8_cast_fu_1257_p1 - p_shl9_cast_fu_1269_p1);

assign empty_86_fu_1302_p2 = (tmp14_fu_1297_p2 + tmp13_cast_fu_1293_p1);

assign empty_90_fu_1364_p2 = (empty_89_reg_571 + 9'd1);

assign exitcond383_fu_666_p2 = ((empty_reg_368 == 14'd14112) ? 1'b1 : 1'b0);

assign exitcond7514_fu_1358_p2 = ((empty_89_reg_571 == 9'd289) ? 1'b1 : 1'b0);

assign grp_fu_1536_p1 = zext_ln62_reg_1718;

assign grp_fu_1536_p2 = 14'd21;

assign grp_fu_1536_p3 = zext_ln62_2_reg_1736;

assign grp_fu_597_p_ce = grp_fu_593_ce;

assign grp_fu_597_p_din0 = grp_fu_593_p0;

assign grp_fu_597_p_din1 = grp_fu_593_p1;

assign grp_fu_597_p_opcode = 2'd0;

assign grp_fu_601_p_ce = 1'b1;

assign grp_fu_601_p_din0 = bitcast_ln62_fu_1206_p1;

assign grp_fu_601_p_din1 = input_fm_buffer_load_reg_1780;

assign grp_fu_605_p_ce = 1'b1;

assign grp_fu_605_p_din0 = reg_607;

assign grp_fu_605_p_din1 = 32'd0;

assign grp_fu_605_p_opcode = 5'd4;

assign icmp_ln106_fu_695_p2 = ((nin_reg_379 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_740_p2 = ((by_reg_413 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_855_p2 = ((bx_reg_424 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_1232_p2 = ((ty_1_reg_549 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1342_p2 = ((tx_1_reg_560 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_621_p2 = ((tj_fu_204 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_650_p2 = ((ti_reg_356 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1007_p2 = ((ty_reg_435 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1033_p2 = ((tx_reg_447 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_903_p2 = (($signed(add_ln111_fu_889_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_1049_p2 = ((ky_reg_459 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_775_p2 = (($signed(empty_79_fu_762_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_1105_p2 = ((kx_reg_481 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1149_p2 = ((nin_1_reg_515 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1378_p2 = ((yr_fu_208 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1424_p2 = ((xr_reg_582 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_1510_p2 = ((trunc_ln83_fu_1500_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_1504_p2 = ((tmp_1_fu_1490_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln107_fu_730_p0 = mul_ln107_fu_730_p00;

assign mul_ln107_fu_730_p00 = add_ln115_3_fu_720_p2;

assign mul_ln107_fu_730_p1 = 14'd21;

assign or_ln51_1_fu_917_p2 = (tmp_7_fu_895_p3 | icmp_ln52_1_fu_903_p2);

assign or_ln51_fu_797_p2 = (tmp_5_fu_767_p3 | icmp_ln52_fu_775_p2);

assign or_ln83_fu_1516_p2 = (icmp_ln83_fu_1504_p2 | icmp_ln83_1_fu_1510_p2);

assign p_cast33_fu_1279_p1 = $signed(empty_85_fu_1273_p2);

assign p_cast55_fu_678_p1 = empty_reg_368;

assign p_cast59_fu_1028_p1 = empty_81_fu_1023_p2;

assign p_cast64_fu_1370_p1 = empty_89_reg_571;

assign p_shl8_cast_fu_1257_p1 = p_shl8_fu_1249_p3;

assign p_shl8_fu_1249_p3 = {{empty_84_fu_1244_p2}, {10'd0}};

assign p_shl9_cast_fu_1269_p1 = p_shl9_fu_1261_p3;

assign p_shl9_fu_1261_p3 = {{empty_84_fu_1244_p2}, {2'd0}};

assign select_ln51_2_fu_923_p3 = ((tmp_8_fu_909_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_3_fu_931_p3 = ((or_ln51_1_fu_917_p2[0:0] == 1'b1) ? select_ln51_2_fu_923_p3 : add_ln111_fu_889_p2);

assign select_ln51_fu_789_p3 = ((tmp_6_fu_781_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_fu_1528_p3 = ((and_ln83_fu_1522_p2[0:0] == 1'b1) ? 32'd0 : bitcast_ln82_1_fu_1486_p1);

assign sext_ln111_fu_885_p1 = $signed(add_ln111_1_fu_879_p2);

assign sext_ln115_1_fu_975_p1 = $signed(trunc_ln6_fu_965_p4);

assign sext_ln115_2_fu_947_p1 = $signed(shl_ln115_2_fu_939_p3);

assign sext_ln115_3_fu_956_p1 = $signed(add_ln115_1_fu_951_p2);

assign sext_ln115_fu_827_p1 = $signed(shl_ln115_1_fu_819_p3);

assign sext_ln129_fu_1318_p1 = $signed(trunc_ln5_fu_1308_p4);

assign sext_ln62_fu_1196_p1 = $signed(trunc_ln7_fu_1186_p4);

assign sext_ln80_fu_1420_p1 = $signed(sub_ln82_fu_1414_p2);

assign sext_ln82_fu_1468_p1 = $signed(trunc_ln_fu_1458_p4);

assign shl_ln115_1_fu_819_p3 = {{yClamped_fu_803_p3}, {2'd0}};

assign shl_ln115_2_fu_939_p3 = {{select_ln51_3_fu_931_p3}, {2'd0}};

assign shl_ln1_fu_811_p3 = {{yClamped_fu_803_p3}, {10'd0}};

assign shl_ln2_fu_1071_p3 = {{ky_reg_459}, {4'd0}};

assign shl_ln62_1_fu_1079_p3 = {{ky_reg_459}, {2'd0}};

assign shl_ln62_2_fu_1127_p3 = {{kx_reg_481}, {2'd0}};

assign shl_ln82_1_fu_1402_p3 = {{yr_fu_208}, {2'd0}};

assign shl_ln82_2_fu_1436_p3 = {{xr_reg_582}, {2'd0}};

assign shl_ln_fu_1390_p3 = {{yr_fu_208}, {10'd0}};

assign sub_ln115_fu_831_p2 = ($signed(shl_ln1_fu_811_p3) - $signed(sext_ln115_fu_827_p1));

assign sub_ln82_fu_1414_p2 = (zext_ln82_fu_1398_p1 - zext_ln82_1_fu_1410_p1);

assign tmp13_cast_fu_1293_p1 = tmp3_fu_1283_p4;

assign tmp14_fu_1297_p2 = ($signed(p_cast33_fu_1279_p1) + $signed(output_ftmap));

assign tmp1_cast_fu_758_p1 = $signed(tmp1_fu_752_p2);

assign tmp1_fu_752_p2 = ($signed(zext_ln107_2_fu_736_p1) + $signed(6'd62));

assign tmp3_fu_1283_p4 = {{{ti_reg_356}, {ti_reg_356}}, {2'd0}};

assign tmp4_fu_867_p3 = {{ti_reg_356}, {ti_reg_356}};

assign tmp_1_fu_1490_p4 = {{bitcast_ln82_1_fu_1486_p1[30:23]}};

assign tmp_3_fu_993_p3 = {{ty_reg_435}, {4'd0}};

assign tmp_4_fu_1214_p3 = {{ty_1_reg_549}, {4'd0}};

assign tmp_5_fu_767_p3 = empty_79_fu_762_p2[32'd9];

assign tmp_6_fu_781_p3 = empty_79_fu_762_p2[32'd9];

assign tmp_7_fu_895_p3 = add_ln111_fu_889_p2[32'd9];

assign tmp_8_fu_909_p3 = add_ln111_fu_889_p2[32'd9];

assign tmp_fu_633_p3 = {{tj_fu_204}, {tj_fu_204}};

assign trunc_ln5_fu_1308_p4 = {{empty_86_fu_1302_p2[63:2]}};

assign trunc_ln6_fu_965_p4 = {{add_ln115_2_fu_960_p2[63:2]}};

assign trunc_ln7_fu_1186_p4 = {{add_ln62_2_fu_1181_p2[63:2]}};

assign trunc_ln83_fu_1500_p1 = bitcast_ln82_1_fu_1486_p1[22:0];

assign trunc_ln_fu_1458_p4 = {{add_ln82_1_fu_1453_p2[63:2]}};

assign tx_cast_fu_1019_p1 = tx_reg_447;

assign ty_cast_fu_989_p1 = ty_reg_435;

assign yClamped_fu_803_p3 = ((or_ln51_fu_797_p2[0:0] == 1'b1) ? select_ln51_fu_789_p3 : empty_79_fu_762_p2);

assign zext_ln107_2_fu_736_p1 = by_reg_413;

assign zext_ln107_fu_707_p1 = phi_mul49_reg_402;

assign zext_ln108_fu_851_p1 = bx_reg_424;

assign zext_ln111_fu_875_p1 = tmp4_fu_867_p3;

assign zext_ln115_1_fu_837_p1 = bx_reg_424;

assign zext_ln115_2_fu_846_p1 = add_ln115_4_fu_841_p2;

assign zext_ln115_fu_716_p1 = by_reg_413;

assign zext_ln128_fu_1228_p1 = ty_1_reg_549;

assign zext_ln131_1_fu_1328_p1 = tx_1_reg_560;

assign zext_ln131_2_fu_1337_p1 = add_ln131_1_fu_1332_p2;

assign zext_ln131_fu_1210_p1 = ty_1_reg_549;

assign zext_ln32_fu_641_p1 = tmp_fu_633_p3;

assign zext_ln52_fu_1045_p1 = ky_reg_459;

assign zext_ln53_1_fu_1101_p1 = kx_reg_481;

assign zext_ln53_fu_1087_p1 = shl_ln62_1_fu_1079_p3;

assign zext_ln61_fu_1135_p1 = shl_ln62_2_fu_1127_p3;

assign zext_ln62_1_fu_1097_p1 = add_ln62_fu_1091_p2;

assign zext_ln62_2_fu_1123_p1 = add_ln57_fu_1117_p2;

assign zext_ln62_4_fu_1172_p1 = add_ln62_1_fu_1167_p2;

assign zext_ln62_5_fu_1145_p1 = grp_fu_1536_p4;

assign zext_ln62_fu_1067_p1 = empty_82_fu_1061_p2;

assign zext_ln82_1_fu_1410_p1 = shl_ln82_1_fu_1402_p3;

assign zext_ln82_2_fu_1444_p1 = shl_ln82_2_fu_1436_p3;

assign zext_ln82_fu_1398_p1 = shl_ln_fu_1390_p3;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1586[9:8] <= 2'b00;
    sub_ln115_reg_1650[1:0] <= 2'b00;
    zext_ln62_reg_1718[9:5] <= 5'b00000;
    zext_ln62_1_reg_1723[1:0] <= 2'b00;
    zext_ln62_1_reg_1723[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln62_2_reg_1736[13:5] <= 9'b000000000;
    zext_ln61_reg_1741[1:0] <= 2'b00;
    zext_ln61_reg_1741[11:5] <= 7'b0000000;
    sext_ln80_reg_1848[1:0] <= 2'b00;
end

endmodule //srcnn_conv3
