// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv3_weights,
        conv3_biases_0_0_val,
        output_ftmap
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv3_weights;
input  [31:0] conv3_biases_0_0_val;
input  [63:0] output_ftmap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[31:0] m_axi_gmem_AWLEN;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] input_fm_buffer_address0;
reg    input_fm_buffer_ce0;
reg    input_fm_buffer_we0;
reg   [31:0] input_fm_buffer_d0;
wire  signed [31:0] input_fm_buffer_q0;
reg   [8:0] output_fm_buffer_0_address0;
reg    output_fm_buffer_0_ce0;
reg    output_fm_buffer_0_we0;
reg   [31:0] output_fm_buffer_0_d0;
wire   [31:0] output_fm_buffer_0_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state38;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state41;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire   [3:0] add_ln31_fu_619_p2;
reg   [3:0] add_ln31_reg_1575;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_fu_625_p3;
reg   [7:0] tmp_reg_1580;
wire   [0:0] icmp_ln31_fu_613_p2;
wire   [9:0] zext_ln32_fu_633_p1;
reg   [9:0] zext_ln32_reg_1585;
wire   [30:0] trunc_ln82_fu_637_p1;
reg   [30:0] trunc_ln82_reg_1597;
wire   [3:0] add_ln32_fu_651_p2;
reg   [3:0] add_ln32_reg_1605;
wire    ap_CS_fsm_state3;
wire   [13:0] empty_75_fu_667_p2;
wire    ap_CS_fsm_state4;
wire   [22:0] add_ln106_1_fu_678_p2;
reg   [22:0] add_ln106_1_reg_1618;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln106_2_fu_684_p2;
reg   [9:0] add_ln106_2_reg_1623;
wire   [5:0] add_ln106_fu_696_p2;
reg   [5:0] add_ln106_reg_1631;
wire   [63:0] add_ln115_fu_706_p2;
reg   [63:0] add_ln115_reg_1636;
wire   [0:0] icmp_ln106_fu_690_p2;
wire   [13:0] mul_ln107_fu_725_p2;
reg   [13:0] mul_ln107_reg_1641;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln107_fu_741_p2;
reg   [4:0] add_ln107_reg_1649;
wire   [19:0] sub_ln115_fu_826_p2;
reg   [19:0] sub_ln115_reg_1654;
wire   [0:0] icmp_ln107_fu_735_p2;
reg   [13:0] input_fm_buffer_addr_1_reg_1659;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln108_fu_856_p2;
reg   [4:0] add_ln108_reg_1667;
reg   [63:0] gmem_addr_5_reg_1672;
wire   [0:0] icmp_ln108_fu_850_p2;
reg   [31:0] gmem_addr_5_read_reg_1678;
wire   [8:0] empty_77_fu_992_p2;
reg   [8:0] empty_77_reg_1683;
wire    ap_CS_fsm_state18;
wire   [4:0] add_ln48_fu_1004_p2;
reg   [4:0] add_ln48_reg_1691;
reg   [8:0] output_fm_buffer_0_addr_reg_1696;
wire    ap_CS_fsm_state19;
wire   [4:0] add_ln49_fu_1030_p2;
reg   [4:0] add_ln49_reg_1704;
wire    ap_CS_fsm_state20;
wire   [2:0] add_ln52_fu_1046_p2;
reg   [2:0] add_ln52_reg_1717;
wire    ap_CS_fsm_state21;
wire   [9:0] zext_ln62_fu_1058_p1;
reg   [9:0] zext_ln62_reg_1722;
wire   [0:0] icmp_ln52_2_fu_1040_p2;
wire   [63:0] zext_ln62_1_fu_1088_p1;
reg   [63:0] zext_ln62_1_reg_1727;
wire   [2:0] add_ln53_fu_1102_p2;
reg   [2:0] add_ln53_reg_1735;
wire    ap_CS_fsm_state22;
wire   [13:0] zext_ln62_2_fu_1114_p1;
reg   [13:0] zext_ln62_2_reg_1740;
wire   [0:0] icmp_ln53_fu_1096_p2;
wire   [11:0] zext_ln61_fu_1126_p1;
reg   [11:0] zext_ln61_reg_1745;
wire   [9:0] add_ln62_7_fu_1130_p2;
reg   [9:0] add_ln62_7_reg_1750;
wire    ap_CS_fsm_state23;
reg   [13:0] input_fm_buffer_addr_2_reg_1755;
wire    ap_CS_fsm_state26;
wire   [5:0] add_ln61_fu_1146_p2;
reg   [5:0] add_ln61_reg_1763;
wire   [11:0] add_ln62_8_fu_1152_p2;
reg   [11:0] add_ln62_8_reg_1768;
wire   [0:0] icmp_ln61_fu_1140_p2;
reg   [63:0] gmem_addr_6_reg_1773;
wire   [19:0] trunc_ln62_fu_1197_p1;
reg  signed [19:0] trunc_ln62_reg_1779;
wire    ap_CS_fsm_state36;
wire   [8:0] add_ln131_fu_1246_p2;
reg   [8:0] add_ln131_reg_1789;
wire    ap_CS_fsm_state37;
wire   [4:0] add_ln128_fu_1262_p2;
reg   [4:0] add_ln128_reg_1797;
reg   [63:0] gmem_addr_4_reg_1802;
wire   [0:0] icmp_ln128_fu_1256_p2;
wire    ap_CS_fsm_state39;
wire   [4:0] add_ln129_fu_1372_p2;
reg   [4:0] add_ln129_reg_1816;
reg   [31:0] output_fm_buffer_0_load_1_reg_1821;
wire    ap_CS_fsm_state40;
wire   [8:0] empty_87_fu_1384_p2;
wire    ap_CS_fsm_state47;
wire   [7:0] add_ln79_fu_1404_p2;
reg   [7:0] add_ln79_reg_1837;
wire    ap_CS_fsm_state48;
wire  signed [63:0] sext_ln80_fu_1440_p1;
reg  signed [63:0] sext_ln80_reg_1842;
wire   [0:0] icmp_ln79_fu_1398_p2;
wire   [7:0] add_ln80_fu_1450_p2;
reg   [7:0] add_ln80_reg_1850;
wire    ap_CS_fsm_state49;
reg   [63:0] gmem_addr_reg_1855;
wire   [0:0] icmp_ln80_fu_1444_p2;
reg   [31:0] gmem_addr_read_reg_1862;
wire   [30:0] trunc_ln82_1_fu_1502_p1;
reg   [30:0] trunc_ln82_1_reg_1867;
wire   [30:0] select_ln83_fu_1522_p3;
reg   [30:0] select_ln83_reg_1872;
reg   [3:0] ti_reg_364;
wire   [0:0] exitcond6414_fu_1378_p2;
reg   [13:0] empty_reg_376;
wire   [0:0] icmp_ln32_fu_645_p2;
wire   [0:0] exitcond273_fu_661_p2;
reg   [5:0] nin_reg_387;
reg   [9:0] phi_mul_reg_398;
reg   [22:0] phi_mul49_reg_410;
reg   [4:0] by_reg_421;
reg   [4:0] bx_reg_432;
wire    ap_CS_fsm_state17;
reg   [4:0] ty_reg_443;
wire   [0:0] icmp_ln49_fu_1024_p2;
reg   [4:0] tx_reg_455;
wire   [0:0] icmp_ln48_fu_998_p2;
reg   [2:0] ky_reg_467;
reg   [31:0] conv_i_i119_lcssa_lcssa15_reg_478;
reg   [2:0] kx_reg_489;
reg   [31:0] conv_i_i119_lcssa14_reg_500;
reg   [9:0] phi_mul51_reg_512;
reg   [5:0] nin_1_reg_523;
reg   [31:0] empty_80_reg_534;
reg   [11:0] phi_mul53_reg_546;
reg   [4:0] ty_1_reg_557;
reg   [4:0] tx_1_reg_568;
reg   [8:0] empty_86_reg_579;
reg   [7:0] xr_reg_590;
wire   [63:0] p_cast56_fu_673_p1;
wire   [63:0] zext_ln115_2_fu_841_p1;
wire   [63:0] p_cast60_fu_1019_p1;
wire   [63:0] zext_ln62_5_fu_1136_p1;
wire   [63:0] zext_ln131_2_fu_1361_p1;
wire   [63:0] p_cast63_fu_1390_p1;
wire  signed [63:0] sext_ln115_1_fu_970_p1;
wire  signed [63:0] sext_ln62_fu_1187_p1;
wire  signed [63:0] sext_ln129_fu_1342_p1;
wire  signed [63:0] sext_ln82_fu_1488_p1;
wire   [31:0] select_ln83_cast_fu_1530_p1;
reg   [3:0] tj_fu_212;
reg   [7:0] yr_fu_216;
wire   [63:0] zext_ln107_fu_702_p1;
wire   [9:0] zext_ln115_fu_711_p1;
wire   [9:0] add_ln115_3_fu_715_p2;
wire   [9:0] mul_ln107_fu_725_p0;
wire   [5:0] mul_ln107_fu_725_p1;
wire   [5:0] zext_ln107_2_fu_731_p1;
wire   [5:0] tmp1_fu_747_p2;
wire  signed [9:0] tmp1_cast_fu_753_p1;
wire   [9:0] empty_76_fu_757_p2;
wire   [0:0] tmp_5_fu_776_p3;
wire   [0:0] tmp_4_fu_762_p3;
wire   [0:0] icmp_ln52_fu_770_p2;
wire   [0:0] or_ln51_fu_792_p2;
wire   [9:0] select_ln51_fu_784_p3;
wire   [9:0] yClamped_fu_798_p3;
wire   [11:0] shl_ln115_1_fu_814_p3;
wire   [19:0] shl_ln1_fu_806_p3;
wire  signed [19:0] sext_ln115_fu_822_p1;
wire   [13:0] zext_ln115_1_fu_832_p1;
wire   [13:0] add_ln115_4_fu_836_p2;
wire   [7:0] tmp4_fu_862_p3;
wire   [5:0] zext_ln108_fu_846_p1;
wire   [5:0] add_ln111_1_fu_874_p2;
wire  signed [9:0] sext_ln111_fu_880_p1;
wire   [9:0] zext_ln111_fu_870_p1;
wire   [9:0] add_ln111_fu_884_p2;
wire   [0:0] tmp_6_fu_890_p3;
wire   [0:0] icmp_ln52_1_fu_898_p2;
wire   [0:0] tmp_7_fu_904_p3;
wire   [0:0] or_ln51_1_fu_912_p2;
wire   [9:0] select_ln51_2_fu_918_p3;
wire   [9:0] select_ln51_3_fu_926_p3;
wire   [11:0] shl_ln115_2_fu_934_p3;
wire  signed [19:0] sext_ln115_2_fu_942_p1;
wire   [19:0] add_ln115_1_fu_946_p2;
wire  signed [63:0] sext_ln115_3_fu_951_p1;
wire   [63:0] add_ln115_2_fu_955_p2;
wire   [61:0] trunc_ln5_fu_960_p4;
wire   [8:0] tmp_1_fu_984_p3;
wire   [8:0] ty_cast_fu_980_p1;
wire   [8:0] tx_cast_fu_1010_p1;
wire   [8:0] empty_78_fu_1014_p2;
wire   [4:0] zext_ln52_fu_1036_p1;
wire   [4:0] empty_79_fu_1052_p2;
wire   [4:0] shl_ln62_1_fu_1070_p3;
wire   [6:0] shl_ln2_fu_1062_p3;
wire   [6:0] zext_ln53_fu_1078_p1;
wire   [6:0] add_ln62_fu_1082_p2;
wire   [4:0] zext_ln53_1_fu_1092_p1;
wire   [4:0] add_ln57_fu_1108_p2;
wire   [4:0] shl_ln62_2_fu_1118_p3;
wire   [13:0] grp_fu_1534_p4;
wire   [11:0] add_ln62_1_fu_1158_p2;
wire   [63:0] zext_ln62_4_fu_1163_p1;
wire   [63:0] add_ln62_4_fu_1167_p2;
wire   [63:0] add_ln62_2_fu_1172_p2;
wire   [61:0] trunc_ln62_2_fu_1177_p4;
wire   [50:0] shl_ln62_3_fu_1210_p3;
wire   [50:0] mul_ln62_1_fu_601_p2;
wire   [50:0] add_ln62_3_fu_1218_p2;
wire   [8:0] tmp_2_fu_1238_p3;
wire   [8:0] zext_ln131_fu_1234_p1;
wire   [7:0] zext_ln128_fu_1252_p1;
wire   [7:0] empty_81_fu_1268_p2;
wire   [17:0] p_shl1_fu_1273_p3;
wire   [9:0] p_shl2_fu_1285_p3;
wire   [18:0] p_shl10_cast_fu_1281_p1;
wire   [18:0] p_shl11_cast_fu_1293_p1;
wire   [18:0] empty_82_fu_1297_p2;
wire   [9:0] tmp3_fu_1307_p4;
wire  signed [63:0] p_cast35_fu_1303_p1;
wire   [63:0] tmp14_fu_1321_p2;
wire   [63:0] tmp13_cast_fu_1317_p1;
wire   [63:0] empty_83_fu_1326_p2;
wire   [61:0] trunc_ln4_fu_1332_p4;
wire   [8:0] zext_ln131_1_fu_1352_p1;
wire   [8:0] add_ln131_1_fu_1356_p2;
wire   [17:0] shl_ln_fu_1410_p3;
wire   [9:0] shl_ln82_1_fu_1422_p3;
wire   [18:0] zext_ln82_fu_1418_p1;
wire   [18:0] zext_ln82_1_fu_1430_p1;
wire   [18:0] sub_ln82_fu_1434_p2;
wire   [9:0] shl_ln82_2_fu_1456_p3;
wire   [63:0] zext_ln82_2_fu_1464_p1;
wire   [63:0] add_ln82_fu_1468_p2;
wire   [63:0] add_ln82_1_fu_1473_p2;
wire   [61:0] trunc_ln_fu_1478_p4;
wire   [31:0] add_ln82_2_fu_1506_p2;
wire   [0:0] tmp_3_fu_1514_p3;
wire   [30:0] add_ln83_fu_1510_p2;
wire   [4:0] grp_fu_1534_p1;
wire   [4:0] grp_fu_1534_p2;
wire   [4:0] grp_fu_1534_p3;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln129_fu_1366_p2;
reg   [64:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
wire   [13:0] mul_ln107_fu_725_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
end

srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 14112 ),
    .AddressWidth( 14 ))
input_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_address0),
    .ce0(input_fm_buffer_ce0),
    .we0(input_fm_buffer_we0),
    .d0(input_fm_buffer_d0),
    .q0(input_fm_buffer_q0)
);

srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 289 ),
    .AddressWidth( 9 ))
output_fm_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_0_address0),
    .ce0(output_fm_buffer_0_ce0),
    .we0(output_fm_buffer_0_we0),
    .d0(output_fm_buffer_0_d0),
    .q0(output_fm_buffer_0_q0)
);

srcnn_mul_32s_20s_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 51 ))
mul_32s_20s_51_1_1_U20(
    .din0(input_fm_buffer_q0),
    .din1(trunc_ln62_reg_1779),
    .dout(mul_ln62_1_fu_601_p2)
);

srcnn_mul_10ns_6ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
mul_10ns_6ns_14_1_1_U21(
    .din0(mul_ln107_fu_725_p0),
    .din1(mul_ln107_fu_725_p1),
    .dout(mul_ln107_fu_725_p2)
);

srcnn_ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
ama_addmuladd_10ns_5ns_5ns_5ns_14_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul51_reg_512),
    .din1(grp_fu_1534_p1),
    .din2(grp_fu_1534_p2),
    .din3(grp_fu_1534_p3),
    .ce(1'b1),
    .dout(grp_fu_1534_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_735_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        bx_reg_432 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bx_reg_432 <= add_ln108_reg_1667;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        by_reg_421 <= 5'd0;
    end else if (((icmp_ln108_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        by_reg_421 <= add_ln107_reg_1649;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1040_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        conv_i_i119_lcssa14_reg_500 <= conv_i_i119_lcssa_lcssa15_reg_478;
    end else if (((icmp_ln61_fu_1140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        conv_i_i119_lcssa14_reg_500 <= empty_80_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_i_i119_lcssa_lcssa15_reg_478 <= output_fm_buffer_0_q0;
    end else if (((icmp_ln53_fu_1096_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        conv_i_i119_lcssa_lcssa15_reg_478 <= conv_i_i119_lcssa14_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        empty_80_reg_534 <= {{add_ln62_3_fu_1218_p2[50:19]}};
    end else if (((icmp_ln53_fu_1096_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        empty_80_reg_534 <= conv_i_i119_lcssa14_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        empty_86_reg_579 <= 9'd0;
    end else if (((exitcond6414_fu_1378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        empty_86_reg_579 <= empty_87_fu_1384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_376 <= empty_75_fu_667_p2;
    end else if (((icmp_ln32_fu_645_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_376 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1040_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        kx_reg_489 <= 3'd0;
    end else if (((icmp_ln61_fu_1140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        kx_reg_489 <= add_ln53_reg_1735;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ky_reg_467 <= 3'd0;
    end else if (((icmp_ln53_fu_1096_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ky_reg_467 <= add_ln52_reg_1717;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        nin_1_reg_523 <= add_ln61_reg_1763;
    end else if (((icmp_ln53_fu_1096_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        nin_1_reg_523 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nin_reg_387 <= 6'd0;
    end else if (((icmp_ln107_fu_735_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nin_reg_387 <= add_ln106_reg_1631;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul49_reg_410 <= 23'd0;
    end else if (((icmp_ln107_fu_735_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul49_reg_410 <= add_ln106_1_reg_1618;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_mul51_reg_512 <= add_ln62_7_reg_1750;
    end else if (((icmp_ln53_fu_1096_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul51_reg_512 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_mul53_reg_546 <= add_ln62_8_reg_1768;
    end else if (((icmp_ln53_fu_1096_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul53_reg_546 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond273_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_398 <= 10'd0;
    end else if (((icmp_ln107_fu_735_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_398 <= add_ln106_2_reg_1623;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6414_fu_1378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ti_reg_364 <= add_ln32_reg_1605;
    end else if (((icmp_ln31_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_364 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_212 <= 4'd0;
    end else if (((icmp_ln32_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_212 <= add_ln31_reg_1575;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        tx_1_reg_568 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1))) begin
        tx_1_reg_568 <= add_ln129_reg_1816;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_998_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tx_reg_455 <= 5'd0;
    end else if (((icmp_ln52_2_fu_1040_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        tx_reg_455 <= add_ln49_reg_1704;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_998_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ty_1_reg_557 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1))) begin
        ty_1_reg_557 <= add_ln128_reg_1797;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ty_reg_443 <= 5'd0;
    end else if (((icmp_ln49_fu_1024_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        ty_reg_443 <= add_ln48_reg_1691;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1))) begin
        xr_reg_590 <= add_ln80_reg_1850;
    end else if (((icmp_ln79_fu_1398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        xr_reg_590 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        yr_fu_216 <= 8'd0;
    end else if (((icmp_ln80_fu_1444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        yr_fu_216 <= add_ln79_reg_1837;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln106_1_reg_1618 <= add_ln106_1_fu_678_p2;
        add_ln106_2_reg_1623 <= add_ln106_2_fu_684_p2;
        add_ln106_reg_1631 <= add_ln106_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln107_reg_1649 <= add_ln107_fu_741_p2;
        mul_ln107_reg_1641 <= mul_ln107_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln108_reg_1667 <= add_ln108_fu_856_p2;
        input_fm_buffer_addr_1_reg_1659 <= zext_ln115_2_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln115_reg_1636 <= add_ln115_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln128_reg_1797 <= add_ln128_fu_1262_p2;
        add_ln131_reg_1789 <= add_ln131_fu_1246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add_ln129_reg_1816 <= add_ln129_fu_1372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_1575 <= add_ln31_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_1605 <= add_ln32_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln48_reg_1691 <= add_ln48_fu_1004_p2;
        empty_77_reg_1683 <= empty_77_fu_992_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln49_reg_1704 <= add_ln49_fu_1030_p2;
        output_fm_buffer_0_addr_reg_1696 <= p_cast60_fu_1019_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln52_reg_1717 <= add_ln52_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln53_reg_1735 <= add_ln53_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln61_reg_1763 <= add_ln61_fu_1146_p2;
        input_fm_buffer_addr_2_reg_1755 <= zext_ln62_5_fu_1136_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln62_7_reg_1750 <= add_ln62_7_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_1140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln62_8_reg_1768 <= add_ln62_8_fu_1152_p2;
        gmem_addr_6_reg_1773 <= sext_ln62_fu_1187_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        add_ln79_reg_1837 <= add_ln79_fu_1404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        add_ln80_reg_1850 <= add_ln80_fu_1450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_addr_4_reg_1802 <= sext_ln129_fu_1342_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_5_read_reg_1678 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        gmem_addr_5_reg_1672 <= sext_ln115_1_fu_970_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_addr_read_reg_1862 <= m_axi_gmem_RDATA;
        trunc_ln82_1_reg_1867 <= trunc_ln82_1_fu_1502_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_1444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        gmem_addr_reg_1855 <= sext_ln82_fu_1488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_fm_buffer_0_load_1_reg_1821 <= output_fm_buffer_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        select_ln83_reg_1872 <= select_ln83_fu_1522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_1398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        sext_ln80_reg_1842[63 : 2] <= sext_ln80_fu_1440_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_735_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln115_reg_1654[19 : 2] <= sub_ln115_fu_826_p2[19 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_1580 <= tmp_fu_625_p3;
        zext_ln32_reg_1585[7 : 0] <= zext_ln32_fu_633_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        trunc_ln62_reg_1779 <= trunc_ln62_fu_1197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln82_reg_1597 <= trunc_ln82_fu_637_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1096_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        zext_ln61_reg_1745[4 : 2] <= zext_ln61_fu_1126_p1[4 : 2];
        zext_ln62_2_reg_1740[4 : 0] <= zext_ln62_2_fu_1114_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_fu_1040_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        zext_ln62_1_reg_1727[6 : 2] <= zext_ln62_1_fu_1088_p1[6 : 2];
        zext_ln62_reg_1722[4 : 0] <= zext_ln62_fu_1058_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln79_fu_1398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state8))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state38))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state46))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_2_reg_1755;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_1659;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_address0 = p_cast56_fu_673_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_d0 = gmem_addr_5_read_reg_1678;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond273_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1855;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            m_axi_gmem_ARADDR = gmem_addr_6_reg_1773;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            m_axi_gmem_ARADDR = gmem_addr_5_reg_1672;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_gmem_AWADDR = gmem_addr_reg_1855;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            m_axi_gmem_AWADDR = gmem_addr_4_reg_1802;
        end else begin
            m_axi_gmem_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_gmem_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            m_axi_gmem_AWLEN = 32'd17;
        end else begin
            m_axi_gmem_AWLEN = 'bx;
        end
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        m_axi_gmem_WDATA = select_ln83_cast_fu_1530_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        m_axi_gmem_WDATA = output_fm_buffer_0_load_1_reg_1821;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        output_fm_buffer_0_address0 = p_cast63_fu_1390_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        output_fm_buffer_0_address0 = zext_ln131_2_fu_1361_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_address0 = output_fm_buffer_0_addr_reg_1696;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_fm_buffer_0_address0 = p_cast60_fu_1019_p1;
    end else begin
        output_fm_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        output_fm_buffer_0_ce0 = 1'b1;
    end else begin
        output_fm_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        output_fm_buffer_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_fm_buffer_0_d0 = conv_i_i119_lcssa_lcssa15_reg_478;
    end else begin
        output_fm_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond6414_fu_1378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47)) | ((icmp_ln52_2_fu_1040_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        output_fm_buffer_0_we0 = 1'b1;
    end else begin
        output_fm_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond273_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln106_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln107_fu_735_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln108_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln48_fu_998_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln49_fu_1024_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln52_2_fu_1040_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln53_fu_1096_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln61_fu_1140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln128_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (icmp_ln129_fu_1366_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((exitcond6414_fu_1378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln79_fu_1398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln80_fu_1444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_1_fu_678_p2 = (phi_mul49_reg_410 + 23'd260100);

assign add_ln106_2_fu_684_p2 = (phi_mul_reg_398 + 10'd21);

assign add_ln106_fu_696_p2 = (nin_reg_387 + 6'd1);

assign add_ln107_fu_741_p2 = (by_reg_421 + 5'd1);

assign add_ln108_fu_856_p2 = (bx_reg_432 + 5'd1);

assign add_ln111_1_fu_874_p2 = ($signed(zext_ln108_fu_846_p1) + $signed(6'd62));

assign add_ln111_fu_884_p2 = ($signed(sext_ln111_fu_880_p1) + $signed(zext_ln111_fu_870_p1));

assign add_ln115_1_fu_946_p2 = ($signed(sub_ln115_reg_1654) + $signed(sext_ln115_2_fu_942_p1));

assign add_ln115_2_fu_955_p2 = ($signed(sext_ln115_3_fu_951_p1) + $signed(add_ln115_reg_1636));

assign add_ln115_3_fu_715_p2 = (phi_mul_reg_398 + zext_ln115_fu_711_p1);

assign add_ln115_4_fu_836_p2 = (mul_ln107_reg_1641 + zext_ln115_1_fu_832_p1);

assign add_ln115_fu_706_p2 = (zext_ln107_fu_702_p1 + input_ftmap);

assign add_ln128_fu_1262_p2 = (ty_1_reg_557 + 5'd1);

assign add_ln129_fu_1372_p2 = (tx_1_reg_568 + 5'd1);

assign add_ln131_1_fu_1356_p2 = (add_ln131_reg_1789 + zext_ln131_1_fu_1352_p1);

assign add_ln131_fu_1246_p2 = (tmp_2_fu_1238_p3 + zext_ln131_fu_1234_p1);

assign add_ln31_fu_619_p2 = (tj_fu_212 + 4'd1);

assign add_ln32_fu_651_p2 = (ti_reg_364 + 4'd1);

assign add_ln48_fu_1004_p2 = (ty_reg_443 + 5'd1);

assign add_ln49_fu_1030_p2 = (tx_reg_455 + 5'd1);

assign add_ln52_fu_1046_p2 = (ky_reg_467 + 3'd1);

assign add_ln53_fu_1102_p2 = (kx_reg_489 + 3'd1);

assign add_ln57_fu_1108_p2 = (zext_ln53_1_fu_1092_p1 + tx_reg_455);

assign add_ln61_fu_1146_p2 = (nin_1_reg_523 + 6'd1);

assign add_ln62_1_fu_1158_p2 = (zext_ln61_reg_1745 + phi_mul53_reg_546);

assign add_ln62_2_fu_1172_p2 = (add_ln62_4_fu_1167_p2 + zext_ln62_1_reg_1727);

assign add_ln62_3_fu_1218_p2 = (shl_ln62_3_fu_1210_p3 + mul_ln62_1_fu_601_p2);

assign add_ln62_4_fu_1167_p2 = (zext_ln62_4_fu_1163_p1 + conv3_weights);

assign add_ln62_7_fu_1130_p2 = (phi_mul51_reg_512 + 10'd21);

assign add_ln62_8_fu_1152_p2 = (phi_mul53_reg_546 + 12'd100);

assign add_ln62_fu_1082_p2 = (shl_ln2_fu_1062_p3 + zext_ln53_fu_1078_p1);

assign add_ln79_fu_1404_p2 = (yr_fu_216 + 8'd1);

assign add_ln80_fu_1450_p2 = (xr_reg_590 + 8'd1);

assign add_ln82_1_fu_1473_p2 = ($signed(add_ln82_fu_1468_p2) + $signed(sext_ln80_reg_1842));

assign add_ln82_2_fu_1506_p2 = (gmem_addr_read_reg_1862 + conv3_biases_0_0_val);

assign add_ln82_fu_1468_p2 = (zext_ln82_2_fu_1464_p1 + output_ftmap);

assign add_ln83_fu_1510_p2 = (trunc_ln82_1_reg_1867 + trunc_ln82_reg_1597);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign empty_75_fu_667_p2 = (empty_reg_376 + 14'd1);

assign empty_76_fu_757_p2 = ($signed(tmp1_cast_fu_753_p1) + $signed(zext_ln32_reg_1585));

assign empty_77_fu_992_p2 = (tmp_1_fu_984_p3 + ty_cast_fu_980_p1);

assign empty_78_fu_1014_p2 = (empty_77_reg_1683 + tx_cast_fu_1010_p1);

assign empty_79_fu_1052_p2 = (zext_ln52_fu_1036_p1 + ty_reg_443);

assign empty_81_fu_1268_p2 = (zext_ln128_fu_1252_p1 + tmp_reg_1580);

assign empty_82_fu_1297_p2 = (p_shl10_cast_fu_1281_p1 - p_shl11_cast_fu_1293_p1);

assign empty_83_fu_1326_p2 = (tmp14_fu_1321_p2 + tmp13_cast_fu_1317_p1);

assign empty_87_fu_1384_p2 = (empty_86_reg_579 + 9'd1);

assign exitcond273_fu_661_p2 = ((empty_reg_376 == 14'd14112) ? 1'b1 : 1'b0);

assign exitcond6414_fu_1378_p2 = ((empty_86_reg_579 == 9'd289) ? 1'b1 : 1'b0);

assign grp_fu_1534_p1 = zext_ln62_reg_1722;

assign grp_fu_1534_p2 = 14'd21;

assign grp_fu_1534_p3 = zext_ln62_2_reg_1740;

assign icmp_ln106_fu_690_p2 = ((nin_reg_387 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_735_p2 = ((by_reg_421 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_850_p2 = ((bx_reg_432 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_1256_p2 = ((ty_1_reg_557 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1366_p2 = ((tx_1_reg_568 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_613_p2 = ((tj_fu_212 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_645_p2 = ((ti_reg_364 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_998_p2 = ((ty_reg_443 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1024_p2 = ((tx_reg_455 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_898_p2 = (($signed(add_ln111_fu_884_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_1040_p2 = ((ky_reg_467 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_770_p2 = (($signed(empty_76_fu_757_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_1096_p2 = ((kx_reg_489 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1140_p2 = ((nin_1_reg_523 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1398_p2 = ((yr_fu_216 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1444_p2 = ((xr_reg_590 == 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln107_fu_725_p0 = mul_ln107_fu_725_p00;

assign mul_ln107_fu_725_p00 = add_ln115_3_fu_715_p2;

assign mul_ln107_fu_725_p1 = 14'd21;

assign or_ln51_1_fu_912_p2 = (tmp_6_fu_890_p3 | icmp_ln52_1_fu_898_p2);

assign or_ln51_fu_792_p2 = (tmp_4_fu_762_p3 | icmp_ln52_fu_770_p2);

assign p_cast35_fu_1303_p1 = $signed(empty_82_fu_1297_p2);

assign p_cast56_fu_673_p1 = empty_reg_376;

assign p_cast60_fu_1019_p1 = empty_78_fu_1014_p2;

assign p_cast63_fu_1390_p1 = empty_86_reg_579;

assign p_shl10_cast_fu_1281_p1 = p_shl1_fu_1273_p3;

assign p_shl11_cast_fu_1293_p1 = p_shl2_fu_1285_p3;

assign p_shl1_fu_1273_p3 = {{empty_81_fu_1268_p2}, {10'd0}};

assign p_shl2_fu_1285_p3 = {{empty_81_fu_1268_p2}, {2'd0}};

assign select_ln51_2_fu_918_p3 = ((tmp_7_fu_904_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_3_fu_926_p3 = ((or_ln51_1_fu_912_p2[0:0] == 1'b1) ? select_ln51_2_fu_918_p3 : add_ln111_fu_884_p2);

assign select_ln51_fu_784_p3 = ((tmp_5_fu_776_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln83_cast_fu_1530_p1 = select_ln83_reg_1872;

assign select_ln83_fu_1522_p3 = ((tmp_3_fu_1514_p3[0:0] == 1'b1) ? 31'd0 : add_ln83_fu_1510_p2);

assign sext_ln111_fu_880_p1 = $signed(add_ln111_1_fu_874_p2);

assign sext_ln115_1_fu_970_p1 = $signed(trunc_ln5_fu_960_p4);

assign sext_ln115_2_fu_942_p1 = $signed(shl_ln115_2_fu_934_p3);

assign sext_ln115_3_fu_951_p1 = $signed(add_ln115_1_fu_946_p2);

assign sext_ln115_fu_822_p1 = $signed(shl_ln115_1_fu_814_p3);

assign sext_ln129_fu_1342_p1 = $signed(trunc_ln4_fu_1332_p4);

assign sext_ln62_fu_1187_p1 = $signed(trunc_ln62_2_fu_1177_p4);

assign sext_ln80_fu_1440_p1 = $signed(sub_ln82_fu_1434_p2);

assign sext_ln82_fu_1488_p1 = $signed(trunc_ln_fu_1478_p4);

assign shl_ln115_1_fu_814_p3 = {{yClamped_fu_798_p3}, {2'd0}};

assign shl_ln115_2_fu_934_p3 = {{select_ln51_3_fu_926_p3}, {2'd0}};

assign shl_ln1_fu_806_p3 = {{yClamped_fu_798_p3}, {10'd0}};

assign shl_ln2_fu_1062_p3 = {{ky_reg_467}, {4'd0}};

assign shl_ln62_1_fu_1070_p3 = {{ky_reg_467}, {2'd0}};

assign shl_ln62_2_fu_1118_p3 = {{kx_reg_489}, {2'd0}};

assign shl_ln62_3_fu_1210_p3 = {{empty_80_reg_534}, {19'd0}};

assign shl_ln82_1_fu_1422_p3 = {{yr_fu_216}, {2'd0}};

assign shl_ln82_2_fu_1456_p3 = {{xr_reg_590}, {2'd0}};

assign shl_ln_fu_1410_p3 = {{yr_fu_216}, {10'd0}};

assign sub_ln115_fu_826_p2 = ($signed(shl_ln1_fu_806_p3) - $signed(sext_ln115_fu_822_p1));

assign sub_ln82_fu_1434_p2 = (zext_ln82_fu_1418_p1 - zext_ln82_1_fu_1430_p1);

assign tmp13_cast_fu_1317_p1 = tmp3_fu_1307_p4;

assign tmp14_fu_1321_p2 = ($signed(p_cast35_fu_1303_p1) + $signed(output_ftmap));

assign tmp1_cast_fu_753_p1 = $signed(tmp1_fu_747_p2);

assign tmp1_fu_747_p2 = ($signed(zext_ln107_2_fu_731_p1) + $signed(6'd62));

assign tmp3_fu_1307_p4 = {{{ti_reg_364}, {ti_reg_364}}, {2'd0}};

assign tmp4_fu_862_p3 = {{ti_reg_364}, {ti_reg_364}};

assign tmp_1_fu_984_p3 = {{ty_reg_443}, {4'd0}};

assign tmp_2_fu_1238_p3 = {{ty_1_reg_557}, {4'd0}};

assign tmp_3_fu_1514_p3 = add_ln82_2_fu_1506_p2[32'd31];

assign tmp_4_fu_762_p3 = empty_76_fu_757_p2[32'd9];

assign tmp_5_fu_776_p3 = empty_76_fu_757_p2[32'd9];

assign tmp_6_fu_890_p3 = add_ln111_fu_884_p2[32'd9];

assign tmp_7_fu_904_p3 = add_ln111_fu_884_p2[32'd9];

assign tmp_fu_625_p3 = {{tj_fu_212}, {tj_fu_212}};

assign trunc_ln4_fu_1332_p4 = {{empty_83_fu_1326_p2[63:2]}};

assign trunc_ln5_fu_960_p4 = {{add_ln115_2_fu_955_p2[63:2]}};

assign trunc_ln62_2_fu_1177_p4 = {{add_ln62_2_fu_1172_p2[63:2]}};

assign trunc_ln62_fu_1197_p1 = m_axi_gmem_RDATA[19:0];

assign trunc_ln82_1_fu_1502_p1 = m_axi_gmem_RDATA[30:0];

assign trunc_ln82_fu_637_p1 = conv3_biases_0_0_val[30:0];

assign trunc_ln_fu_1478_p4 = {{add_ln82_1_fu_1473_p2[63:2]}};

assign tx_cast_fu_1010_p1 = tx_reg_455;

assign ty_cast_fu_980_p1 = ty_reg_443;

assign yClamped_fu_798_p3 = ((or_ln51_fu_792_p2[0:0] == 1'b1) ? select_ln51_fu_784_p3 : empty_76_fu_757_p2);

assign zext_ln107_2_fu_731_p1 = by_reg_421;

assign zext_ln107_fu_702_p1 = phi_mul49_reg_410;

assign zext_ln108_fu_846_p1 = bx_reg_432;

assign zext_ln111_fu_870_p1 = tmp4_fu_862_p3;

assign zext_ln115_1_fu_832_p1 = bx_reg_432;

assign zext_ln115_2_fu_841_p1 = add_ln115_4_fu_836_p2;

assign zext_ln115_fu_711_p1 = by_reg_421;

assign zext_ln128_fu_1252_p1 = ty_1_reg_557;

assign zext_ln131_1_fu_1352_p1 = tx_1_reg_568;

assign zext_ln131_2_fu_1361_p1 = add_ln131_1_fu_1356_p2;

assign zext_ln131_fu_1234_p1 = ty_1_reg_557;

assign zext_ln32_fu_633_p1 = tmp_fu_625_p3;

assign zext_ln52_fu_1036_p1 = ky_reg_467;

assign zext_ln53_1_fu_1092_p1 = kx_reg_489;

assign zext_ln53_fu_1078_p1 = shl_ln62_1_fu_1070_p3;

assign zext_ln61_fu_1126_p1 = shl_ln62_2_fu_1118_p3;

assign zext_ln62_1_fu_1088_p1 = add_ln62_fu_1082_p2;

assign zext_ln62_2_fu_1114_p1 = add_ln57_fu_1108_p2;

assign zext_ln62_4_fu_1163_p1 = add_ln62_1_fu_1158_p2;

assign zext_ln62_5_fu_1136_p1 = grp_fu_1534_p4;

assign zext_ln62_fu_1058_p1 = empty_79_fu_1052_p2;

assign zext_ln82_1_fu_1430_p1 = shl_ln82_1_fu_1422_p3;

assign zext_ln82_2_fu_1464_p1 = shl_ln82_2_fu_1456_p3;

assign zext_ln82_fu_1418_p1 = shl_ln_fu_1410_p3;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1585[9:8] <= 2'b00;
    sub_ln115_reg_1654[1:0] <= 2'b00;
    zext_ln62_reg_1722[9:5] <= 5'b00000;
    zext_ln62_1_reg_1727[1:0] <= 2'b00;
    zext_ln62_1_reg_1727[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln62_2_reg_1740[13:5] <= 9'b000000000;
    zext_ln61_reg_1745[1:0] <= 2'b00;
    zext_ln61_reg_1745[11:5] <= 7'b0000000;
    sext_ln80_reg_1842[1:0] <= 2'b00;
end

endmodule //srcnn_conv3
