// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_i1_AWVALID,
        m_axi_i1_AWREADY,
        m_axi_i1_AWADDR,
        m_axi_i1_AWID,
        m_axi_i1_AWLEN,
        m_axi_i1_AWSIZE,
        m_axi_i1_AWBURST,
        m_axi_i1_AWLOCK,
        m_axi_i1_AWCACHE,
        m_axi_i1_AWPROT,
        m_axi_i1_AWQOS,
        m_axi_i1_AWREGION,
        m_axi_i1_AWUSER,
        m_axi_i1_WVALID,
        m_axi_i1_WREADY,
        m_axi_i1_WDATA,
        m_axi_i1_WSTRB,
        m_axi_i1_WLAST,
        m_axi_i1_WID,
        m_axi_i1_WUSER,
        m_axi_i1_ARVALID,
        m_axi_i1_ARREADY,
        m_axi_i1_ARADDR,
        m_axi_i1_ARID,
        m_axi_i1_ARLEN,
        m_axi_i1_ARSIZE,
        m_axi_i1_ARBURST,
        m_axi_i1_ARLOCK,
        m_axi_i1_ARCACHE,
        m_axi_i1_ARPROT,
        m_axi_i1_ARQOS,
        m_axi_i1_ARREGION,
        m_axi_i1_ARUSER,
        m_axi_i1_RVALID,
        m_axi_i1_RREADY,
        m_axi_i1_RDATA,
        m_axi_i1_RLAST,
        m_axi_i1_RID,
        m_axi_i1_RFIFONUM,
        m_axi_i1_RUSER,
        m_axi_i1_RRESP,
        m_axi_i1_BVALID,
        m_axi_i1_BREADY,
        m_axi_i1_BRESP,
        m_axi_i1_BID,
        m_axi_i1_BUSER,
        sext_ln108_2,
        mul_ln114,
        trunc_ln,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_d0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_address0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_ce0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_we0,
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_i1_AWVALID;
input   m_axi_i1_AWREADY;
output  [63:0] m_axi_i1_AWADDR;
output  [0:0] m_axi_i1_AWID;
output  [31:0] m_axi_i1_AWLEN;
output  [2:0] m_axi_i1_AWSIZE;
output  [1:0] m_axi_i1_AWBURST;
output  [1:0] m_axi_i1_AWLOCK;
output  [3:0] m_axi_i1_AWCACHE;
output  [2:0] m_axi_i1_AWPROT;
output  [3:0] m_axi_i1_AWQOS;
output  [3:0] m_axi_i1_AWREGION;
output  [0:0] m_axi_i1_AWUSER;
output   m_axi_i1_WVALID;
input   m_axi_i1_WREADY;
output  [31:0] m_axi_i1_WDATA;
output  [3:0] m_axi_i1_WSTRB;
output   m_axi_i1_WLAST;
output  [0:0] m_axi_i1_WID;
output  [0:0] m_axi_i1_WUSER;
output   m_axi_i1_ARVALID;
input   m_axi_i1_ARREADY;
output  [63:0] m_axi_i1_ARADDR;
output  [0:0] m_axi_i1_ARID;
output  [31:0] m_axi_i1_ARLEN;
output  [2:0] m_axi_i1_ARSIZE;
output  [1:0] m_axi_i1_ARBURST;
output  [1:0] m_axi_i1_ARLOCK;
output  [3:0] m_axi_i1_ARCACHE;
output  [2:0] m_axi_i1_ARPROT;
output  [3:0] m_axi_i1_ARQOS;
output  [3:0] m_axi_i1_ARREGION;
output  [0:0] m_axi_i1_ARUSER;
input   m_axi_i1_RVALID;
output   m_axi_i1_RREADY;
input  [31:0] m_axi_i1_RDATA;
input   m_axi_i1_RLAST;
input  [0:0] m_axi_i1_RID;
input  [12:0] m_axi_i1_RFIFONUM;
input  [0:0] m_axi_i1_RUSER;
input  [1:0] m_axi_i1_RRESP;
input   m_axi_i1_BVALID;
output   m_axi_i1_BREADY;
input  [1:0] m_axi_i1_BRESP;
input  [0:0] m_axi_i1_BID;
input  [0:0] m_axi_i1_BUSER;
input  [61:0] sext_ln108_2;
input  [9:0] mul_ln114;
input  [1:0] trunc_ln;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_d0;
output  [9:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_address0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_ce0;
output   p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_we0;
output  [31:0] p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_d0;

reg ap_idle;
reg m_axi_i1_RREADY;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_we0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_ce0;
reg p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] exitcond87_011_reg_392;
reg   [0:0] exitcond87_011_reg_392_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond87_011_fu_256_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i1_blk_n_R;
wire    ap_block_pp0_stage0;
wire   [1:0] trunc_ln_read_reg_378;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] empty_121_fu_272_p1;
reg   [1:0] empty_121_reg_396;
reg   [1:0] empty_121_reg_396_pp0_iter1_reg;
reg   [1:0] empty_121_reg_396_pp0_iter2_reg;
reg   [31:0] i1_addr_read_reg_400;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] p_cast2_fu_342_p1;
reg   [7:0] phi_urem_fu_88;
wire   [7:0] idx_urem_fu_288_p3;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_phi_urem_load;
reg   [7:0] loop_index_i_0_fu_92;
wire   [7:0] empty_fu_262_p2;
reg   [7:0] ap_sig_allocacmp_loop_index_i_0_load;
wire   [31:0] empty_119_fu_312_p1;
wire   [7:0] next_urem_fu_276_p2;
wire   [0:0] empty_118_fu_282_p2;
wire   [18:0] tmp_fu_324_p1;
wire  signed [18:0] grp_fu_355_p3;
wire   [7:0] tmp_fu_324_p4;
wire   [9:0] tmp_177_cast_fu_333_p1;
wire   [9:0] empty_120_fu_337_p2;
wire   [7:0] grp_fu_355_p0;
wire   [2:0] grp_fu_355_p1;
wire   [9:0] grp_fu_355_p2;
reg    grp_fu_355_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] grp_fu_355_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_am_addmul_8ns_3ns_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
am_addmul_8ns_3ns_10ns_19_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_355_p0),
    .din1(grp_fu_355_p1),
    .din2(grp_fu_355_p2),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p3)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond87_011_fu_256_p2 == 1'd0))) begin
            loop_index_i_0_fu_92 <= empty_fu_262_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_i_0_fu_92 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond87_011_fu_256_p2 == 1'd0))) begin
            phi_urem_fu_88 <= idx_urem_fu_288_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_urem_fu_88 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_121_reg_396_pp0_iter1_reg <= empty_121_reg_396;
        exitcond87_011_reg_392 <= exitcond87_011_fu_256_p2;
        exitcond87_011_reg_392_pp0_iter1_reg <= exitcond87_011_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond87_011_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_121_reg_396 <= empty_121_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_121_reg_396_pp0_iter2_reg <= empty_121_reg_396_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i1_addr_read_reg_400 <= m_axi_i1_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond87_011_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond87_011_reg_392_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_loop_index_i_0_load = 8'd0;
    end else begin
        ap_sig_allocacmp_loop_index_i_0_load = loop_index_i_0_fu_92;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_phi_urem_load = 8'd0;
    end else begin
        ap_sig_allocacmp_phi_urem_load = phi_urem_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        i1_blk_n_R = m_axi_i1_RVALID;
    end else begin
        i1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_i1_RREADY = 1'b1;
    end else begin
        m_axi_i1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(empty_121_reg_396_pp0_iter2_reg == 2'd1) & ~(empty_121_reg_396_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln_read_reg_378 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd0) & (trunc_ln_read_reg_378 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd1) & (trunc_ln_read_reg_378 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(empty_121_reg_396_pp0_iter2_reg == 2'd1) & ~(empty_121_reg_396_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln_read_reg_378 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd0) & (trunc_ln_read_reg_378 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd1) & (trunc_ln_read_reg_378 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln_read_reg_378 == 2'd0) & ~(empty_121_reg_396_pp0_iter2_reg == 2'd1) & ~(empty_121_reg_396_pp0_iter2_reg == 2'd0) & ~(trunc_ln_read_reg_378 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln_read_reg_378 == 2'd0) & ~(trunc_ln_read_reg_378 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_ce0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln_read_reg_378 == 2'd0) & ~(trunc_ln_read_reg_378 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_121_reg_396_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_we0 = 1'b1;
    end else begin
        p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (m_axi_i1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (m_axi_i1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((exitcond87_011_reg_392_pp0_iter1_reg == 1'd0) & (m_axi_i1_RVALID == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_118_fu_282_p2 = ((next_urem_fu_276_p2 < 8'd3) ? 1'b1 : 1'b0);

assign empty_119_fu_312_p1 = i1_addr_read_reg_400;

assign empty_120_fu_337_p2 = (mul_ln114 + tmp_177_cast_fu_333_p1);

assign empty_121_fu_272_p1 = ap_sig_allocacmp_phi_urem_load[1:0];

assign empty_fu_262_p2 = (ap_sig_allocacmp_loop_index_i_0_load + 8'd1);

assign exitcond87_011_fu_256_p2 = ((ap_sig_allocacmp_loop_index_i_0_load == 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_355_p0 = grp_fu_355_p00;

assign grp_fu_355_p00 = ap_sig_allocacmp_loop_index_i_0_load;

assign grp_fu_355_p1 = 9'd4;

assign grp_fu_355_p2 = 19'd683;

assign idx_urem_fu_288_p3 = ((empty_118_fu_282_p2[0:0] == 1'b1) ? next_urem_fu_276_p2 : 8'd0);

assign m_axi_i1_ARADDR = 64'd0;

assign m_axi_i1_ARBURST = 2'd0;

assign m_axi_i1_ARCACHE = 4'd0;

assign m_axi_i1_ARID = 1'd0;

assign m_axi_i1_ARLEN = 32'd0;

assign m_axi_i1_ARLOCK = 2'd0;

assign m_axi_i1_ARPROT = 3'd0;

assign m_axi_i1_ARQOS = 4'd0;

assign m_axi_i1_ARREGION = 4'd0;

assign m_axi_i1_ARSIZE = 3'd0;

assign m_axi_i1_ARUSER = 1'd0;

assign m_axi_i1_ARVALID = 1'b0;

assign m_axi_i1_AWADDR = 64'd0;

assign m_axi_i1_AWBURST = 2'd0;

assign m_axi_i1_AWCACHE = 4'd0;

assign m_axi_i1_AWID = 1'd0;

assign m_axi_i1_AWLEN = 32'd0;

assign m_axi_i1_AWLOCK = 2'd0;

assign m_axi_i1_AWPROT = 3'd0;

assign m_axi_i1_AWQOS = 4'd0;

assign m_axi_i1_AWREGION = 4'd0;

assign m_axi_i1_AWSIZE = 3'd0;

assign m_axi_i1_AWUSER = 1'd0;

assign m_axi_i1_AWVALID = 1'b0;

assign m_axi_i1_BREADY = 1'b0;

assign m_axi_i1_WDATA = 32'd0;

assign m_axi_i1_WID = 1'd0;

assign m_axi_i1_WLAST = 1'b0;

assign m_axi_i1_WSTRB = 4'd0;

assign m_axi_i1_WUSER = 1'd0;

assign m_axi_i1_WVALID = 1'b0;

assign next_urem_fu_276_p2 = (ap_sig_allocacmp_phi_urem_load + 8'd1);

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_0_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_1_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_0_2_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_0_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_1_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_1_2_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_0_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_1_d0 = empty_119_fu_312_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_address0 = p_cast2_fu_342_p1;

assign p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E15input_fm_buffer_0_2_2_d0 = empty_119_fu_312_p1;

assign p_cast2_fu_342_p1 = empty_120_fu_337_p2;

assign tmp_177_cast_fu_333_p1 = tmp_fu_324_p4;

assign tmp_fu_324_p1 = grp_fu_355_p3;

assign tmp_fu_324_p4 = {{tmp_fu_324_p1[18:11]}};

assign trunc_ln_read_reg_378 = trunc_ln;

endmodule //srcnn_conv1_Pipeline_2
