// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_Pipeline_LOAD_INPUT_BH_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_i2_AWVALID,
        m_axi_i2_AWREADY,
        m_axi_i2_AWADDR,
        m_axi_i2_AWID,
        m_axi_i2_AWLEN,
        m_axi_i2_AWSIZE,
        m_axi_i2_AWBURST,
        m_axi_i2_AWLOCK,
        m_axi_i2_AWCACHE,
        m_axi_i2_AWPROT,
        m_axi_i2_AWQOS,
        m_axi_i2_AWREGION,
        m_axi_i2_AWUSER,
        m_axi_i2_WVALID,
        m_axi_i2_WREADY,
        m_axi_i2_WDATA,
        m_axi_i2_WSTRB,
        m_axi_i2_WLAST,
        m_axi_i2_WID,
        m_axi_i2_WUSER,
        m_axi_i2_ARVALID,
        m_axi_i2_ARREADY,
        m_axi_i2_ARADDR,
        m_axi_i2_ARID,
        m_axi_i2_ARLEN,
        m_axi_i2_ARSIZE,
        m_axi_i2_ARBURST,
        m_axi_i2_ARLOCK,
        m_axi_i2_ARCACHE,
        m_axi_i2_ARPROT,
        m_axi_i2_ARQOS,
        m_axi_i2_ARREGION,
        m_axi_i2_ARUSER,
        m_axi_i2_RVALID,
        m_axi_i2_RREADY,
        m_axi_i2_RDATA,
        m_axi_i2_RLAST,
        m_axi_i2_RID,
        m_axi_i2_RFIFONUM,
        m_axi_i2_RUSER,
        m_axi_i2_RRESP,
        m_axi_i2_BVALID,
        m_axi_i2_BREADY,
        m_axi_i2_BRESP,
        m_axi_i2_BID,
        m_axi_i2_BUSER,
        input_ftmap,
        sext_ln75,
        input_fm_buffer_address1,
        input_fm_buffer_ce1,
        input_fm_buffer_we1,
        input_fm_buffer_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_i2_AWVALID;
input   m_axi_i2_AWREADY;
output  [63:0] m_axi_i2_AWADDR;
output  [0:0] m_axi_i2_AWID;
output  [31:0] m_axi_i2_AWLEN;
output  [2:0] m_axi_i2_AWSIZE;
output  [1:0] m_axi_i2_AWBURST;
output  [1:0] m_axi_i2_AWLOCK;
output  [3:0] m_axi_i2_AWCACHE;
output  [2:0] m_axi_i2_AWPROT;
output  [3:0] m_axi_i2_AWQOS;
output  [3:0] m_axi_i2_AWREGION;
output  [0:0] m_axi_i2_AWUSER;
output   m_axi_i2_WVALID;
input   m_axi_i2_WREADY;
output  [31:0] m_axi_i2_WDATA;
output  [3:0] m_axi_i2_WSTRB;
output   m_axi_i2_WLAST;
output  [0:0] m_axi_i2_WID;
output  [0:0] m_axi_i2_WUSER;
output   m_axi_i2_ARVALID;
input   m_axi_i2_ARREADY;
output  [63:0] m_axi_i2_ARADDR;
output  [0:0] m_axi_i2_ARID;
output  [31:0] m_axi_i2_ARLEN;
output  [2:0] m_axi_i2_ARSIZE;
output  [1:0] m_axi_i2_ARBURST;
output  [1:0] m_axi_i2_ARLOCK;
output  [3:0] m_axi_i2_ARCACHE;
output  [2:0] m_axi_i2_ARPROT;
output  [3:0] m_axi_i2_ARQOS;
output  [3:0] m_axi_i2_ARREGION;
output  [0:0] m_axi_i2_ARUSER;
input   m_axi_i2_RVALID;
output   m_axi_i2_RREADY;
input  [31:0] m_axi_i2_RDATA;
input   m_axi_i2_RLAST;
input  [0:0] m_axi_i2_RID;
input  [12:0] m_axi_i2_RFIFONUM;
input  [0:0] m_axi_i2_RUSER;
input  [1:0] m_axi_i2_RRESP;
input   m_axi_i2_BVALID;
output   m_axi_i2_BREADY;
input  [1:0] m_axi_i2_BRESP;
input  [0:0] m_axi_i2_BID;
input  [0:0] m_axi_i2_BUSER;
input  [63:0] input_ftmap;
input  [18:0] sext_ln75;
output  [15:0] input_fm_buffer_address1;
output   input_fm_buffer_ce1;
output   input_fm_buffer_we1;
output  [31:0] input_fm_buffer_d1;

reg ap_idle;
reg m_axi_i2_ARVALID;
reg m_axi_i2_RREADY;
reg input_fm_buffer_ce1;
reg input_fm_buffer_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] or_ln76_reg_575;
reg   [0:0] or_ln76_2_reg_579;
reg    ap_predicate_op97_readreq_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg   [0:0] icmp_ln75_reg_566;
reg   [0:0] icmp_ln75_reg_566_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_224_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i2_blk_n_R;
wire    ap_block_pp0_stage0;
reg    i2_blk_n_AR;
reg   [0:0] first_iter_0_reg_166;
reg   [0:0] first_iter_01_reg_177;
reg    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln75_cast_fu_189_p1;
reg  signed [63:0] sext_ln75_cast_reg_561;
reg   [0:0] icmp_ln75_reg_566_pp0_iter2_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter3_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter4_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter5_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter6_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter7_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter8_reg;
reg   [0:0] icmp_ln75_reg_566_pp0_iter10_reg;
reg   [61:0] sext_ln76_mid2_v_reg_570;
wire   [0:0] or_ln76_fu_363_p2;
wire   [0:0] or_ln76_2_fu_435_p2;
reg   [15:0] input_fm_buffer_addr_reg_584;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter2_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter3_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter4_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter5_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter6_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter7_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter8_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter9_reg;
reg   [15:0] input_fm_buffer_addr_reg_584_pp0_iter10_reg;
reg   [31:0] i2_addr_1_read_reg_599;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_170_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_first_iter_01_phi_fu_181_p4;
wire   [63:0] p_cast4_fu_451_p1;
wire  signed [63:0] sext_ln75_1_fu_501_p1;
reg   [7:0] loop_index_i_fu_106;
wire   [7:0] empty_205_fu_456_p2;
reg   [1:0] bh_fu_110;
wire   [1:0] select_ln76_1_fu_383_p3;
reg   [9:0] indvar_flatten_fu_114;
wire   [9:0] select_ln76_2_fu_468_p3;
reg   [6:0] bin_fu_118;
wire   [6:0] select_ln75_1_fu_271_p3;
reg   [15:0] indvar_flatten17_fu_122;
wire   [15:0] add_ln75_3_fu_230_p2;
wire   [0:0] icmp_ln76_fu_251_p2;
wire   [6:0] add_ln75_fu_245_p2;
wire   [8:0] tmp_s_fu_283_p3;
wire   [9:0] tmp_144_cast_fu_291_p1;
wire   [9:0] select_ln75_1_cast_fu_279_p1;
wire   [9:0] empty_207_fu_295_p2;
wire   [6:0] mul_ln75_fu_309_p0;
wire   [18:0] mul_ln75_fu_309_p1;
wire   [24:0] mul_ln75_fu_309_p2;
wire   [63:0] zext_ln75_1_fu_315_p1;
wire   [63:0] add_ln75_1_fu_319_p2;
wire   [63:0] add_ln75_2_fu_324_p2;
wire   [0:0] exitcond6205_fu_345_p2;
wire   [0:0] xor_ln75_fu_339_p2;
wire   [1:0] select_ln75_fu_257_p3;
wire   [0:0] and_ln75_fu_351_p2;
wire   [0:0] or_ln75_fu_265_p2;
wire   [0:0] or_ln76_1_fu_369_p2;
wire   [1:0] add_ln76_fu_357_p2;
wire  signed [10:0] sext_ln75_2_fu_301_p1;
wire   [10:0] select_ln76_1_cast_fu_391_p1;
wire  signed [10:0] empty_208_fu_395_p2;
wire   [7:0] empty_209_fu_405_p1;
wire   [15:0] p_shl_fu_409_p3;
wire  signed [15:0] p_cast1_fu_401_p1;
wire   [0:0] xor_ln76_fu_423_p2;
wire   [0:0] and_ln76_fu_429_p2;
wire   [7:0] select_ln76_fu_375_p3;
wire   [15:0] empty_210_fu_417_p2;
wire   [15:0] select_ln76_cast_fu_441_p1;
wire   [15:0] empty_211_fu_445_p2;
wire   [9:0] add_ln76_1_fu_462_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [24:0] mul_ln75_fu_309_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_7ns_19ns_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 25 ))
mul_7ns_19ns_25_1_1_U118(
    .din0(mul_ln75_fu_309_p0),
    .din1(mul_ln75_fu_309_p1),
    .dout(mul_ln75_fu_309_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bh_fu_110 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln75_fu_224_p2 == 1'd0))) begin
            bh_fu_110 <= select_ln76_1_fu_383_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bin_fu_118 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln75_fu_224_p2 == 1'd0))) begin
            bin_fu_118 <= select_ln75_1_fu_271_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_566 == 1'd0))) begin
        first_iter_01_reg_177 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_01_reg_177 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_566 == 1'd0))) begin
        first_iter_0_reg_166 <= or_ln76_2_reg_579;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_166 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten17_fu_122 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln75_fu_224_p2 == 1'd0))) begin
            indvar_flatten17_fu_122 <= add_ln75_3_fu_230_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_114 <= 10'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln75_fu_224_p2 == 1'd0))) begin
            indvar_flatten_fu_114 <= select_ln76_2_fu_468_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            loop_index_i_fu_106 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln75_fu_224_p2 == 1'd0))) begin
            loop_index_i_fu_106 <= empty_205_fu_456_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln75_reg_566_pp0_iter10_reg <= icmp_ln75_reg_566_pp0_iter9_reg;
        icmp_ln75_reg_566_pp0_iter2_reg <= icmp_ln75_reg_566;
        icmp_ln75_reg_566_pp0_iter3_reg <= icmp_ln75_reg_566_pp0_iter2_reg;
        icmp_ln75_reg_566_pp0_iter4_reg <= icmp_ln75_reg_566_pp0_iter3_reg;
        icmp_ln75_reg_566_pp0_iter5_reg <= icmp_ln75_reg_566_pp0_iter4_reg;
        icmp_ln75_reg_566_pp0_iter6_reg <= icmp_ln75_reg_566_pp0_iter5_reg;
        icmp_ln75_reg_566_pp0_iter7_reg <= icmp_ln75_reg_566_pp0_iter6_reg;
        icmp_ln75_reg_566_pp0_iter8_reg <= icmp_ln75_reg_566_pp0_iter7_reg;
        icmp_ln75_reg_566_pp0_iter9_reg <= icmp_ln75_reg_566_pp0_iter8_reg;
        input_fm_buffer_addr_reg_584_pp0_iter10_reg <= input_fm_buffer_addr_reg_584_pp0_iter9_reg;
        input_fm_buffer_addr_reg_584_pp0_iter2_reg <= input_fm_buffer_addr_reg_584;
        input_fm_buffer_addr_reg_584_pp0_iter3_reg <= input_fm_buffer_addr_reg_584_pp0_iter2_reg;
        input_fm_buffer_addr_reg_584_pp0_iter4_reg <= input_fm_buffer_addr_reg_584_pp0_iter3_reg;
        input_fm_buffer_addr_reg_584_pp0_iter5_reg <= input_fm_buffer_addr_reg_584_pp0_iter4_reg;
        input_fm_buffer_addr_reg_584_pp0_iter6_reg <= input_fm_buffer_addr_reg_584_pp0_iter5_reg;
        input_fm_buffer_addr_reg_584_pp0_iter7_reg <= input_fm_buffer_addr_reg_584_pp0_iter6_reg;
        input_fm_buffer_addr_reg_584_pp0_iter8_reg <= input_fm_buffer_addr_reg_584_pp0_iter7_reg;
        input_fm_buffer_addr_reg_584_pp0_iter9_reg <= input_fm_buffer_addr_reg_584_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln75_reg_566 <= icmp_ln75_fu_224_p2;
        sext_ln75_cast_reg_561 <= sext_ln75_cast_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0))) begin
        i2_addr_1_read_reg_599 <= m_axi_i2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_addr_reg_584 <= p_cast4_fu_451_p1;
        or_ln76_reg_575 <= or_ln76_fu_363_p2;
        sext_ln76_mid2_v_reg_570 <= {{add_ln75_2_fu_324_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln76_2_reg_579 <= or_ln76_2_fu_435_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_224_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln75_reg_566 == 1'd0))) begin
        ap_phi_mux_first_iter_01_phi_fu_181_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_01_phi_fu_181_p4 = first_iter_01_reg_177;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln75_reg_566 == 1'd0))) begin
        ap_phi_mux_first_iter_0_phi_fu_170_p4 = or_ln76_2_reg_579;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_170_p4 = first_iter_0_reg_166;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op97_readreq_state3 == 1'b1))) begin
        i2_blk_n_AR = m_axi_i2_ARREADY;
    end else begin
        i2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0))) begin
        i2_blk_n_R = m_axi_i2_RVALID;
    end else begin
        i2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_ce1 = 1'b1;
    end else begin
        input_fm_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln75_reg_566_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_we1 = 1'b1;
    end else begin
        input_fm_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op97_readreq_state3 == 1'b1))) begin
        m_axi_i2_ARVALID = 1'b1;
    end else begin
        m_axi_i2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0))) begin
        m_axi_i2_RREADY = 1'b1;
    end else begin
        m_axi_i2_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_319_p2 = (zext_ln75_1_fu_315_p1 + input_ftmap);

assign add_ln75_2_fu_324_p2 = ($signed(add_ln75_1_fu_319_p2) + $signed(sext_ln75_cast_reg_561));

assign add_ln75_3_fu_230_p2 = (indvar_flatten17_fu_122 + 16'd1);

assign add_ln75_fu_245_p2 = (bin_fu_118 + 7'd1);

assign add_ln76_1_fu_462_p2 = (indvar_flatten_fu_114 + 10'd1);

assign add_ln76_fu_357_p2 = (select_ln75_fu_257_p3 + 2'd1);

assign and_ln75_fu_351_p2 = (xor_ln75_fu_339_p2 & exitcond6205_fu_345_p2);

assign and_ln76_fu_429_p2 = (xor_ln76_fu_423_p2 & ap_phi_mux_first_iter_0_phi_fu_170_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_i2_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_i2_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((m_axi_i2_RVALID == 1'b0) & (icmp_ln75_reg_566_pp0_iter9_reg == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_i2_ARREADY == 1'b0) & (ap_predicate_op97_readreq_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op97_readreq_state3 = ((or_ln76_2_reg_579 == 1'd1) & (or_ln76_reg_575 == 1'd1));
end

assign empty_205_fu_456_p2 = (select_ln76_fu_375_p3 + 8'd1);

assign empty_207_fu_295_p2 = (tmp_144_cast_fu_291_p1 - select_ln75_1_cast_fu_279_p1);

assign empty_208_fu_395_p2 = ($signed(sext_ln75_2_fu_301_p1) + $signed(select_ln76_1_cast_fu_391_p1));

assign empty_209_fu_405_p1 = empty_208_fu_395_p2[7:0];

assign empty_210_fu_417_p2 = ($signed(p_shl_fu_409_p3) - $signed(p_cast1_fu_401_p1));

assign empty_211_fu_445_p2 = (empty_210_fu_417_p2 + select_ln76_cast_fu_441_p1);

assign exitcond6205_fu_345_p2 = ((loop_index_i_fu_106 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_224_p2 = ((indvar_flatten17_fu_122 == 16'd48960) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_251_p2 = ((indvar_flatten_fu_114 == 10'd765) ? 1'b1 : 1'b0);

assign input_fm_buffer_address1 = input_fm_buffer_addr_reg_584_pp0_iter10_reg;

assign input_fm_buffer_d1 = i2_addr_1_read_reg_599;

assign m_axi_i2_ARADDR = sext_ln75_1_fu_501_p1;

assign m_axi_i2_ARBURST = 2'd0;

assign m_axi_i2_ARCACHE = 4'd0;

assign m_axi_i2_ARID = 1'd0;

assign m_axi_i2_ARLEN = 32'd765;

assign m_axi_i2_ARLOCK = 2'd0;

assign m_axi_i2_ARPROT = 3'd0;

assign m_axi_i2_ARQOS = 4'd0;

assign m_axi_i2_ARREGION = 4'd0;

assign m_axi_i2_ARSIZE = 3'd0;

assign m_axi_i2_ARUSER = 1'd0;

assign m_axi_i2_AWADDR = 64'd0;

assign m_axi_i2_AWBURST = 2'd0;

assign m_axi_i2_AWCACHE = 4'd0;

assign m_axi_i2_AWID = 1'd0;

assign m_axi_i2_AWLEN = 32'd0;

assign m_axi_i2_AWLOCK = 2'd0;

assign m_axi_i2_AWPROT = 3'd0;

assign m_axi_i2_AWQOS = 4'd0;

assign m_axi_i2_AWREGION = 4'd0;

assign m_axi_i2_AWSIZE = 3'd0;

assign m_axi_i2_AWUSER = 1'd0;

assign m_axi_i2_AWVALID = 1'b0;

assign m_axi_i2_BREADY = 1'b0;

assign m_axi_i2_WDATA = 32'd0;

assign m_axi_i2_WID = 1'd0;

assign m_axi_i2_WLAST = 1'b0;

assign m_axi_i2_WSTRB = 4'd0;

assign m_axi_i2_WUSER = 1'd0;

assign m_axi_i2_WVALID = 1'b0;

assign mul_ln75_fu_309_p0 = mul_ln75_fu_309_p00;

assign mul_ln75_fu_309_p00 = select_ln75_1_fu_271_p3;

assign mul_ln75_fu_309_p1 = 25'd260100;

assign or_ln75_fu_265_p2 = (icmp_ln76_fu_251_p2 | ap_phi_mux_first_iter_01_phi_fu_181_p4);

assign or_ln76_1_fu_369_p2 = (icmp_ln76_fu_251_p2 | and_ln75_fu_351_p2);

assign or_ln76_2_fu_435_p2 = (icmp_ln76_fu_251_p2 | and_ln76_fu_429_p2);

assign or_ln76_fu_363_p2 = (or_ln75_fu_265_p2 | and_ln75_fu_351_p2);

assign p_cast1_fu_401_p1 = empty_208_fu_395_p2;

assign p_cast4_fu_451_p1 = empty_211_fu_445_p2;

assign p_shl_fu_409_p3 = {{empty_209_fu_405_p1}, {8'd0}};

assign select_ln75_1_cast_fu_279_p1 = select_ln75_1_fu_271_p3;

assign select_ln75_1_fu_271_p3 = ((icmp_ln76_fu_251_p2[0:0] == 1'b1) ? add_ln75_fu_245_p2 : bin_fu_118);

assign select_ln75_fu_257_p3 = ((icmp_ln76_fu_251_p2[0:0] == 1'b1) ? 2'd0 : bh_fu_110);

assign select_ln76_1_cast_fu_391_p1 = select_ln76_1_fu_383_p3;

assign select_ln76_1_fu_383_p3 = ((and_ln75_fu_351_p2[0:0] == 1'b1) ? add_ln76_fu_357_p2 : select_ln75_fu_257_p3);

assign select_ln76_2_fu_468_p3 = ((icmp_ln76_fu_251_p2[0:0] == 1'b1) ? 10'd1 : add_ln76_1_fu_462_p2);

assign select_ln76_cast_fu_441_p1 = select_ln76_fu_375_p3;

assign select_ln76_fu_375_p3 = ((or_ln76_1_fu_369_p2[0:0] == 1'b1) ? 8'd0 : loop_index_i_fu_106);

assign sext_ln75_1_fu_501_p1 = $signed(sext_ln76_mid2_v_reg_570);

assign sext_ln75_2_fu_301_p1 = $signed(empty_207_fu_295_p2);

assign sext_ln75_cast_fu_189_p1 = $signed(sext_ln75);

assign tmp_144_cast_fu_291_p1 = tmp_s_fu_283_p3;

assign tmp_s_fu_283_p3 = {{select_ln75_1_fu_271_p3}, {2'd0}};

assign xor_ln75_fu_339_p2 = (icmp_ln76_fu_251_p2 ^ 1'd1);

assign xor_ln76_fu_423_p2 = (exitcond6205_fu_345_p2 ^ 1'd1);

assign zext_ln75_1_fu_315_p1 = mul_ln75_fu_309_p2;

endmodule //srcnn_conv2_Pipeline_LOAD_INPUT_BH_L
