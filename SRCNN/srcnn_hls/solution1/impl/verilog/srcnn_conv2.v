// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_ftmap,
        conv2_weights,
        conv2_biases,
        output_ftmap
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_ftmap;
input  [63:0] conv2_weights;
input  [63:0] conv2_biases;
input  [63:0] output_ftmap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg[31:0] m_axi_gmem_ARLEN;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] input_fm_buffer_1_address0;
reg    input_fm_buffer_1_ce0;
reg    input_fm_buffer_1_we0;
reg   [31:0] input_fm_buffer_1_d0;
wire  signed [31:0] input_fm_buffer_1_q0;
reg   [13:0] output_fm_buffer_address0;
reg    output_fm_buffer_ce0;
reg    output_fm_buffer_we0;
reg   [31:0] output_fm_buffer_d0;
wire   [31:0] output_fm_buffer_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
reg   [0:0] icmp_ln50_reg_1582;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state41;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state44;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state47;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state52;
wire   [1:0] empty_fu_539_p1;
reg   [1:0] empty_reg_1430;
wire   [3:0] add_ln32_fu_557_p2;
reg   [3:0] add_ln32_reg_1438;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_4_fu_563_p3;
reg   [7:0] tmp_4_reg_1443;
wire   [0:0] icmp_ln32_fu_551_p2;
wire   [3:0] add_ln33_fu_577_p2;
reg   [3:0] add_ln33_reg_1452;
wire    ap_CS_fsm_state3;
wire   [14:0] empty_90_fu_593_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln109_fu_614_p1;
reg   [63:0] zext_ln109_reg_1465;
wire   [0:0] exitcond5_fu_587_p2;
wire   [63:0] tmp_fu_618_p2;
reg   [63:0] tmp_reg_1470;
wire   [24:0] zext_ln109_1_fu_623_p1;
reg   [24:0] zext_ln109_1_reg_1475;
wire    ap_CS_fsm_state5;
wire   [23:0] add_ln109_1_fu_627_p2;
reg   [23:0] add_ln109_1_reg_1480;
wire   [11:0] add_ln118_fu_649_p2;
reg   [11:0] add_ln118_reg_1485;
wire   [6:0] add_ln109_fu_661_p2;
reg   [6:0] add_ln109_reg_1493;
wire   [14:0] add_ln118_2_fu_692_p2;
reg   [14:0] add_ln118_2_reg_1498;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln110_fu_708_p2;
reg   [4:0] add_ln110_reg_1506;
reg   [63:0] gmem_addr_7_reg_1511;
wire   [0:0] icmp_ln110_fu_702_p2;
reg   [14:0] input_fm_buffer_1_addr_1_reg_1517;
wire    ap_CS_fsm_state15;
wire   [4:0] add_ln111_fu_807_p2;
reg   [4:0] add_ln111_reg_1525;
reg   [31:0] gmem_addr_7_read_reg_1530;
wire   [10:0] empty_95_fu_829_p2;
reg   [10:0] empty_95_reg_1535;
wire    ap_CS_fsm_state18;
wire   [5:0] add_ln47_fu_841_p2;
reg   [5:0] add_ln47_reg_1543;
reg   [63:0] gmem_addr_reg_1548;
wire   [0:0] icmp_ln47_fu_835_p2;
wire   [63:0] tmp2_fu_888_p2;
reg   [63:0] tmp2_reg_1554;
wire   [11:0] ty_cast58_fu_893_p1;
reg   [11:0] ty_cast58_reg_1559;
wire    ap_CS_fsm_state19;
wire   [13:0] empty_98_fu_922_p2;
reg   [13:0] empty_98_reg_1564;
wire   [4:0] add_ln49_1_fu_934_p2;
reg   [4:0] add_ln49_1_reg_1572;
reg   [13:0] output_fm_buffer_addr_1_reg_1577;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln50_fu_954_p2;
wire   [4:0] add_ln50_fu_960_p2;
reg   [4:0] add_ln50_reg_1586;
wire   [14:0] tx_3_cast59_fu_966_p1;
reg   [14:0] tx_3_cast59_reg_1591;
wire    ap_CS_fsm_state28;
reg   [14:0] input_fm_buffer_1_addr_2_reg_1601;
wire    ap_CS_fsm_state29;
wire   [6:0] add_ln62_fu_1035_p2;
reg   [6:0] add_ln62_reg_1609;
wire   [17:0] trunc_ln65_2_fu_1041_p1;
reg  signed [17:0] trunc_ln65_2_reg_1614;
wire    ap_CS_fsm_state31;
wire   [23:0] zext_ln131_fu_1078_p1;
reg   [23:0] zext_ln131_reg_1624;
wire    ap_CS_fsm_state32;
wire   [22:0] add_ln131_2_fu_1082_p2;
reg   [22:0] add_ln131_2_reg_1629;
wire   [10:0] add_ln135_1_fu_1104_p2;
reg   [10:0] add_ln135_1_reg_1634;
wire   [5:0] add_ln131_fu_1116_p2;
reg   [5:0] add_ln131_reg_1642;
reg   [63:0] gmem_addr_8_reg_1647;
wire   [0:0] icmp_ln131_fu_1110_p2;
wire   [1:0] empty_105_fu_1169_p2;
reg   [1:0] empty_105_reg_1653;
reg   [31:0] gmem_addr_8_read_reg_1658;
wire  signed [30:0] shl_ln3_fu_1194_p3;
reg  signed [30:0] shl_ln3_reg_1663;
wire    ap_CS_fsm_state42;
wire  signed [31:0] shl_ln135_cast_fu_1202_p1;
reg  signed [31:0] shl_ln135_cast_reg_1668;
wire   [13:0] add_ln135_3_fu_1231_p2;
reg   [13:0] add_ln135_3_reg_1673;
wire    ap_CS_fsm_state43;
wire   [4:0] add_ln132_fu_1247_p2;
reg   [4:0] add_ln132_reg_1681;
reg   [63:0] gmem_addr_9_reg_1686;
wire   [0:0] icmp_ln132_fu_1241_p2;
wire    ap_CS_fsm_state45;
wire   [4:0] add_ln133_fu_1346_p2;
reg   [4:0] add_ln133_reg_1700;
wire   [30:0] select_ln136_fu_1374_p3;
reg   [30:0] select_ln136_reg_1705;
wire    ap_CS_fsm_state46;
wire   [13:0] empty_113_fu_1392_p2;
wire    ap_CS_fsm_state53;
reg   [3:0] ti_reg_333;
wire   [0:0] exitcond5416_fu_1386_p2;
reg   [14:0] empty_89_reg_345;
wire   [0:0] icmp_ln33_fu_571_p2;
reg   [6:0] nin_reg_356;
reg   [63:0] p_lcssa_phi_reg_367;
reg   [23:0] phi_mul_reg_379;
reg   [4:0] by_reg_390;
wire   [0:0] icmp_ln111_fu_801_p2;
wire   [0:0] icmp_ln109_fu_655_p2;
reg   [63:0] p_phi_reg_401;
reg   [4:0] bx_reg_413;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state14;
reg   [5:0] nout_reg_424;
wire   [0:0] icmp_ln49_fu_928_p2;
reg   [4:0] ty_reg_435;
reg    ap_block_state21_io;
reg   [4:0] tx_3_reg_446;
wire   [0:0] icmp_ln62_fu_1029_p2;
reg   [6:0] nin_2_reg_458;
reg   [31:0] empty_101_reg_469;
reg   [5:0] nout_1_reg_480;
reg   [22:0] phi_mul56_reg_491;
reg   [4:0] ty_2_reg_502;
reg   [4:0] tx_reg_513;
reg   [13:0] empty_112_reg_524;
wire   [63:0] p_cast60_fu_599_p1;
wire   [63:0] zext_ln118_5_fu_796_p1;
wire   [63:0] p_cast71_fu_949_p1;
wire   [63:0] zext_ln65_3_fu_1024_p1;
wire   [63:0] zext_ln135_5_fu_1335_p1;
wire   [63:0] p_cast72_fu_1398_p1;
wire  signed [63:0] sext_ln111_fu_777_p1;
wire  signed [63:0] sext_ln62_fu_878_p1;
wire  signed [63:0] p_cast9_cast_fu_1159_p1;
wire  signed [63:0] sext_ln133_fu_1316_p1;
reg   [3:0] tj_fu_196;
wire    ap_CS_fsm_state27;
wire   [9:0] tmp_5_fu_604_p4;
wire   [10:0] tmp_6_fu_637_p3;
wire   [11:0] zext_ln118_1_fu_645_p1;
wire   [11:0] zext_ln118_fu_633_p1;
wire   [11:0] zext_ln118_2_fu_667_p1;
wire   [11:0] add_ln118_1_fu_671_p2;
wire   [10:0] trunc_ln118_fu_680_p1;
wire   [14:0] p_shl1_fu_684_p3;
wire   [14:0] zext_ln118_3_fu_676_p1;
wire   [7:0] zext_ln110_fu_698_p1;
wire   [7:0] empty_91_fu_714_p2;
wire   [17:0] p_shl3_fu_719_p3;
wire   [9:0] p_shl4_fu_731_p3;
wire   [18:0] p_shl3_cast_fu_727_p1;
wire   [18:0] p_shl4_cast_fu_739_p1;
wire   [18:0] empty_92_fu_743_p2;
wire  signed [24:0] p_cast7_fu_749_p1;
wire   [24:0] tmp1_fu_753_p2;
wire  signed [63:0] tmp1_cast_fu_758_p1;
wire   [63:0] empty_93_fu_762_p2;
wire   [61:0] trunc_ln7_fu_767_p4;
wire   [14:0] zext_ln118_4_fu_787_p1;
wire   [14:0] add_ln118_3_fu_791_p2;
wire   [9:0] tmp_7_fu_817_p3;
wire   [10:0] tmp_7_cast_fu_825_p1;
wire   [10:0] nout_cast_fu_813_p1;
wire   [4:0] trunc_ln49_fu_847_p1;
wire   [12:0] shl_ln_fu_851_p3;
wire   [63:0] zext_ln49_fu_859_p1;
wire   [63:0] add_ln49_fu_863_p2;
wire   [61:0] trunc_ln_fu_868_p4;
wire   [10:0] ty_cast_fu_897_p1;
wire   [10:0] empty_96_fu_901_p2;
wire   [9:0] empty_97_fu_910_p1;
wire   [13:0] p_shl7_fu_914_p3;
wire   [13:0] p_cast_fu_906_p1;
wire   [13:0] tx_3_cast_fu_940_p1;
wire   [13:0] empty_99_fu_944_p2;
wire   [10:0] tmp_2_fu_974_p3;
wire   [11:0] zext_ln65_1_fu_982_p1;
wire   [11:0] zext_ln65_fu_970_p1;
wire   [11:0] add_ln65_1_fu_986_p2;
wire   [11:0] add_ln65_2_fu_992_p2;
wire   [10:0] trunc_ln65_fu_1001_p1;
wire   [14:0] p_shl8_fu_1005_p3;
wire   [14:0] zext_ln65_2_fu_997_p1;
wire   [14:0] add_ln65_3_fu_1013_p2;
wire   [14:0] add_ln65_4_fu_1019_p2;
wire   [48:0] shl_ln4_fu_1054_p3;
wire   [48:0] mul_ln65_fu_535_p2;
wire   [48:0] add_ln65_fu_1062_p2;
wire   [9:0] tmp_s_fu_1092_p3;
wire   [10:0] zext_ln135_1_fu_1100_p1;
wire   [10:0] zext_ln135_fu_1088_p1;
wire   [5:0] empty_102_fu_1122_p2;
wire   [0:0] empty_103_fu_1132_p1;
wire   [63:0] p_cast25_fu_1128_p1;
wire   [63:0] empty_104_fu_1144_p2;
wire   [61:0] p_cast9_fu_1149_p4;
wire   [1:0] p_cast8_fu_1136_p3;
wire   [4:0] tmp_1_fu_1174_p3;
wire   [31:0] p_cast26_fu_1181_p1;
wire   [31:0] empty_106_fu_1185_p2;
wire   [9:0] trunc_ln135_fu_1190_p1;
wire   [10:0] zext_ln135_2_fu_1206_p1;
wire   [10:0] add_ln135_2_fu_1210_p2;
wire   [9:0] trunc_ln135_1_fu_1219_p1;
wire   [13:0] p_shl_fu_1223_p3;
wire   [13:0] zext_ln135_3_fu_1215_p1;
wire   [7:0] zext_ln132_fu_1237_p1;
wire   [7:0] empty_107_fu_1253_p2;
wire   [17:0] p_shl5_fu_1258_p3;
wire   [9:0] p_shl6_fu_1270_p3;
wire   [18:0] p_shl5_cast_fu_1266_p1;
wire   [18:0] p_shl6_cast_fu_1278_p1;
wire   [18:0] empty_108_fu_1282_p2;
wire  signed [23:0] p_cast15_fu_1288_p1;
wire   [23:0] tmp3_fu_1292_p2;
wire  signed [63:0] tmp3_cast_fu_1297_p1;
wire   [63:0] empty_109_fu_1301_p2;
wire   [61:0] trunc_ln8_fu_1306_p4;
wire   [13:0] zext_ln135_4_fu_1326_p1;
wire   [13:0] add_ln135_4_fu_1330_p2;
wire   [30:0] trunc_ln135_2_fu_1352_p1;
wire   [31:0] add_ln135_fu_1356_p2;
wire   [0:0] tmp_8_fu_1366_p3;
wire   [30:0] add_ln136_fu_1361_p2;
wire   [0:0] icmp_ln133_fu_1340_p2;
reg   [52:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
end

srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 18496 ),
    .AddressWidth( 15 ))
input_fm_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_1_address0),
    .ce0(input_fm_buffer_1_ce0),
    .we0(input_fm_buffer_1_we0),
    .d0(input_fm_buffer_1_d0),
    .q0(input_fm_buffer_1_q0)
);

srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 9248 ),
    .AddressWidth( 14 ))
output_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_address0),
    .ce0(output_fm_buffer_ce0),
    .we0(output_fm_buffer_we0),
    .d0(output_fm_buffer_d0),
    .q0(output_fm_buffer_q0)
);

srcnn_mul_32s_18s_49_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 49 ))
mul_32s_18s_49_1_1_U12(
    .din0(input_fm_buffer_1_q0),
    .din1(trunc_ln65_2_reg_1614),
    .dout(mul_ln65_fu_535_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bx_reg_413 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bx_reg_413 <= add_ln111_reg_1525;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        by_reg_390 <= 5'd0;
    end else if (((icmp_ln111_fu_801_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        by_reg_390 <= add_ln110_reg_1506;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        empty_101_reg_469 <= {{add_ln65_fu_1062_p2[48:17]}};
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        empty_101_reg_469 <= output_fm_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_1110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        empty_112_reg_524 <= 14'd0;
    end else if (((exitcond5416_fu_1386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        empty_112_reg_524 <= empty_113_fu_1392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_89_reg_345 <= empty_90_fu_593_p2;
    end else if (((icmp_ln33_fu_571_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_89_reg_345 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        nin_2_reg_458 <= add_ln62_reg_1609;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        nin_2_reg_458 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nin_reg_356 <= 7'd0;
    end else if (((icmp_ln110_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nin_reg_356 <= add_ln109_reg_1493;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        nout_1_reg_480 <= 6'd0;
    end else if (((icmp_ln132_fu_1241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        nout_1_reg_480 <= add_ln131_reg_1642;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nout_reg_424 <= 6'd0;
    end else if (((icmp_ln49_fu_928_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        nout_reg_424 <= add_ln47_reg_1543;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_phi_reg_401 <= p_lcssa_phi_reg_367;
    end else if (((icmp_ln111_fu_801_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        p_phi_reg_401 <= zext_ln109_reg_1465;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        phi_mul56_reg_491 <= 23'd0;
    end else if (((icmp_ln132_fu_1241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        phi_mul56_reg_491 <= add_ln131_2_reg_1629;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_379 <= 24'd0;
    end else if (((icmp_ln110_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_379 <= add_ln109_1_reg_1480;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5416_fu_1386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        ti_reg_333 <= add_ln33_reg_1452;
    end else if (((icmp_ln32_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ti_reg_333 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_196 <= 4'd0;
    end else if (((icmp_ln33_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_196 <= add_ln32_reg_1438;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_928_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tx_3_reg_446 <= 5'd0;
    end else if (((icmp_ln62_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        tx_3_reg_446 <= add_ln50_reg_1586;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        tx_reg_513 <= 5'd0;
    end else if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        tx_reg_513 <= add_ln133_reg_1700;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ty_2_reg_502 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1))) begin
        ty_2_reg_502 <= add_ln132_reg_1681;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_835_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        ty_reg_435 <= 5'd0;
    end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd1))) begin
        ty_reg_435 <= add_ln49_1_reg_1572;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln109_1_reg_1480 <= add_ln109_1_fu_627_p2;
        add_ln109_reg_1493 <= add_ln109_fu_661_p2;
        add_ln118_reg_1485 <= add_ln118_fu_649_p2;
        zext_ln109_1_reg_1475[23 : 0] <= zext_ln109_1_fu_623_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln110_reg_1506 <= add_ln110_fu_708_p2;
        add_ln118_2_reg_1498 <= add_ln118_2_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln111_reg_1525 <= add_ln111_fu_807_p2;
        input_fm_buffer_1_addr_1_reg_1517 <= zext_ln118_5_fu_796_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln131_2_reg_1629 <= add_ln131_2_fu_1082_p2;
        add_ln131_reg_1642 <= add_ln131_fu_1116_p2;
        add_ln135_1_reg_1634 <= add_ln135_1_fu_1104_p2;
        zext_ln131_reg_1624[22 : 0] <= zext_ln131_fu_1078_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln132_reg_1681 <= add_ln132_fu_1247_p2;
        add_ln135_3_reg_1673 <= add_ln135_3_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln133_reg_1700 <= add_ln133_fu_1346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln32_reg_1438 <= add_ln32_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln33_reg_1452 <= add_ln33_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln47_reg_1543 <= add_ln47_fu_841_p2;
        empty_95_reg_1535 <= empty_95_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln49_1_reg_1572 <= add_ln49_1_fu_934_p2;
        empty_98_reg_1564 <= empty_98_fu_922_p2;
        ty_cast58_reg_1559[4 : 0] <= ty_cast58_fu_893_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln50_reg_1586 <= add_ln50_fu_960_p2;
        icmp_ln50_reg_1582 <= icmp_ln50_fu_954_p2;
        output_fm_buffer_addr_1_reg_1577 <= p_cast71_fu_949_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln62_reg_1609 <= add_ln62_fu_1035_p2;
        input_fm_buffer_1_addr_2_reg_1601 <= zext_ln65_3_fu_1024_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_1110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        empty_105_reg_1653 <= empty_105_fu_1169_p2;
        gmem_addr_8_reg_1647 <= p_cast9_cast_fu_1159_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_1430 <= empty_fu_539_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_7_read_reg_1530 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_702_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_addr_7_reg_1511 <= sext_ln111_fu_777_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        gmem_addr_8_read_reg_1658 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_1241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_addr_9_reg_1686 <= sext_ln133_fu_1316_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_835_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        gmem_addr_reg_1548 <= sext_ln62_fu_878_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_lcssa_phi_reg_367 <= p_phi_reg_401;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        select_ln136_reg_1705 <= select_ln136_fu_1374_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        shl_ln135_cast_reg_1668[31 : 21] <= shl_ln135_cast_fu_1202_p1[31 : 21];
        shl_ln3_reg_1663[30 : 21] <= shl_ln3_fu_1194_p3[30 : 21];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp2_reg_1554 <= tmp2_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_1443 <= tmp_4_fu_563_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_reg_1470 <= tmp_fu_618_p2;
        zext_ln109_reg_1465[9 : 2] <= zext_ln109_fu_614_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        trunc_ln65_2_reg_1614 <= trunc_ln65_2_fu_1041_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tx_3_cast59_reg_1591[4 : 0] <= tx_3_cast59_fu_966_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state21_io)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_2_reg_1601;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_1_address0 = input_fm_buffer_1_addr_1_reg_1517;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_1_address0 = p_cast60_fu_599_p1;
    end else begin
        input_fm_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1)))) begin
        input_fm_buffer_1_ce0 = 1'b1;
    end else begin
        input_fm_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_fm_buffer_1_d0 = gmem_addr_7_read_reg_1530;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_1_d0 = 32'd0;
    end else begin
        input_fm_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond5_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_1_we0 = 1'b1;
    end else begin
        input_fm_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        m_axi_gmem_ARADDR = gmem_addr_8_reg_1647;
    end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1548;
    end else if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_gmem_ARADDR = gmem_addr_7_reg_1511;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        m_axi_gmem_ARLEN = 32'd1;
    end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd0))) begin
        m_axi_gmem_ARLEN = 32'd64;
    end else if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_gmem_ARLEN = 32'd17;
    end else begin
        m_axi_gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd0)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        output_fm_buffer_address0 = p_cast72_fu_1398_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        output_fm_buffer_address0 = zext_ln135_5_fu_1335_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29))) begin
        output_fm_buffer_address0 = output_fm_buffer_addr_1_reg_1577;
    end else begin
        output_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state29))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        output_fm_buffer_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_fm_buffer_d0 = empty_101_reg_469;
    end else begin
        output_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond5416_fu_1386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln62_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)))) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln33_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond5_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln109_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln110_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln111_fu_801_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln47_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln49_fu_928_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln50_reg_1582 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln62_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln131_fu_1110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln132_fu_1241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln133_fu_1340_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((exitcond5416_fu_1386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_1_fu_627_p2 = (phi_mul_reg_379 + 24'd260100);

assign add_ln109_fu_661_p2 = (nin_reg_356 + 7'd1);

assign add_ln110_fu_708_p2 = (by_reg_390 + 5'd1);

assign add_ln111_fu_807_p2 = (bx_reg_413 + 5'd1);

assign add_ln118_1_fu_671_p2 = (add_ln118_reg_1485 + zext_ln118_2_fu_667_p1);

assign add_ln118_2_fu_692_p2 = (p_shl1_fu_684_p3 + zext_ln118_3_fu_676_p1);

assign add_ln118_3_fu_791_p2 = (add_ln118_2_reg_1498 + zext_ln118_4_fu_787_p1);

assign add_ln118_fu_649_p2 = (zext_ln118_1_fu_645_p1 + zext_ln118_fu_633_p1);

assign add_ln131_2_fu_1082_p2 = (phi_mul56_reg_491 + 23'd260100);

assign add_ln131_fu_1116_p2 = (nout_1_reg_480 + 6'd1);

assign add_ln132_fu_1247_p2 = (ty_2_reg_502 + 5'd1);

assign add_ln133_fu_1346_p2 = (tx_reg_513 + 5'd1);

assign add_ln135_1_fu_1104_p2 = (zext_ln135_1_fu_1100_p1 + zext_ln135_fu_1088_p1);

assign add_ln135_2_fu_1210_p2 = (add_ln135_1_reg_1634 + zext_ln135_2_fu_1206_p1);

assign add_ln135_3_fu_1231_p2 = (p_shl_fu_1223_p3 + zext_ln135_3_fu_1215_p1);

assign add_ln135_4_fu_1330_p2 = (add_ln135_3_reg_1673 + zext_ln135_4_fu_1326_p1);

assign add_ln135_fu_1356_p2 = ($signed(output_fm_buffer_q0) + $signed(shl_ln135_cast_reg_1668));

assign add_ln136_fu_1361_p2 = ($signed(trunc_ln135_2_fu_1352_p1) + $signed(shl_ln3_reg_1663));

assign add_ln32_fu_557_p2 = (tj_fu_196 + 4'd1);

assign add_ln33_fu_577_p2 = (ti_reg_333 + 4'd1);

assign add_ln47_fu_841_p2 = (nout_reg_424 + 6'd1);

assign add_ln49_1_fu_934_p2 = (ty_reg_435 + 5'd1);

assign add_ln49_fu_863_p2 = (zext_ln49_fu_859_p1 + conv2_weights);

assign add_ln50_fu_960_p2 = (tx_3_reg_446 + 5'd1);

assign add_ln62_fu_1035_p2 = (nin_2_reg_458 + 7'd1);

assign add_ln65_1_fu_986_p2 = (zext_ln65_1_fu_982_p1 + zext_ln65_fu_970_p1);

assign add_ln65_2_fu_992_p2 = (add_ln65_1_fu_986_p2 + ty_cast58_reg_1559);

assign add_ln65_3_fu_1013_p2 = (p_shl8_fu_1005_p3 + zext_ln65_2_fu_997_p1);

assign add_ln65_4_fu_1019_p2 = (add_ln65_3_fu_1013_p2 + tx_3_cast59_reg_1591);

assign add_ln65_fu_1062_p2 = (shl_ln4_fu_1054_p3 + mul_ln65_fu_535_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state21_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln50_reg_1582 == 1'd0));
end

assign empty_102_fu_1122_p2 = nout_1_reg_480 << 6'd1;

assign empty_103_fu_1132_p1 = nout_1_reg_480[0:0];

assign empty_104_fu_1144_p2 = (p_cast25_fu_1128_p1 + conv2_biases);

assign empty_105_fu_1169_p2 = (p_cast8_fu_1136_p3 + empty_reg_1430);

assign empty_106_fu_1185_p2 = gmem_addr_8_read_reg_1658 >> p_cast26_fu_1181_p1;

assign empty_107_fu_1253_p2 = (zext_ln132_fu_1237_p1 + tmp_4_reg_1443);

assign empty_108_fu_1282_p2 = (p_shl5_cast_fu_1266_p1 - p_shl6_cast_fu_1278_p1);

assign empty_109_fu_1301_p2 = ($signed(tmp3_cast_fu_1297_p1) + $signed(tmp2_reg_1554));

assign empty_113_fu_1392_p2 = (empty_112_reg_524 + 14'd1);

assign empty_90_fu_593_p2 = (empty_89_reg_345 + 15'd1);

assign empty_91_fu_714_p2 = (zext_ln110_fu_698_p1 + tmp_4_reg_1443);

assign empty_92_fu_743_p2 = (p_shl3_cast_fu_727_p1 - p_shl4_cast_fu_739_p1);

assign empty_93_fu_762_p2 = ($signed(tmp1_cast_fu_758_p1) + $signed(tmp_reg_1470));

assign empty_95_fu_829_p2 = (tmp_7_cast_fu_825_p1 + nout_cast_fu_813_p1);

assign empty_96_fu_901_p2 = (empty_95_reg_1535 + ty_cast_fu_897_p1);

assign empty_97_fu_910_p1 = empty_96_fu_901_p2[9:0];

assign empty_98_fu_922_p2 = (p_shl7_fu_914_p3 + p_cast_fu_906_p1);

assign empty_99_fu_944_p2 = (empty_98_reg_1564 + tx_3_cast_fu_940_p1);

assign empty_fu_539_p1 = conv2_biases[1:0];

assign exitcond5416_fu_1386_p2 = ((empty_112_reg_524 == 14'd9248) ? 1'b1 : 1'b0);

assign exitcond5_fu_587_p2 = ((empty_89_reg_345 == 15'd18496) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_655_p2 = ((nin_reg_356 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_702_p2 = ((by_reg_390 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_801_p2 = ((bx_reg_413 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_1110_p2 = ((nout_1_reg_480 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_1241_p2 = ((ty_2_reg_502 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_1340_p2 = ((tx_reg_513 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_551_p2 = ((tj_fu_196 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_571_p2 = ((ti_reg_333 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_835_p2 = ((nout_reg_424 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_928_p2 = ((ty_reg_435 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_954_p2 = ((tx_3_reg_446 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1029_p2 = ((nin_2_reg_458 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_9_reg_1686;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd17;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln136_reg_1705;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign nout_cast_fu_813_p1 = nout_reg_424;

assign p_cast15_fu_1288_p1 = $signed(empty_108_fu_1282_p2);

assign p_cast25_fu_1128_p1 = empty_102_fu_1122_p2;

assign p_cast26_fu_1181_p1 = tmp_1_fu_1174_p3;

assign p_cast60_fu_599_p1 = empty_89_reg_345;

assign p_cast71_fu_949_p1 = empty_99_fu_944_p2;

assign p_cast72_fu_1398_p1 = empty_112_reg_524;

assign p_cast7_fu_749_p1 = $signed(empty_92_fu_743_p2);

assign p_cast8_fu_1136_p3 = {{empty_103_fu_1132_p1}, {1'd0}};

assign p_cast9_cast_fu_1159_p1 = $signed(p_cast9_fu_1149_p4);

assign p_cast9_fu_1149_p4 = {{empty_104_fu_1144_p2[63:2]}};

assign p_cast_fu_906_p1 = empty_96_fu_901_p2;

assign p_shl1_fu_684_p3 = {{trunc_ln118_fu_680_p1}, {4'd0}};

assign p_shl3_cast_fu_727_p1 = p_shl3_fu_719_p3;

assign p_shl3_fu_719_p3 = {{empty_91_fu_714_p2}, {10'd0}};

assign p_shl4_cast_fu_739_p1 = p_shl4_fu_731_p3;

assign p_shl4_fu_731_p3 = {{empty_91_fu_714_p2}, {2'd0}};

assign p_shl5_cast_fu_1266_p1 = p_shl5_fu_1258_p3;

assign p_shl5_fu_1258_p3 = {{empty_107_fu_1253_p2}, {10'd0}};

assign p_shl6_cast_fu_1278_p1 = p_shl6_fu_1270_p3;

assign p_shl6_fu_1270_p3 = {{empty_107_fu_1253_p2}, {2'd0}};

assign p_shl7_fu_914_p3 = {{empty_97_fu_910_p1}, {4'd0}};

assign p_shl8_fu_1005_p3 = {{trunc_ln65_fu_1001_p1}, {4'd0}};

assign p_shl_fu_1223_p3 = {{trunc_ln135_1_fu_1219_p1}, {4'd0}};

assign select_ln136_fu_1374_p3 = ((tmp_8_fu_1366_p3[0:0] == 1'b1) ? 31'd0 : add_ln136_fu_1361_p2);

assign sext_ln111_fu_777_p1 = $signed(trunc_ln7_fu_767_p4);

assign sext_ln133_fu_1316_p1 = $signed(trunc_ln8_fu_1306_p4);

assign sext_ln62_fu_878_p1 = $signed(trunc_ln_fu_868_p4);

assign shl_ln135_cast_fu_1202_p1 = shl_ln3_fu_1194_p3;

assign shl_ln3_fu_1194_p3 = {{trunc_ln135_fu_1190_p1}, {21'd0}};

assign shl_ln4_fu_1054_p3 = {{empty_101_reg_469}, {17'd0}};

assign shl_ln_fu_851_p3 = {{trunc_ln49_fu_847_p1}, {8'd0}};

assign tmp1_cast_fu_758_p1 = $signed(tmp1_fu_753_p2);

assign tmp1_fu_753_p2 = ($signed(zext_ln109_1_reg_1475) + $signed(p_cast7_fu_749_p1));

assign tmp2_fu_888_p2 = (p_lcssa_phi_reg_367 + output_ftmap);

assign tmp3_cast_fu_1297_p1 = $signed(tmp3_fu_1292_p2);

assign tmp3_fu_1292_p2 = ($signed(zext_ln131_reg_1624) + $signed(p_cast15_fu_1288_p1));

assign tmp_1_fu_1174_p3 = {{empty_105_reg_1653}, {3'd0}};

assign tmp_2_fu_974_p3 = {{nin_2_reg_458}, {4'd0}};

assign tmp_4_fu_563_p3 = {{tj_fu_196}, {tj_fu_196}};

assign tmp_5_fu_604_p4 = {{{ti_reg_333}, {ti_reg_333}}, {2'd0}};

assign tmp_6_fu_637_p3 = {{nin_reg_356}, {4'd0}};

assign tmp_7_cast_fu_825_p1 = tmp_7_fu_817_p3;

assign tmp_7_fu_817_p3 = {{nout_reg_424}, {4'd0}};

assign tmp_8_fu_1366_p3 = add_ln135_fu_1356_p2[32'd31];

assign tmp_fu_618_p2 = (zext_ln109_fu_614_p1 + input_ftmap);

assign tmp_s_fu_1092_p3 = {{nout_1_reg_480}, {4'd0}};

assign trunc_ln118_fu_680_p1 = add_ln118_1_fu_671_p2[10:0];

assign trunc_ln135_1_fu_1219_p1 = add_ln135_2_fu_1210_p2[9:0];

assign trunc_ln135_2_fu_1352_p1 = output_fm_buffer_q0[30:0];

assign trunc_ln135_fu_1190_p1 = empty_106_fu_1185_p2[9:0];

assign trunc_ln49_fu_847_p1 = nout_reg_424[4:0];

assign trunc_ln65_2_fu_1041_p1 = m_axi_gmem_RDATA[17:0];

assign trunc_ln65_fu_1001_p1 = add_ln65_2_fu_992_p2[10:0];

assign trunc_ln7_fu_767_p4 = {{empty_93_fu_762_p2[63:2]}};

assign trunc_ln8_fu_1306_p4 = {{empty_109_fu_1301_p2[63:2]}};

assign trunc_ln_fu_868_p4 = {{add_ln49_fu_863_p2[63:2]}};

assign tx_3_cast59_fu_966_p1 = tx_3_reg_446;

assign tx_3_cast_fu_940_p1 = tx_3_reg_446;

assign ty_cast58_fu_893_p1 = ty_reg_435;

assign ty_cast_fu_897_p1 = ty_reg_435;

assign zext_ln109_1_fu_623_p1 = phi_mul_reg_379;

assign zext_ln109_fu_614_p1 = tmp_5_fu_604_p4;

assign zext_ln110_fu_698_p1 = by_reg_390;

assign zext_ln118_1_fu_645_p1 = tmp_6_fu_637_p3;

assign zext_ln118_2_fu_667_p1 = by_reg_390;

assign zext_ln118_3_fu_676_p1 = add_ln118_1_fu_671_p2;

assign zext_ln118_4_fu_787_p1 = bx_reg_413;

assign zext_ln118_5_fu_796_p1 = add_ln118_3_fu_791_p2;

assign zext_ln118_fu_633_p1 = nin_reg_356;

assign zext_ln131_fu_1078_p1 = phi_mul56_reg_491;

assign zext_ln132_fu_1237_p1 = ty_2_reg_502;

assign zext_ln135_1_fu_1100_p1 = tmp_s_fu_1092_p3;

assign zext_ln135_2_fu_1206_p1 = ty_2_reg_502;

assign zext_ln135_3_fu_1215_p1 = add_ln135_2_fu_1210_p2;

assign zext_ln135_4_fu_1326_p1 = tx_reg_513;

assign zext_ln135_5_fu_1335_p1 = add_ln135_4_fu_1330_p2;

assign zext_ln135_fu_1088_p1 = nout_1_reg_480;

assign zext_ln49_fu_859_p1 = shl_ln_fu_851_p3;

assign zext_ln65_1_fu_982_p1 = tmp_2_fu_974_p3;

assign zext_ln65_2_fu_997_p1 = add_ln65_2_fu_992_p2;

assign zext_ln65_3_fu_1024_p1 = add_ln65_4_fu_1019_p2;

assign zext_ln65_fu_970_p1 = nin_2_reg_458;

always @ (posedge ap_clk) begin
    zext_ln109_reg_1465[1:0] <= 2'b00;
    zext_ln109_reg_1465[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln109_1_reg_1475[24] <= 1'b0;
    ty_cast58_reg_1559[11:5] <= 7'b0000000;
    tx_3_cast59_reg_1591[14:5] <= 10'b0000000000;
    zext_ln131_reg_1624[23] <= 1'b0;
    shl_ln3_reg_1663[20:0] <= 21'b000000000000000000000;
    shl_ln135_cast_reg_1668[20:0] <= 21'b000000000000000000000;
end

endmodule //srcnn_conv2
