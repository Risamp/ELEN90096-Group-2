// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        conv2_weights,
        conv2_biases,
        conv1_output_ftmap_address0,
        conv1_output_ftmap_ce0,
        conv1_output_ftmap_q0,
        grp_fu_169_p_din0,
        grp_fu_169_p_din1,
        grp_fu_169_p_opcode,
        grp_fu_169_p_dout0,
        grp_fu_169_p_ce,
        grp_fu_173_p_din0,
        grp_fu_173_p_din1,
        grp_fu_173_p_dout0,
        grp_fu_173_p_ce
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] conv2_weights;
input  [63:0] conv2_biases;
output  [21:0] conv1_output_ftmap_address0;
output   conv1_output_ftmap_ce0;
input  [31:0] conv1_output_ftmap_q0;
output  [31:0] grp_fu_169_p_din0;
output  [31:0] grp_fu_169_p_din1;
output  [1:0] grp_fu_169_p_opcode;
input  [31:0] grp_fu_169_p_dout0;
output   grp_fu_169_p_ce;
output  [31:0] grp_fu_173_p_din0;
output  [31:0] grp_fu_173_p_din1;
input  [31:0] grp_fu_173_p_dout0;
output   grp_fu_173_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg[31:0] m_axi_gmem_ARLEN;
reg m_axi_gmem_RREADY;
reg conv1_output_ftmap_ce0;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] input_fm_buffer_address0;
reg    input_fm_buffer_ce0;
reg    input_fm_buffer_we0;
reg   [31:0] input_fm_buffer_d0;
wire   [31:0] input_fm_buffer_q0;
reg   [13:0] output_fm_buffer_address0;
reg    output_fm_buffer_ce0;
reg    output_fm_buffer_we0;
reg   [31:0] output_fm_buffer_d0;
wire   [31:0] output_fm_buffer_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state29;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state12;
reg   [0:0] icmp_ln50_reg_1100;
wire    ap_CS_fsm_state21;
reg   [63:0] gmem_addr_reg_954;
wire   [3:0] add_ln32_fu_421_p2;
reg   [3:0] add_ln32_reg_963;
wire    ap_CS_fsm_state2;
wire   [4:0] tj_cast2_fu_427_p1;
reg   [4:0] tj_cast2_reg_968;
wire   [0:0] icmp_ln32_fu_415_p2;
wire   [7:0] tmp_fu_431_p3;
reg   [7:0] tmp_reg_973;
wire   [3:0] add_ln33_fu_445_p2;
reg   [3:0] add_ln33_reg_981;
wire    ap_CS_fsm_state3;
wire   [14:0] empty_42_fu_461_p2;
wire    ap_CS_fsm_state4;
wire   [4:0] ti_cast4_fu_472_p1;
reg   [4:0] ti_cast4_reg_994;
wire   [0:0] exitcond4_fu_455_p2;
wire   [7:0] tmp_1_fu_476_p3;
reg   [7:0] tmp_1_reg_999;
wire  signed [16:0] sext_ln118_fu_510_p1;
reg  signed [16:0] sext_ln118_reg_1004;
wire    ap_CS_fsm_state5;
wire   [11:0] add_ln118_fu_526_p2;
reg   [11:0] add_ln118_reg_1009;
wire   [6:0] add_ln109_fu_538_p2;
reg   [6:0] add_ln109_reg_1017;
wire   [14:0] add_ln118_2_fu_569_p2;
reg   [14:0] add_ln118_2_reg_1022;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln110_fu_581_p2;
reg   [4:0] add_ln110_reg_1030;
wire   [21:0] sub_ln118_1_fu_626_p2;
reg   [21:0] sub_ln118_1_reg_1035;
wire   [0:0] icmp_ln110_fu_575_p2;
reg   [14:0] input_fm_buffer_addr_1_reg_1040;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln111_fu_652_p2;
reg   [4:0] add_ln111_reg_1048;
wire   [0:0] icmp_ln111_fu_646_p2;
wire   [10:0] empty_43_fu_702_p2;
reg   [10:0] empty_43_reg_1058;
wire    ap_CS_fsm_state9;
wire   [5:0] add_ln47_fu_714_p2;
reg   [5:0] add_ln47_reg_1066;
reg   [63:0] gmem_addr_1_reg_1071;
wire   [0:0] icmp_ln47_fu_708_p2;
wire   [11:0] ty_cast47_fu_761_p1;
reg   [11:0] ty_cast47_reg_1077;
wire    ap_CS_fsm_state10;
wire   [13:0] empty_46_fu_790_p2;
reg   [13:0] empty_46_reg_1082;
wire   [4:0] add_ln49_1_fu_802_p2;
reg   [4:0] add_ln49_1_reg_1090;
reg   [13:0] output_fm_buffer_addr_1_reg_1095;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln50_fu_822_p2;
wire   [4:0] add_ln50_fu_828_p2;
reg   [4:0] add_ln50_reg_1104;
wire   [14:0] tx_cast48_fu_834_p1;
reg   [14:0] tx_cast48_reg_1109;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [6:0] add_ln62_fu_903_p2;
reg   [6:0] add_ln62_reg_1127;
reg   [31:0] gmem_addr_1_read_reg_1132;
reg   [31:0] input_fm_buffer_load_reg_1137;
wire   [31:0] bitcast_ln65_fu_909_p1;
reg   [31:0] mul_reg_1147;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire   [5:0] add_ln131_fu_919_p2;
reg   [5:0] add_ln131_reg_1160;
wire    ap_CS_fsm_state37;
wire   [13:0] empty_53_fu_931_p2;
wire    ap_CS_fsm_state39;
reg   [3:0] ti_reg_244;
wire   [0:0] exitcond6015_fu_925_p2;
reg   [14:0] empty_reg_256;
wire   [0:0] icmp_ln33_fu_439_p2;
reg   [6:0] nin_reg_267;
reg   [4:0] by_reg_278;
wire   [0:0] icmp_ln109_fu_532_p2;
reg   [4:0] bx_reg_289;
wire    ap_CS_fsm_state8;
reg   [5:0] nout_reg_300;
wire   [0:0] icmp_ln49_fu_796_p2;
reg   [4:0] ty_reg_311;
reg    ap_block_state12_io;
reg   [4:0] tx_reg_322;
wire   [0:0] icmp_ln62_fu_897_p2;
reg   [6:0] nin_1_reg_334;
reg   [31:0] empty_49_reg_345;
reg   [5:0] nout_1_reg_356;
wire    ap_CS_fsm_state36;
reg   [13:0] empty_52_reg_367;
wire   [0:0] icmp_ln131_fu_913_p2;
wire   [63:0] p_cast49_fu_467_p1;
wire   [63:0] zext_ln118_8_fu_641_p1;
wire   [63:0] zext_ln118_10_fu_681_p1;
wire   [63:0] p_cast53_fu_817_p1;
wire   [63:0] zext_ln65_3_fu_892_p1;
wire   [63:0] p_cast54_fu_937_p1;
wire  signed [63:0] sext_ln131_fu_397_p1;
wire  signed [63:0] sext_ln62_fu_751_p1;
reg   [3:0] tj_fu_140;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state25;
wire   [61:0] trunc_ln_fu_387_p4;
wire   [14:0] tmp_2_fu_492_p3;
wire   [15:0] zext_ln118_2_fu_500_p1;
wire   [15:0] zext_ln118_1_fu_488_p1;
wire   [15:0] sub_ln118_fu_504_p2;
wire   [10:0] tmp_3_fu_514_p3;
wire   [11:0] zext_ln118_3_fu_522_p1;
wire   [11:0] zext_ln118_fu_484_p1;
wire   [11:0] zext_ln118_4_fu_544_p1;
wire   [11:0] add_ln118_1_fu_548_p2;
wire   [10:0] trunc_ln118_fu_557_p1;
wire   [14:0] p_shl2_fu_561_p3;
wire   [14:0] zext_ln118_5_fu_553_p1;
wire   [4:0] add_ln54_fu_587_p2;
wire   [7:0] zext_ln54_fu_592_p1;
wire   [7:0] yClamped_fu_596_p2;
wire   [16:0] zext_ln118_6_fu_601_p1;
wire  signed [16:0] add_ln118_3_fu_605_p2;
wire   [13:0] trunc_ln118_1_fu_614_p1;
wire   [21:0] p_shl3_fu_618_p3;
wire  signed [21:0] sext_ln118_1_fu_610_p1;
wire   [14:0] zext_ln118_7_fu_632_p1;
wire   [14:0] add_ln118_4_fu_636_p2;
wire   [4:0] add_ln54_2_fu_658_p2;
wire   [7:0] zext_ln54_1_fu_663_p1;
wire   [7:0] xClamped_fu_667_p2;
wire   [21:0] zext_ln118_9_fu_672_p1;
wire   [21:0] add_ln118_5_fu_676_p2;
wire   [9:0] tmp_4_fu_690_p3;
wire   [10:0] tmp_4_cast_fu_698_p1;
wire   [10:0] nout_cast_fu_686_p1;
wire   [4:0] trunc_ln49_fu_720_p1;
wire   [12:0] shl_ln_fu_724_p3;
wire   [63:0] zext_ln49_fu_732_p1;
wire   [63:0] add_ln49_fu_736_p2;
wire   [61:0] trunc_ln1_fu_741_p4;
wire   [10:0] ty_cast_fu_765_p1;
wire   [10:0] empty_44_fu_769_p2;
wire   [9:0] empty_45_fu_778_p1;
wire   [13:0] p_shl5_fu_782_p3;
wire   [13:0] p_cast_fu_774_p1;
wire   [13:0] tx_cast_fu_808_p1;
wire   [13:0] empty_47_fu_812_p2;
wire   [10:0] tmp_9_fu_842_p3;
wire   [11:0] zext_ln65_1_fu_850_p1;
wire   [11:0] zext_ln65_fu_838_p1;
wire   [11:0] add_ln65_fu_854_p2;
wire   [11:0] add_ln65_1_fu_860_p2;
wire   [10:0] trunc_ln65_fu_869_p1;
wire   [14:0] p_shl6_fu_873_p3;
wire   [14:0] zext_ln65_2_fu_865_p1;
wire   [14:0] add_ln65_2_fu_881_p2;
wire   [14:0] add_ln65_3_fu_887_p2;
reg   [38:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
end

srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 18496 ),
    .AddressWidth( 15 ))
input_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_fm_buffer_address0),
    .ce0(input_fm_buffer_ce0),
    .we0(input_fm_buffer_we0),
    .d0(input_fm_buffer_d0),
    .q0(input_fm_buffer_q0)
);

srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 9248 ),
    .AddressWidth( 14 ))
output_fm_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_fm_buffer_address0),
    .ce0(output_fm_buffer_ce0),
    .we0(output_fm_buffer_we0),
    .d0(output_fm_buffer_d0),
    .q0(output_fm_buffer_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_575_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        bx_reg_289 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bx_reg_289 <= add_ln111_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        by_reg_278 <= 5'd0;
    end else if (((icmp_ln111_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        by_reg_278 <= add_ln110_reg_1030;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        empty_49_reg_345 <= output_fm_buffer_q0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        empty_49_reg_345 <= grp_fu_169_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_913_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        empty_52_reg_367 <= 14'd0;
    end else if (((exitcond6015_fu_925_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        empty_52_reg_367 <= empty_53_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_256 <= empty_42_fu_461_p2;
    end else if (((icmp_ln33_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_256 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        nin_1_reg_334 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        nin_1_reg_334 <= add_ln62_reg_1127;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        nin_reg_267 <= 7'd0;
    end else if (((icmp_ln110_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        nin_reg_267 <= add_ln109_reg_1017;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        nout_1_reg_356 <= 6'd0;
    end else if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        nout_1_reg_356 <= add_ln131_reg_1160;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_532_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nout_reg_300 <= 6'd0;
    end else if (((icmp_ln49_fu_796_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        nout_reg_300 <= add_ln47_reg_1066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_415_p2 == 1'd0))) begin
        ti_reg_244 <= 4'd0;
    end else if (((exitcond6015_fu_925_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        ti_reg_244 <= add_ln33_reg_981;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tj_fu_140 <= 4'd0;
    end else if (((icmp_ln33_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tj_fu_140 <= add_ln32_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_796_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tx_reg_322 <= 5'd0;
    end else if (((icmp_ln62_fu_897_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        tx_reg_322 <= add_ln50_reg_1104;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_708_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ty_reg_311 <= 5'd0;
    end else if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd1))) begin
        ty_reg_311 <= add_ln49_1_reg_1090;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln109_reg_1017 <= add_ln109_fu_538_p2;
        add_ln118_reg_1009 <= add_ln118_fu_526_p2;
        sext_ln118_reg_1004 <= sext_ln118_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln110_reg_1030 <= add_ln110_fu_581_p2;
        add_ln118_2_reg_1022 <= add_ln118_2_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln111_reg_1048 <= add_ln111_fu_652_p2;
        input_fm_buffer_addr_1_reg_1040 <= zext_ln118_8_fu_641_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln131_reg_1160 <= add_ln131_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln32_reg_963 <= add_ln32_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln33_reg_981 <= add_ln33_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln47_reg_1066 <= add_ln47_fu_714_p2;
        empty_43_reg_1058 <= empty_43_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln49_1_reg_1090 <= add_ln49_1_fu_802_p2;
        empty_46_reg_1082 <= empty_46_fu_790_p2;
        ty_cast47_reg_1077[4 : 0] <= ty_cast47_fu_761_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln50_reg_1104 <= add_ln50_fu_828_p2;
        icmp_ln50_reg_1100 <= icmp_ln50_fu_822_p2;
        output_fm_buffer_addr_1_reg_1095 <= p_cast53_fu_817_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln62_reg_1127 <= add_ln62_fu_903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem_addr_1_read_reg_1132 <= m_axi_gmem_RDATA;
        input_fm_buffer_load_reg_1137 <= input_fm_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_708_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        gmem_addr_1_reg_1071 <= sext_ln62_fu_751_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_reg_954 <= sext_ln131_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_reg_1147 <= grp_fu_173_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_575_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln118_1_reg_1035 <= sub_ln118_1_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ti_cast4_reg_994[3 : 0] <= ti_cast4_fu_472_p1[3 : 0];
        tmp_1_reg_999[7 : 4] <= tmp_1_fu_476_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_415_p2 == 1'd0))) begin
        tj_cast2_reg_968[3 : 0] <= tj_cast2_fu_427_p1[3 : 0];
        tmp_reg_973[7 : 4] <= tmp_fu_431_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tx_cast48_reg_1109[4 : 0] <= tx_cast48_fu_834_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state12_io)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_415_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_415_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_output_ftmap_ce0 = 1'b1;
    end else begin
        conv1_output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state38))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        input_fm_buffer_address0 = zext_ln65_3_fu_892_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_fm_buffer_address0 = input_fm_buffer_addr_1_reg_1040;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_address0 = p_cast49_fu_467_p1;
    end else begin
        input_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_fm_buffer_d0 = conv1_output_ftmap_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_fm_buffer_d0 = 32'd0;
    end else begin
        input_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((exitcond4_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_954;
    end else if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_1071;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        m_axi_gmem_ARLEN = 32'd32;
    end else if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd0))) begin
        m_axi_gmem_ARLEN = 32'd64;
    end else begin
        m_axi_gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd0)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_fm_buffer_address0 = p_cast54_fu_937_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        output_fm_buffer_address0 = output_fm_buffer_addr_1_reg_1095;
    end else begin
        output_fm_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state20))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_fm_buffer_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_fm_buffer_d0 = empty_49_reg_345;
    end else begin
        output_fm_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond6015_fu_925_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39)) | ((icmp_ln62_fu_897_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)))) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln33_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond4_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln109_fu_532_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln110_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln111_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln47_fu_708_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln49_fu_796_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln50_reg_1100 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln62_fu_897_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state29 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln131_fu_913_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((exitcond6015_fu_925_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_538_p2 = (nin_reg_267 + 7'd1);

assign add_ln110_fu_581_p2 = (by_reg_278 + 5'd1);

assign add_ln111_fu_652_p2 = (bx_reg_289 + 5'd1);

assign add_ln118_1_fu_548_p2 = (add_ln118_reg_1009 + zext_ln118_4_fu_544_p1);

assign add_ln118_2_fu_569_p2 = (p_shl2_fu_561_p3 + zext_ln118_5_fu_553_p1);

assign add_ln118_3_fu_605_p2 = ($signed(sext_ln118_reg_1004) + $signed(zext_ln118_6_fu_601_p1));

assign add_ln118_4_fu_636_p2 = (add_ln118_2_reg_1022 + zext_ln118_7_fu_632_p1);

assign add_ln118_5_fu_676_p2 = (sub_ln118_1_reg_1035 + zext_ln118_9_fu_672_p1);

assign add_ln118_fu_526_p2 = (zext_ln118_3_fu_522_p1 + zext_ln118_fu_484_p1);

assign add_ln131_fu_919_p2 = (nout_1_reg_356 + 6'd1);

assign add_ln32_fu_421_p2 = (tj_fu_140 + 4'd1);

assign add_ln33_fu_445_p2 = (ti_reg_244 + 4'd1);

assign add_ln47_fu_714_p2 = (nout_reg_300 + 6'd1);

assign add_ln49_1_fu_802_p2 = (ty_reg_311 + 5'd1);

assign add_ln49_fu_736_p2 = (zext_ln49_fu_732_p1 + conv2_weights);

assign add_ln50_fu_828_p2 = (tx_reg_322 + 5'd1);

assign add_ln54_2_fu_658_p2 = (ti_cast4_reg_994 + bx_reg_289);

assign add_ln54_fu_587_p2 = (tj_cast2_reg_968 + by_reg_278);

assign add_ln62_fu_903_p2 = (nin_1_reg_334 + 7'd1);

assign add_ln65_1_fu_860_p2 = (add_ln65_fu_854_p2 + ty_cast47_reg_1077);

assign add_ln65_2_fu_881_p2 = (p_shl6_fu_873_p3 + zext_ln65_2_fu_865_p1);

assign add_ln65_3_fu_887_p2 = (add_ln65_2_fu_881_p2 + tx_cast48_reg_1109);

assign add_ln65_fu_854_p2 = (zext_ln65_1_fu_850_p1 + zext_ln65_fu_838_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln50_reg_1100 == 1'd0));
end

assign bitcast_ln65_fu_909_p1 = gmem_addr_1_read_reg_1132;

assign conv1_output_ftmap_address0 = zext_ln118_10_fu_681_p1;

assign empty_42_fu_461_p2 = (empty_reg_256 + 15'd1);

assign empty_43_fu_702_p2 = (tmp_4_cast_fu_698_p1 + nout_cast_fu_686_p1);

assign empty_44_fu_769_p2 = (empty_43_reg_1058 + ty_cast_fu_765_p1);

assign empty_45_fu_778_p1 = empty_44_fu_769_p2[9:0];

assign empty_46_fu_790_p2 = (p_shl5_fu_782_p3 + p_cast_fu_774_p1);

assign empty_47_fu_812_p2 = (empty_46_reg_1082 + tx_cast_fu_808_p1);

assign empty_53_fu_931_p2 = (empty_52_reg_367 + 14'd1);

assign exitcond4_fu_455_p2 = ((empty_reg_256 == 15'd18496) ? 1'b1 : 1'b0);

assign exitcond6015_fu_925_p2 = ((empty_52_reg_367 == 14'd9248) ? 1'b1 : 1'b0);

assign grp_fu_169_p_ce = 1'b1;

assign grp_fu_169_p_din0 = empty_49_reg_345;

assign grp_fu_169_p_din1 = mul_reg_1147;

assign grp_fu_169_p_opcode = 2'd0;

assign grp_fu_173_p_ce = 1'b1;

assign grp_fu_173_p_din0 = bitcast_ln65_fu_909_p1;

assign grp_fu_173_p_din1 = input_fm_buffer_load_reg_1137;

assign icmp_ln109_fu_532_p2 = ((nin_reg_267 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_575_p2 = ((by_reg_278 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_646_p2 = ((bx_reg_289 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_913_p2 = ((nout_1_reg_356 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_415_p2 = ((tj_fu_140 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_439_p2 = ((ti_reg_244 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_708_p2 = ((nout_reg_300 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_796_p2 = ((ty_reg_311 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_822_p2 = ((tx_reg_322 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_897_p2 = ((nin_1_reg_334 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign nout_cast_fu_686_p1 = nout_reg_300;

assign p_cast49_fu_467_p1 = empty_reg_256;

assign p_cast53_fu_817_p1 = empty_47_fu_812_p2;

assign p_cast54_fu_937_p1 = empty_52_reg_367;

assign p_cast_fu_774_p1 = empty_44_fu_769_p2;

assign p_shl2_fu_561_p3 = {{trunc_ln118_fu_557_p1}, {4'd0}};

assign p_shl3_fu_618_p3 = {{trunc_ln118_1_fu_614_p1}, {8'd0}};

assign p_shl5_fu_782_p3 = {{empty_45_fu_778_p1}, {4'd0}};

assign p_shl6_fu_873_p3 = {{trunc_ln65_fu_869_p1}, {4'd0}};

assign sext_ln118_1_fu_610_p1 = add_ln118_3_fu_605_p2;

assign sext_ln118_fu_510_p1 = $signed(sub_ln118_fu_504_p2);

assign sext_ln131_fu_397_p1 = $signed(trunc_ln_fu_387_p4);

assign sext_ln62_fu_751_p1 = $signed(trunc_ln1_fu_741_p4);

assign shl_ln_fu_724_p3 = {{trunc_ln49_fu_720_p1}, {8'd0}};

assign sub_ln118_1_fu_626_p2 = ($signed(p_shl3_fu_618_p3) - $signed(sext_ln118_1_fu_610_p1));

assign sub_ln118_fu_504_p2 = (zext_ln118_2_fu_500_p1 - zext_ln118_1_fu_488_p1);

assign ti_cast4_fu_472_p1 = ti_reg_244;

assign tj_cast2_fu_427_p1 = tj_fu_140;

assign tmp_1_fu_476_p3 = {{ti_reg_244}, {4'd0}};

assign tmp_2_fu_492_p3 = {{nin_reg_267}, {8'd0}};

assign tmp_3_fu_514_p3 = {{nin_reg_267}, {4'd0}};

assign tmp_4_cast_fu_698_p1 = tmp_4_fu_690_p3;

assign tmp_4_fu_690_p3 = {{nout_reg_300}, {4'd0}};

assign tmp_9_fu_842_p3 = {{nin_1_reg_334}, {4'd0}};

assign tmp_fu_431_p3 = {{tj_fu_140}, {4'd0}};

assign trunc_ln118_1_fu_614_p1 = add_ln118_3_fu_605_p2[13:0];

assign trunc_ln118_fu_557_p1 = add_ln118_1_fu_548_p2[10:0];

assign trunc_ln1_fu_741_p4 = {{add_ln49_fu_736_p2[63:2]}};

assign trunc_ln49_fu_720_p1 = nout_reg_300[4:0];

assign trunc_ln65_fu_869_p1 = add_ln65_1_fu_860_p2[10:0];

assign trunc_ln_fu_387_p4 = {{conv2_biases[63:2]}};

assign tx_cast48_fu_834_p1 = tx_reg_322;

assign tx_cast_fu_808_p1 = tx_reg_322;

assign ty_cast47_fu_761_p1 = ty_reg_311;

assign ty_cast_fu_765_p1 = ty_reg_311;

assign xClamped_fu_667_p2 = (zext_ln54_1_fu_663_p1 + tmp_1_reg_999);

assign yClamped_fu_596_p2 = (zext_ln54_fu_592_p1 + tmp_reg_973);

assign zext_ln118_10_fu_681_p1 = add_ln118_5_fu_676_p2;

assign zext_ln118_1_fu_488_p1 = nin_reg_267;

assign zext_ln118_2_fu_500_p1 = tmp_2_fu_492_p3;

assign zext_ln118_3_fu_522_p1 = tmp_3_fu_514_p3;

assign zext_ln118_4_fu_544_p1 = by_reg_278;

assign zext_ln118_5_fu_553_p1 = add_ln118_1_fu_548_p2;

assign zext_ln118_6_fu_601_p1 = yClamped_fu_596_p2;

assign zext_ln118_7_fu_632_p1 = bx_reg_289;

assign zext_ln118_8_fu_641_p1 = add_ln118_4_fu_636_p2;

assign zext_ln118_9_fu_672_p1 = xClamped_fu_667_p2;

assign zext_ln118_fu_484_p1 = nin_reg_267;

assign zext_ln49_fu_732_p1 = shl_ln_fu_724_p3;

assign zext_ln54_1_fu_663_p1 = add_ln54_2_fu_658_p2;

assign zext_ln54_fu_592_p1 = add_ln54_fu_587_p2;

assign zext_ln65_1_fu_850_p1 = tmp_9_fu_842_p3;

assign zext_ln65_2_fu_865_p1 = add_ln65_1_fu_860_p2;

assign zext_ln65_3_fu_892_p1 = add_ln65_3_fu_887_p2;

assign zext_ln65_fu_838_p1 = nin_1_reg_334;

always @ (posedge ap_clk) begin
    tj_cast2_reg_968[4] <= 1'b0;
    tmp_reg_973[3:0] <= 4'b0000;
    ti_cast4_reg_994[4] <= 1'b0;
    tmp_1_reg_999[3:0] <= 4'b0000;
    ty_cast47_reg_1077[11:5] <= 7'b0000000;
    tx_cast48_reg_1109[14:5] <= 10'b0000000000;
end

endmodule //srcnn_conv2
