// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_Pipeline_OUT_ROW_COL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_buffer_address0,
        weight_buffer_ce0,
        weight_buffer_q0,
        input_fm_buffer_address0,
        input_fm_buffer_ce0,
        input_fm_buffer_q0,
        output_fm_buffer_address0,
        output_fm_buffer_ce0,
        output_fm_buffer_we0,
        output_fm_buffer_d0,
        output_fm_buffer_address1,
        output_fm_buffer_ce1,
        output_fm_buffer_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_buffer_address0;
output   weight_buffer_ce0;
input  [31:0] weight_buffer_q0;
output  [15:0] input_fm_buffer_address0;
output   input_fm_buffer_ce0;
input  [31:0] input_fm_buffer_q0;
output  [11:0] output_fm_buffer_address0;
output   output_fm_buffer_ce0;
output   output_fm_buffer_we0;
output  [31:0] output_fm_buffer_d0;
output  [11:0] output_fm_buffer_address1;
output   output_fm_buffer_ce1;
input  [31:0] output_fm_buffer_q1;

reg ap_idle;
reg[7:0] weight_buffer_address0;
reg weight_buffer_ce0;
reg input_fm_buffer_ce0;
reg output_fm_buffer_ce0;
reg output_fm_buffer_we0;
reg output_fm_buffer_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_229_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln40_reg_767;
reg   [0:0] icmp_ln40_reg_767_pp0_iter2_reg;
wire   [0:0] icmp_ln41_fu_247_p2;
reg   [0:0] icmp_ln41_reg_771;
reg   [0:0] icmp_ln41_reg_771_pp0_iter2_reg;
wire   [0:0] xor_ln40_fu_253_p2;
reg   [0:0] xor_ln40_reg_780;
reg   [0:0] xor_ln40_reg_780_pp0_iter2_reg;
wire   [0:0] icmp_ln43_fu_259_p2;
reg   [0:0] icmp_ln43_reg_785;
reg   [0:0] icmp_ln43_reg_785_pp0_iter2_reg;
wire   [0:0] and_ln40_1_fu_265_p2;
reg   [0:0] and_ln40_1_reg_790;
reg   [0:0] and_ln40_1_reg_790_pp0_iter2_reg;
wire   [0:0] or_ln41_fu_271_p2;
reg   [0:0] or_ln41_reg_797;
reg   [0:0] or_ln41_reg_797_pp0_iter2_reg;
wire   [2:0] select_ln40_7_fu_360_p3;
reg   [2:0] select_ln40_7_reg_807;
wire   [6:0] select_ln41_1_fu_390_p3;
reg   [6:0] select_ln41_1_reg_818;
wire   [17:0] select_ln41_2_fu_514_p3;
reg  signed [17:0] select_ln41_2_reg_829;
reg   [11:0] output_fm_buffer_addr_reg_839;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] p_cast18_fu_342_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] p_cast18_mid173_fu_379_p1;
wire   [63:0] p_cast18_mid1_fu_413_p1;
wire   [63:0] zext_ln46_8_fu_652_p1;
wire   [63:0] zext_ln46_9_fu_663_p1;
reg   [7:0] c_fu_100;
wire   [7:0] add_ln44_fu_668_p2;
wire    ap_loop_init;
reg   [1:0] r_fu_104;
wire   [1:0] select_ln43_1_fu_566_p3;
reg   [9:0] indvar_flatten31_fu_108;
wire   [9:0] select_ln43_2_fu_283_p3;
reg   [6:0] i_fu_112;
reg   [16:0] indvar_flatten48_fu_116;
wire   [16:0] select_ln41_3_fu_297_p3;
reg   [2:0] o_fu_120;
reg   [17:0] indvar_flatten91_fu_124;
wire   [17:0] add_ln40_1_fu_235_p2;
wire   [9:0] add_ln43_1_fu_277_p2;
wire   [16:0] add_ln41_1_fu_291_p2;
wire   [1:0] empty_204_fu_330_p1;
wire   [5:0] empty_fu_326_p1;
wire   [7:0] tmp_s_fu_334_p3;
wire   [2:0] add_ln40_fu_347_p2;
wire   [1:0] empty_205_fu_367_p1;
wire   [7:0] p_mid_fu_371_p3;
wire   [6:0] select_ln40_fu_353_p3;
wire   [6:0] add_ln41_fu_384_p2;
wire   [1:0] empty_207_fu_401_p1;
wire   [5:0] empty_206_fu_397_p1;
wire   [7:0] p_mid1_fu_405_p3;
wire   [4:0] tmp_124_fu_437_p3;
wire   [5:0] zext_ln46_1_fu_444_p1;
wire   [5:0] zext_ln46_fu_434_p1;
wire   [5:0] sub_ln46_fu_448_p2;
wire   [8:0] p_shl_fu_474_p3;
wire   [9:0] zext_ln46_3_fu_481_p1;
wire   [9:0] zext_ln46_2_fu_471_p1;
wire   [9:0] sub_ln46_1_fu_485_p2;
wire   [17:0] trunc_ln41_1_fu_499_p1;
wire   [17:0] trunc_ln41_2_fu_503_p1;
wire   [17:0] trunc_ln41_fu_495_p1;
wire   [17:0] select_ln40_8_fu_507_p3;
wire   [0:0] xor_ln41_fu_521_p2;
wire   [0:0] or_ln41_1_fu_526_p2;
wire   [0:0] and_ln40_fu_531_p2;
wire   [0:0] icmp_ln44_fu_458_p2;
wire   [1:0] select_ln41_fu_464_p3;
wire   [0:0] and_ln41_fu_536_p2;
wire   [0:0] or_ln43_fu_548_p2;
wire   [0:0] or_ln43_1_fu_553_p2;
wire   [1:0] add_ln43_fu_542_p2;
wire  signed [10:0] sub_ln46_1_cast_fu_491_p1;
wire   [10:0] zext_ln46_5_fu_578_p1;
wire  signed [10:0] add_ln46_1_fu_582_p2;
wire   [7:0] trunc_ln46_fu_592_p1;
wire   [15:0] p_shl1_fu_596_p3;
wire  signed [15:0] sext_ln46_1_fu_588_p1;
wire  signed [6:0] sext_ln40_fu_454_p1;
wire   [6:0] zext_ln46_4_fu_574_p1;
wire  signed [6:0] add_ln46_2_fu_610_p2;
wire   [3:0] trunc_ln46_1_fu_620_p1;
wire   [11:0] p_shl2_fu_624_p3;
wire  signed [11:0] sext_ln46_2_fu_616_p1;
wire   [7:0] select_ln43_fu_558_p3;
wire   [15:0] sub_ln46_2_fu_604_p2;
wire   [15:0] zext_ln46_7_fu_642_p1;
wire   [15:0] add_ln46_3_fu_646_p2;
wire   [11:0] sub_ln46_3_fu_632_p2;
wire   [11:0] zext_ln46_6_fu_638_p1;
wire   [11:0] add_ln46_4_fu_657_p2;
wire   [48:0] shl_ln3_fu_693_p3;
wire   [48:0] mul_ln46_fu_187_p2;
wire   [48:0] add_ln46_fu_701_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_589;
reg    ap_condition_594;
reg    ap_condition_587;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_32s_18s_49_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 49 ))
mul_32s_18s_49_1_1_U199(
    .din0(input_fm_buffer_q0),
    .din1(select_ln41_2_reg_829),
    .dout(mul_ln46_fu_187_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_fu_100 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln40_reg_767_pp0_iter2_reg == 1'd0))) begin
            c_fu_100 <= add_ln44_fu_668_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_112 <= 7'd0;
        end else if (((icmp_ln40_reg_767 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            i_fu_112 <= select_ln41_1_fu_390_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten31_fu_108 <= 10'd0;
        end else if (((icmp_ln40_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten31_fu_108 <= select_ln43_2_fu_283_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten48_fu_116 <= 17'd0;
        end else if (((icmp_ln40_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten48_fu_116 <= select_ln41_3_fu_297_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten91_fu_124 <= 18'd0;
        end else if (((icmp_ln40_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten91_fu_124 <= add_ln40_1_fu_235_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            o_fu_120 <= 3'd0;
        end else if (((icmp_ln40_reg_767 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            o_fu_120 <= select_ln40_7_fu_360_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            r_fu_104 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln40_reg_767_pp0_iter2_reg == 1'd0))) begin
            r_fu_104 <= select_ln43_1_fu_566_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_229_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln40_1_reg_790 <= and_ln40_1_fu_265_p2;
        icmp_ln41_reg_771 <= icmp_ln41_fu_247_p2;
        icmp_ln43_reg_785 <= icmp_ln43_fu_259_p2;
        or_ln41_reg_797 <= or_ln41_fu_271_p2;
        xor_ln40_reg_780 <= xor_ln40_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln40_1_reg_790_pp0_iter2_reg <= and_ln40_1_reg_790;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln40_reg_767_pp0_iter2_reg <= icmp_ln40_reg_767;
        icmp_ln41_reg_771_pp0_iter2_reg <= icmp_ln41_reg_771;
        icmp_ln43_reg_785_pp0_iter2_reg <= icmp_ln43_reg_785;
        or_ln41_reg_797_pp0_iter2_reg <= or_ln41_reg_797;
        xor_ln40_reg_780_pp0_iter2_reg <= xor_ln40_reg_780;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln40_reg_767 <= icmp_ln40_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_reg_767_pp0_iter2_reg == 1'd0))) begin
        output_fm_buffer_addr_reg_839 <= zext_ln46_9_fu_663_p1;
        select_ln41_2_reg_829 <= select_ln41_2_fu_514_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln40_7_reg_807 <= select_ln40_7_fu_360_p3;
        select_ln41_1_reg_818 <= select_ln41_1_fu_390_p3;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln40_reg_767_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_fm_buffer_ce0 = 1'b1;
    end else begin
        output_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        output_fm_buffer_ce1 = 1'b1;
    end else begin
        output_fm_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_fm_buffer_we0 = 1'b1;
    end else begin
        output_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_587)) begin
        if ((1'b1 == ap_condition_594)) begin
            weight_buffer_address0 = p_cast18_mid1_fu_413_p1;
        end else if (((1'd0 == and_ln40_1_reg_790) & (icmp_ln41_reg_771 == 1'd1))) begin
            weight_buffer_address0 = p_cast18_mid173_fu_379_p1;
        end else if ((1'b1 == ap_condition_589)) begin
            weight_buffer_address0 = p_cast18_fu_342_p1;
        end else begin
            weight_buffer_address0 = 'bx;
        end
    end else begin
        weight_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln40_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_785 == 1'd0) & (1'd0 == and_ln40_1_reg_790) & (icmp_ln41_reg_771 == 1'd0)) | ((icmp_ln40_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln40_1_reg_790) & (icmp_ln41_reg_771 == 1'd1)) | ((icmp_ln40_reg_767 == 1'd0) & (1'd1 == and_ln40_1_reg_790) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln43_reg_785 == 1'd1) & (icmp_ln41_reg_771 == 1'd0)))) begin
        weight_buffer_ce0 = 1'b1;
    end else begin
        weight_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_235_p2 = (indvar_flatten91_fu_124 + 18'd1);

assign add_ln40_fu_347_p2 = (o_fu_120 + 3'd1);

assign add_ln41_1_fu_291_p2 = (indvar_flatten48_fu_116 + 17'd1);

assign add_ln41_fu_384_p2 = (select_ln40_fu_353_p3 + 7'd1);

assign add_ln43_1_fu_277_p2 = (indvar_flatten31_fu_108 + 10'd1);

assign add_ln43_fu_542_p2 = (select_ln41_fu_464_p3 + 2'd1);

assign add_ln44_fu_668_p2 = (select_ln43_fu_558_p3 + 8'd1);

assign add_ln46_1_fu_582_p2 = ($signed(sub_ln46_1_cast_fu_491_p1) + $signed(zext_ln46_5_fu_578_p1));

assign add_ln46_2_fu_610_p2 = ($signed(sext_ln40_fu_454_p1) + $signed(zext_ln46_4_fu_574_p1));

assign add_ln46_3_fu_646_p2 = (sub_ln46_2_fu_604_p2 + zext_ln46_7_fu_642_p1);

assign add_ln46_4_fu_657_p2 = (sub_ln46_3_fu_632_p2 + zext_ln46_6_fu_638_p1);

assign add_ln46_fu_701_p2 = (shl_ln3_fu_693_p3 + mul_ln46_fu_187_p2);

assign and_ln40_1_fu_265_p2 = (xor_ln40_fu_253_p2 & icmp_ln43_fu_259_p2);

assign and_ln40_fu_531_p2 = (xor_ln40_reg_780_pp0_iter2_reg & or_ln41_1_fu_526_p2);

assign and_ln41_fu_536_p2 = (icmp_ln44_fu_458_p2 & and_ln40_fu_531_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_587 = ((icmp_ln40_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_589 = ((icmp_ln43_reg_785 == 1'd0) & (1'd0 == and_ln40_1_reg_790) & (icmp_ln41_reg_771 == 1'd0));
end

always @ (*) begin
    ap_condition_594 = ((1'd1 == and_ln40_1_reg_790) & (icmp_ln43_reg_785 == 1'd1) & (icmp_ln41_reg_771 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_204_fu_330_p1 = o_fu_120[1:0];

assign empty_205_fu_367_p1 = add_ln40_fu_347_p2[1:0];

assign empty_206_fu_397_p1 = add_ln41_fu_384_p2[5:0];

assign empty_207_fu_401_p1 = select_ln40_7_fu_360_p3[1:0];

assign empty_fu_326_p1 = i_fu_112[5:0];

assign icmp_ln40_fu_229_p2 = ((indvar_flatten91_fu_124 == 18'd195840) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_247_p2 = ((indvar_flatten48_fu_116 == 17'd48960) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_259_p2 = ((indvar_flatten31_fu_108 == 10'd765) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_458_p2 = ((c_fu_100 == 8'd255) ? 1'b1 : 1'b0);

assign input_fm_buffer_address0 = zext_ln46_8_fu_652_p1;

assign or_ln41_1_fu_526_p2 = (xor_ln41_fu_521_p2 | icmp_ln41_reg_771_pp0_iter2_reg);

assign or_ln41_fu_271_p2 = (icmp_ln41_fu_247_p2 | and_ln40_1_fu_265_p2);

assign or_ln43_1_fu_553_p2 = (or_ln43_fu_548_p2 | icmp_ln41_reg_771_pp0_iter2_reg);

assign or_ln43_fu_548_p2 = (and_ln41_fu_536_p2 | and_ln40_1_reg_790_pp0_iter2_reg);

assign output_fm_buffer_address0 = output_fm_buffer_addr_reg_839;

assign output_fm_buffer_address1 = zext_ln46_9_fu_663_p1;

assign output_fm_buffer_d0 = {{add_ln46_fu_701_p2[48:17]}};

assign p_cast18_fu_342_p1 = tmp_s_fu_334_p3;

assign p_cast18_mid173_fu_379_p1 = p_mid_fu_371_p3;

assign p_cast18_mid1_fu_413_p1 = p_mid1_fu_405_p3;

assign p_mid1_fu_405_p3 = {{empty_207_fu_401_p1}, {empty_206_fu_397_p1}};

assign p_mid_fu_371_p3 = {{empty_205_fu_367_p1}, {6'd0}};

assign p_shl1_fu_596_p3 = {{trunc_ln46_fu_592_p1}, {8'd0}};

assign p_shl2_fu_624_p3 = {{trunc_ln46_1_fu_620_p1}, {8'd0}};

assign p_shl_fu_474_p3 = {{select_ln41_1_reg_818}, {2'd0}};

assign select_ln40_7_fu_360_p3 = ((icmp_ln41_reg_771[0:0] == 1'b1) ? add_ln40_fu_347_p2 : o_fu_120);

assign select_ln40_8_fu_507_p3 = ((icmp_ln41_reg_771_pp0_iter2_reg[0:0] == 1'b1) ? trunc_ln41_1_fu_499_p1 : trunc_ln41_2_fu_503_p1);

assign select_ln40_fu_353_p3 = ((icmp_ln41_reg_771[0:0] == 1'b1) ? 7'd0 : i_fu_112);

assign select_ln41_1_fu_390_p3 = ((and_ln40_1_reg_790[0:0] == 1'b1) ? add_ln41_fu_384_p2 : select_ln40_fu_353_p3);

assign select_ln41_2_fu_514_p3 = ((and_ln40_1_reg_790_pp0_iter2_reg[0:0] == 1'b1) ? trunc_ln41_fu_495_p1 : select_ln40_8_fu_507_p3);

assign select_ln41_3_fu_297_p3 = ((icmp_ln41_fu_247_p2[0:0] == 1'b1) ? 17'd1 : add_ln41_1_fu_291_p2);

assign select_ln41_fu_464_p3 = ((or_ln41_reg_797_pp0_iter2_reg[0:0] == 1'b1) ? 2'd0 : r_fu_104);

assign select_ln43_1_fu_566_p3 = ((and_ln41_fu_536_p2[0:0] == 1'b1) ? add_ln43_fu_542_p2 : select_ln41_fu_464_p3);

assign select_ln43_2_fu_283_p3 = ((or_ln41_fu_271_p2[0:0] == 1'b1) ? 10'd1 : add_ln43_1_fu_277_p2);

assign select_ln43_fu_558_p3 = ((or_ln43_1_fu_553_p2[0:0] == 1'b1) ? 8'd0 : c_fu_100);

assign sext_ln40_fu_454_p1 = $signed(sub_ln46_fu_448_p2);

assign sext_ln46_1_fu_588_p1 = add_ln46_1_fu_582_p2;

assign sext_ln46_2_fu_616_p1 = add_ln46_2_fu_610_p2;

assign shl_ln3_fu_693_p3 = {{output_fm_buffer_q1}, {17'd0}};

assign sub_ln46_1_cast_fu_491_p1 = $signed(sub_ln46_1_fu_485_p2);

assign sub_ln46_1_fu_485_p2 = (zext_ln46_3_fu_481_p1 - zext_ln46_2_fu_471_p1);

assign sub_ln46_2_fu_604_p2 = ($signed(p_shl1_fu_596_p3) - $signed(sext_ln46_1_fu_588_p1));

assign sub_ln46_3_fu_632_p2 = ($signed(p_shl2_fu_624_p3) - $signed(sext_ln46_2_fu_616_p1));

assign sub_ln46_fu_448_p2 = (zext_ln46_1_fu_444_p1 - zext_ln46_fu_434_p1);

assign tmp_124_fu_437_p3 = {{select_ln40_7_reg_807}, {2'd0}};

assign tmp_s_fu_334_p3 = {{empty_204_fu_330_p1}, {empty_fu_326_p1}};

assign trunc_ln41_1_fu_499_p1 = weight_buffer_q0[17:0];

assign trunc_ln41_2_fu_503_p1 = weight_buffer_q0[17:0];

assign trunc_ln41_fu_495_p1 = weight_buffer_q0[17:0];

assign trunc_ln46_1_fu_620_p1 = add_ln46_2_fu_610_p2[3:0];

assign trunc_ln46_fu_592_p1 = add_ln46_1_fu_582_p2[7:0];

assign xor_ln40_fu_253_p2 = (icmp_ln41_fu_247_p2 ^ 1'd1);

assign xor_ln41_fu_521_p2 = (icmp_ln43_reg_785_pp0_iter2_reg ^ 1'd1);

assign zext_ln46_1_fu_444_p1 = tmp_124_fu_437_p3;

assign zext_ln46_2_fu_471_p1 = select_ln41_1_reg_818;

assign zext_ln46_3_fu_481_p1 = p_shl_fu_474_p3;

assign zext_ln46_4_fu_574_p1 = select_ln43_1_fu_566_p3;

assign zext_ln46_5_fu_578_p1 = select_ln43_1_fu_566_p3;

assign zext_ln46_6_fu_638_p1 = select_ln43_fu_558_p3;

assign zext_ln46_7_fu_642_p1 = select_ln43_fu_558_p3;

assign zext_ln46_8_fu_652_p1 = add_ln46_3_fu_646_p2;

assign zext_ln46_9_fu_663_p1 = add_ln46_4_fu_657_p2;

assign zext_ln46_fu_434_p1 = select_ln40_7_reg_807;

endmodule //srcnn_conv2_Pipeline_OUT_ROW_COL
