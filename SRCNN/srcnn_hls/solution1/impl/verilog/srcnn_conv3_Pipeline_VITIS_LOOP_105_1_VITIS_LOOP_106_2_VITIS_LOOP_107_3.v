// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_VITIS_LOOP_105_1_VITIS_LOOP_106_2_VITIS_LOOP_107_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln31,
        zext_ln52,
        shl_ln1,
        select_ln31,
        input_ftmap,
        input_fm_buffer_address0,
        input_fm_buffer_ce0,
        input_fm_buffer_we0,
        input_fm_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [7:0] zext_ln31;
input  [7:0] zext_ln52;
input  [4:0] shl_ln1;
input  [3:0] select_ln31;
input  [63:0] input_ftmap;
output  [11:0] input_fm_buffer_address0;
output   input_fm_buffer_ce0;
output   input_fm_buffer_we0;
output  [31:0] input_fm_buffer_d0;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg input_fm_buffer_ce0;
reg input_fm_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln105_fu_249_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln52_cast2_fu_205_p1;
reg   [9:0] zext_ln52_cast2_reg_899;
wire   [9:0] zext_ln31_cast1_fu_209_p1;
reg   [9:0] zext_ln31_cast1_reg_905;
wire   [8:0] zext_ln52_cast_fu_213_p1;
reg   [8:0] zext_ln52_cast_reg_911;
wire   [8:0] zext_ln31_cast_fu_217_p1;
reg   [8:0] zext_ln31_cast_reg_916;
reg   [0:0] icmp_ln105_reg_921;
wire   [0:0] icmp_ln106_fu_264_p2;
reg   [0:0] icmp_ln106_reg_925;
wire   [4:0] select_ln106_fu_557_p3;
reg   [4:0] select_ln106_reg_934;
reg   [4:0] select_ln106_reg_934_pp0_iter2_reg;
reg   [63:0] gmem_addr_reg_939;
wire   [11:0] grp_fu_838_p4;
reg   [11:0] add_ln114_4_reg_950;
reg   [11:0] add_ln114_4_reg_950_pp0_iter5_reg;
reg   [11:0] add_ln114_4_reg_950_pp0_iter6_reg;
reg   [11:0] add_ln114_4_reg_950_pp0_iter7_reg;
reg   [11:0] add_ln114_4_reg_950_pp0_iter8_reg;
reg   [11:0] add_ln114_4_reg_950_pp0_iter9_reg;
reg   [11:0] add_ln114_4_reg_950_pp0_iter10_reg;
reg   [31:0] gmem_addr_read_reg_955;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln114_3_fu_830_p1;
wire  signed [63:0] sext_ln114_1_fu_796_p1;
reg   [4:0] bx_fu_130;
wire   [4:0] add_ln107_fu_806_p2;
wire    ap_loop_init;
reg   [4:0] by_fu_134;
wire   [4:0] select_ln106_1_fu_565_p3;
reg   [9:0] indvar_flatten_fu_138;
wire   [9:0] select_ln106_3_fu_276_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] nin_fu_142;
wire   [3:0] select_ln105_1_fu_410_p3;
reg   [11:0] indvar_flatten263_fu_146;
wire   [11:0] add_ln105_2_fu_255_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten263_load;
wire   [9:0] add_ln106_1_fu_270_p2;
wire   [5:0] zext_ln106_fu_297_p1;
wire   [5:0] tmp_fu_301_p2;
wire  signed [9:0] tmp_cast_fu_307_p1;
wire   [9:0] empty_fu_311_p2;
wire   [0:0] tmp_2_fu_335_p3;
wire   [0:0] tmp_1_fu_316_p3;
wire   [0:0] icmp_ln52_fu_324_p2;
wire   [0:0] or_ln51_fu_351_p2;
wire   [9:0] select_ln51_fu_343_p3;
wire   [9:0] add_ln52_fu_330_p2;
wire   [9:0] yClamped_fu_357_p3;
wire   [11:0] shl_ln114_1_fu_373_p3;
wire   [19:0] shl_ln2_fu_365_p3;
wire  signed [19:0] sext_ln114_fu_381_p1;
wire   [3:0] add_ln105_fu_397_p2;
wire   [3:0] mul_ln114_fu_421_p0;
wire   [5:0] mul_ln114_fu_421_p1;
wire   [4:0] zext_ln105_fu_427_p1;
wire   [4:0] add_ln105_1_fu_431_p2;
wire   [4:0] mul_ln105_fu_440_p0;
wire   [18:0] mul_ln105_fu_440_p1;
wire   [22:0] mul_ln105_fu_440_p2;
wire   [8:0] p_mid1223_fu_450_p2;
wire   [0:0] tmp_4_fu_468_p3;
wire   [0:0] tmp_3_fu_455_p3;
wire   [8:0] select_ln51_2_fu_476_p3;
wire   [8:0] add_ln52_1_fu_463_p2;
wire   [8:0] select_ln51_3_fu_484_p3;
wire   [18:0] shl_ln114_mid_fu_492_p3;
wire   [10:0] shl_ln114_1_mid_fu_504_p3;
wire  signed [19:0] sext_ln114_6_fu_500_p1;
wire  signed [19:0] sext_ln114_4_fu_512_p1;
wire   [19:0] sub_ln114_1_fu_516_p2;
wire   [19:0] sub_ln114_fu_385_p2;
wire   [0:0] icmp_ln107_fu_534_p2;
wire   [0:0] xor_ln105_fu_529_p2;
wire   [4:0] select_ln105_fu_403_p3;
wire   [0:0] and_ln105_fu_540_p2;
wire   [0:0] or_ln106_fu_552_p2;
wire   [4:0] add_ln106_fu_546_p2;
wire   [5:0] zext_ln106_2_fu_577_p1;
wire   [5:0] tmp_mid1_fu_581_p2;
wire  signed [9:0] tmp_cast_mid1_fu_587_p1;
wire   [9:0] p_mid1_fu_591_p2;
wire   [0:0] tmp_6_fu_615_p3;
wire   [0:0] tmp_5_fu_596_p3;
wire   [0:0] icmp_ln52_2_fu_604_p2;
wire   [0:0] or_ln51_2_fu_631_p2;
wire   [9:0] select_ln51_4_fu_623_p3;
wire   [9:0] add_ln52_2_fu_610_p2;
wire   [9:0] select_ln51_5_fu_637_p3;
wire   [11:0] shl_ln114_1_mid1_fu_653_p3;
wire   [19:0] shl_ln114_mid1_fu_645_p3;
wire  signed [19:0] sext_ln114_5_fu_661_p1;
wire   [19:0] sub_ln114_2_fu_665_p2;
wire   [19:0] select_ln105_2_fu_522_p3;
wire   [7:0] tmp4_fu_683_p3;
wire   [5:0] trunc_ln110_cast_fu_679_p1;
wire   [5:0] add_ln110_1_fu_693_p2;
wire  signed [9:0] sext_ln110_fu_699_p1;
wire   [9:0] zext_ln110_fu_689_p1;
wire   [9:0] add_ln110_fu_703_p2;
wire   [0:0] tmp_7_fu_709_p3;
wire   [0:0] icmp_ln52_1_fu_717_p2;
wire   [0:0] tmp_8_fu_723_p3;
wire   [0:0] or_ln51_1_fu_731_p2;
wire   [9:0] select_ln51_6_fu_737_p3;
wire   [9:0] select_ln51_7_fu_745_p3;
wire   [11:0] shl_ln114_2_fu_753_p3;
wire   [63:0] zext_ln105_2_fu_446_p1;
wire   [19:0] select_ln106_2_fu_671_p3;
wire  signed [19:0] sext_ln114_2_fu_761_p1;
wire   [19:0] add_ln114_1_fu_770_p2;
wire  signed [63:0] sext_ln114_3_fu_776_p1;
wire   [63:0] add_ln114_fu_765_p2;
wire   [63:0] add_ln114_2_fu_780_p2;
wire   [61:0] trunc_ln4_fu_786_p4;
wire   [8:0] mul_ln114_fu_421_p2;
wire   [4:0] grp_fu_838_p1;
wire   [4:0] grp_fu_838_p2;
wire   [4:0] grp_fu_838_p3;
reg    grp_fu_838_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] grp_fu_838_p10;
wire   [11:0] grp_fu_838_p30;
wire   [22:0] mul_ln105_fu_440_p00;
wire   [8:0] mul_ln114_fu_421_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U78(
    .din0(mul_ln114_fu_421_p0),
    .din1(mul_ln114_fu_421_p1),
    .dout(mul_ln114_fu_421_p2)
);

srcnn_mul_5ns_19ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 23 ))
mul_5ns_19ns_23_1_1_U79(
    .din0(mul_ln105_fu_440_p0),
    .din1(mul_ln105_fu_440_p1),
    .dout(mul_ln105_fu_440_p2)
);

srcnn_ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln114_fu_421_p2),
    .din1(grp_fu_838_p1),
    .din2(grp_fu_838_p2),
    .din3(grp_fu_838_p3),
    .ce(grp_fu_838_ce),
    .dout(grp_fu_838_p4)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            bx_fu_130 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln105_reg_921 == 1'd0))) begin
            bx_fu_130 <= add_ln107_fu_806_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            by_fu_134 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln105_reg_921 == 1'd0))) begin
            by_fu_134 <= select_ln106_1_fu_565_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln105_fu_249_p2 == 1'd0))) begin
            indvar_flatten263_fu_146 <= add_ln105_2_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten263_fu_146 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln105_fu_249_p2 == 1'd0))) begin
            indvar_flatten_fu_138 <= select_ln106_3_fu_276_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_138 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            nin_fu_142 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln105_reg_921 == 1'd0))) begin
            nin_fu_142 <= select_ln105_1_fu_410_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln114_4_reg_950 <= grp_fu_838_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln114_4_reg_950_pp0_iter10_reg <= add_ln114_4_reg_950_pp0_iter9_reg;
        add_ln114_4_reg_950_pp0_iter5_reg <= add_ln114_4_reg_950;
        add_ln114_4_reg_950_pp0_iter6_reg <= add_ln114_4_reg_950_pp0_iter5_reg;
        add_ln114_4_reg_950_pp0_iter7_reg <= add_ln114_4_reg_950_pp0_iter6_reg;
        add_ln114_4_reg_950_pp0_iter8_reg <= add_ln114_4_reg_950_pp0_iter7_reg;
        add_ln114_4_reg_950_pp0_iter9_reg <= add_ln114_4_reg_950_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_addr_read_reg_955 <= m_axi_gmem_RDATA;
        select_ln106_reg_934_pp0_iter2_reg <= select_ln106_reg_934;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln105_reg_921 <= icmp_ln105_fu_249_p2;
        zext_ln31_cast1_reg_905[7 : 0] <= zext_ln31_cast1_fu_209_p1[7 : 0];
        zext_ln31_cast_reg_916[7 : 0] <= zext_ln31_cast_fu_217_p1[7 : 0];
        zext_ln52_cast2_reg_899[7 : 0] <= zext_ln52_cast2_fu_205_p1[7 : 0];
        zext_ln52_cast_reg_911[7 : 0] <= zext_ln52_cast_fu_213_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln105_reg_921 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_939 <= sext_ln114_1_fu_796_p1;
        select_ln106_reg_934 <= select_ln106_fu_557_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln105_fu_249_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln106_reg_925 <= icmp_ln106_fu_264_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln105_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln105_reg_921 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten263_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten263_load = indvar_flatten263_fu_146;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_138;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_838_ce = 1'b1;
    end else begin
        grp_fu_838_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_ce0 = 1'b1;
    end else begin
        input_fm_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_fm_buffer_we0 = 1'b1;
    end else begin
        input_fm_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln105_1_fu_431_p2 = (zext_ln105_fu_427_p1 + shl_ln1);

assign add_ln105_2_fu_255_p2 = (ap_sig_allocacmp_indvar_flatten263_load + 12'd1);

assign add_ln105_fu_397_p2 = (nin_fu_142 + 4'd1);

assign add_ln106_1_fu_270_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln106_fu_546_p2 = (select_ln105_fu_403_p3 + 5'd1);

assign add_ln107_fu_806_p2 = (select_ln106_fu_557_p3 + 5'd1);

assign add_ln110_1_fu_693_p2 = ($signed(trunc_ln110_cast_fu_679_p1) + $signed(6'd62));

assign add_ln110_fu_703_p2 = ($signed(sext_ln110_fu_699_p1) + $signed(zext_ln110_fu_689_p1));

assign add_ln114_1_fu_770_p2 = ($signed(select_ln106_2_fu_671_p3) + $signed(sext_ln114_2_fu_761_p1));

assign add_ln114_2_fu_780_p2 = ($signed(sext_ln114_3_fu_776_p1) + $signed(add_ln114_fu_765_p2));

assign add_ln114_fu_765_p2 = (zext_ln105_2_fu_446_p1 + input_ftmap);

assign add_ln52_1_fu_463_p2 = ($signed(zext_ln52_cast_reg_911) + $signed(9'd510));

assign add_ln52_2_fu_610_p2 = ($signed(tmp_cast_mid1_fu_587_p1) + $signed(zext_ln52_cast2_reg_899));

assign add_ln52_fu_330_p2 = ($signed(tmp_cast_fu_307_p1) + $signed(zext_ln52_cast2_reg_899));

assign and_ln105_fu_540_p2 = (xor_ln105_fu_529_p2 & icmp_ln107_fu_534_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_311_p2 = ($signed(tmp_cast_fu_307_p1) + $signed(zext_ln31_cast1_reg_905));

assign grp_fu_838_p1 = grp_fu_838_p10;

assign grp_fu_838_p10 = select_ln106_1_fu_565_p3;

assign grp_fu_838_p2 = 12'd21;

assign grp_fu_838_p3 = grp_fu_838_p30;

assign grp_fu_838_p30 = select_ln106_reg_934_pp0_iter2_reg;

assign icmp_ln105_fu_249_p2 = ((ap_sig_allocacmp_indvar_flatten263_load == 12'd3528) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_264_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd441) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_534_p2 = ((bx_fu_130 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_717_p2 = (($signed(add_ln110_fu_703_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_604_p2 = (($signed(p_mid1_fu_591_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_324_p2 = (($signed(empty_fu_311_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign input_fm_buffer_address0 = zext_ln114_3_fu_830_p1;

assign input_fm_buffer_d0 = gmem_addr_read_reg_955;

assign m_axi_gmem_ARADDR = gmem_addr_reg_939;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln105_fu_440_p0 = mul_ln105_fu_440_p00;

assign mul_ln105_fu_440_p00 = add_ln105_1_fu_431_p2;

assign mul_ln105_fu_440_p1 = 23'd260100;

assign mul_ln114_fu_421_p0 = mul_ln114_fu_421_p00;

assign mul_ln114_fu_421_p00 = select_ln105_1_fu_410_p3;

assign mul_ln114_fu_421_p1 = 9'd21;

assign or_ln106_fu_552_p2 = (icmp_ln106_reg_925 | and_ln105_fu_540_p2);

assign or_ln51_1_fu_731_p2 = (tmp_7_fu_709_p3 | icmp_ln52_1_fu_717_p2);

assign or_ln51_2_fu_631_p2 = (tmp_5_fu_596_p3 | icmp_ln52_2_fu_604_p2);

assign or_ln51_fu_351_p2 = (tmp_1_fu_316_p3 | icmp_ln52_fu_324_p2);

assign p_mid1223_fu_450_p2 = ($signed(zext_ln31_cast_reg_916) + $signed(9'd510));

assign p_mid1_fu_591_p2 = ($signed(tmp_cast_mid1_fu_587_p1) + $signed(zext_ln31_cast1_reg_905));

assign select_ln105_1_fu_410_p3 = ((icmp_ln106_reg_925[0:0] == 1'b1) ? add_ln105_fu_397_p2 : nin_fu_142);

assign select_ln105_2_fu_522_p3 = ((icmp_ln106_reg_925[0:0] == 1'b1) ? sub_ln114_1_fu_516_p2 : sub_ln114_fu_385_p2);

assign select_ln105_fu_403_p3 = ((icmp_ln106_reg_925[0:0] == 1'b1) ? 5'd0 : by_fu_134);

assign select_ln106_1_fu_565_p3 = ((and_ln105_fu_540_p2[0:0] == 1'b1) ? add_ln106_fu_546_p2 : select_ln105_fu_403_p3);

assign select_ln106_2_fu_671_p3 = ((and_ln105_fu_540_p2[0:0] == 1'b1) ? sub_ln114_2_fu_665_p2 : select_ln105_2_fu_522_p3);

assign select_ln106_3_fu_276_p3 = ((icmp_ln106_fu_264_p2[0:0] == 1'b1) ? 10'd1 : add_ln106_1_fu_270_p2);

assign select_ln106_fu_557_p3 = ((or_ln106_fu_552_p2[0:0] == 1'b1) ? 5'd0 : bx_fu_130);

assign select_ln51_2_fu_476_p3 = ((tmp_4_fu_468_p3[0:0] == 1'b1) ? 9'd0 : 9'd254);

assign select_ln51_3_fu_484_p3 = ((tmp_3_fu_455_p3[0:0] == 1'b1) ? select_ln51_2_fu_476_p3 : add_ln52_1_fu_463_p2);

assign select_ln51_4_fu_623_p3 = ((tmp_6_fu_615_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_5_fu_637_p3 = ((or_ln51_2_fu_631_p2[0:0] == 1'b1) ? select_ln51_4_fu_623_p3 : add_ln52_2_fu_610_p2);

assign select_ln51_6_fu_737_p3 = ((tmp_8_fu_723_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign select_ln51_7_fu_745_p3 = ((or_ln51_1_fu_731_p2[0:0] == 1'b1) ? select_ln51_6_fu_737_p3 : add_ln110_fu_703_p2);

assign select_ln51_fu_343_p3 = ((tmp_2_fu_335_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln110_fu_699_p1 = $signed(add_ln110_1_fu_693_p2);

assign sext_ln114_1_fu_796_p1 = $signed(trunc_ln4_fu_786_p4);

assign sext_ln114_2_fu_761_p1 = $signed(shl_ln114_2_fu_753_p3);

assign sext_ln114_3_fu_776_p1 = $signed(add_ln114_1_fu_770_p2);

assign sext_ln114_4_fu_512_p1 = $signed(shl_ln114_1_mid_fu_504_p3);

assign sext_ln114_5_fu_661_p1 = $signed(shl_ln114_1_mid1_fu_653_p3);

assign sext_ln114_6_fu_500_p1 = $signed(shl_ln114_mid_fu_492_p3);

assign sext_ln114_fu_381_p1 = $signed(shl_ln114_1_fu_373_p3);

assign shl_ln114_1_fu_373_p3 = {{yClamped_fu_357_p3}, {2'd0}};

assign shl_ln114_1_mid1_fu_653_p3 = {{select_ln51_5_fu_637_p3}, {2'd0}};

assign shl_ln114_1_mid_fu_504_p3 = {{select_ln51_3_fu_484_p3}, {2'd0}};

assign shl_ln114_2_fu_753_p3 = {{select_ln51_7_fu_745_p3}, {2'd0}};

assign shl_ln114_mid1_fu_645_p3 = {{select_ln51_5_fu_637_p3}, {10'd0}};

assign shl_ln114_mid_fu_492_p3 = {{select_ln51_3_fu_484_p3}, {10'd0}};

assign shl_ln2_fu_365_p3 = {{yClamped_fu_357_p3}, {10'd0}};

assign sub_ln114_1_fu_516_p2 = ($signed(sext_ln114_6_fu_500_p1) - $signed(sext_ln114_4_fu_512_p1));

assign sub_ln114_2_fu_665_p2 = ($signed(shl_ln114_mid1_fu_645_p3) - $signed(sext_ln114_5_fu_661_p1));

assign sub_ln114_fu_385_p2 = ($signed(shl_ln2_fu_365_p3) - $signed(sext_ln114_fu_381_p1));

assign tmp4_fu_683_p3 = {{select_ln31}, {select_ln31}};

assign tmp_1_fu_316_p3 = empty_fu_311_p2[32'd9];

assign tmp_2_fu_335_p3 = empty_fu_311_p2[32'd9];

assign tmp_3_fu_455_p3 = p_mid1223_fu_450_p2[32'd8];

assign tmp_4_fu_468_p3 = p_mid1223_fu_450_p2[32'd8];

assign tmp_5_fu_596_p3 = p_mid1_fu_591_p2[32'd9];

assign tmp_6_fu_615_p3 = p_mid1_fu_591_p2[32'd9];

assign tmp_7_fu_709_p3 = add_ln110_fu_703_p2[32'd9];

assign tmp_8_fu_723_p3 = add_ln110_fu_703_p2[32'd9];

assign tmp_cast_fu_307_p1 = $signed(tmp_fu_301_p2);

assign tmp_cast_mid1_fu_587_p1 = $signed(tmp_mid1_fu_581_p2);

assign tmp_fu_301_p2 = ($signed(zext_ln106_fu_297_p1) + $signed(6'd62));

assign tmp_mid1_fu_581_p2 = ($signed(zext_ln106_2_fu_577_p1) + $signed(6'd62));

assign trunc_ln110_cast_fu_679_p1 = select_ln106_fu_557_p3;

assign trunc_ln4_fu_786_p4 = {{add_ln114_2_fu_780_p2[63:2]}};

assign xor_ln105_fu_529_p2 = (icmp_ln106_reg_925 ^ 1'd1);

assign yClamped_fu_357_p3 = ((or_ln51_fu_351_p2[0:0] == 1'b1) ? select_ln51_fu_343_p3 : add_ln52_fu_330_p2);

assign zext_ln105_2_fu_446_p1 = mul_ln105_fu_440_p2;

assign zext_ln105_fu_427_p1 = select_ln105_1_fu_410_p3;

assign zext_ln106_2_fu_577_p1 = add_ln106_fu_546_p2;

assign zext_ln106_fu_297_p1 = by_fu_134;

assign zext_ln110_fu_689_p1 = tmp4_fu_683_p3;

assign zext_ln114_3_fu_830_p1 = add_ln114_4_reg_950_pp0_iter10_reg;

assign zext_ln31_cast1_fu_209_p1 = zext_ln31;

assign zext_ln31_cast_fu_217_p1 = zext_ln31;

assign zext_ln52_cast2_fu_205_p1 = zext_ln52;

assign zext_ln52_cast_fu_213_p1 = zext_ln52;

always @ (posedge ap_clk) begin
    zext_ln52_cast2_reg_899[9:8] <= 2'b00;
    zext_ln31_cast1_reg_905[9:8] <= 2'b00;
    zext_ln52_cast_reg_911[8] <= 1'b0;
    zext_ln31_cast_reg_916[8] <= 1'b0;
end

endmodule //srcnn_conv3_Pipeline_VITIS_LOOP_105_1_VITIS_LOOP_106_2_VITIS_LOOP_107_3
