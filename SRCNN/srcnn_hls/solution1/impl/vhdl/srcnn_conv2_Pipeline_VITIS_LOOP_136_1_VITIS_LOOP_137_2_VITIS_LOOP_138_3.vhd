-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_137_2_VITIS_LOOP_138_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln30_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln30 : IN STD_LOGIC_VECTOR (61 downto 0);
    ti_cast14 : IN STD_LOGIC_VECTOR (3 downto 0);
    tmp_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_fm_buffer_ce0 : OUT STD_LOGIC;
    output_fm_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_500_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_500_p_ce : OUT STD_LOGIC;
    grp_fu_508_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_508_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_508_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_508_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_508_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_137_2_VITIS_LOOP_138_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln136_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ti_cast14_cast_fu_240_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast14_cast_reg_820 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln30_cast_fu_244_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln30_cast_reg_825 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln136_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmem_addr_reg_834 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln137_fu_488_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln137_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_15_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_fm_buffer_load_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal gmem_addr_read_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal bitcast_ln136_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal gmem_addr_15_read_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln140_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal select_ln141_fu_749_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln141_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln140_13_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln136_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tx_fu_128 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln138_fu_757_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ty_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln137_1_fu_496_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten42_fu_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln137_3_fu_671_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nout_fu_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln136_1_fu_359_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten80_fu_144 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_2_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal zext_ln137_fu_279_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_288_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln140_1_fu_300_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_fu_296_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln140_1_fu_308_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln137_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_371_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_9_fu_379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln140_2_fu_367_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln136_fu_389_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln136_1_fu_393_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln136_fu_412_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln136_fu_412_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln136_fu_412_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln140_mid_fu_422_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln140_1_mid_fu_433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_3_fu_429_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln140_5_fu_440_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln140_1_fu_444_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln140_fu_312_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln138_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln136_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln136_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln137_fu_476_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln140_5_fu_383_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln140_10_fu_504_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln140_6_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln140_fu_518_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_522_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln140_11_fu_514_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln137_1_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid140_fu_540_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln140_mid1_fu_545_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln140_1_mid1_fu_557_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_7_fu_553_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln140_8_fu_565_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln140_2_fu_569_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln136_2_fu_450_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln140_7_fu_530_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln140_12_fu_583_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln140_8_fu_587_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln140_fu_598_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln140_4_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln140_1_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln140_2_fu_612_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln136_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln137_2_fu_575_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln140_6_fu_620_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln140_4_fu_629_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln140_1_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln140_2_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln140_3_fu_639_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_645_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln137_1_fu_665_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln140_1_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_711_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln141_fu_721_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln141_1_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln141_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_225_ce : STD_LOGIC;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal grp_fu_229_ce : STD_LOGIC;
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_pp0_stage19_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage11_00001 : BOOLEAN;
    signal ap_block_pp0_stage15_00001 : BOOLEAN;
    signal mul_ln136_fu_412_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_mul_6ns_19ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_6ns_19ns_24_1_1_U58 : component srcnn_mul_6ns_19ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln136_fu_412_p0,
        din1 => mul_ln136_fu_412_p1,
        dout => mul_ln136_fu_412_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten42_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten42_fu_136 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten42_fu_136 <= select_ln137_3_fu_671_p3;
            end if; 
        end if;
    end process;

    indvar_flatten80_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten80_fu_144 <= ap_const_lv14_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten80_fu_144 <= add_ln136_2_fu_324_p2;
            end if; 
        end if;
    end process;

    nout_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nout_fu_140 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                nout_fu_140 <= select_ln136_1_fu_359_p3;
            end if; 
        end if;
    end process;

    tx_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tx_fu_128 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0))) then 
                    tx_fu_128 <= add_ln138_fu_757_p2;
                end if;
            end if; 
        end if;
    end process;

    ty_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ty_fu_132 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ty_fu_132 <= select_ln137_1_fu_496_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                gmem_addr_15_read_reg_872 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem_addr_15_reg_850 <= sext_ln140_fu_655_p1;
                gmem_addr_reg_834 <= sext_ln136_fu_398_p1;
                select_ln137_reg_840 <= select_ln137_fu_488_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                gmem_addr_read_reg_862 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln136_reg_830 <= icmp_ln136_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                output_fm_buffer_load_reg_857 <= output_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)))) then
                reg_234 <= grp_fu_500_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then
                select_ln141_reg_882 <= select_ln141_fu_749_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln30_cast_reg_825 <= sext_ln30_cast_fu_244_p1;
                    ti_cast14_cast_reg_820(3 downto 0) <= ti_cast14_cast_fu_240_p1(3 downto 0);
            end if;
        end if;
    end process;
    ti_cast14_cast_reg_820(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_condition_exit_pp0_iter0_stage5, ap_block_pp0_stage20_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln136_1_fu_393_p2 <= std_logic_vector(unsigned(zext_ln136_fu_389_p1) + unsigned(sext_ln30_cast_reg_825));
    add_ln136_2_fu_324_p2 <= std_logic_vector(unsigned(indvar_flatten80_fu_144) + unsigned(ap_const_lv14_1));
    add_ln136_fu_339_p2 <= std_logic_vector(unsigned(nout_fu_140) + unsigned(ap_const_lv6_1));
    add_ln137_1_fu_665_p2 <= std_logic_vector(unsigned(indvar_flatten42_fu_136) + unsigned(ap_const_lv10_1));
    add_ln137_fu_476_p2 <= std_logic_vector(unsigned(select_ln136_fu_351_p3) + unsigned(ap_const_lv5_1));
    add_ln138_fu_757_p2 <= std_logic_vector(unsigned(select_ln137_reg_840) + unsigned(ap_const_lv5_1));
    add_ln140_1_fu_607_p2 <= std_logic_vector(unsigned(zext_ln140_4_fu_603_p1) + unsigned(tmp_9));
    add_ln140_2_fu_624_p2 <= std_logic_vector(unsigned(zext_ln136_2_fu_418_p1) + unsigned(output_ftmap));
    add_ln140_3_fu_639_p2 <= std_logic_vector(signed(sext_ln140_1_fu_635_p1) + signed(add_ln140_2_fu_624_p2));
    add_ln140_4_fu_629_p2 <= std_logic_vector(unsigned(select_ln137_2_fu_575_p3) + unsigned(zext_ln140_6_fu_620_p1));
    add_ln140_5_fu_383_p2 <= std_logic_vector(unsigned(zext_ln140_9_fu_379_p1) + unsigned(zext_ln140_2_fu_367_p1));
    add_ln140_6_fu_508_p2 <= std_logic_vector(unsigned(add_ln140_5_fu_383_p2) + unsigned(zext_ln140_10_fu_504_p1));
    add_ln140_7_fu_530_p2 <= std_logic_vector(unsigned(p_shl1_fu_522_p3) + unsigned(zext_ln140_11_fu_514_p1));
    add_ln140_8_fu_587_p2 <= std_logic_vector(unsigned(add_ln140_7_fu_530_p2) + unsigned(zext_ln140_12_fu_583_p1));
    add_ln140_fu_598_p2 <= std_logic_vector(unsigned(ti_cast14_cast_reg_820) + unsigned(select_ln137_fu_488_p3));
    and_ln136_fu_470_p2 <= (xor_ln136_fu_458_p2 and icmp_ln138_fu_464_p2);
    and_ln141_fu_743_p2 <= (or_ln141_fu_737_p2 and grp_fu_508_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state22_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state22_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_pp0_stage14_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_pp0_stage14_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage20_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_io)
    begin
                ap_block_pp0_stage20_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_io));
    end process;


    ap_block_pp0_stage20_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_io)
    begin
                ap_block_pp0_stage20_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_io));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state7_io)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state7_io)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io));
    end process;

        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage14_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln136_reg_830)
    begin
                ap_block_state15_pp0_stage14_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln136_reg_830)
    begin
                ap_block_state21_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln136_reg_830)
    begin
                ap_block_state22_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state22_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp0_stage5_iter1_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state27_pp0_stage5_iter1 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln136_reg_830)
    begin
                ap_block_state3_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln136_reg_830)
    begin
                ap_block_state7_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln136_reg_830 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln136_reg_830)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln136_reg_830 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_fu_699_p1 <= gmem_addr_read_reg_862;
    bitcast_ln140_1_fu_707_p1 <= reg_234;
    bitcast_ln140_fu_703_p1 <= gmem_addr_15_read_reg_872;
    empty_fu_283_p2 <= std_logic_vector(unsigned(zext_ln137_fu_279_p1) + unsigned(select_ln30_2));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_ARREADY, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_AWREADY, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, m_axi_gmem_BVALID, ap_block_pp0_stage5)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_WREADY, icmp_ln136_reg_830, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_225_ce_assign_proc : process(ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage17)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)))) then 
            grp_fu_225_ce <= ap_const_logic_1;
        else 
            grp_fu_225_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(ap_enable_reg_pp0_iter0, output_fm_buffer_load_reg_857, ap_CS_fsm_pp0_stage11, bitcast_ln140_fu_703_p1, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage11, ap_block_pp0_stage15)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_225_p0 <= bitcast_ln140_fu_703_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_225_p0 <= output_fm_buffer_load_reg_857;
            else 
                grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(ap_enable_reg_pp0_iter0, reg_234, bitcast_ln136_fu_699_p1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage11, ap_block_pp0_stage15)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_225_p1 <= reg_234;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_225_p1 <= bitcast_ln136_fu_699_p1;
            else 
                grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_ce_assign_proc : process(ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)))) then 
            grp_fu_229_ce <= ap_const_logic_1;
        else 
            grp_fu_229_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_500_p_ce <= grp_fu_225_ce;
    grp_fu_500_p_din0 <= grp_fu_225_p0;
    grp_fu_500_p_din1 <= grp_fu_225_p1;
    grp_fu_500_p_opcode <= ap_const_lv2_0;
    grp_fu_508_p_ce <= grp_fu_229_ce;
    grp_fu_508_p_din0 <= reg_234;
    grp_fu_508_p_din1 <= ap_const_lv32_0;
    grp_fu_508_p_opcode <= ap_const_lv5_4;
    icmp_ln136_fu_318_p2 <= "1" when (indvar_flatten80_fu_144 = ap_const_lv14_2420) else "0";
    icmp_ln137_fu_345_p2 <= "1" when (indvar_flatten42_fu_136 = ap_const_lv10_121) else "0";
    icmp_ln138_fu_464_p2 <= "1" when (tx_fu_128 = ap_const_lv5_11) else "0";
    icmp_ln141_1_fu_731_p2 <= "1" when (trunc_ln141_fu_721_p1 = ap_const_lv23_0) else "0";
    icmp_ln141_fu_725_p2 <= "0" when (tmp_5_fu_711_p4 = ap_const_lv8_FF) else "1";

    m_axi_gmem_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage6, gmem_addr_reg_834, gmem_addr_15_reg_850, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln136_reg_830 = ap_const_lv1_0))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_15_reg_850;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_834;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_15_reg_850;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln136_reg_830, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= select_ln141_reg_882;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln136_reg_830, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln136_reg_830 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln136_fu_412_p0 <= mul_ln136_fu_412_p00(6 - 1 downto 0);
    mul_ln136_fu_412_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln136_1_fu_359_p3),24));
    mul_ln136_fu_412_p1 <= ap_const_lv24_3F804(19 - 1 downto 0);
    or_ln137_fu_482_p2 <= (icmp_ln137_fu_345_p2 or and_ln136_fu_470_p2);
    or_ln141_fu_737_p2 <= (icmp_ln141_fu_725_p2 or icmp_ln141_1_fu_731_p2);
    output_fm_buffer_address0 <= zext_ln140_13_fu_593_p1(14 - 1 downto 0);

    output_fm_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid140_fu_540_p2 <= std_logic_vector(unsigned(zext_ln137_1_fu_536_p1) + unsigned(select_ln30_2));
    p_shl1_fu_522_p3 <= (trunc_ln140_fu_518_p1 & ap_const_lv4_0);
    select_ln136_1_fu_359_p3 <= 
        add_ln136_fu_339_p2 when (icmp_ln137_fu_345_p2(0) = '1') else 
        nout_fu_140;
    select_ln136_2_fu_450_p3 <= 
        sub_ln140_1_fu_444_p2 when (icmp_ln137_fu_345_p2(0) = '1') else 
        sub_ln140_fu_312_p2;
    select_ln136_fu_351_p3 <= 
        ap_const_lv5_0 when (icmp_ln137_fu_345_p2(0) = '1') else 
        ty_fu_132;
    select_ln137_1_fu_496_p3 <= 
        add_ln137_fu_476_p2 when (and_ln136_fu_470_p2(0) = '1') else 
        select_ln136_fu_351_p3;
    select_ln137_2_fu_575_p3 <= 
        sub_ln140_2_fu_569_p2 when (and_ln136_fu_470_p2(0) = '1') else 
        select_ln136_2_fu_450_p3;
    select_ln137_3_fu_671_p3 <= 
        ap_const_lv10_1 when (icmp_ln137_fu_345_p2(0) = '1') else 
        add_ln137_1_fu_665_p2;
    select_ln137_fu_488_p3 <= 
        ap_const_lv5_0 when (or_ln137_fu_482_p2(0) = '1') else 
        tx_fu_128;
    select_ln141_fu_749_p3 <= 
        ap_const_lv32_0 when (and_ln141_fu_743_p2(0) = '1') else 
        bitcast_ln140_1_fu_707_p1;
        sext_ln136_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln136_1_fu_393_p2),64));

        sext_ln140_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_4_fu_629_p2),64));

        sext_ln140_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_645_p4),64));

        sext_ln30_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30),63));

    shl_ln140_1_fu_300_p3 <= (empty_fu_283_p2 & ap_const_lv2_0);
    shl_ln140_1_mid1_fu_557_p3 <= (p_mid140_fu_540_p2 & ap_const_lv2_0);
    shl_ln140_1_mid_fu_433_p3 <= (select_ln30_2 & ap_const_lv2_0);
    shl_ln140_2_fu_612_p3 <= (add_ln140_1_fu_607_p2 & ap_const_lv2_0);
    shl_ln140_mid1_fu_545_p3 <= (p_mid140_fu_540_p2 & ap_const_lv10_0);
    shl_ln140_mid_fu_422_p3 <= (select_ln30_2 & ap_const_lv10_0);
    shl_ln_fu_288_p3 <= (empty_fu_283_p2 & ap_const_lv10_0);
    sub_ln140_1_fu_444_p2 <= std_logic_vector(unsigned(zext_ln140_3_fu_429_p1) - unsigned(zext_ln140_5_fu_440_p1));
    sub_ln140_2_fu_569_p2 <= std_logic_vector(unsigned(zext_ln140_7_fu_553_p1) - unsigned(zext_ln140_8_fu_565_p1));
    sub_ln140_fu_312_p2 <= std_logic_vector(unsigned(zext_ln140_fu_296_p1) - unsigned(zext_ln140_1_fu_308_p1));
    ti_cast14_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_cast14),5));
    tmp_5_fu_711_p4 <= bitcast_ln140_1_fu_707_p1(30 downto 23);
    tmp_s_fu_371_p3 <= (select_ln136_1_fu_359_p3 & ap_const_lv4_0);
    trunc_ln140_fu_518_p1 <= add_ln140_6_fu_508_p2(10 - 1 downto 0);
    trunc_ln141_fu_721_p1 <= bitcast_ln140_1_fu_707_p1(23 - 1 downto 0);
    trunc_ln9_fu_645_p4 <= add_ln140_3_fu_639_p2(63 downto 2);
    xor_ln136_fu_458_p2 <= (icmp_ln137_fu_345_p2 xor ap_const_lv1_1);
    zext_ln136_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln136_fu_412_p2),64));
    zext_ln136_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln136_1_fu_359_p3),63));
    zext_ln137_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_fu_476_p2),8));
    zext_ln137_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_fu_132),8));
    zext_ln140_10_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_1_fu_496_p3),11));
    zext_ln140_11_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_6_fu_508_p2),14));
    zext_ln140_12_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_fu_488_p3),14));
    zext_ln140_13_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_8_fu_587_p2),64));
    zext_ln140_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_1_fu_300_p3),19));
    zext_ln140_2_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln136_1_fu_359_p3),11));
    zext_ln140_3_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_mid_fu_422_p3),19));
    zext_ln140_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_fu_598_p2),8));
    zext_ln140_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_1_mid_fu_433_p3),19));
    zext_ln140_6_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_2_fu_612_p3),19));
    zext_ln140_7_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_mid1_fu_545_p3),19));
    zext_ln140_8_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_1_mid1_fu_557_p3),19));
    zext_ln140_9_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_371_p3),11));
    zext_ln140_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_288_p3),19));
end behav;
