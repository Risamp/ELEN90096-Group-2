-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i1_AWVALID : OUT STD_LOGIC;
    m_axi_i1_AWREADY : IN STD_LOGIC;
    m_axi_i1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_WVALID : OUT STD_LOGIC;
    m_axi_i1_WREADY : IN STD_LOGIC;
    m_axi_i1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_WLAST : OUT STD_LOGIC;
    m_axi_i1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_ARVALID : OUT STD_LOGIC;
    m_axi_i1_ARREADY : IN STD_LOGIC;
    m_axi_i1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_RVALID : IN STD_LOGIC;
    m_axi_i1_RREADY : OUT STD_LOGIC;
    m_axi_i1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i1_RLAST : IN STD_LOGIC;
    m_axi_i1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_BVALID : IN STD_LOGIC;
    m_axi_i1_BREADY : OUT STD_LOGIC;
    m_axi_i1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w1_AWVALID : OUT STD_LOGIC;
    m_axi_w1_AWREADY : IN STD_LOGIC;
    m_axi_w1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_WVALID : OUT STD_LOGIC;
    m_axi_w1_WREADY : IN STD_LOGIC;
    m_axi_w1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_WLAST : OUT STD_LOGIC;
    m_axi_w1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_ARVALID : OUT STD_LOGIC;
    m_axi_w1_ARREADY : IN STD_LOGIC;
    m_axi_w1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RVALID : IN STD_LOGIC;
    m_axi_w1_RREADY : OUT STD_LOGIC;
    m_axi_w1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_RLAST : IN STD_LOGIC;
    m_axi_w1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_w1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_BVALID : IN STD_LOGIC;
    m_axi_w1_BREADY : OUT STD_LOGIC;
    m_axi_w1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWVALID : OUT STD_LOGIC;
    m_axi_i2_AWREADY : IN STD_LOGIC;
    m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WVALID : OUT STD_LOGIC;
    m_axi_i2_WREADY : IN STD_LOGIC;
    m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_WLAST : OUT STD_LOGIC;
    m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARVALID : OUT STD_LOGIC;
    m_axi_i2_ARREADY : IN STD_LOGIC;
    m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RVALID : IN STD_LOGIC;
    m_axi_i2_RREADY : OUT STD_LOGIC;
    m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_RLAST : IN STD_LOGIC;
    m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BVALID : IN STD_LOGIC;
    m_axi_i2_BREADY : OUT STD_LOGIC;
    m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_284_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_284_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_ce : OUT STD_LOGIC;
    grp_fu_288_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_ce : OUT STD_LOGIC;
    grp_fu_292_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_292_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_292_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_292_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_292_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_288 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv13_107 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_3F8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001111111000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_103 : STD_LOGIC_VECTOR (8 downto 0) := "100000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv15_144 : STD_LOGIC_VECTOR (14 downto 0) := "000000101000100";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv16_8778 : STD_LOGIC_VECTOR (15 downto 0) := "1000011101111000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv13_10EF : STD_LOGIC_VECTOR (12 downto 0) := "1000011101111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_2_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal input_fm_buffer_2_0_ce0 : STD_LOGIC;
    signal input_fm_buffer_2_0_we0 : STD_LOGIC;
    signal input_fm_buffer_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_2_0_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal input_fm_buffer_2_0_ce1 : STD_LOGIC;
    signal input_fm_buffer_2_0_we1 : STD_LOGIC;
    signal weight_buffer_2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weight_buffer_2_0_ce0 : STD_LOGIC;
    signal weight_buffer_2_0_we0 : STD_LOGIC;
    signal weight_buffer_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buffer_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_fm_buffer_1_ce0 : STD_LOGIC;
    signal output_fm_buffer_1_we0 : STD_LOGIC;
    signal output_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal w1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal w1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_4_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln31_fu_509_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_reg_1177 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln31_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_1_fu_513_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln85_1_reg_1182 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln85_fu_529_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln85_reg_1190 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_addr_reg_1195 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln85_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_addr_1_reg_1201 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_fu_708_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_110_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_110_reg_1228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal empty_112_fu_761_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_112_reg_1233 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond255_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w1_addr_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_7_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_114_fu_849_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_114_reg_1247 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln114_1_fu_861_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln114_1_reg_1255 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_117_fu_892_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_117_reg_1260 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln116_fu_904_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln116_reg_1268 : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_buffer_2_0_addr_reg_1273 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal empty_119_fu_930_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_119_reg_1281 : STD_LOGIC_VECTOR (3 downto 0);
    signal w1_addr_read_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_1_fu_946_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_1_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal select_ln39_1_fu_972_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_1_reg_1299 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln39_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_1022_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln42_reg_1306 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln42_3_fu_1030_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln42_3_reg_1311 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_1_addr_reg_1317 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln43_fu_1085_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln42_4_fu_1097_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln42_4_reg_1327 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln61_fu_1105_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln61_reg_1332 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_fu_1110_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_reg_1337 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln53_fu_1130_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln53_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal output_fm_buffer_1_load_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_ap_start : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_ap_done : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_ap_idle : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_ap_ready : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWVALID : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WVALID : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WLAST : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARVALID : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_RREADY : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_m_axi_i2_BREADY : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_conv1_biases_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_export_output_buffer_c1_fu_464_conv1_biases_ce0 : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_ce0 : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_we0 : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_ce : STD_LOGIC;
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_ce : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_ap_start : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_ap_done : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_ap_idle : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_ap_ready : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_p_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_p_out_ap_vld : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_ce0 : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_ce0 : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_ce : STD_LOGIC;
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_ce : STD_LOGIC;
    signal bh_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_330 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln94_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index_i_reg_353 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal out_reg_364 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal bout_reg_376 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln116_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal k_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond317_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index_i20_reg_398 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal indvar_flatten20_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal o_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_431 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_reg_442 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_453 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_export_output_buffer_c1_fu_464_ap_start_reg : STD_LOGIC := '0';
    signal grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln96_1_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_1_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast91_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast95_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast94_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln90_1_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln91_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln114_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_823_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_111_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_519_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln88_fu_535_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln88_fu_541_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln88_1_fu_545_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_572_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal hclamp_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln90_1_fu_602_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_594_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln90_fu_610_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln90_fu_614_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln90_2_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln90_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_629_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln91_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_655_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln96_fu_683_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln96_fu_687_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln94_fu_698_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln97_fu_714_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln97_fu_720_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln97_1_fu_724_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal loop_index_i_cast_fu_735_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx36612_sum_i_fu_751_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx36612_sum_i_cast85_fu_757_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln114_fu_788_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln114_fu_788_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln114_fu_788_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln114_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_fu_798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_803_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_fu_837_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bout_cast_fu_833_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_cast_fu_867_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_115_fu_871_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_116_fu_880_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_fu_884_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast_fu_876_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_index_i20_cast88_fu_910_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_118_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln42_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_952_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln43_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_964_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln39_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_1010_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln53_fu_988_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln42_5_cast_fu_1038_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_121_fu_1042_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_122_fu_1052_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_1056_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast87_fu_1048_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_123_fu_1064_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln42_cast_fu_1070_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_124_fu_1074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_2_fu_1091_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_1119_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_15_fu_1126_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln39_1_cast_fu_1116_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1352_ce : STD_LOGIC;
    signal grp_fu_1356_ce : STD_LOGIC;
    signal grp_fu_1360_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal mul_ln114_fu_788_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_export_output_buffer_c1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_i2_AWVALID : OUT STD_LOGIC;
        m_axi_i2_AWREADY : IN STD_LOGIC;
        m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_WVALID : OUT STD_LOGIC;
        m_axi_i2_WREADY : IN STD_LOGIC;
        m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_WLAST : OUT STD_LOGIC;
        m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_ARVALID : OUT STD_LOGIC;
        m_axi_i2_ARREADY : IN STD_LOGIC;
        m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RVALID : IN STD_LOGIC;
        m_axi_i2_RREADY : OUT STD_LOGIC;
        m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_i2_RLAST : IN STD_LOGIC;
        m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_BVALID : IN STD_LOGIC;
        m_axi_i2_BREADY : OUT STD_LOGIC;
        m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        conv1_biases_ce0 : OUT STD_LOGIC;
        conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r : IN STD_LOGIC_VECTOR (5 downto 0);
        h : IN STD_LOGIC_VECTOR (7 downto 0);
        output_fm_buffer_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_fm_buffer_1_ce0 : OUT STD_LOGIC;
        output_fm_buffer_1_we0 : OUT STD_LOGIC;
        output_fm_buffer_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_fm_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_1352_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_ce : OUT STD_LOGIC;
        grp_fu_1360_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1360_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1360_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1360_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1360_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv1_Pipeline_KR_KC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_fm_buffer_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
        add_ln53 : IN STD_LOGIC_VECTOR (7 downto 0);
        select_ln42_6 : IN STD_LOGIC_VECTOR (4 downto 0);
        zext_ln43_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_out_ap_vld : OUT STD_LOGIC;
        weight_buffer_2_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_buffer_2_0_ce0 : OUT STD_LOGIC;
        weight_buffer_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_fm_buffer_2_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_fm_buffer_2_0_ce0 : OUT STD_LOGIC;
        input_fm_buffer_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_1352_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1352_p_ce : OUT STD_LOGIC;
        grp_fu_1356_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1356_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1356_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1356_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_mul_7ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_weight_buffer_2_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_2_0_U : component srcnn_conv1_input_fm_buffer_2_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6575,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_2_0_address0,
        ce0 => input_fm_buffer_2_0_ce0,
        we0 => input_fm_buffer_2_0_we0,
        d0 => input_fm_buffer_2_0_d0,
        q0 => input_fm_buffer_2_0_q0,
        address1 => input_fm_buffer_2_0_address1,
        ce1 => input_fm_buffer_2_0_ce1,
        we1 => input_fm_buffer_2_0_we1,
        d1 => left_reg_1207);

    weight_buffer_2_0_U : component srcnn_conv1_weight_buffer_2_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_buffer_2_0_address0,
        ce0 => weight_buffer_2_0_ce0,
        we0 => weight_buffer_2_0_we0,
        d0 => weight_buffer_2_0_d0,
        q0 => weight_buffer_2_0_q0);

    output_fm_buffer_1_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 34680,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_1_address0,
        ce0 => output_fm_buffer_1_ce0,
        we0 => output_fm_buffer_1_we0,
        d0 => output_fm_buffer_1_d0,
        q0 => output_fm_buffer_1_q0);

    grp_export_output_buffer_c1_fu_464 : component srcnn_export_output_buffer_c1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_export_output_buffer_c1_fu_464_ap_start,
        ap_done => grp_export_output_buffer_c1_fu_464_ap_done,
        ap_idle => grp_export_output_buffer_c1_fu_464_ap_idle,
        ap_ready => grp_export_output_buffer_c1_fu_464_ap_ready,
        m_axi_i2_AWVALID => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWVALID,
        m_axi_i2_AWREADY => m_axi_i2_AWREADY,
        m_axi_i2_AWADDR => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWADDR,
        m_axi_i2_AWID => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWID,
        m_axi_i2_AWLEN => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLEN,
        m_axi_i2_AWSIZE => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWSIZE,
        m_axi_i2_AWBURST => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWBURST,
        m_axi_i2_AWLOCK => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLOCK,
        m_axi_i2_AWCACHE => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWCACHE,
        m_axi_i2_AWPROT => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWPROT,
        m_axi_i2_AWQOS => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWQOS,
        m_axi_i2_AWREGION => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWREGION,
        m_axi_i2_AWUSER => grp_export_output_buffer_c1_fu_464_m_axi_i2_AWUSER,
        m_axi_i2_WVALID => grp_export_output_buffer_c1_fu_464_m_axi_i2_WVALID,
        m_axi_i2_WREADY => m_axi_i2_WREADY,
        m_axi_i2_WDATA => grp_export_output_buffer_c1_fu_464_m_axi_i2_WDATA,
        m_axi_i2_WSTRB => grp_export_output_buffer_c1_fu_464_m_axi_i2_WSTRB,
        m_axi_i2_WLAST => grp_export_output_buffer_c1_fu_464_m_axi_i2_WLAST,
        m_axi_i2_WID => grp_export_output_buffer_c1_fu_464_m_axi_i2_WID,
        m_axi_i2_WUSER => grp_export_output_buffer_c1_fu_464_m_axi_i2_WUSER,
        m_axi_i2_ARVALID => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARVALID,
        m_axi_i2_ARREADY => ap_const_logic_0,
        m_axi_i2_ARADDR => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARADDR,
        m_axi_i2_ARID => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARID,
        m_axi_i2_ARLEN => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARLEN,
        m_axi_i2_ARSIZE => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARSIZE,
        m_axi_i2_ARBURST => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARBURST,
        m_axi_i2_ARLOCK => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARLOCK,
        m_axi_i2_ARCACHE => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARCACHE,
        m_axi_i2_ARPROT => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARPROT,
        m_axi_i2_ARQOS => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARQOS,
        m_axi_i2_ARREGION => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARREGION,
        m_axi_i2_ARUSER => grp_export_output_buffer_c1_fu_464_m_axi_i2_ARUSER,
        m_axi_i2_RVALID => ap_const_logic_0,
        m_axi_i2_RREADY => grp_export_output_buffer_c1_fu_464_m_axi_i2_RREADY,
        m_axi_i2_RDATA => ap_const_lv32_0,
        m_axi_i2_RLAST => ap_const_logic_0,
        m_axi_i2_RID => ap_const_lv1_0,
        m_axi_i2_RFIFONUM => ap_const_lv13_0,
        m_axi_i2_RUSER => ap_const_lv1_0,
        m_axi_i2_RRESP => ap_const_lv2_0,
        m_axi_i2_BVALID => m_axi_i2_BVALID,
        m_axi_i2_BREADY => grp_export_output_buffer_c1_fu_464_m_axi_i2_BREADY,
        m_axi_i2_BRESP => m_axi_i2_BRESP,
        m_axi_i2_BID => m_axi_i2_BID,
        m_axi_i2_BUSER => m_axi_i2_BUSER,
        output_ftmap => output_ftmap,
        conv1_biases_address0 => grp_export_output_buffer_c1_fu_464_conv1_biases_address0,
        conv1_biases_ce0 => grp_export_output_buffer_c1_fu_464_conv1_biases_ce0,
        conv1_biases_q0 => conv1_biases_q0,
        out_r => trunc_ln61_reg_1332,
        h => h_4_reg_1169,
        output_fm_buffer_1_address0 => grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_address0,
        output_fm_buffer_1_ce0 => grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_ce0,
        output_fm_buffer_1_we0 => grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_we0,
        output_fm_buffer_1_d0 => grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_d0,
        output_fm_buffer_1_q0 => output_fm_buffer_1_q0,
        grp_fu_1352_p_din0 => grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din0,
        grp_fu_1352_p_din1 => grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din1,
        grp_fu_1352_p_opcode => grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_opcode,
        grp_fu_1352_p_dout0 => grp_fu_284_p_dout0,
        grp_fu_1352_p_ce => grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_ce,
        grp_fu_1360_p_din0 => grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din0,
        grp_fu_1360_p_din1 => grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din1,
        grp_fu_1360_p_opcode => grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_opcode,
        grp_fu_1360_p_dout0 => grp_fu_292_p_dout0,
        grp_fu_1360_p_ce => grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_ce);

    grp_conv1_Pipeline_KR_KC_fu_477 : component srcnn_conv1_Pipeline_KR_KC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv1_Pipeline_KR_KC_fu_477_ap_start,
        ap_done => grp_conv1_Pipeline_KR_KC_fu_477_ap_done,
        ap_idle => grp_conv1_Pipeline_KR_KC_fu_477_ap_idle,
        ap_ready => grp_conv1_Pipeline_KR_KC_fu_477_ap_ready,
        output_fm_buffer_1_load => output_fm_buffer_1_load_reg_1347,
        add_ln53 => add_ln53_reg_1342,
        select_ln42_6 => select_ln42_3_reg_1311,
        zext_ln43_2 => select_ln42_reg_1306,
        p_out => grp_conv1_Pipeline_KR_KC_fu_477_p_out,
        p_out_ap_vld => grp_conv1_Pipeline_KR_KC_fu_477_p_out_ap_vld,
        weight_buffer_2_0_address0 => grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_address0,
        weight_buffer_2_0_ce0 => grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_ce0,
        weight_buffer_2_0_q0 => weight_buffer_2_0_q0,
        input_fm_buffer_2_0_address0 => grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_address0,
        input_fm_buffer_2_0_ce0 => grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_ce0,
        input_fm_buffer_2_0_q0 => input_fm_buffer_2_0_q0,
        grp_fu_1352_p_din0 => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din0,
        grp_fu_1352_p_din1 => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din1,
        grp_fu_1352_p_opcode => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_opcode,
        grp_fu_1352_p_dout0 => grp_fu_284_p_dout0,
        grp_fu_1352_p_ce => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_ce,
        grp_fu_1356_p_din0 => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din0,
        grp_fu_1356_p_din1 => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din1,
        grp_fu_1356_p_dout0 => grp_fu_288_p_dout0,
        grp_fu_1356_p_ce => grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_ce);

    mul_7ns_10ns_15_1_1_U32 : component srcnn_mul_7ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln114_fu_788_p0,
        din1 => mul_ln114_fu_788_p1,
        dout => mul_ln114_fu_788_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_Pipeline_KR_KC_fu_477_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_export_output_buffer_c1_fu_464_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_export_output_buffer_c1_fu_464_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                    grp_export_output_buffer_c1_fu_464_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_export_output_buffer_c1_fu_464_ap_ready = ap_const_logic_1)) then 
                    grp_export_output_buffer_c1_fu_464_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bh_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_503_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bh_reg_319 <= ap_const_lv5_0;
            elsif (((exitcond255_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                bh_reg_319 <= add_ln85_reg_1190;
            end if; 
        end if;
    end process;

    bout_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                bout_reg_376 <= ap_const_lv4_0;
            elsif (((icmp_ln116_fu_898_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                bout_reg_376 <= add_ln114_1_reg_1255;
            end if; 
        end if;
    end process;

    c_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                c_reg_453 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                c_reg_453 <= add_ln43_reg_1322;
            end if; 
        end if;
    end process;

    h_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_196 <= ap_const_lv8_0;
            elsif (((tmp_7_fu_776_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                h_fu_196 <= add_ln31_fu_823_p2;
            end if; 
        end if;
    end process;

    indvar_flatten20_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                indvar_flatten20_reg_409 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                indvar_flatten20_reg_409 <= add_ln39_1_reg_1294;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                indvar_flatten7_reg_431 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                indvar_flatten7_reg_431 <= select_ln42_4_reg_1327;
            end if; 
        end if;
    end process;

    k_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                k_reg_387 <= ap_const_lv4_0;
            elsif (((exitcond317_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                k_reg_387 <= add_ln116_reg_1268;
            end if; 
        end if;
    end process;

    loop_index_i20_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                loop_index_i20_reg_398 <= empty_119_reg_1281;
            elsif (((icmp_ln116_fu_898_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                loop_index_i20_reg_398 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    loop_index_i_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                loop_index_i_reg_353 <= empty_110_reg_1228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                loop_index_i_reg_353 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    o_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                o_reg_420 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                o_reg_420 <= select_ln39_1_reg_1299;
            end if; 
        end if;
    end process;

    out_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_reg_364 <= ap_const_lv7_0;
            elsif (((grp_export_output_buffer_c1_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                out_reg_364 <= add_ln35_reg_1337;
            end if; 
        end if;
    end process;

    p_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_i1_RVALID = ap_const_logic_1))) then 
                p_reg_342 <= ap_const_lv3_0;
            elsif (((icmp_ln94_fu_702_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_reg_342 <= add_ln94_fu_708_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_503_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_330 <= ap_const_lv13_0;
            elsif (((exitcond255_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                phi_mul_reg_330 <= add_ln85_1_reg_1182;
            end if; 
        end if;
    end process;

    r_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                r_reg_442 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                r_reg_442 <= select_ln42_3_reg_1311;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln114_1_reg_1255 <= add_ln114_1_fu_861_p2;
                empty_114_reg_1247 <= empty_114_fu_849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln116_reg_1268 <= add_ln116_fu_904_p2;
                empty_117_reg_1260 <= empty_117_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                add_ln35_reg_1337 <= add_ln35_fu_1110_p2;
                trunc_ln61_reg_1332 <= trunc_ln61_fu_1105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                add_ln39_1_reg_1294 <= add_ln39_1_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                add_ln43_reg_1322 <= add_ln43_fu_1085_p2;
                output_fm_buffer_1_addr_reg_1317 <= p_cast94_fu_1080_p1(16 - 1 downto 0);
                select_ln39_1_reg_1299 <= select_ln39_1_fu_972_p3;
                select_ln42_3_reg_1311 <= select_ln42_3_fu_1030_p3;
                select_ln42_4_reg_1327 <= select_ln42_4_fu_1097_p3;
                select_ln42_reg_1306 <= select_ln42_fu_1022_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln53_reg_1342 <= add_ln53_fu_1130_p2;
                output_fm_buffer_1_load_reg_1347 <= output_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln85_1_reg_1182 <= add_ln85_1_fu_513_p2;
                add_ln85_reg_1190 <= add_ln85_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                empty_110_reg_1228 <= empty_110_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond255_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                empty_112_reg_1233 <= empty_112_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                empty_119_reg_1281 <= empty_119_fu_930_p2;
                weight_buffer_2_0_addr_reg_1273 <= p_cast95_fu_919_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h_4_reg_1169 <= h_fu_196;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i1_addr_1_reg_1201 <= sext_ln91_fu_665_p1;
                i1_addr_reg_1195 <= sext_ln90_1_fu_639_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                left_reg_1207 <= left_fu_675_p1;
                right_reg_1212 <= right_fu_679_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_491 <= m_axi_i1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                w1_addr_read_reg_1286 <= m_axi_w1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_776_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                w1_addr_reg_1241 <= sext_ln114_fu_813_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_503_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln31_reg_1177(7 downto 0) <= zext_ln31_fu_509_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_1177(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_i1_ARREADY, m_axi_i1_RVALID, m_axi_w1_ARREADY, m_axi_w1_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state38, ap_CS_fsm_state2, icmp_ln31_fu_503_p2, ap_CS_fsm_state3, icmp_ln85_fu_523_p2, ap_CS_fsm_state14, ap_CS_fsm_state23, exitcond255_fu_739_p2, ap_CS_fsm_state26, tmp_7_fu_776_p3, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state40, icmp_ln39_fu_940_p2, grp_export_output_buffer_c1_fu_464_ap_done, grp_conv1_Pipeline_KR_KC_fu_477_ap_done, icmp_ln94_fu_702_p2, ap_CS_fsm_state44, icmp_ln116_fu_898_p2, exitcond317_fu_924_p2, icmp_ln114_fu_855_p2, ap_CS_fsm_state42)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_503_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln85_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_i1_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_i1_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln94_fu_702_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((exitcond255_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_i1_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state26 => 
                if (((tmp_7_fu_776_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w1_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln114_fu_855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln116_fu_898_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((exitcond317_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_w1_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_conv1_Pipeline_KR_KC_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state44 => 
                if (((grp_export_output_buffer_c1_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln114_1_fu_861_p2 <= std_logic_vector(unsigned(bout_reg_376) + unsigned(ap_const_lv4_1));
    add_ln114_fu_798_p2 <= std_logic_vector(unsigned(zext_ln114_fu_794_p1) + unsigned(conv1_weights));
    add_ln116_fu_904_p2 <= std_logic_vector(unsigned(k_reg_387) + unsigned(ap_const_lv4_1));
    add_ln31_fu_823_p2 <= std_logic_vector(unsigned(h_fu_196) + unsigned(ap_const_lv8_11));
    add_ln35_fu_1110_p2 <= std_logic_vector(unsigned(out_reg_364) + unsigned(ap_const_lv7_8));
    add_ln39_1_fu_946_p2 <= std_logic_vector(unsigned(indvar_flatten20_reg_409) + unsigned(ap_const_lv16_1));
    add_ln39_fu_952_p2 <= std_logic_vector(unsigned(o_reg_420) + unsigned(ap_const_lv4_1));
    add_ln42_2_fu_1091_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_431) + unsigned(ap_const_lv13_1));
    add_ln42_fu_1010_p2 <= std_logic_vector(unsigned(select_ln39_fu_964_p3) + unsigned(ap_const_lv5_1));
    add_ln43_fu_1085_p2 <= std_logic_vector(unsigned(select_ln42_fu_1022_p3) + unsigned(ap_const_lv8_1));
    add_ln53_fu_1130_p2 <= std_logic_vector(unsigned(zext_ln53_15_fu_1126_p1) + unsigned(select_ln39_1_cast_fu_1116_p1));
    add_ln85_1_fu_513_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(ap_const_lv13_107));
    add_ln85_fu_529_p2 <= std_logic_vector(unsigned(bh_reg_319) + unsigned(ap_const_lv5_1));
    add_ln88_1_fu_545_p2 <= std_logic_vector(signed(sext_ln88_fu_541_p1) + signed(zext_ln31_reg_1177));
    add_ln88_fu_535_p2 <= std_logic_vector(unsigned(zext_ln85_fu_519_p1) + unsigned(ap_const_lv6_3C));
    add_ln90_fu_624_p2 <= std_logic_vector(signed(sext_ln90_2_fu_620_p1) + signed(input_ftmap));
    add_ln91_fu_649_p2 <= std_logic_vector(unsigned(add_ln90_fu_624_p2) + unsigned(ap_const_lv64_3F8));
    add_ln94_fu_708_p2 <= std_logic_vector(unsigned(p_reg_342) + unsigned(ap_const_lv3_1));
    add_ln96_fu_687_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(zext_ln96_fu_683_p1));
    add_ln97_1_fu_724_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(zext_ln97_fu_720_p1));
    add_ln97_fu_714_p2 <= std_logic_vector(unsigned(zext_ln94_fu_698_p1) + unsigned(ap_const_lv9_103));
    and_ln39_fu_1004_p2 <= (xor_ln39_fu_992_p2 and icmp_ln43_fu_998_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(m_axi_i1_RVALID)
    begin
        if ((m_axi_i1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_i1_RVALID)
    begin
        if ((m_axi_i1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_i1_ARREADY)
    begin
        if ((m_axi_i1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(m_axi_i1_RVALID)
    begin
        if ((m_axi_i1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_w1_ARREADY)
    begin
        if ((m_axi_w1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(m_axi_w1_RVALID)
    begin
        if ((m_axi_w1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;

    ap_ST_fsm_state42_blk_assign_proc : process(grp_conv1_Pipeline_KR_KC_fu_477_ap_done)
    begin
        if ((grp_conv1_Pipeline_KR_KC_fu_477_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(grp_export_output_buffer_c1_fu_464_ap_done)
    begin
        if ((grp_export_output_buffer_c1_fu_464_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_i1_ARREADY)
    begin
        if ((m_axi_i1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_i1_ARREADY)
    begin
        if ((m_axi_i1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_503_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_503_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_503_p2)
    begin
        if (((icmp_ln31_fu_503_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx36612_sum_i_cast85_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx36612_sum_i_fu_751_p2),13));
    arrayidx36612_sum_i_fu_751_p2 <= std_logic_vector(unsigned(loop_index_i_cast_fu_735_p1) + unsigned(ap_const_lv9_4));
    bout_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bout_reg_376),8));
    conv1_biases_address0 <= grp_export_output_buffer_c1_fu_464_conv1_biases_address0;
    conv1_biases_ce0 <= grp_export_output_buffer_c1_fu_464_conv1_biases_ce0;
    empty_110_fu_745_p2 <= std_logic_vector(unsigned(loop_index_i_reg_353) + unsigned(ap_const_lv8_1));
    empty_111_fu_767_p1 <= reg_491;
    empty_112_fu_761_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(arrayidx36612_sum_i_cast85_fu_757_p1));
    empty_114_fu_849_p2 <= std_logic_vector(unsigned(tmp_cast_fu_845_p1) + unsigned(bout_cast_fu_833_p1));
    empty_115_fu_871_p2 <= std_logic_vector(unsigned(empty_114_reg_1247) + unsigned(k_cast_fu_867_p1));
    empty_116_fu_880_p1 <= empty_115_fu_871_p2(7 - 1 downto 0);
    empty_117_fu_892_p2 <= std_logic_vector(unsigned(p_shl5_fu_884_p3) + unsigned(p_cast_fu_876_p1));
    empty_118_fu_914_p2 <= std_logic_vector(unsigned(empty_117_reg_1260) + unsigned(loop_index_i20_cast88_fu_910_p1));
    empty_119_fu_930_p2 <= std_logic_vector(unsigned(loop_index_i20_reg_398) + unsigned(ap_const_lv4_1));
    empty_121_fu_1042_p2 <= std_logic_vector(unsigned(zext_ln53_fu_988_p1) + unsigned(select_ln42_5_cast_fu_1038_p1));
    empty_122_fu_1052_p1 <= empty_121_fu_1042_p2(8 - 1 downto 0);
    empty_123_fu_1064_p2 <= std_logic_vector(unsigned(p_shl6_fu_1056_p3) - unsigned(p_cast87_fu_1048_p1));
    empty_124_fu_1074_p2 <= std_logic_vector(unsigned(empty_123_fu_1064_p2) + unsigned(select_ln42_cast_fu_1070_p1));
    exitcond255_fu_739_p2 <= "1" when (loop_index_i_reg_353 = ap_const_lv8_FF) else "0";
    exitcond317_fu_924_p2 <= "1" when (loop_index_i20_reg_398 = ap_const_lv4_9) else "0";
    grp_conv1_Pipeline_KR_KC_fu_477_ap_start <= grp_conv1_Pipeline_KR_KC_fu_477_ap_start_reg;
    grp_export_output_buffer_c1_fu_464_ap_start <= grp_export_output_buffer_c1_fu_464_ap_start_reg;

    grp_fu_1352_ce_assign_proc : process(grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_ce, grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_ce, ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1352_ce <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1352_ce <= grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_ce;
        else 
            grp_fu_1352_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1352_p0_assign_proc : process(grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din0, grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din0, ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1352_p0 <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1352_p0 <= grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din0;
        else 
            grp_fu_1352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1352_p1_assign_proc : process(grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din1, grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din1, ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1352_p1 <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1352_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1352_p1 <= grp_export_output_buffer_c1_fu_464_grp_fu_1352_p_din1;
        else 
            grp_fu_1352_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1356_ce_assign_proc : process(grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_ce, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1356_ce <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_ce;
        else 
            grp_fu_1356_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1360_ce_assign_proc : process(grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_ce, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1360_ce <= grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_ce;
        else 
            grp_fu_1360_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_284_p_ce <= grp_fu_1352_ce;
    grp_fu_284_p_din0 <= grp_fu_1352_p0;
    grp_fu_284_p_din1 <= grp_fu_1352_p1;
    grp_fu_284_p_opcode <= ap_const_lv2_0;
    grp_fu_288_p_ce <= grp_fu_1356_ce;
    grp_fu_288_p_din0 <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din0;
    grp_fu_288_p_din1 <= grp_conv1_Pipeline_KR_KC_fu_477_grp_fu_1356_p_din1;
    grp_fu_292_p_ce <= grp_fu_1360_ce;
    grp_fu_292_p_din0 <= grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din0;
    grp_fu_292_p_din1 <= grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_din1;
    grp_fu_292_p_opcode <= grp_export_output_buffer_c1_fu_464_grp_fu_1360_p_opcode;
    hclamp_fu_586_p3 <= 
        select_ln55_fu_572_p3 when (or_ln55_fu_580_p2(0) = '1') else 
        add_ln88_1_fu_545_p2;

    i1_blk_n_AR_assign_proc : process(m_axi_i1_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            i1_blk_n_AR <= m_axi_i1_ARREADY;
        else 
            i1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    i1_blk_n_R_assign_proc : process(m_axi_i1_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            i1_blk_n_R <= m_axi_i1_RVALID;
        else 
            i1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln114_fu_855_p2 <= "1" when (bout_reg_376 = ap_const_lv4_8) else "0";
    icmp_ln116_fu_898_p2 <= "1" when (k_reg_387 = ap_const_lv4_9) else "0";
    icmp_ln31_fu_503_p2 <= "1" when (h_fu_196 = ap_const_lv8_FF) else "0";
    icmp_ln39_fu_940_p2 <= "1" when (indvar_flatten20_reg_409 = ap_const_lv16_8778) else "0";
    icmp_ln42_fu_958_p2 <= "1" when (indvar_flatten7_reg_431 = ap_const_lv13_10EF) else "0";
    icmp_ln43_fu_998_p2 <= "1" when (c_reg_453 = ap_const_lv8_FF) else "0";
    icmp_ln56_fu_558_p2 <= "1" when (signed(add_ln88_1_fu_545_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln85_fu_523_p2 <= "1" when (bh_reg_319 = ap_const_lv5_19) else "0";
    icmp_ln94_fu_702_p2 <= "1" when (p_reg_342 = ap_const_lv3_4) else "0";

    input_fm_buffer_2_0_address0_assign_proc : process(ap_CS_fsm_state14, grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_address0, ap_CS_fsm_state25, ap_CS_fsm_state42, zext_ln97_1_fu_730_p1, p_cast91_fu_772_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_fm_buffer_2_0_address0 <= p_cast91_fu_772_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_fm_buffer_2_0_address0 <= zext_ln97_1_fu_730_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            input_fm_buffer_2_0_address0 <= grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_address0;
        else 
            input_fm_buffer_2_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    input_fm_buffer_2_0_address1 <= zext_ln96_1_fu_693_p1(13 - 1 downto 0);

    input_fm_buffer_2_0_ce0_assign_proc : process(ap_CS_fsm_state14, grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_ce0, ap_CS_fsm_state25, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            input_fm_buffer_2_0_ce0 <= grp_conv1_Pipeline_KR_KC_fu_477_input_fm_buffer_2_0_ce0;
        else 
            input_fm_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_2_0_ce1_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_fm_buffer_2_0_ce1 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_2_0_d0_assign_proc : process(right_reg_1212, ap_CS_fsm_state14, ap_CS_fsm_state25, empty_111_fu_767_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_fm_buffer_2_0_d0 <= empty_111_fu_767_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_fm_buffer_2_0_d0 <= right_reg_1212;
        else 
            input_fm_buffer_2_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state14, icmp_ln94_fu_702_p2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln94_fu_702_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            input_fm_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_2_0_we1_assign_proc : process(ap_CS_fsm_state14, icmp_ln94_fu_702_p2)
    begin
        if (((icmp_ln94_fu_702_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            input_fm_buffer_2_0_we1 <= ap_const_logic_1;
        else 
            input_fm_buffer_2_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_387),8));
    left_fu_675_p1 <= reg_491;
    loop_index_i20_cast88_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_i20_reg_398),10));
    loop_index_i_cast_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_i_reg_353),9));

    m_axi_i1_ARADDR_assign_proc : process(m_axi_i1_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state5, i1_addr_reg_1195, i1_addr_1_reg_1201)
    begin
        if (((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_i1_ARADDR <= i1_addr_1_reg_1201;
        elsif ((((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            m_axi_i1_ARADDR <= i1_addr_reg_1195;
        else 
            m_axi_i1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_i1_ARBURST <= ap_const_lv2_0;
    m_axi_i1_ARCACHE <= ap_const_lv4_0;
    m_axi_i1_ARID <= ap_const_lv1_0;

    m_axi_i1_ARLEN_assign_proc : process(m_axi_i1_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state5)
    begin
        if (((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            m_axi_i1_ARLEN <= ap_const_lv32_FF;
        elsif ((((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            m_axi_i1_ARLEN <= ap_const_lv32_1;
        else 
            m_axi_i1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_i1_ARLOCK <= ap_const_lv2_0;
    m_axi_i1_ARPROT <= ap_const_lv3_0;
    m_axi_i1_ARQOS <= ap_const_lv4_0;
    m_axi_i1_ARREGION <= ap_const_lv4_0;
    m_axi_i1_ARSIZE <= ap_const_lv3_0;
    m_axi_i1_ARUSER <= ap_const_lv1_0;

    m_axi_i1_ARVALID_assign_proc : process(m_axi_i1_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state5)
    begin
        if ((((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_i1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            m_axi_i1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_i1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i1_AWADDR <= ap_const_lv64_0;
    m_axi_i1_AWBURST <= ap_const_lv2_0;
    m_axi_i1_AWCACHE <= ap_const_lv4_0;
    m_axi_i1_AWID <= ap_const_lv1_0;
    m_axi_i1_AWLEN <= ap_const_lv32_0;
    m_axi_i1_AWLOCK <= ap_const_lv2_0;
    m_axi_i1_AWPROT <= ap_const_lv3_0;
    m_axi_i1_AWQOS <= ap_const_lv4_0;
    m_axi_i1_AWREGION <= ap_const_lv4_0;
    m_axi_i1_AWSIZE <= ap_const_lv3_0;
    m_axi_i1_AWUSER <= ap_const_lv1_0;
    m_axi_i1_AWVALID <= ap_const_logic_0;
    m_axi_i1_BREADY <= ap_const_logic_0;

    m_axi_i1_RREADY_assign_proc : process(m_axi_i1_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_i1_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_i1_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_i1_RVALID = ap_const_logic_1)))) then 
            m_axi_i1_RREADY <= ap_const_logic_1;
        else 
            m_axi_i1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i1_WDATA <= ap_const_lv32_0;
    m_axi_i1_WID <= ap_const_lv1_0;
    m_axi_i1_WLAST <= ap_const_logic_0;
    m_axi_i1_WSTRB <= ap_const_lv4_0;
    m_axi_i1_WUSER <= ap_const_lv1_0;
    m_axi_i1_WVALID <= ap_const_logic_0;
    m_axi_i2_ARADDR <= ap_const_lv64_0;
    m_axi_i2_ARBURST <= ap_const_lv2_0;
    m_axi_i2_ARCACHE <= ap_const_lv4_0;
    m_axi_i2_ARID <= ap_const_lv1_0;
    m_axi_i2_ARLEN <= ap_const_lv32_0;
    m_axi_i2_ARLOCK <= ap_const_lv2_0;
    m_axi_i2_ARPROT <= ap_const_lv3_0;
    m_axi_i2_ARQOS <= ap_const_lv4_0;
    m_axi_i2_ARREGION <= ap_const_lv4_0;
    m_axi_i2_ARSIZE <= ap_const_lv3_0;
    m_axi_i2_ARUSER <= ap_const_lv1_0;
    m_axi_i2_ARVALID <= ap_const_logic_0;
    m_axi_i2_AWADDR <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWADDR;
    m_axi_i2_AWBURST <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWBURST;
    m_axi_i2_AWCACHE <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWCACHE;
    m_axi_i2_AWID <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWID;
    m_axi_i2_AWLEN <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLEN;
    m_axi_i2_AWLOCK <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWLOCK;
    m_axi_i2_AWPROT <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWPROT;
    m_axi_i2_AWQOS <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWQOS;
    m_axi_i2_AWREGION <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWREGION;
    m_axi_i2_AWSIZE <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWSIZE;
    m_axi_i2_AWUSER <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWUSER;

    m_axi_i2_AWVALID_assign_proc : process(ap_CS_fsm_state40, icmp_ln39_fu_940_p2, grp_export_output_buffer_c1_fu_464_m_axi_i2_AWVALID, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            m_axi_i2_AWVALID <= grp_export_output_buffer_c1_fu_464_m_axi_i2_AWVALID;
        else 
            m_axi_i2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_i2_BREADY_assign_proc : process(ap_CS_fsm_state40, icmp_ln39_fu_940_p2, grp_export_output_buffer_c1_fu_464_m_axi_i2_BREADY, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            m_axi_i2_BREADY <= grp_export_output_buffer_c1_fu_464_m_axi_i2_BREADY;
        else 
            m_axi_i2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_RREADY <= ap_const_logic_0;
    m_axi_i2_WDATA <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WDATA;
    m_axi_i2_WID <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WID;
    m_axi_i2_WLAST <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WLAST;
    m_axi_i2_WSTRB <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WSTRB;
    m_axi_i2_WUSER <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WUSER;

    m_axi_i2_WVALID_assign_proc : process(ap_CS_fsm_state40, icmp_ln39_fu_940_p2, grp_export_output_buffer_c1_fu_464_m_axi_i2_WVALID, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((icmp_ln39_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            m_axi_i2_WVALID <= grp_export_output_buffer_c1_fu_464_m_axi_i2_WVALID;
        else 
            m_axi_i2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w1_ARADDR <= w1_addr_reg_1241;
    m_axi_w1_ARBURST <= ap_const_lv2_0;
    m_axi_w1_ARCACHE <= ap_const_lv4_0;
    m_axi_w1_ARID <= ap_const_lv1_0;
    m_axi_w1_ARLEN <= ap_const_lv32_288;
    m_axi_w1_ARLOCK <= ap_const_lv2_0;
    m_axi_w1_ARPROT <= ap_const_lv3_0;
    m_axi_w1_ARQOS <= ap_const_lv4_0;
    m_axi_w1_ARREGION <= ap_const_lv4_0;
    m_axi_w1_ARSIZE <= ap_const_lv3_0;
    m_axi_w1_ARUSER <= ap_const_lv1_0;

    m_axi_w1_ARVALID_assign_proc : process(m_axi_w1_ARREADY, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w1_ARREADY = ap_const_logic_1))) then 
            m_axi_w1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_w1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w1_AWADDR <= ap_const_lv64_0;
    m_axi_w1_AWBURST <= ap_const_lv2_0;
    m_axi_w1_AWCACHE <= ap_const_lv4_0;
    m_axi_w1_AWID <= ap_const_lv1_0;
    m_axi_w1_AWLEN <= ap_const_lv32_0;
    m_axi_w1_AWLOCK <= ap_const_lv2_0;
    m_axi_w1_AWPROT <= ap_const_lv3_0;
    m_axi_w1_AWQOS <= ap_const_lv4_0;
    m_axi_w1_AWREGION <= ap_const_lv4_0;
    m_axi_w1_AWSIZE <= ap_const_lv3_0;
    m_axi_w1_AWUSER <= ap_const_lv1_0;
    m_axi_w1_AWVALID <= ap_const_logic_0;
    m_axi_w1_BREADY <= ap_const_logic_0;

    m_axi_w1_RREADY_assign_proc : process(m_axi_w1_RVALID, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_w1_RVALID = ap_const_logic_1))) then 
            m_axi_w1_RREADY <= ap_const_logic_1;
        else 
            m_axi_w1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w1_WDATA <= ap_const_lv32_0;
    m_axi_w1_WID <= ap_const_lv1_0;
    m_axi_w1_WLAST <= ap_const_logic_0;
    m_axi_w1_WSTRB <= ap_const_lv4_0;
    m_axi_w1_WUSER <= ap_const_lv1_0;
    m_axi_w1_WVALID <= ap_const_logic_0;
    mul_ln114_fu_788_p0 <= mul_ln114_fu_788_p00(7 - 1 downto 0);
    mul_ln114_fu_788_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_reg_364),15));
    mul_ln114_fu_788_p1 <= ap_const_lv15_144(10 - 1 downto 0);
    or_ln42_fu_1016_p2 <= (icmp_ln42_fu_958_p2 or and_ln39_fu_1004_p2);
    or_ln55_fu_580_p2 <= (tmp_5_fu_550_p3 or icmp_ln56_fu_558_p2);

    output_fm_buffer_1_address0_assign_proc : process(ap_CS_fsm_state40, icmp_ln39_fu_940_p2, output_fm_buffer_1_addr_reg_1317, grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_address0, ap_CS_fsm_state44, ap_CS_fsm_state43, p_cast94_fu_1080_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_fm_buffer_1_address0 <= output_fm_buffer_1_addr_reg_1317;
        elsif (((icmp_ln39_fu_940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_fm_buffer_1_address0 <= p_cast94_fu_1080_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_fm_buffer_1_address0 <= grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_address0;
        else 
            output_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state40, icmp_ln39_fu_940_p2, grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_ce0, ap_CS_fsm_state44, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln39_fu_940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_fm_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_fm_buffer_1_ce0 <= grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_ce0;
        else 
            output_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_1_d0_assign_proc : process(grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_d0, grp_conv1_Pipeline_KR_KC_fu_477_p_out, ap_CS_fsm_state44, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_fm_buffer_1_d0 <= grp_conv1_Pipeline_KR_KC_fu_477_p_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_fm_buffer_1_d0 <= grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_d0;
        else 
            output_fm_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_1_we0_assign_proc : process(grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_we0, ap_CS_fsm_state44, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_fm_buffer_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_fm_buffer_1_we0 <= grp_export_output_buffer_c1_fu_464_output_fm_buffer_1_we0;
        else 
            output_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast87_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_121_fu_1042_p2),16));
    p_cast91_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_112_reg_1233),64));
    p_cast94_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_124_fu_1074_p2),64));
    p_cast95_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_118_fu_914_p2),64));
    p_cast_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_115_fu_871_p2),10));
    p_shl5_fu_884_p3 <= (empty_116_fu_880_p1 & ap_const_lv3_0);
    p_shl6_fu_1056_p3 <= (empty_122_fu_1052_p1 & ap_const_lv8_0);
    right_fu_679_p1 <= m_axi_i1_RDATA;
    select_ln39_1_cast_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_1_reg_1299),8));
    select_ln39_1_fu_972_p3 <= 
        add_ln39_fu_952_p2 when (icmp_ln42_fu_958_p2(0) = '1') else 
        o_reg_420;
    select_ln39_fu_964_p3 <= 
        ap_const_lv5_0 when (icmp_ln42_fu_958_p2(0) = '1') else 
        r_reg_442;
    select_ln42_3_fu_1030_p3 <= 
        add_ln42_fu_1010_p2 when (and_ln39_fu_1004_p2(0) = '1') else 
        select_ln39_fu_964_p3;
    select_ln42_4_fu_1097_p3 <= 
        ap_const_lv13_1 when (icmp_ln42_fu_958_p2(0) = '1') else 
        add_ln42_2_fu_1091_p2;
    select_ln42_5_cast_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_3_fu_1030_p3),9));
    select_ln42_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_fu_1022_p3),16));
    select_ln42_fu_1022_p3 <= 
        ap_const_lv8_0 when (or_ln42_fu_1016_p2(0) = '1') else 
        c_reg_453;
    select_ln55_fu_572_p3 <= 
        ap_const_lv10_0 when (tmp_6_fu_564_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln114_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_803_p4),64));

        sext_ln88_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln88_fu_535_p2),10));

        sext_ln90_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_629_p4),64));

        sext_ln90_2_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln90_fu_614_p2),64));

        sext_ln90_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln90_1_fu_602_p3),20));

        sext_ln91_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_655_p4),64));

    shl_ln90_1_fu_602_p3 <= (hclamp_fu_586_p3 & ap_const_lv2_0);
    shl_ln_fu_594_p3 <= (hclamp_fu_586_p3 & ap_const_lv10_0);
    sub_ln90_fu_614_p2 <= std_logic_vector(unsigned(shl_ln_fu_594_p3) - unsigned(sext_ln90_fu_610_p1));
    tmp_5_fu_550_p3 <= add_ln88_1_fu_545_p2(9 downto 9);
    tmp_6_fu_564_p3 <= add_ln88_1_fu_545_p2(9 downto 9);
    tmp_7_fu_776_p3 <= out_reg_364(6 downto 6);
    tmp_8_fu_980_p3 <= (select_ln39_1_fu_972_p3 & select_ln39_1_fu_972_p3);
    tmp_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_837_p3),8));
    tmp_fu_837_p3 <= (bout_reg_376 & ap_const_lv3_0);
    tmp_s_fu_1119_p3 <= (select_ln39_1_reg_1299 & ap_const_lv3_0);
    trunc_ln2_fu_655_p4 <= add_ln91_fu_649_p2(63 downto 2);
    trunc_ln3_fu_803_p4 <= add_ln114_fu_798_p2(63 downto 2);
    trunc_ln61_fu_1105_p1 <= out_reg_364(6 - 1 downto 0);
    trunc_ln_fu_629_p4 <= add_ln90_fu_624_p2(63 downto 2);

    w1_blk_n_AR_assign_proc : process(m_axi_w1_ARREADY, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w1_blk_n_AR <= m_axi_w1_ARREADY;
        else 
            w1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    w1_blk_n_R_assign_proc : process(m_axi_w1_RVALID, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            w1_blk_n_R <= m_axi_w1_RVALID;
        else 
            w1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    weight_buffer_2_0_address0_assign_proc : process(weight_buffer_2_0_addr_reg_1273, grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_address0, ap_CS_fsm_state39, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            weight_buffer_2_0_address0 <= weight_buffer_2_0_addr_reg_1273;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weight_buffer_2_0_address0 <= grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_address0;
        else 
            weight_buffer_2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weight_buffer_2_0_ce0_assign_proc : process(grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_ce0, ap_CS_fsm_state39, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            weight_buffer_2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weight_buffer_2_0_ce0 <= grp_conv1_Pipeline_KR_KC_fu_477_weight_buffer_2_0_ce0;
        else 
            weight_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_2_0_d0 <= w1_addr_read_reg_1286;

    weight_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            weight_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            weight_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln39_fu_992_p2 <= (icmp_ln42_fu_958_p2 xor ap_const_lv1_1);
    zext_ln114_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln114_fu_788_p2),64));
    zext_ln31_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_196),10));
    zext_ln53_15_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1119_p3),8));
    zext_ln53_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_980_p3),9));
    zext_ln85_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_319),6));
    zext_ln94_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_342),9));
    zext_ln96_1_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_fu_687_p2),64));
    zext_ln96_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_342),13));
    zext_ln97_1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_1_fu_724_p2),64));
    zext_ln97_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_fu_714_p2),13));
end behav;
