-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_ftmap_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    conv1_output_ftmap_ce0 : OUT STD_LOGIC;
    conv1_output_ftmap_we0 : OUT STD_LOGIC;
    conv1_output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_365_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_365_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_365_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_365_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_365_p_ce : OUT STD_LOGIC;
    grp_fu_373_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_373_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_373_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_373_p_ce : OUT STD_LOGIC;
    grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_377_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal h_4_reg_1949 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln22_fu_513_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_reg_1956 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_fu_523_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_reg_1966 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln41_fu_574_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln41_reg_1976 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln41_fu_590_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_reg_1981 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln28_fu_596_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln28_reg_1986 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1992 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_2001 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_31_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_reg_2007 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_629_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_reg_2015 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal empty_35_fu_669_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_35_reg_2020 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln31_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_675_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_2025 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_1_fu_679_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_1_reg_2030 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln41_1_fu_716_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln41_1_reg_2035 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_1_fu_732_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_1_reg_2040 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_reg_2061 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal empty_36_fu_788_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_36_reg_2066 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln32_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_output_ftmap_addr_reg_2071 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast20_fu_807_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast20_reg_2076 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln41_4_fu_835_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_4_reg_2086 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln34_fu_847_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_reg_2094 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln41_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln41_reg_2099 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln34_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln35_fu_951_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_reg_2112 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln35_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln41_1_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal empty_41_fu_1091_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_reg_2137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln31_1_fu_1105_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_1_reg_2145 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal empty_45_fu_1145_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_45_reg_2150 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln31_1_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_2_fu_1151_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_2_reg_2155 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_2_fu_1155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_2_reg_2160 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_1_fu_1190_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_1_reg_2173 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal empty_46_fu_1196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_46_reg_2178 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln32_1_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_output_ftmap_addr_1_reg_2183 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast27_fu_1215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast27_reg_2188 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln41_7_fu_1243_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_7_reg_2198 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln34_1_fu_1255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_1_reg_2206 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln41_1_fu_1333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln41_1_reg_2211 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln34_1_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln35_1_fu_1359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_1_reg_2224 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln35_1_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_2_fu_1438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal bitcast_ln41_3_fu_1443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal sext_ln41_2_fu_1530_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_2_reg_2249 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal add_ln41_2_fu_1546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_2_reg_2254 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_51_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_51_reg_2259 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_2_fu_1566_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_2_reg_2267 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal empty_55_fu_1606_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_55_reg_2272 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln31_2_fu_1560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_4_fu_1612_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_4_reg_2277 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_5_fu_1616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_5_reg_2282 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_1621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_2_fu_1637_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_2_reg_2295 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal empty_56_fu_1643_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_56_reg_2300 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln32_2_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_output_ftmap_addr_2_reg_2305 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast29_fu_1662_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast29_reg_2310 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln41_10_fu_1686_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_10_reg_2320 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln34_2_fu_1698_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_2_reg_2328 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln41_2_fu_1776_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln41_2_reg_2333 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln34_2_fu_1692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln35_2_fu_1802_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_2_reg_2346 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln35_2_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_4_fu_1881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal bitcast_ln41_5_fu_1886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal w_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n1_reg_258 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln24_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal th_reg_270 : STD_LOGIC_VECTOR (6 downto 0);
    signal tw_reg_281 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal f1h_reg_292 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_0_lcssa31_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1w_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_029_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal th_1_reg_336 : STD_LOGIC_VECTOR (6 downto 0);
    signal tw_1_reg_347 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal f1h_1_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_1_lcssa34_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1w_1_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_132_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal th_2_reg_402 : STD_LOGIC_VECTOR (6 downto 0);
    signal tw_2_reg_413 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal f1h_2_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_2_lcssa37_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1w_2_reg_445 : STD_LOGIC_VECTOR (3 downto 0);
    signal add54_235_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast34_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast38_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_7_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_10_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast36_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast49_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_15_fu_1348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_17_fu_1433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast52_fu_1657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_19_fu_1791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_20_fu_1876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln47_fu_1082_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_1_fu_1490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_2_fu_1933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_468_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_556_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_cast_fu_564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal n1_cast_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_578_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_fu_586_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n1_cast15_fu_548_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_fu_619_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_fu_639_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast17_fu_644_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_33_fu_648_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_34_fu_657_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_661_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast18_fu_653_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal th_cast19_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_fu_684_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_698_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_cast_fu_706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_cast_fu_694_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_39_fu_710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_1_fu_728_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_cast16_fu_690_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_40_fu_746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_751_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_1_fu_772_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast19_fu_793_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_37_fu_797_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln41_3_fu_810_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_3_fu_814_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln41_fu_823_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_827_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln41_4_fu_819_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_853_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_859_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_38_fu_863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln84_fu_882_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_868_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yPixelClamped_fu_905_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_917_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_5_fu_913_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_6_fu_931_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_5_fu_935_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_fu_957_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln39_fu_963_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_1_fu_967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_972_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_2_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_2_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_5_fu_994_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_fu_1008_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_3_fu_1016_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_8_fu_1020_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln47_fu_1040_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1044_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_fu_1054_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln47_1_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_1_fu_1095_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_42_fu_1115_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast23_fu_1120_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_43_fu_1124_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_44_fu_1133_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_fu_1137_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast24_fu_1129_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal th_1_cast24_fu_1111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_50_fu_1160_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1165_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_3_fu_1180_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast30_fu_1201_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_47_fu_1205_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln41_8_fu_1218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_6_fu_1222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln41_1_fu_1231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_1235_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln41_9_fu_1227_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_fu_1261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp6_cast_fu_1267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_48_fu_1271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln84_1_fu_1290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_1276_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_3_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_3_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_7_fu_1299_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_3_fu_1294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yPixelClamped_2_fu_1313_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1325_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_11_fu_1321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_14_fu_1339_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_11_fu_1343_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_2_fu_1365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln39_1_fu_1371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_3_fu_1375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_5_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_5_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_11_fu_1402_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_2_fu_1416_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_4_fu_1424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_12_fu_1428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln47_1_fu_1448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_1_fu_1462_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln47_3_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_1_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_1499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_1512_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_cast_fu_1520_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_1_cast20_fu_1508_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_49_fu_1524_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_1534_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_2_fu_1542_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_1_cast21_fu_1504_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_2_fu_1556_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_52_fu_1576_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast26_fu_1581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_53_fu_1585_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_54_fu_1594_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_fu_1598_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast28_fu_1590_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal th_2_cast26_fu_1572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_5_fu_1627_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast31_fu_1648_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_57_fu_1652_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln41_12_fu_1665_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_9_fu_1669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_fu_1678_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln41_13_fu_1674_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp12_fu_1704_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp12_cast_fu_1710_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_58_fu_1714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln84_2_fu_1733_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_1719_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_4_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_4_fu_1750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_9_fu_1742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_4_fu_1737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yPixelClamped_3_fu_1756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1768_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_16_fu_1764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_18_fu_1782_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_13_fu_1786_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_fu_1808_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln39_2_fu_1814_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_5_fu_1818_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_6_fu_1831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_6_fu_1853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_13_fu_1845_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_3_fu_1859_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_5_fu_1867_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_14_fu_1871_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln47_2_fu_1891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1895_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_2_fu_1905_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln47_5_fu_1915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_4_fu_1909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_2_fu_1921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_2_fu_1927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add54_029_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                add54_029_reg_324 <= add54_0_lcssa31_reg_303;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                add54_029_reg_324 <= grp_fu_365_p_dout0;
            end if; 
        end if;
    end process;

    add54_0_lcssa31_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                add54_0_lcssa31_reg_303 <= conv1_output_ftmap_q0;
            elsif (((icmp_ln35_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                add54_0_lcssa31_reg_303 <= add54_029_reg_324;
            end if; 
        end if;
    end process;

    add54_132_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_1_fu_1249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                add54_132_reg_390 <= add54_1_lcssa34_reg_369;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                add54_132_reg_390 <= grp_fu_365_p_dout0;
            end if; 
        end if;
    end process;

    add54_1_lcssa34_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                add54_1_lcssa34_reg_369 <= conv1_output_ftmap_q0;
            elsif (((icmp_ln35_1_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                add54_1_lcssa34_reg_369 <= add54_132_reg_390;
            end if; 
        end if;
    end process;

    add54_235_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_2_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                add54_235_reg_456 <= add54_2_lcssa37_reg_435;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                add54_235_reg_456 <= grp_fu_365_p_dout0;
            end if; 
        end if;
    end process;

    add54_2_lcssa37_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                add54_2_lcssa37_reg_435 <= conv1_output_ftmap_q0;
            elsif (((icmp_ln35_2_fu_1796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                add54_2_lcssa37_reg_435 <= add54_235_reg_456;
            end if; 
        end if;
    end process;

    f1h_1_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                f1h_1_reg_358 <= ap_const_lv4_0;
            elsif (((icmp_ln35_1_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                f1h_1_reg_358 <= add_ln34_1_reg_2206;
            end if; 
        end if;
    end process;

    f1h_2_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                f1h_2_reg_424 <= ap_const_lv4_0;
            elsif (((icmp_ln35_2_fu_1796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                f1h_2_reg_424 <= add_ln34_2_reg_2328;
            end if; 
        end if;
    end process;

    f1h_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                f1h_reg_292 <= ap_const_lv4_0;
            elsif (((icmp_ln35_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                f1h_reg_292 <= add_ln34_reg_2094;
            end if; 
        end if;
    end process;

    f1w_1_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_1_fu_1249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                f1w_1_reg_379 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                f1w_1_reg_379 <= add_ln35_1_reg_2224;
            end if; 
        end if;
    end process;

    f1w_2_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_2_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                f1w_2_reg_445 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                f1w_2_reg_445 <= add_ln35_2_reg_2346;
            end if; 
        end if;
    end process;

    f1w_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                f1w_reg_313 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                f1w_reg_313 <= add_ln35_reg_2112;
            end if; 
        end if;
    end process;

    h_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_126 <= ap_const_lv8_0;
            elsif (((icmp_ln24_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_fu_126 <= add_ln22_fu_533_p2;
            end if; 
        end if;
    end process;

    n1_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_527_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                n1_reg_258 <= ap_const_lv7_0;
            elsif (((icmp_ln31_2_fu_1560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                n1_reg_258 <= add_ln28_2_fu_1621_p2;
            end if; 
        end if;
    end process;

    th_1_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                th_1_reg_336 <= ap_const_lv7_0;
            elsif (((icmp_ln32_1_fu_1184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                th_1_reg_336 <= add_ln31_1_reg_2145;
            end if; 
        end if;
    end process;

    th_2_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                th_2_reg_402 <= ap_const_lv7_0;
            elsif (((icmp_ln32_2_fu_1631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                th_2_reg_402 <= add_ln31_2_reg_2267;
            end if; 
        end if;
    end process;

    th_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                th_reg_270 <= ap_const_lv7_0;
            elsif (((icmp_ln32_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                th_reg_270 <= add_ln31_reg_2015;
            end if; 
        end if;
    end process;

    tw_1_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_1_fu_1099_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                tw_1_reg_347 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                tw_1_reg_347 <= add_ln32_1_reg_2173;
            end if; 
        end if;
    end process;

    tw_2_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_fu_1560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                tw_2_reg_413 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                tw_2_reg_413 <= add_ln32_2_reg_2295;
            end if; 
        end if;
    end process;

    tw_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_13_reg_1992 = ap_const_lv1_0))) then 
                tw_reg_281 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                tw_reg_281 <= add_ln32_reg_2061;
            end if; 
        end if;
    end process;

    w_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_reg_246 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_13_reg_1992 = ap_const_lv1_1) or ((tmp_14_fu_738_p3 = ap_const_lv1_1) and (icmp_ln31_fu_623_p2 = ap_const_lv1_1))))) then 
                w_reg_246 <= add_ln24_fu_766_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln31_1_reg_2145 <= add_ln31_1_fu_1105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln31_2_reg_2267 <= add_ln31_2_fu_1566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_13_reg_1992 = ap_const_lv1_0))) then
                add_ln31_reg_2015 <= add_ln31_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln32_1_reg_2173 <= add_ln32_1_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln32_2_reg_2295 <= add_ln32_2_fu_1637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln32_reg_2061 <= add_ln32_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln34_1_reg_2206 <= add_ln34_1_fu_1255_p2;
                add_ln41_7_reg_2198 <= add_ln41_7_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln34_2_reg_2328 <= add_ln34_2_fu_1698_p2;
                add_ln41_10_reg_2320 <= add_ln41_10_fu_1686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln34_reg_2094 <= add_ln34_fu_847_p2;
                add_ln41_4_reg_2086 <= add_ln41_4_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln35_1_reg_2224 <= add_ln35_1_fu_1359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln35_2_reg_2346 <= add_ln35_2_fu_1802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln35_reg_2112 <= add_ln35_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_13_reg_1992 = ap_const_lv1_0))) then
                add_ln41_1_reg_2040 <= add_ln41_1_fu_732_p2;
                sext_ln41_1_reg_2035 <= sext_ln41_1_fu_716_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln41_2_reg_2254 <= add_ln41_2_fu_1546_p2;
                empty_51_reg_2259 <= empty_51_fu_1552_p1;
                sext_ln41_2_reg_2249 <= sext_ln41_2_fu_1530_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln41_reg_1981 <= add_ln41_fu_590_p2;
                sext_ln41_reg_1976 <= sext_ln41_fu_574_p1;
                tmp_13_reg_1992 <= n1_reg_258(6 downto 6);
                trunc_ln28_reg_1986 <= trunc_ln28_fu_596_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_13_reg_1992 = ap_const_lv1_0))) then
                add_ln84_1_reg_2030 <= add_ln84_1_fu_679_p2;
                empty_35_reg_2020 <= empty_35_fu_669_p2;
                    zext_ln32_reg_2025(8 downto 0) <= zext_ln32_fu_675_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_1_fu_1099_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                add_ln84_2_reg_2160 <= add_ln84_2_fu_1155_p2;
                empty_45_reg_2150 <= empty_45_fu_1145_p2;
                    zext_ln32_2_reg_2155(8 downto 0) <= zext_ln32_2_fu_1151_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_fu_1560_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                add_ln84_5_reg_2282 <= add_ln84_5_fu_1616_p2;
                empty_55_reg_2272 <= empty_55_fu_1606_p2;
                    zext_ln32_4_reg_2277(8 downto 0) <= zext_ln32_4_fu_1612_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_1_fu_1184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                conv1_output_ftmap_addr_1_reg_2183 <= p_cast49_fu_1210_p1(22 - 1 downto 0);
                empty_46_reg_2178 <= empty_46_fu_1196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_2_fu_1631_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                conv1_output_ftmap_addr_2_reg_2305 <= p_cast52_fu_1657_p1(22 - 1 downto 0);
                empty_56_reg_2300 <= empty_56_fu_1643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                conv1_output_ftmap_addr_reg_2071 <= p_cast38_fu_802_p1(22 - 1 downto 0);
                empty_36_reg_2066 <= empty_36_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_31_reg_2007 <= empty_31_fu_615_p1;
                    tmp_2_reg_2001(7 downto 2) <= tmp_2_fu_608_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                empty_41_reg_2137 <= empty_41_fu_1091_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h_4_reg_1949 <= h_fu_126;
                    zext_ln22_reg_1956(7 downto 0) <= zext_ln22_fu_513_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    p_cast20_reg_2076(8 downto 0) <= p_cast20_fu_807_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    p_cast27_reg_2188(8 downto 0) <= p_cast27_fu_1215_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    p_cast29_reg_2310(8 downto 0) <= p_cast29_fu_1662_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_487 <= conv1_weights_q0;
                reg_491 <= input_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_495 <= grp_fu_373_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_500 <= grp_fu_365_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_1_fu_1249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                sub_ln41_1_reg_2211 <= sub_ln41_1_fu_1333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_2_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                sub_ln41_2_reg_2333 <= sub_ln41_2_fu_1776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                sub_ln41_reg_2099 <= sub_ln41_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln24_reg_1966(7 downto 0) <= zext_ln24_fu_523_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln22_reg_1956(8) <= '0';
    zext_ln24_reg_1966(8) <= '0';
    tmp_2_reg_2001(1 downto 0) <= "00";
    zext_ln32_reg_2025(9) <= '0';
    p_cast20_reg_2076(9) <= '0';
    zext_ln32_2_reg_2155(9) <= '0';
    p_cast27_reg_2188(9) <= '0';
    zext_ln32_4_reg_2277(9) <= '0';
    p_cast29_reg_2310(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_13_fu_600_p3, tmp_13_reg_1992, ap_CS_fsm_state6, icmp_ln31_fu_623_p2, tmp_14_fu_738_p3, ap_CS_fsm_state7, icmp_ln32_fu_776_p2, ap_CS_fsm_state9, icmp_ln34_fu_841_p2, ap_CS_fsm_state10, icmp_ln35_fu_945_p2, ap_CS_fsm_state25, icmp_ln31_1_fu_1099_p2, ap_CS_fsm_state26, icmp_ln32_1_fu_1184_p2, ap_CS_fsm_state28, icmp_ln34_1_fu_1249_p2, ap_CS_fsm_state29, icmp_ln35_1_fu_1353_p2, ap_CS_fsm_state44, icmp_ln31_2_fu_1560_p2, ap_CS_fsm_state45, icmp_ln32_2_fu_1631_p2, ap_CS_fsm_state47, icmp_ln34_2_fu_1692_p2, ap_CS_fsm_state48, icmp_ln35_2_fu_1796_p2, icmp_ln22_fu_517_p2, icmp_ln24_fu_527_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_13_fu_600_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_13_reg_1992 = ap_const_lv1_1) or ((tmp_14_fu_738_p3 = ap_const_lv1_1) and (icmp_ln31_fu_623_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((tmp_14_fu_738_p3 = ap_const_lv1_0) and (icmp_ln31_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_13_reg_1992 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln32_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln34_fu_841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln35_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln31_1_fu_1099_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln32_1_fu_1184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln34_1_fu_1249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln35_1_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln31_2_fu_1560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln32_2_fu_1631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln34_2_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln35_2_fu_1796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_fu_533_p2 <= std_logic_vector(unsigned(h_fu_126) + unsigned(ap_const_lv8_55));
    add_ln24_fu_766_p2 <= std_logic_vector(unsigned(w_reg_246) + unsigned(ap_const_lv8_55));
    add_ln28_1_cast20_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_1499_p2),15));
    add_ln28_1_cast21_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_1499_p2),10));
    add_ln28_1_fu_1499_p2 <= std_logic_vector(unsigned(trunc_ln28_reg_1986) + unsigned(ap_const_lv6_2));
    add_ln28_2_fu_1621_p2 <= std_logic_vector(unsigned(n1_reg_258) + unsigned(ap_const_lv7_3));
    add_ln28_cast16_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_684_p2),11));
    add_ln28_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_684_p2),16));
    add_ln28_fu_684_p2 <= std_logic_vector(unsigned(n1_reg_258) + unsigned(ap_const_lv7_1));
    add_ln31_1_fu_1105_p2 <= std_logic_vector(unsigned(th_1_reg_336) + unsigned(ap_const_lv7_1));
    add_ln31_2_fu_1566_p2 <= std_logic_vector(unsigned(th_2_reg_402) + unsigned(ap_const_lv7_1));
    add_ln31_fu_629_p2 <= std_logic_vector(unsigned(th_reg_270) + unsigned(ap_const_lv7_1));
    add_ln32_1_fu_1190_p2 <= std_logic_vector(unsigned(tw_1_reg_347) + unsigned(ap_const_lv7_1));
    add_ln32_2_fu_1637_p2 <= std_logic_vector(unsigned(tw_2_reg_413) + unsigned(ap_const_lv7_1));
    add_ln32_fu_782_p2 <= std_logic_vector(unsigned(tw_reg_281) + unsigned(ap_const_lv7_1));
    add_ln34_1_fu_1255_p2 <= std_logic_vector(unsigned(f1h_1_reg_358) + unsigned(ap_const_lv4_1));
    add_ln34_2_fu_1698_p2 <= std_logic_vector(unsigned(f1h_2_reg_424) + unsigned(ap_const_lv4_1));
    add_ln34_fu_847_p2 <= std_logic_vector(unsigned(f1h_reg_292) + unsigned(ap_const_lv4_1));
    add_ln35_1_fu_1359_p2 <= std_logic_vector(unsigned(f1w_1_reg_379) + unsigned(ap_const_lv4_1));
    add_ln35_2_fu_1802_p2 <= std_logic_vector(unsigned(f1w_2_reg_445) + unsigned(ap_const_lv4_1));
    add_ln35_fu_951_p2 <= std_logic_vector(unsigned(f1w_reg_313) + unsigned(ap_const_lv4_1));
    add_ln39_1_fu_967_p2 <= std_logic_vector(signed(sext_ln39_fu_963_p1) + signed(p_cast20_reg_2076));
    add_ln39_2_fu_1365_p2 <= std_logic_vector(unsigned(f1w_1_reg_379) + unsigned(ap_const_lv4_C));
    add_ln39_3_fu_1375_p2 <= std_logic_vector(signed(sext_ln39_1_fu_1371_p1) + signed(p_cast27_reg_2188));
    add_ln39_4_fu_1808_p2 <= std_logic_vector(unsigned(f1w_2_reg_445) + unsigned(ap_const_lv4_C));
    add_ln39_5_fu_1818_p2 <= std_logic_vector(signed(sext_ln39_2_fu_1814_p1) + signed(p_cast29_reg_2310));
    add_ln39_fu_957_p2 <= std_logic_vector(unsigned(f1w_reg_313) + unsigned(ap_const_lv4_C));
    add_ln41_10_fu_1686_p2 <= std_logic_vector(unsigned(p_shl4_fu_1678_p3) + unsigned(zext_ln41_13_fu_1674_p1));
    add_ln41_11_fu_1343_p2 <= std_logic_vector(unsigned(add_ln41_7_reg_2198) + unsigned(zext_ln41_14_fu_1339_p1));
    add_ln41_12_fu_1428_p2 <= std_logic_vector(unsigned(sub_ln41_1_reg_2211) + unsigned(sext_ln41_4_fu_1424_p1));
    add_ln41_13_fu_1786_p2 <= std_logic_vector(unsigned(add_ln41_10_reg_2320) + unsigned(zext_ln41_18_fu_1782_p1));
    add_ln41_14_fu_1871_p2 <= std_logic_vector(unsigned(sub_ln41_2_reg_2333) + unsigned(sext_ln41_5_fu_1867_p1));
    add_ln41_1_fu_732_p2 <= std_logic_vector(unsigned(zext_ln41_1_fu_728_p1) + unsigned(add_ln28_cast16_fu_690_p1));
    add_ln41_2_fu_1546_p2 <= std_logic_vector(unsigned(zext_ln41_2_fu_1542_p1) + unsigned(add_ln28_1_cast21_fu_1504_p1));
    add_ln41_3_fu_814_p2 <= std_logic_vector(unsigned(add_ln41_reg_1981) + unsigned(zext_ln41_3_fu_810_p1));
    add_ln41_4_fu_835_p2 <= std_logic_vector(unsigned(p_shl3_fu_827_p3) + unsigned(zext_ln41_4_fu_819_p1));
    add_ln41_5_fu_935_p2 <= std_logic_vector(unsigned(add_ln41_4_reg_2086) + unsigned(zext_ln41_6_fu_931_p1));
    add_ln41_6_fu_1222_p2 <= std_logic_vector(unsigned(add_ln41_1_reg_2040) + unsigned(zext_ln41_8_fu_1218_p1));
    add_ln41_7_fu_1243_p2 <= std_logic_vector(unsigned(p_shl8_fu_1235_p3) + unsigned(zext_ln41_9_fu_1227_p1));
    add_ln41_8_fu_1020_p2 <= std_logic_vector(unsigned(sub_ln41_reg_2099) + unsigned(sext_ln41_3_fu_1016_p1));
    add_ln41_9_fu_1669_p2 <= std_logic_vector(unsigned(add_ln41_2_reg_2254) + unsigned(zext_ln41_12_fu_1665_p1));
    add_ln41_fu_590_p2 <= std_logic_vector(unsigned(zext_ln41_fu_586_p1) + unsigned(n1_cast15_fu_548_p1));
    add_ln84_1_fu_679_p2 <= std_logic_vector(unsigned(th_cast19_fu_635_p1) + unsigned(h_4_reg_1949));
    add_ln84_2_fu_1155_p2 <= std_logic_vector(unsigned(th_1_cast24_fu_1111_p1) + unsigned(h_4_reg_1949));
    add_ln84_3_fu_1294_p2 <= std_logic_vector(signed(sext_ln84_1_fu_1290_p1) + signed(add_ln84_2_reg_2160));
    add_ln84_4_fu_1737_p2 <= std_logic_vector(signed(sext_ln84_2_fu_1733_p1) + signed(add_ln84_5_reg_2282));
    add_ln84_5_fu_1616_p2 <= std_logic_vector(unsigned(th_2_cast26_fu_1572_p1) + unsigned(h_4_reg_1949));
    add_ln84_fu_886_p2 <= std_logic_vector(signed(sext_ln84_fu_882_p1) + signed(add_ln84_1_reg_2030));
    and_ln47_1_fu_1484_p2 <= (or_ln47_1_fu_1478_p2 and grp_fu_377_p_dout0);
    and_ln47_2_fu_1927_p2 <= (or_ln47_2_fu_1921_p2 and grp_fu_377_p_dout0);
    and_ln47_fu_1076_p2 <= (or_ln47_fu_1070_p2 and grp_fu_377_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_517_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln22_fu_517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_517_p2)
    begin
        if (((icmp_ln22_fu_517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln41_1_fu_1035_p1 <= reg_491;
    bitcast_ln41_2_fu_1438_p1 <= reg_487;
    bitcast_ln41_3_fu_1443_p1 <= reg_491;
    bitcast_ln41_4_fu_1881_p1 <= reg_487;
    bitcast_ln41_5_fu_1886_p1 <= reg_491;
    bitcast_ln41_fu_1030_p1 <= reg_487;
    bitcast_ln47_1_fu_1448_p1 <= reg_500;
    bitcast_ln47_2_fu_1891_p1 <= reg_500;
    bitcast_ln47_fu_1040_p1 <= reg_500;

    conv1_biases_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state25, zext_ln28_fu_543_p1, p_cast34_fu_761_p1, p_cast36_fu_1175_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv1_biases_address0 <= p_cast36_fu_1175_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_biases_address0 <= p_cast34_fu_761_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_biases_address0 <= zext_ln28_fu_543_p1(6 - 1 downto 0);
        else 
            conv1_biases_address0 <= "XXXXXX";
        end if; 
    end process;


    conv1_biases_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv1_biases_ce0 <= ap_const_logic_1;
        else 
            conv1_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ftmap_address0_assign_proc : process(ap_CS_fsm_state7, conv1_output_ftmap_addr_reg_2071, ap_CS_fsm_state26, conv1_output_ftmap_addr_1_reg_2183, ap_CS_fsm_state45, conv1_output_ftmap_addr_2_reg_2305, ap_CS_fsm_state23, ap_CS_fsm_state42, ap_CS_fsm_state61, p_cast38_fu_802_p1, p_cast49_fu_1210_p1, p_cast52_fu_1657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            conv1_output_ftmap_address0 <= conv1_output_ftmap_addr_2_reg_2305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            conv1_output_ftmap_address0 <= p_cast52_fu_1657_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            conv1_output_ftmap_address0 <= conv1_output_ftmap_addr_1_reg_2183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv1_output_ftmap_address0 <= p_cast49_fu_1210_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_ftmap_address0 <= conv1_output_ftmap_addr_reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv1_output_ftmap_address0 <= p_cast38_fu_802_p1(22 - 1 downto 0);
        else 
            conv1_output_ftmap_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state26, ap_CS_fsm_state45, ap_CS_fsm_state23, ap_CS_fsm_state42, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            conv1_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ftmap_d0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state42, ap_CS_fsm_state61, select_ln47_fu_1082_p3, select_ln47_1_fu_1490_p3, select_ln47_2_fu_1933_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            conv1_output_ftmap_d0 <= select_ln47_2_fu_1933_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            conv1_output_ftmap_d0 <= select_ln47_1_fu_1490_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_ftmap_d0 <= select_ln47_fu_1082_p3;
        else 
            conv1_output_ftmap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ftmap_we0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state42, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            conv1_output_ftmap_we0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_weights_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state29, ap_CS_fsm_state48, zext_ln41_7_fu_940_p1, zext_ln41_15_fu_1348_p1, zext_ln41_19_fu_1791_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            conv1_weights_address0 <= zext_ln41_19_fu_1791_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            conv1_weights_address0 <= zext_ln41_15_fu_1348_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_weights_address0 <= zext_ln41_7_fu_940_p1(13 - 1 downto 0);
        else 
            conv1_weights_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_weights_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state29, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv1_weights_ce0 <= ap_const_logic_1;
        else 
            conv1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_31_fu_615_p1 <= conv1_biases_q0;
    empty_32_fu_639_p2 <= std_logic_vector(unsigned(zext_ln31_fu_619_p1) + unsigned(zext_ln22_reg_1956));
    empty_33_fu_648_p2 <= std_logic_vector(signed(sext_ln41_reg_1976) + signed(p_cast17_fu_644_p1));
    empty_34_fu_657_p1 <= empty_33_fu_648_p2(14 - 1 downto 0);
    empty_35_fu_669_p2 <= std_logic_vector(unsigned(p_shl2_fu_661_p3) - unsigned(p_cast18_fu_653_p1));
    empty_36_fu_788_p2 <= std_logic_vector(unsigned(zext_ln32_1_fu_772_p1) + unsigned(zext_ln24_reg_1966));
    empty_37_fu_797_p2 <= std_logic_vector(unsigned(empty_35_reg_2020) + unsigned(p_cast19_fu_793_p1));
    empty_38_fu_863_p2 <= std_logic_vector(signed(tmp_cast_fu_859_p1) + signed(zext_ln32_reg_2025));
    empty_39_fu_710_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_706_p1) - unsigned(add_ln28_cast_fu_694_p1));
    empty_40_fu_746_p2 <= std_logic_vector(unsigned(tmp_2_reg_2001) + unsigned(ap_const_lv8_4));
    empty_41_fu_1091_p1 <= conv1_biases_q0;
    empty_42_fu_1115_p2 <= std_logic_vector(unsigned(zext_ln31_1_fu_1095_p1) + unsigned(zext_ln22_reg_1956));
    empty_43_fu_1124_p2 <= std_logic_vector(signed(sext_ln41_1_reg_2035) + signed(p_cast23_fu_1120_p1));
    empty_44_fu_1133_p1 <= empty_43_fu_1124_p2(14 - 1 downto 0);
    empty_45_fu_1145_p2 <= std_logic_vector(unsigned(p_shl7_fu_1137_p3) - unsigned(p_cast24_fu_1129_p1));
    empty_46_fu_1196_p2 <= std_logic_vector(unsigned(zext_ln32_3_fu_1180_p1) + unsigned(zext_ln24_reg_1966));
    empty_47_fu_1205_p2 <= std_logic_vector(unsigned(empty_45_reg_2150) + unsigned(p_cast30_fu_1201_p1));
    empty_48_fu_1271_p2 <= std_logic_vector(signed(tmp6_cast_fu_1267_p1) + signed(zext_ln32_2_reg_2155));
    empty_49_fu_1524_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_1520_p1) - unsigned(add_ln28_1_cast20_fu_1508_p1));
    empty_50_fu_1160_p2 <= std_logic_vector(unsigned(tmp_2_reg_2001) + unsigned(ap_const_lv8_8));
    empty_51_fu_1552_p1 <= conv1_biases_q0;
    empty_52_fu_1576_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_1556_p1) + unsigned(zext_ln22_reg_1956));
    empty_53_fu_1585_p2 <= std_logic_vector(signed(sext_ln41_2_reg_2249) + signed(p_cast26_fu_1581_p1));
    empty_54_fu_1594_p1 <= empty_53_fu_1585_p2(14 - 1 downto 0);
    empty_55_fu_1606_p2 <= std_logic_vector(unsigned(p_shl_fu_1598_p3) - unsigned(p_cast28_fu_1590_p1));
    empty_56_fu_1643_p2 <= std_logic_vector(unsigned(zext_ln32_5_fu_1627_p1) + unsigned(zext_ln24_reg_1966));
    empty_57_fu_1652_p2 <= std_logic_vector(unsigned(empty_55_reg_2272) + unsigned(p_cast31_fu_1648_p1));
    empty_58_fu_1714_p2 <= std_logic_vector(signed(tmp12_cast_fu_1710_p1) + signed(zext_ln32_4_reg_2277));
    empty_fu_568_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_564_p1) - unsigned(n1_cast_fu_552_p1));
    grp_fu_365_p_ce <= ap_const_logic_1;
    grp_fu_365_p_din0 <= grp_fu_468_p0;
    grp_fu_365_p_din1 <= grp_fu_468_p1;
    grp_fu_365_p_opcode <= ap_const_lv2_0;
    grp_fu_373_p_ce <= ap_const_logic_1;
    grp_fu_373_p_din0 <= grp_fu_478_p0;
    grp_fu_373_p_din1 <= grp_fu_478_p1;
    grp_fu_377_p_ce <= ap_const_logic_1;
    grp_fu_377_p_din0 <= reg_500;
    grp_fu_377_p_din1 <= ap_const_lv32_0;
    grp_fu_377_p_opcode <= ap_const_lv5_4;

    grp_fu_468_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state28, ap_CS_fsm_state47, add54_0_lcssa31_reg_303, add54_029_reg_324, add54_1_lcssa34_reg_369, add54_132_reg_390, add54_2_lcssa37_reg_435, add54_235_reg_456, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_468_p0 <= add54_235_reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_468_p0 <= add54_2_lcssa37_reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_468_p0 <= add54_132_reg_390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_468_p0 <= add54_1_lcssa34_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_468_p0 <= add54_029_reg_324;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_468_p0 <= add54_0_lcssa31_reg_303;
        else 
            grp_fu_468_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_468_p1_assign_proc : process(reg_495, empty_31_reg_2007, ap_CS_fsm_state9, empty_41_reg_2137, ap_CS_fsm_state28, empty_51_reg_2259, ap_CS_fsm_state47, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_468_p1 <= empty_51_reg_2259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_468_p1 <= empty_41_reg_2137;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_468_p1 <= reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_468_p1 <= empty_31_reg_2007;
        else 
            grp_fu_468_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p0_assign_proc : process(bitcast_ln41_fu_1030_p1, ap_CS_fsm_state12, bitcast_ln41_2_fu_1438_p1, ap_CS_fsm_state31, bitcast_ln41_4_fu_1881_p1, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_478_p0 <= bitcast_ln41_4_fu_1881_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_478_p0 <= bitcast_ln41_2_fu_1438_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_478_p0 <= bitcast_ln41_fu_1030_p1;
        else 
            grp_fu_478_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p1_assign_proc : process(ap_CS_fsm_state12, bitcast_ln41_1_fu_1035_p1, ap_CS_fsm_state31, bitcast_ln41_3_fu_1443_p1, ap_CS_fsm_state50, bitcast_ln41_5_fu_1886_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_478_p1 <= bitcast_ln41_5_fu_1886_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_478_p1 <= bitcast_ln41_3_fu_1443_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_478_p1 <= bitcast_ln41_1_fu_1035_p1;
        else 
            grp_fu_478_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln22_fu_517_p2 <= "1" when (h_fu_126 = ap_const_lv8_FF) else "0";
    icmp_ln24_fu_527_p2 <= "1" when (w_reg_246 = ap_const_lv8_FF) else "0";
    icmp_ln31_1_fu_1099_p2 <= "1" when (th_1_reg_336 = ap_const_lv7_55) else "0";
    icmp_ln31_2_fu_1560_p2 <= "1" when (th_2_reg_402 = ap_const_lv7_55) else "0";
    icmp_ln31_fu_623_p2 <= "1" when (th_reg_270 = ap_const_lv7_55) else "0";
    icmp_ln32_1_fu_1184_p2 <= "1" when (tw_1_reg_347 = ap_const_lv7_55) else "0";
    icmp_ln32_2_fu_1631_p2 <= "1" when (tw_2_reg_413 = ap_const_lv7_55) else "0";
    icmp_ln32_fu_776_p2 <= "1" when (tw_reg_281 = ap_const_lv7_55) else "0";
    icmp_ln34_1_fu_1249_p2 <= "1" when (f1h_1_reg_358 = ap_const_lv4_9) else "0";
    icmp_ln34_2_fu_1692_p2 <= "1" when (f1h_2_reg_424 = ap_const_lv4_9) else "0";
    icmp_ln34_fu_841_p2 <= "1" when (f1h_reg_292 = ap_const_lv4_9) else "0";
    icmp_ln35_1_fu_1353_p2 <= "1" when (f1w_1_reg_379 = ap_const_lv4_9) else "0";
    icmp_ln35_2_fu_1796_p2 <= "1" when (f1w_2_reg_445 = ap_const_lv4_9) else "0";
    icmp_ln35_fu_945_p2 <= "1" when (f1w_reg_313 = ap_const_lv4_9) else "0";
    icmp_ln47_1_fu_1064_p2 <= "1" when (trunc_ln47_fu_1054_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_2_fu_1466_p2 <= "0" when (tmp_5_fu_1452_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_3_fu_1472_p2 <= "1" when (trunc_ln47_1_fu_1462_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_4_fu_1909_p2 <= "0" when (tmp_7_fu_1895_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_5_fu_1915_p2 <= "1" when (trunc_ln47_2_fu_1905_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_fu_1058_p2 <= "0" when (tmp_3_fu_1044_p4 = ap_const_lv8_FF) else "1";
    icmp_ln84_2_fu_980_p2 <= "1" when (signed(add_ln39_1_fu_967_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_3_fu_1284_p2 <= "1" when (signed(empty_48_fu_1271_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_4_fu_1727_p2 <= "1" when (signed(empty_58_fu_1714_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_5_fu_1388_p2 <= "1" when (signed(add_ln39_3_fu_1375_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_6_fu_1831_p2 <= "1" when (signed(add_ln39_5_fu_1818_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_fu_876_p2 <= "1" when (signed(empty_38_fu_863_p2) > signed(ap_const_lv10_FE)) else "0";

    input_ftmap_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state29, ap_CS_fsm_state48, zext_ln41_10_fu_1025_p1, zext_ln41_17_fu_1433_p1, zext_ln41_20_fu_1876_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            input_ftmap_address0 <= zext_ln41_20_fu_1876_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_ftmap_address0 <= zext_ln41_17_fu_1433_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_ftmap_address0 <= zext_ln41_10_fu_1025_p1(16 - 1 downto 0);
        else 
            input_ftmap_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_ftmap_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state29, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            input_ftmap_ce0 <= ap_const_logic_1;
        else 
            input_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n1_cast15_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_reg_258),11));
    n1_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_reg_258),16));
    or_ln47_1_fu_1478_p2 <= (icmp_ln47_3_fu_1472_p2 or icmp_ln47_2_fu_1466_p2);
    or_ln47_2_fu_1921_p2 <= (icmp_ln47_5_fu_1915_p2 or icmp_ln47_4_fu_1909_p2);
    or_ln47_fu_1070_p2 <= (icmp_ln47_fu_1058_p2 or icmp_ln47_1_fu_1064_p2);
    or_ln83_2_fu_1002_p2 <= (tmp_19_fu_972_p3 or icmp_ln84_2_fu_980_p2);
    or_ln83_3_fu_1307_p2 <= (tmp_21_fu_1276_p3 or icmp_ln84_3_fu_1284_p2);
    or_ln83_4_fu_1750_p2 <= (tmp_23_fu_1719_p3 or icmp_ln84_4_fu_1727_p2);
    or_ln83_5_fu_1410_p2 <= (tmp_25_fu_1380_p3 or icmp_ln84_5_fu_1388_p2);
    or_ln83_6_fu_1853_p2 <= (tmp_27_fu_1823_p3 or icmp_ln84_6_fu_1831_p2);
    or_ln83_fu_899_p2 <= (tmp_17_fu_868_p3 or icmp_ln84_fu_876_p2);
    p_cast17_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_fu_639_p2),17));
        p_cast18_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_33_fu_648_p2),22));

    p_cast19_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_788_p2),22));
    p_cast20_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_reg_2066),10));
    p_cast23_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_fu_1115_p2),17));
        p_cast24_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_43_fu_1124_p2),22));

    p_cast26_fu_1581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_52_fu_1576_p2),16));
    p_cast27_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_46_reg_2178),10));
        p_cast28_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_53_fu_1585_p2),22));

    p_cast29_fu_1662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_56_reg_2300),10));
    p_cast30_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_46_fu_1196_p2),22));
    p_cast31_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_56_fu_1643_p2),22));
    p_cast34_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_751_p4),64));
    p_cast36_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1165_p4),64));
    p_cast38_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_797_p2),64));
    p_cast49_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_47_fu_1205_p2),64));
    p_cast52_fu_1657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_57_fu_1652_p2),64));
    p_shl2_fu_661_p3 <= (empty_34_fu_657_p1 & ap_const_lv8_0);
    p_shl3_fu_827_p3 <= (trunc_ln41_fu_823_p1 & ap_const_lv3_0);
    p_shl4_fu_1678_p3 <= (add_ln41_9_fu_1669_p2 & ap_const_lv3_0);
    p_shl7_fu_1137_p3 <= (empty_44_fu_1133_p1 & ap_const_lv8_0);
    p_shl8_fu_1235_p3 <= (trunc_ln41_1_fu_1231_p1 & ap_const_lv3_0);
    p_shl_fu_1598_p3 <= (empty_54_fu_1594_p1 & ap_const_lv8_0);
    select_ln47_1_fu_1490_p3 <= 
        ap_const_lv32_0 when (and_ln47_1_fu_1484_p2(0) = '1') else 
        reg_500;
    select_ln47_2_fu_1933_p3 <= 
        ap_const_lv32_0 when (and_ln47_2_fu_1927_p2(0) = '1') else 
        reg_500;
    select_ln47_fu_1082_p3 <= 
        ap_const_lv32_0 when (and_ln47_fu_1076_p2(0) = '1') else 
        reg_500;
    select_ln83_11_fu_1402_p3 <= 
        ap_const_lv10_0 when (tmp_26_fu_1394_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_13_fu_1845_p3 <= 
        ap_const_lv10_0 when (tmp_28_fu_1837_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_5_fu_994_p3 <= 
        ap_const_lv10_0 when (tmp_20_fu_986_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_7_fu_1299_p3 <= 
        ap_const_lv8_0 when (tmp_21_fu_1276_p3(0) = '1') else 
        ap_const_lv8_FE;
    select_ln83_9_fu_1742_p3 <= 
        ap_const_lv8_0 when (tmp_23_fu_1719_p3(0) = '1') else 
        ap_const_lv8_FE;
    select_ln83_fu_891_p3 <= 
        ap_const_lv8_0 when (tmp_17_fu_868_p3(0) = '1') else 
        ap_const_lv8_FE;
        sext_ln39_1_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_2_fu_1365_p2),10));

        sext_ln39_2_fu_1814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_4_fu_1808_p2),10));

        sext_ln39_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_fu_957_p2),10));

        sext_ln41_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_39_fu_710_p2),17));

        sext_ln41_2_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_49_fu_1524_p2),16));

        sext_ln41_3_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_fu_1008_p3),16));

        sext_ln41_4_fu_1424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_2_fu_1416_p3),16));

        sext_ln41_5_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_3_fu_1859_p3),16));

        sext_ln41_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_568_p2),17));

        sext_ln84_1_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1261_p2),8));

        sext_ln84_2_fu_1733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_1704_p2),8));

        sext_ln84_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_853_p2),8));

    sub_ln41_1_fu_1333_p2 <= std_logic_vector(unsigned(tmp_22_fu_1325_p3) - unsigned(zext_ln41_11_fu_1321_p1));
    sub_ln41_2_fu_1776_p2 <= std_logic_vector(unsigned(tmp_24_fu_1768_p3) - unsigned(zext_ln41_16_fu_1764_p1));
    sub_ln41_fu_925_p2 <= std_logic_vector(unsigned(tmp_18_fu_917_p3) - unsigned(zext_ln41_5_fu_913_p1));
    th_1_cast24_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_1_reg_336),8));
    th_2_cast26_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_2_reg_402),8));
    th_cast19_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_reg_270),8));
        tmp12_cast_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_1704_p2),10));

    tmp12_fu_1704_p2 <= std_logic_vector(unsigned(f1h_2_reg_424) + unsigned(ap_const_lv4_C));
        tmp6_cast_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1261_p2),10));

    tmp6_fu_1261_p2 <= std_logic_vector(unsigned(f1h_1_reg_358) + unsigned(ap_const_lv4_C));
    tmp_10_fu_720_p3 <= (add_ln28_fu_684_p2 & ap_const_lv3_0);
    tmp_11_fu_751_p4 <= empty_40_fu_746_p2(7 downto 2);
    tmp_12_fu_1512_p3 <= (add_ln28_1_fu_1499_p2 & ap_const_lv8_0);
    tmp_13_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_556_p3),16));
    tmp_13_fu_600_p3 <= n1_reg_258(6 downto 6);
    tmp_14_fu_738_p3 <= add_ln28_fu_684_p2(6 downto 6);
    tmp_15_fu_1534_p3 <= (add_ln28_1_fu_1499_p2 & ap_const_lv3_0);
    tmp_16_fu_1165_p4 <= empty_50_fu_1160_p2(7 downto 2);
    tmp_17_cast_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_698_p3),16));
    tmp_17_fu_868_p3 <= empty_38_fu_863_p2(9 downto 9);
    tmp_18_fu_917_p3 <= (yPixelClamped_fu_905_p3 & ap_const_lv8_0);
    tmp_19_fu_972_p3 <= add_ln39_1_fu_967_p2(9 downto 9);
    tmp_1_fu_578_p3 <= (n1_reg_258 & ap_const_lv3_0);
    tmp_20_fu_986_p3 <= add_ln39_1_fu_967_p2(9 downto 9);
    tmp_21_cast_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1512_p3),15));
    tmp_21_fu_1276_p3 <= empty_48_fu_1271_p2(9 downto 9);
    tmp_22_fu_1325_p3 <= (yPixelClamped_2_fu_1313_p3 & ap_const_lv8_0);
    tmp_23_fu_1719_p3 <= empty_58_fu_1714_p2(9 downto 9);
    tmp_24_fu_1768_p3 <= (yPixelClamped_3_fu_1756_p3 & ap_const_lv8_0);
    tmp_25_fu_1380_p3 <= add_ln39_3_fu_1375_p2(9 downto 9);
    tmp_26_fu_1394_p3 <= add_ln39_3_fu_1375_p2(9 downto 9);
    tmp_27_fu_1823_p3 <= add_ln39_5_fu_1818_p2(9 downto 9);
    tmp_28_fu_1837_p3 <= add_ln39_5_fu_1818_p2(9 downto 9);
    tmp_2_fu_608_p3 <= (trunc_ln28_reg_1986 & ap_const_lv2_0);
    tmp_3_fu_1044_p4 <= bitcast_ln47_fu_1040_p1(30 downto 23);
    tmp_5_fu_1452_p4 <= bitcast_ln47_1_fu_1448_p1(30 downto 23);
    tmp_7_fu_1895_p4 <= bitcast_ln47_2_fu_1891_p1(30 downto 23);
    tmp_9_fu_698_p3 <= (add_ln28_fu_684_p2 & ap_const_lv8_0);
        tmp_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_853_p2),10));

    tmp_fu_853_p2 <= std_logic_vector(unsigned(f1h_reg_292) + unsigned(ap_const_lv4_C));
    tmp_s_fu_556_p3 <= (n1_reg_258 & ap_const_lv8_0);
    trunc_ln28_fu_596_p1 <= n1_reg_258(6 - 1 downto 0);
    trunc_ln41_1_fu_1231_p1 <= add_ln41_6_fu_1222_p2(10 - 1 downto 0);
    trunc_ln41_fu_823_p1 <= add_ln41_3_fu_814_p2(10 - 1 downto 0);
    trunc_ln47_1_fu_1462_p1 <= bitcast_ln47_1_fu_1448_p1(23 - 1 downto 0);
    trunc_ln47_2_fu_1905_p1 <= bitcast_ln47_2_fu_1891_p1(23 - 1 downto 0);
    trunc_ln47_fu_1054_p1 <= bitcast_ln47_fu_1040_p1(23 - 1 downto 0);
    xPixelClamped_2_fu_1416_p3 <= 
        select_ln83_11_fu_1402_p3 when (or_ln83_5_fu_1410_p2(0) = '1') else 
        add_ln39_3_fu_1375_p2;
    xPixelClamped_3_fu_1859_p3 <= 
        select_ln83_13_fu_1845_p3 when (or_ln83_6_fu_1853_p2(0) = '1') else 
        add_ln39_5_fu_1818_p2;
    xPixelClamped_fu_1008_p3 <= 
        select_ln83_5_fu_994_p3 when (or_ln83_2_fu_1002_p2(0) = '1') else 
        add_ln39_1_fu_967_p2;
    yPixelClamped_2_fu_1313_p3 <= 
        select_ln83_7_fu_1299_p3 when (or_ln83_3_fu_1307_p2(0) = '1') else 
        add_ln84_3_fu_1294_p2;
    yPixelClamped_3_fu_1756_p3 <= 
        select_ln83_9_fu_1742_p3 when (or_ln83_4_fu_1750_p2(0) = '1') else 
        add_ln84_4_fu_1737_p2;
    yPixelClamped_fu_905_p3 <= 
        select_ln83_fu_891_p3 when (or_ln83_fu_899_p2(0) = '1') else 
        add_ln84_fu_886_p2;
    zext_ln22_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_126),9));
    zext_ln24_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_246),9));
    zext_ln28_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_reg_258),64));
    zext_ln31_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_1_reg_336),9));
    zext_ln31_2_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_2_reg_402),9));
    zext_ln31_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_reg_270),9));
    zext_ln32_1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_reg_281),9));
    zext_ln32_2_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_fu_1115_p2),10));
    zext_ln32_3_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_1_reg_347),9));
    zext_ln32_4_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_52_fu_1576_p2),10));
    zext_ln32_5_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_2_reg_413),9));
    zext_ln32_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_fu_639_p2),10));
    zext_ln41_10_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_8_fu_1020_p2),64));
    zext_ln41_11_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yPixelClamped_2_fu_1313_p3),16));
    zext_ln41_12_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1h_2_reg_424),10));
    zext_ln41_13_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_9_fu_1669_p2),13));
    zext_ln41_14_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1w_1_reg_379),13));
    zext_ln41_15_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_11_fu_1343_p2),64));
    zext_ln41_16_fu_1764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yPixelClamped_3_fu_1756_p3),16));
    zext_ln41_17_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_12_fu_1428_p2),64));
    zext_ln41_18_fu_1782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1w_2_reg_445),13));
    zext_ln41_19_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_13_fu_1786_p2),64));
    zext_ln41_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_720_p3),11));
    zext_ln41_20_fu_1876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_14_fu_1871_p2),64));
    zext_ln41_2_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1534_p3),10));
    zext_ln41_3_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1h_reg_292),11));
    zext_ln41_4_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_3_fu_814_p2),13));
    zext_ln41_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yPixelClamped_fu_905_p3),16));
    zext_ln41_6_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1w_reg_313),13));
    zext_ln41_7_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_5_fu_935_p2),64));
    zext_ln41_8_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f1h_1_reg_358),11));
    zext_ln41_9_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_6_fu_1222_p2),13));
    zext_ln41_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_578_p3),11));
end behav;
