-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_A2 : STD_LOGIC_VECTOR (13 downto 0) := "00000010100010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_fm_buffer_0_ce0 : STD_LOGIC;
    signal input_fm_buffer_0_we0 : STD_LOGIC;
    signal input_fm_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_fm_buffer_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_addr_reg_1062 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_1_reg_1068 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln31_fu_472_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_fu_484_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1085 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_33_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln94_1_fu_511_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_1_reg_1098 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln94_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln94_reg_1106 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln95_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln95_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln94_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_0_addr_1_reg_1116 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln95_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_reg_1124 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_2_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln95_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_2_read_reg_1135 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_1_fu_778_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln45_1_reg_1140 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_35_fu_800_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_35_reg_1145 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_812_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_reg_1153 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_1_reg_1158 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_fu_872_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_38_reg_1164 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln48_1_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_1_reg_1172 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_addr_1_reg_1177 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln49_fu_910_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_reg_1185 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln52_fu_926_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_reg_1198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal mul_ln62_1_fu_942_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln62_1_reg_1203 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_958_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln53_reg_1211 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln62_1_fu_974_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_1_reg_1216 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln53_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_1226 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal add_ln115_fu_1013_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln115_reg_1254 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal empty_45_fu_1025_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ti_reg_268 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5515_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_280 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal by_reg_291 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_302 : STD_LOGIC_VECTOR (9 downto 0);
    signal bx_reg_314 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal nout_reg_325 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul37_reg_336 : STD_LOGIC_VECTOR (13 downto 0);
    signal ty_reg_347 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln49_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_i_i_lcssa_lcssa11_reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal kx_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_i_i_lcssa10_reg_404 : STD_LOGIC_VECTOR (15 downto 0);
    signal nout_1_reg_416 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal empty_44_reg_427 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln115_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast40_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast45_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_2_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast46_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal trunc_ln_fu_438_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp2_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln94_fu_517_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_cast_fu_549_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_cast_fu_539_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_34_fu_553_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_581_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_1_fu_611_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_603_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln102_fu_619_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln102_fu_623_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln102_fu_633_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln102_2_fu_637_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_648_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln98_1_fu_676_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln98_fu_682_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln98_fu_672_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_686_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_1_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_2_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln53_3_fu_728_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln102_2_fu_736_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln102_2_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_fu_748_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_1_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_758_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_788_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_796_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal nout_cast_fu_784_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln48_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_822_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_827_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ty_cast_fu_847_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_36_fu_851_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_37_fu_860_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_864_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast_fu_856_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_cast_fu_890_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_39_fu_894_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln52_fu_916_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_41_fu_932_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_1_fu_942_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln62_1_fu_942_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_fu_948_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_964_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln62_1_fu_970_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_fu_998_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1036_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal mul_ln62_1_fu_942_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_mac_muladd_16s_16s_23ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component srcnn_conv1_input_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    input_fm_buffer_0_U : component srcnn_conv1_input_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_0_address0,
        ce0 => input_fm_buffer_0_ce0,
        we0 => input_fm_buffer_0_we0,
        d0 => input_fm_buffer_0_d0,
        q0 => input_fm_buffer_0_q0);

    output_fm_buffer_U : component srcnn_conv1_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);

    mul_5ns_6ns_10_1_1_U1 : component srcnn_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln62_1_fu_942_p0,
        din1 => mul_ln62_1_fu_942_p1,
        dout => mul_ln62_1_fu_942_p2);

    mac_muladd_16s_16s_23ns_23_4_1_U2 : component srcnn_mac_muladd_16s_16s_23ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_fm_buffer_0_q0,
        din1 => gmem_addr_1_read_reg_1226,
        din2 => grp_fu_1036_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1036_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                bx_reg_314 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                bx_reg_314 <= add_ln95_reg_1124;
            end if; 
        end if;
    end process;

    by_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                by_reg_291 <= ap_const_lv5_0;
            elsif (((icmp_ln95_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                by_reg_291 <= add_ln94_reg_1106;
            end if; 
        end if;
    end process;

    conv_i_i_lcssa10_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                conv_i_i_lcssa10_reg_404 <= conv_i_i_lcssa_lcssa11_reg_382;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                conv_i_i_lcssa10_reg_404 <= trunc_ln4_fu_998_p1(22 downto 7);
            end if; 
        end if;
    end process;

    conv_i_i_lcssa_lcssa11_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                conv_i_i_lcssa_lcssa11_reg_382 <= output_fm_buffer_q0;
            elsif (((icmp_ln53_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                conv_i_i_lcssa_lcssa11_reg_382 <= conv_i_i_lcssa10_reg_404;
            end if; 
        end if;
    end process;

    empty_44_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                empty_44_reg_427 <= ap_const_lv15_0;
            elsif (((exitcond5515_fu_1019_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                empty_44_reg_427 <= empty_45_fu_1025_p2;
            end if; 
        end if;
    end process;

    empty_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_280 <= empty_33_fu_500_p2;
            elsif (((icmp_ln32_fu_478_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_280 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    kx_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                kx_reg_393 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                kx_reg_393 <= add_ln53_reg_1211;
            end if; 
        end if;
    end process;

    ky_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                ky_reg_371 <= ap_const_lv4_0;
            elsif (((icmp_ln53_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                ky_reg_371 <= add_ln52_reg_1198;
            end if; 
        end if;
    end process;

    nout_1_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                nout_1_reg_416 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_gmem_RVALID = ap_const_logic_1))) then 
                nout_1_reg_416 <= add_ln115_reg_1254;
            end if; 
        end if;
    end process;

    nout_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_325 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_878_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                nout_reg_325 <= add_ln45_reg_1153;
            end if; 
        end if;
    end process;

    phi_mul37_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul37_reg_336 <= ap_const_lv14_0;
            elsif (((icmp_ln48_fu_878_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul37_reg_336 <= add_ln45_1_reg_1140;
            end if; 
        end if;
    end process;

    phi_mul_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_302 <= ap_const_lv10_0;
            elsif (((icmp_ln95_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_302 <= add_ln94_1_reg_1098;
            end if; 
        end if;
    end process;

    ti_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5515_fu_1019_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                ti_reg_268 <= add_ln32_reg_1085;
            elsif (((icmp_ln31_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_268 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tj_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_160 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_160 <= add_ln31_reg_1077;
            end if; 
        end if;
    end process;

    tx_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_878_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tx_reg_359 <= ap_const_lv5_0;
            elsif (((icmp_ln52_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                tx_reg_359 <= add_ln49_reg_1185;
            end if; 
        end if;
    end process;

    ty_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ty_reg_347 <= ap_const_lv5_0;
            elsif (((icmp_ln49_fu_904_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ty_reg_347 <= add_ln48_1_reg_1172;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln115_reg_1254 <= add_ln115_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1077 <= add_ln31_fu_472_p2;
                tj_1_reg_1068 <= tj_fu_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1085 <= add_ln32_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln45_1_reg_1140 <= add_ln45_1_fu_778_p2;
                add_ln45_reg_1153 <= add_ln45_fu_812_p2;
                empty_35_reg_1145 <= empty_35_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln48_1_reg_1172 <= add_ln48_1_fu_884_p2;
                empty_38_reg_1164 <= empty_38_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_1185 <= add_ln49_fu_910_p2;
                output_fm_buffer_addr_1_reg_1177 <= p_cast45_fu_899_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln52_reg_1198 <= add_ln52_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln53_reg_1211 <= add_ln53_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_952_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                add_ln62_1_reg_1216 <= add_ln62_1_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln94_1_reg_1098 <= add_ln94_1_fu_511_p2;
                add_ln94_reg_1106 <= add_ln94_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln95_reg_1124 <= add_ln95_fu_658_p2;
                input_fm_buffer_0_addr_1_reg_1116 <= zext_ln102_1_fu_643_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                gmem_addr_1_read_reg_1226 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_1_reg_1158 <= sext_ln52_fu_837_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                gmem_addr_2_read_reg_1135 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_2_reg_1129 <= sext_ln102_1_fu_768_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_1062 <= sext_ln115_fu_448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                mul_ln62_1_reg_1203 <= mul_ln62_1_fu_942_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sext_ln95_reg_1111(63 downto 1) <= sext_ln95_fu_629_p1(63 downto 1);
            end if;
        end if;
    end process;
    sext_ln95_reg_1111(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state35, ap_CS_fsm_state44, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln94_fu_521_p2, ap_CS_fsm_state6, icmp_ln95_fu_652_p2, ap_CS_fsm_state17, icmp_ln45_fu_806_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state28, icmp_ln52_fu_920_p2, ap_CS_fsm_state29, icmp_ln53_fu_952_p2, ap_CS_fsm_state43, ap_CS_fsm_state45, icmp_ln31_fu_466_p2, exitcond5515_fu_1019_p2, icmp_ln32_fu_478_p2, exitcond4_fu_494_p2, icmp_ln48_fu_878_p2, icmp_ln49_fu_904_p2, icmp_ln115_fu_1007_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln94_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln95_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln45_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_878_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_904_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln52_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln53_fu_952_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state35 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln115_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((exitcond5515_fu_1019_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln102_1_fu_753_p2 <= std_logic_vector(unsigned(add_ln102_fu_748_p2) + unsigned(sext_ln95_reg_1111));
    add_ln102_2_fu_637_p2 <= std_logic_vector(unsigned(phi_mul_reg_302) + unsigned(zext_ln102_fu_633_p1));
    add_ln102_fu_748_p2 <= std_logic_vector(signed(sext_ln102_2_fu_744_p1) + signed(input_ftmap));
    add_ln115_fu_1013_p2 <= std_logic_vector(unsigned(nout_1_reg_416) + unsigned(ap_const_lv7_1));
    add_ln31_fu_472_p2 <= std_logic_vector(unsigned(tj_fu_160) + unsigned(ap_const_lv4_1));
    add_ln32_fu_484_p2 <= std_logic_vector(unsigned(ti_reg_268) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_778_p2 <= std_logic_vector(unsigned(phi_mul37_reg_336) + unsigned(ap_const_lv14_A2));
    add_ln45_fu_812_p2 <= std_logic_vector(unsigned(nout_reg_325) + unsigned(ap_const_lv7_1));
    add_ln48_1_fu_884_p2 <= std_logic_vector(unsigned(ty_reg_347) + unsigned(ap_const_lv5_1));
    add_ln48_fu_822_p2 <= std_logic_vector(unsigned(zext_ln48_fu_818_p1) + unsigned(conv1_weights));
    add_ln49_fu_910_p2 <= std_logic_vector(unsigned(tx_reg_359) + unsigned(ap_const_lv5_1));
    add_ln52_fu_926_p2 <= std_logic_vector(unsigned(ky_reg_371) + unsigned(ap_const_lv4_1));
    add_ln53_fu_958_p2 <= std_logic_vector(unsigned(kx_reg_393) + unsigned(ap_const_lv4_1));
    add_ln57_fu_964_p2 <= std_logic_vector(unsigned(zext_ln53_fu_948_p1) + unsigned(tx_reg_359));
    add_ln62_1_fu_974_p2 <= std_logic_vector(unsigned(mul_ln62_1_reg_1203) + unsigned(zext_ln62_1_fu_970_p1));
    add_ln94_1_fu_511_p2 <= std_logic_vector(unsigned(phi_mul_reg_302) + unsigned(ap_const_lv10_19));
    add_ln94_fu_527_p2 <= std_logic_vector(unsigned(by_reg_291) + unsigned(ap_const_lv5_1));
    add_ln95_fu_658_p2 <= std_logic_vector(unsigned(bx_reg_314) + unsigned(ap_const_lv5_1));
    add_ln98_1_fu_676_p2 <= std_logic_vector(unsigned(zext_ln95_fu_648_p1) + unsigned(ap_const_lv6_3C));
    add_ln98_fu_686_p2 <= std_logic_vector(signed(sext_ln98_fu_682_p1) + signed(zext_ln98_fu_672_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state35_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_466_p2)
    begin
        if ((((icmp_ln31_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_466_p2)
    begin
        if (((icmp_ln31_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_33_fu_500_p2 <= std_logic_vector(unsigned(empty_reg_280) + unsigned(ap_const_lv10_1));
    empty_34_fu_553_p2 <= std_logic_vector(signed(tmp3_cast_fu_549_p1) + signed(tmp2_cast_fu_539_p1));
    empty_35_fu_800_p2 <= std_logic_vector(unsigned(tmp_cast_fu_796_p1) + unsigned(nout_cast_fu_784_p1));
    empty_36_fu_851_p2 <= std_logic_vector(unsigned(empty_35_reg_1145) + unsigned(ty_cast_fu_847_p1));
    empty_37_fu_860_p1 <= empty_36_fu_851_p2(11 - 1 downto 0);
    empty_38_fu_872_p2 <= std_logic_vector(unsigned(p_shl1_fu_864_p3) + unsigned(p_cast_fu_856_p1));
    empty_39_fu_894_p2 <= std_logic_vector(unsigned(empty_38_reg_1164) + unsigned(tx_cast_fu_890_p1));
    empty_41_fu_932_p2 <= std_logic_vector(unsigned(zext_ln52_fu_916_p1) + unsigned(ty_reg_347));
    empty_45_fu_1025_p2 <= std_logic_vector(unsigned(empty_44_reg_427) + unsigned(ap_const_lv15_1));
    exitcond4_fu_494_p2 <= "1" when (empty_reg_280 = ap_const_lv10_271) else "0";
    exitcond5515_fu_1019_p2 <= "1" when (empty_44_reg_427 = ap_const_lv15_4840) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state44, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1036_p2 <= (conv_i_i_lcssa10_reg_404 & ap_const_lv7_0);
    icmp_ln115_fu_1007_p2 <= "1" when (nout_1_reg_416 = ap_const_lv7_40) else "0";
    icmp_ln31_fu_466_p2 <= "1" when (tj_fu_160 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_478_p2 <= "1" when (ti_reg_268 = ap_const_lv4_F) else "0";
    icmp_ln45_fu_806_p2 <= "1" when (nout_reg_325 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_878_p2 <= "1" when (ty_reg_347 = ap_const_lv5_11) else "0";
    icmp_ln49_fu_904_p2 <= "1" when (tx_reg_359 = ap_const_lv5_11) else "0";
    icmp_ln52_fu_920_p2 <= "1" when (ky_reg_371 = ap_const_lv4_9) else "0";
    icmp_ln53_fu_952_p2 <= "1" when (kx_reg_393 = ap_const_lv4_9) else "0";
    icmp_ln54_1_fu_700_p2 <= "1" when (signed(add_ln98_fu_686_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln54_fu_567_p2 <= "1" when (signed(empty_34_fu_553_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln94_fu_521_p2 <= "1" when (by_reg_291 = ap_const_lv5_19) else "0";
    icmp_ln95_fu_652_p2 <= "1" when (bx_reg_314 = ap_const_lv5_19) else "0";

    input_fm_buffer_0_address0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state4, input_fm_buffer_0_addr_1_reg_1116, ap_CS_fsm_state16, p_cast40_fu_506_p1, zext_ln62_2_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_fm_buffer_0_address0 <= zext_ln62_2_fu_979_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_0_address0 <= input_fm_buffer_0_addr_1_reg_1116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_0_address0 <= p_cast40_fu_506_p1(10 - 1 downto 0);
        else 
            input_fm_buffer_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_0_ce0_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state30, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            input_fm_buffer_0_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state4, gmem_addr_2_read_reg_1135, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_fm_buffer_0_d0 <= gmem_addr_2_read_reg_1135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_0_d0 <= ap_const_lv16_0;
        else 
            input_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state4, exitcond4_fu_494_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond4_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_0_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state20, gmem_addr_reg_1062, gmem_addr_2_reg_1129, gmem_addr_1_reg_1158)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1062;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_axi_gmem_ARADDR <= gmem_addr_1_reg_1158;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARADDR <= gmem_addr_2_reg_1129;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_40;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_51;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_gmem_ARLEN <= ap_const_lv32_1;
            else 
                m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state44, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv16_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv2_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mul_ln62_1_fu_942_p0 <= mul_ln62_1_fu_942_p00(5 - 1 downto 0);
    mul_ln62_1_fu_942_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_41_fu_932_p2),10));
    mul_ln62_1_fu_942_p1 <= ap_const_lv10_19(6 - 1 downto 0);
    nout_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_325),12));
    or_ln53_1_fu_714_p2 <= (tmp_3_fu_692_p3 or icmp_ln54_1_fu_700_p2);
    or_ln53_fu_589_p2 <= (tmp_1_fu_559_p3 or icmp_ln54_fu_567_p2);

    output_fm_buffer_address0_assign_proc : process(output_fm_buffer_addr_1_reg_1177, ap_CS_fsm_state28, ap_CS_fsm_state45, p_cast46_fu_1031_p1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_fm_buffer_address0 <= p_cast46_fu_1031_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_1_reg_1177;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state45, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state45, conv_i_i_lcssa_lcssa11_reg_382)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_fm_buffer_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_fm_buffer_d0 <= conv_i_i_lcssa_lcssa11_reg_382;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state28, icmp_ln52_fu_920_p2, ap_CS_fsm_state45, exitcond5515_fu_1019_p2)
    begin
        if ((((exitcond5515_fu_1019_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((icmp_ln52_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast40_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_280),64));
    p_cast45_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_39_fu_894_p2),64));
    p_cast46_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_44_reg_427),64));
    p_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_851_p2),15));
    p_shl1_fu_864_p3 <= (empty_37_fu_860_p1 & ap_const_lv4_0);
    select_ln53_2_fu_720_p3 <= 
        ap_const_lv10_0 when (tmp_4_fu_706_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln53_3_fu_728_p3 <= 
        select_ln53_2_fu_720_p3 when (or_ln53_1_fu_714_p2(0) = '1') else 
        add_ln98_fu_686_p2;
    select_ln53_fu_581_p3 <= 
        ap_const_lv10_0 when (tmp_2_fu_573_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln102_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_758_p4),64));

        sext_ln102_2_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_2_fu_736_p3),64));

        sext_ln102_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_611_p3),19));

        sext_ln115_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_438_p4),64));

        sext_ln52_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_827_p4),64));

        sext_ln95_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln102_fu_623_p2),64));

        sext_ln98_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln98_1_fu_676_p2),10));

    shl_ln102_1_fu_611_p3 <= (yClamped_fu_595_p3 & ap_const_lv1_0);
    shl_ln102_2_fu_736_p3 <= (select_ln53_3_fu_728_p3 & ap_const_lv1_0);
    shl_ln_fu_603_p3 <= (yClamped_fu_595_p3 & ap_const_lv9_0);
    sub_ln102_fu_623_p2 <= std_logic_vector(unsigned(shl_ln_fu_603_p3) - unsigned(sext_ln102_fu_619_p1));
    tmp2_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_533_p3),10));
    tmp2_fu_533_p3 <= (tj_1_reg_1068 & tj_1_reg_1068);
        tmp3_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_543_p2),10));

    tmp3_fu_543_p2 <= std_logic_vector(unsigned(zext_ln94_fu_517_p1) + unsigned(ap_const_lv6_3C));
    tmp6_fu_664_p3 <= (ti_reg_268 & ti_reg_268);
    tmp_1_fu_559_p3 <= empty_34_fu_553_p2(9 downto 9);
    tmp_2_fu_573_p3 <= empty_34_fu_553_p2(9 downto 9);
    tmp_3_fu_692_p3 <= add_ln98_fu_686_p2(9 downto 9);
    tmp_4_fu_706_p3 <= add_ln98_fu_686_p2(9 downto 9);
    tmp_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_788_p3),12));
    tmp_fu_788_p3 <= (nout_reg_325 & ap_const_lv4_0);
    trunc_ln2_fu_827_p4 <= add_ln48_fu_822_p2(63 downto 1);
    trunc_ln3_fu_758_p4 <= add_ln102_1_fu_753_p2(63 downto 1);
    trunc_ln4_fu_998_p1 <= grp_fu_1036_p3;
    trunc_ln_fu_438_p4 <= conv1_biases(63 downto 1);
    tx_cast_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_359),15));
    ty_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_347),12));
    yClamped_fu_595_p3 <= 
        select_ln53_fu_581_p3 when (or_ln53_fu_589_p2(0) = '1') else 
        empty_34_fu_553_p2;
    zext_ln102_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_2_fu_637_p2),64));
    zext_ln102_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_314),10));
    zext_ln48_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul37_reg_336),64));
    zext_ln52_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_371),5));
    zext_ln53_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_393),5));
    zext_ln62_1_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_964_p2),10));
    zext_ln62_2_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_reg_1216),64));
    zext_ln94_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_291),6));
    zext_ln95_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_314),6));
    zext_ln98_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_664_p3),10));
end behav;
