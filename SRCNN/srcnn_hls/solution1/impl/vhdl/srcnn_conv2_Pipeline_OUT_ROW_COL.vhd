-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_OUT_ROW_COL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce1 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_buffer_ce0 : OUT STD_LOGIC;
    weight_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce1 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce1 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_o_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1011_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1011_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1011_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1011_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1011_p_ce : OUT STD_LOGIC;
    grp_fu_1015_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1015_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1015_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1015_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2_Pipeline_OUT_ROW_COL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_FF00 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv15_3FC0 : STD_LOGIC_VECTOR (14 downto 0) := "011111111000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_55 : STD_LOGIC_VECTOR (8 downto 0) := "001010101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_55 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010101";
    constant ap_const_lv17_182 : STD_LOGIC_VECTOR (16 downto 0) := "00000000110000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv19_304 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001100000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_55 : STD_LOGIC_VECTOR (9 downto 0) := "0001010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal icmp_ln40_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage8 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln40_reg_1074_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_1091 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_1091_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_1_fu_512_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_1099 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_1099_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln46_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln46_reg_1105_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_1_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln46_1_reg_1111 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln46_1_reg_1111_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln40_1_fu_646_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln40_1_reg_1117 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln50_fu_752_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln50_reg_1128 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln41_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_1140 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal urem_ln46_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_1166 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_1166_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_826_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal urem_ln50_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_1_reg_1197 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln50_1_reg_1197_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln45_fu_909_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln45_reg_1203 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_915_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_3_fu_929_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_3_reg_1215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal add_ln50_5_fu_937_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_5_reg_1220 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_7_fu_962_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_7_reg_1240 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_15_reg_1245 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_16_reg_1251 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_17_reg_1257 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_21_reg_1268 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_22_reg_1273 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_23_reg_1278 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_979_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1283 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_18_reg_1288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_19_reg_1293 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_20_reg_1298 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_24_reg_1303 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_25_reg_1309 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_26_reg_1315 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_1_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_27_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_28_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_float_255_255_float_64_1_1_float_float_255_255_o_29_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_996_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1005_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_reg_1351 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1016_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal zext_ln41_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln50_8_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln50_12_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln50_17_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln50_9_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln50_13_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_18_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal c_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_2_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_118 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten31_fu_122 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln45_2_fu_538_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_126 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln41_1_fu_678_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten45_fu_130 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln41_3_fu_552_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal o_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten86_fu_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_1_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln41_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_454_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln41_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_486_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln45_1_fu_532_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln41_1_fu_546_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_fu_596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_605_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_1_fu_621_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_fu_617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_fu_633_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_2_fu_653_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln43_mid_fu_657_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln40_fu_639_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln41_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_fu_689_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_3_fu_697_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_2_fu_685_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln50_1_fu_701_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln43_4_fu_715_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_3_fu_711_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln43_mid1_fu_719_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln40_2_fu_665_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_2_fu_727_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln43_fu_707_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln50_5_fu_739_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln50_fu_742_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln46_fu_775_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln46_fu_775_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln46_fu_775_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_7_fu_791_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln50_2_fu_795_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln50_1_fu_810_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln50_1_fu_810_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln50_1_fu_810_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_11_fu_837_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln50_4_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln50_2_fu_856_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln50_2_fu_856_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_2_fu_856_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_29_fu_875_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln50_1_fu_882_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln50_fu_872_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln50_fu_886_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln40_fu_892_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln50_4_fu_896_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln50_1_fu_899_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln45_fu_909_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln50_6_fu_926_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_10_fu_934_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_16_fu_946_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln50_6_fu_950_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln50_15_fu_942_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage6 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal mul_ln46_fu_775_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln50_1_fu_810_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln50_2_fu_856_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_urem_8ns_8ns_8_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component srcnn_urem_9ns_8ns_9_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component srcnn_mul_11s_8ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component srcnn_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_9ns_11ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component srcnn_mul_7s_8ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_8ns_8ns_8_12_1_U280 : component srcnn_urem_8ns_8ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln45_fu_504_p3,
        din1 => ap_const_lv8_55,
        ce => ap_const_logic_1,
        dout => grp_fu_520_p2);

    urem_8ns_8ns_8_12_1_U281 : component srcnn_urem_8ns_8ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_590_p0,
        din1 => ap_const_lv8_55,
        ce => ap_const_logic_1,
        dout => grp_fu_590_p2);

    urem_9ns_8ns_9_13_1_U282 : component srcnn_urem_9ns_8ns_9_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_605_p0,
        din1 => grp_fu_605_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_605_p2);

    mul_11s_8ns_14_1_1_U283 : component srcnn_mul_11s_8ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        din0 => add_ln50_fu_742_p2,
        din1 => mul_ln50_fu_752_p1,
        dout => mul_ln50_fu_752_p2);

    mul_8ns_10ns_17_1_1_U284 : component srcnn_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln46_fu_775_p0,
        din1 => mul_ln46_fu_775_p1,
        dout => mul_ln46_fu_775_p2);

    mul_8ns_10ns_17_1_1_U285 : component srcnn_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln50_1_fu_810_p0,
        din1 => mul_ln50_1_fu_810_p1,
        dout => mul_ln50_1_fu_810_p2);

    mux_3_2_32_1_1_U286 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_q0,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_q0,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_q0,
        din3 => trunc_ln_reg_1140,
        dout => tmp_s_fu_826_p5);

    mul_9ns_11ns_19_1_1_U287 : component srcnn_mul_9ns_11ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln50_2_fu_856_p0,
        din1 => mul_ln50_2_fu_856_p1,
        dout => mul_ln50_2_fu_856_p2);

    mul_7s_8ns_10_1_1_U288 : component srcnn_mul_7s_8ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln50_1_fu_899_p2,
        din1 => mul_ln45_fu_909_p1,
        dout => mul_ln45_fu_909_p2);

    mux_3_2_32_1_1_U289 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_q0,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_q0,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_q0,
        din3 => trunc_ln1_reg_1166,
        dout => tmp_2_fu_915_p5);

    mux_3_2_32_1_1_U290 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_q0,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_q0,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_i_q0,
        din3 => trunc_ln50_1_reg_1197,
        dout => tmp_3_fu_979_p5);

    mux_3_2_32_1_1_U291 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_18_reg_1288,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_19_reg_1293,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_20_reg_1298,
        din3 => trunc_ln_reg_1140,
        dout => tmp_1_fu_996_p5);

    mux_3_2_32_1_1_U292 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_q1,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_q1,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_q1,
        din3 => trunc_ln50_1_reg_1197,
        dout => tmp_5_fu_1005_p5);

    mux_3_2_32_1_1_U293 : component srcnn_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_27_reg_1326,
        din1 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_28_reg_1331,
        din2 => conv2_float_255_255_float_64_1_1_float_float_255_255_o_29_reg_1336,
        din3 => trunc_ln1_reg_1166,
        dout => tmp_4_fu_1016_p5);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage8,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage6))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    c_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_fu_114 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then 
                c_fu_114 <= add_ln46_2_fu_526_p2;
            end if; 
        end if;
    end process;

    i_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_126 <= ap_const_lv7_0;
            elsif (((icmp_ln40_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_126 <= select_ln41_1_fu_678_p3;
            end if; 
        end if;
    end process;

    indvar_flatten31_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten31_fu_122 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then 
                indvar_flatten31_fu_122 <= select_ln45_2_fu_538_p3;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten45_fu_130 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then 
                indvar_flatten45_fu_130 <= select_ln41_3_fu_552_p3;
            end if; 
        end if;
    end process;

    indvar_flatten86_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten86_fu_138 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then 
                indvar_flatten86_fu_138 <= add_ln40_1_fu_406_p2;
            end if; 
        end if;
    end process;

    o_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                o_fu_134 <= ap_const_lv3_0;
            elsif (((icmp_ln40_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                o_fu_134 <= select_ln40_1_fu_646_p3;
            end if; 
        end if;
    end process;

    r_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_fu_118 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then 
                r_fu_118 <= select_ln45_1_fu_512_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln46_1_reg_1111 <= add_ln46_1_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln46_1_reg_1111_pp0_iter1_reg <= add_ln46_1_reg_1111;
                trunc_ln1_reg_1166_pp0_iter2_reg <= trunc_ln1_reg_1166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln46_reg_1105 <= add_ln46_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln46_reg_1105_pp0_iter1_reg <= add_ln46_reg_1105;
                trunc_ln_reg_1140_pp0_iter2_reg <= trunc_ln_reg_1140;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln50_3_reg_1215 <= add_ln50_3_fu_929_p2;
                add_ln50_5_reg_1220 <= add_ln50_5_fu_937_p2;
                add_ln50_7_reg_1240 <= add_ln50_7_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_fu_400_p2 = ap_const_lv1_0))) then
                and_ln40_1_reg_1085 <= and_ln40_1_fu_442_p2;
                icmp_ln41_reg_1078 <= icmp_ln41_fu_418_p2;
                select_ln45_1_reg_1099 <= select_ln45_1_fu_512_p3;
                select_ln45_reg_1091 <= select_ln45_fu_504_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                bitcast_ln41_reg_1135 <= bitcast_ln41_fu_768_p1;
                trunc_ln_reg_1140 <= mul_ln46_fu_775_p2(16 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_15_reg_1245 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_16_reg_1251 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_17_reg_1257 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_21_reg_1268 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_22_reg_1273 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_23_reg_1278 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
                tmp_3_reg_1283 <= tmp_3_fu_979_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_18_reg_1288 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_q1;
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_19_reg_1293 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_q1;
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_20_reg_1298 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_q1;
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_27_reg_1326 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_q0;
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_28_reg_1331 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_q0;
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_29_reg_1336 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_q0;
                mul_1_reg_1321 <= grp_fu_1015_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_24_reg_1303 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_25_reg_1309 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_26_reg_1315 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln40_reg_1074 <= icmp_ln40_fu_400_p2;
                icmp_ln40_reg_1074_pp0_iter1_reg <= icmp_ln40_reg_1074;
                select_ln45_1_reg_1099_pp0_iter1_reg <= select_ln45_1_reg_1099;
                select_ln45_reg_1091_pp0_iter1_reg <= select_ln45_reg_1091;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_2_reg_1351 <= grp_fu_1015_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                mul_ln45_reg_1203 <= mul_ln45_fu_909_p2;
                tmp_2_reg_1210 <= tmp_2_fu_915_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln50_reg_1128 <= mul_ln50_fu_752_p2;
                select_ln40_1_reg_1117 <= select_ln40_1_fu_646_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                mul_reg_1263 <= grp_fu_1015_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_349 <= grp_fu_1011_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_5_reg_1346 <= tmp_5_fu_1005_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_s_reg_1172 <= tmp_s_fu_826_p5;
                trunc_ln50_1_reg_1197 <= mul_ln50_2_fu_856_p2(17 downto 16);
                urem_ln50_reg_1177 <= grp_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_0))) then
                trunc_ln1_reg_1166 <= mul_ln50_1_fu_810_p2(16 downto 15);
                urem_ln46_reg_1146 <= grp_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                trunc_ln50_1_reg_1197_pp0_iter2_reg <= trunc_ln50_1_reg_1197;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage6_subdone, ap_condition_exit_pp0_iter1_stage6, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln40_1_fu_406_p2 <= std_logic_vector(unsigned(indvar_flatten86_fu_138) + unsigned(ap_const_lv16_1));
    add_ln40_fu_633_p2 <= std_logic_vector(unsigned(o_fu_134) + unsigned(ap_const_lv3_1));
    add_ln41_1_fu_546_p2 <= std_logic_vector(unsigned(indvar_flatten45_fu_130) + unsigned(ap_const_lv15_1));
    add_ln41_fu_672_p2 <= std_logic_vector(unsigned(select_ln40_fu_639_p3) + unsigned(ap_const_lv7_1));
    add_ln45_1_fu_532_p2 <= std_logic_vector(unsigned(indvar_flatten31_fu_122) + unsigned(ap_const_lv9_1));
    add_ln45_fu_486_p2 <= std_logic_vector(unsigned(select_ln41_fu_454_p3) + unsigned(ap_const_lv2_1));
    add_ln46_1_fu_599_p2 <= std_logic_vector(unsigned(zext_ln46_fu_596_p1) + unsigned(ap_const_lv9_2));
    add_ln46_2_fu_526_p2 <= std_logic_vector(unsigned(select_ln45_fu_504_p3) + unsigned(ap_const_lv8_3));
    add_ln46_fu_585_p2 <= std_logic_vector(unsigned(select_ln45_reg_1091) + unsigned(ap_const_lv8_1));
    add_ln50_1_fu_899_p2 <= std_logic_vector(signed(sext_ln40_fu_892_p1) + signed(zext_ln50_4_fu_896_p1));
    add_ln50_2_fu_795_p2 <= std_logic_vector(unsigned(mul_ln50_reg_1128) + unsigned(zext_ln50_7_fu_791_p1));
    add_ln50_3_fu_929_p2 <= std_logic_vector(unsigned(mul_ln45_reg_1203) + unsigned(zext_ln50_6_fu_926_p1));
    add_ln50_4_fu_841_p2 <= std_logic_vector(unsigned(mul_ln50_reg_1128) + unsigned(zext_ln50_11_fu_837_p1));
    add_ln50_5_fu_937_p2 <= std_logic_vector(unsigned(mul_ln45_reg_1203) + unsigned(zext_ln50_10_fu_934_p1));
    add_ln50_6_fu_950_p2 <= std_logic_vector(unsigned(mul_ln50_reg_1128) + unsigned(zext_ln50_16_fu_946_p1));
    add_ln50_7_fu_962_p2 <= std_logic_vector(unsigned(mul_ln45_reg_1203) + unsigned(zext_ln50_15_fu_942_p1));
    add_ln50_fu_742_p2 <= std_logic_vector(signed(sext_ln43_fu_707_p1) + signed(zext_ln50_5_fu_739_p1));
    and_ln40_1_fu_442_p2 <= (xor_ln40_fu_424_p2 and icmp_ln45_fu_436_p2);
    and_ln40_fu_474_p2 <= (xor_ln40_fu_424_p2 and or_ln41_1_fu_468_p2);
    and_ln41_fu_480_p2 <= (icmp_ln46_fu_430_p2 and and_ln40_fu_474_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, icmp_ln40_reg_1074)
    begin
        if (((icmp_ln40_reg_1074 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln40_reg_1074, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln40_reg_1074 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage6_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln40_reg_1074_pp0_iter1_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln40_reg_1074_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage8;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln41_fu_768_p1 <= weight_buffer_q0;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, zext_ln50_8_fu_800_p1, ap_block_pp0_stage3, zext_ln50_12_fu_846_p1, ap_block_pp0_stage4, zext_ln50_17_fu_955_p1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= zext_ln50_17_fu_955_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= zext_ln50_12_fu_846_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= zext_ln50_8_fu_800_p1(14 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, zext_ln50_8_fu_800_p1, ap_block_pp0_stage3, zext_ln50_12_fu_846_p1, ap_block_pp0_stage4, zext_ln50_17_fu_955_p1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= zext_ln50_17_fu_955_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= zext_ln50_12_fu_846_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= zext_ln50_8_fu_800_p1(14 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, zext_ln50_8_fu_800_p1, ap_block_pp0_stage3, zext_ln50_12_fu_846_p1, ap_block_pp0_stage4, zext_ln50_17_fu_955_p1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= zext_ln50_17_fu_955_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= zext_ln50_12_fu_846_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= zext_ln50_8_fu_800_p1(14 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, conv2_float_255_255_float_64_1_1_float_float_255_255_o_16_reg_1251, conv2_float_255_255_float_64_1_1_float_float_255_255_o_22_reg_1273, conv2_float_255_255_float_64_1_1_float_float_255_255_o_25_reg_1309, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage7, zext_ln50_13_fu_973_p1, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_25_reg_1309;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_22_reg_1273;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_16_reg_1251;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, zext_ln50_9_fu_967_p1, ap_block_pp0_stage7, zext_ln50_18_fu_990_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1 <= "XXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce1 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_d0 <= reg_349;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, trunc_ln_reg_1140_pp0_iter2_reg, trunc_ln1_reg_1166_pp0_iter2_reg, trunc_ln50_1_reg_1197_pp0_iter2_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln50_1_reg_1197_pp0_iter2_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln1_reg_1166_pp0_iter2_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln_reg_1140_pp0_iter2_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, conv2_float_255_255_float_64_1_1_float_float_255_255_o_15_reg_1245, ap_CS_fsm_pp0_stage7, conv2_float_255_255_float_64_1_1_float_float_255_255_o_21_reg_1268, conv2_float_255_255_float_64_1_1_float_float_255_255_o_24_reg_1303, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage7, zext_ln50_13_fu_973_p1, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_24_reg_1303;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_21_reg_1268;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_15_reg_1245;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, zext_ln50_9_fu_967_p1, ap_block_pp0_stage7, zext_ln50_18_fu_990_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1 <= "XXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce1 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_d0 <= reg_349;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, trunc_ln_reg_1140_pp0_iter2_reg, trunc_ln1_reg_1166_pp0_iter2_reg, trunc_ln50_1_reg_1197_pp0_iter2_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln50_1_reg_1197_pp0_iter2_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln1_reg_1166_pp0_iter2_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln_reg_1140_pp0_iter2_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, conv2_float_255_255_float_64_1_1_float_float_255_255_o_17_reg_1257, conv2_float_255_255_float_64_1_1_float_float_255_255_o_23_reg_1278, conv2_float_255_255_float_64_1_1_float_float_255_255_o_26_reg_1315, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage7, zext_ln50_13_fu_973_p1, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_26_reg_1315;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_23_reg_1278;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 <= conv2_float_255_255_float_64_1_1_float_float_255_255_o_17_reg_1257;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 <= zext_ln50_13_fu_973_p1(10 - 1 downto 0);
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, zext_ln50_9_fu_967_p1, ap_block_pp0_stage7, zext_ln50_18_fu_990_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1 <= zext_ln50_18_fu_990_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1 <= zext_ln50_9_fu_967_p1(10 - 1 downto 0);
            else 
                conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1 <= "XXXXXXXXXX";
            end if;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce1 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_d0 <= reg_349;

    conv2_float_255_255_float_64_1_1_float_float_255_255_o_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, trunc_ln_reg_1140_pp0_iter2_reg, trunc_ln1_reg_1166_pp0_iter2_reg, trunc_ln50_1_reg_1197_pp0_iter2_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((not((trunc_ln50_1_reg_1197_pp0_iter2_reg = ap_const_lv2_1)) and not((trunc_ln50_1_reg_1197_pp0_iter2_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or (not((trunc_ln1_reg_1166_pp0_iter2_reg = ap_const_lv2_1)) and not((trunc_ln1_reg_1166_pp0_iter2_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or (not((trunc_ln_reg_1140_pp0_iter2_reg = ap_const_lv2_1)) and not((trunc_ln_reg_1140_pp0_iter2_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_o_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1011_p_ce <= ap_const_logic_1;
    grp_fu_1011_p_din0 <= grp_fu_341_p0;
    grp_fu_1011_p_din1 <= grp_fu_341_p1;
    grp_fu_1011_p_opcode <= ap_const_lv2_0;
    grp_fu_1015_p_ce <= ap_const_logic_1;
    grp_fu_1015_p_din0 <= bitcast_ln41_reg_1135;
    grp_fu_1015_p_din1 <= grp_fu_345_p1;

    grp_fu_341_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_1_fu_996_p5, tmp_5_reg_1346, tmp_4_fu_1016_p5, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_341_p0 <= tmp_5_reg_1346;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_341_p0 <= tmp_4_fu_1016_p5;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_341_p0 <= tmp_1_fu_996_p5;
            else 
                grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul_reg_1263, mul_1_reg_1321, mul_2_reg_1351, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_341_p1 <= mul_2_reg_1351;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_341_p1 <= mul_1_reg_1321;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_341_p1 <= mul_reg_1263;
            else 
                grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, tmp_s_reg_1172, tmp_2_reg_1210, ap_CS_fsm_pp0_stage6, tmp_3_reg_1283, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                grp_fu_345_p1 <= tmp_3_reg_1283;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_345_p1 <= tmp_2_reg_1210;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_345_p1 <= tmp_s_reg_1172;
            else 
                grp_fu_345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_590_p0 <= std_logic_vector(unsigned(select_ln45_reg_1091) + unsigned(ap_const_lv8_1));
    grp_fu_605_p0 <= std_logic_vector(unsigned(zext_ln46_fu_596_p1) + unsigned(ap_const_lv9_2));
    grp_fu_605_p1 <= ap_const_lv9_55(8 - 1 downto 0);
    icmp_ln40_fu_400_p2 <= "1" when (indvar_flatten86_fu_138 = ap_const_lv16_FF00) else "0";
    icmp_ln41_fu_418_p2 <= "1" when (indvar_flatten45_fu_130 = ap_const_lv15_3FC0) else "0";
    icmp_ln45_fu_436_p2 <= "1" when (indvar_flatten31_fu_122 = ap_const_lv9_FF) else "0";
    icmp_ln46_fu_430_p2 <= "1" when (c_fu_114 = ap_const_lv8_FF) else "0";
    lshr_ln43_mid1_fu_719_p3 <= (trunc_ln43_4_fu_715_p1 & trunc_ln43_3_fu_711_p1);
    lshr_ln43_mid_fu_657_p3 <= (trunc_ln43_2_fu_653_p1 & ap_const_lv6_0);
    lshr_ln_fu_625_p3 <= (trunc_ln43_1_fu_621_p1 & trunc_ln43_fu_617_p1);
    mul_ln45_fu_909_p1 <= ap_const_lv10_55(8 - 1 downto 0);
    mul_ln46_fu_775_p0 <= mul_ln46_fu_775_p00(8 - 1 downto 0);
    mul_ln46_fu_775_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_1091_pp0_iter1_reg),17));
    mul_ln46_fu_775_p1 <= ap_const_lv17_182(10 - 1 downto 0);
    mul_ln50_1_fu_810_p0 <= mul_ln50_1_fu_810_p00(8 - 1 downto 0);
    mul_ln50_1_fu_810_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_reg_1105_pp0_iter1_reg),17));
    mul_ln50_1_fu_810_p1 <= ap_const_lv17_182(10 - 1 downto 0);
    mul_ln50_2_fu_856_p0 <= mul_ln50_2_fu_856_p00(9 - 1 downto 0);
    mul_ln50_2_fu_856_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_reg_1111_pp0_iter1_reg),19));
    mul_ln50_2_fu_856_p1 <= ap_const_lv19_304(11 - 1 downto 0);
    mul_ln50_fu_752_p1 <= ap_const_lv14_55(8 - 1 downto 0);
    or_ln41_1_fu_468_p2 <= (xor_ln41_fu_462_p2 or icmp_ln41_fu_418_p2);
    or_ln41_fu_448_p2 <= (icmp_ln41_fu_418_p2 or and_ln40_1_fu_442_p2);
    or_ln45_1_fu_498_p2 <= (or_ln45_fu_492_p2 or icmp_ln41_fu_418_p2);
    or_ln45_fu_492_p2 <= (and_ln41_fu_480_p2 or and_ln40_1_fu_442_p2);
    p_shl1_fu_689_p3 <= (select_ln41_1_fu_678_p3 & ap_const_lv2_0);
    select_ln40_1_fu_646_p3 <= 
        add_ln40_fu_633_p2 when (icmp_ln41_reg_1078(0) = '1') else 
        o_fu_134;
    select_ln40_2_fu_665_p3 <= 
        lshr_ln43_mid_fu_657_p3 when (icmp_ln41_reg_1078(0) = '1') else 
        lshr_ln_fu_625_p3;
    select_ln40_fu_639_p3 <= 
        ap_const_lv7_0 when (icmp_ln41_reg_1078(0) = '1') else 
        i_fu_126;
    select_ln41_1_fu_678_p3 <= 
        add_ln41_fu_672_p2 when (and_ln40_1_reg_1085(0) = '1') else 
        select_ln40_fu_639_p3;
    select_ln41_2_fu_727_p3 <= 
        lshr_ln43_mid1_fu_719_p3 when (and_ln40_1_reg_1085(0) = '1') else 
        select_ln40_2_fu_665_p3;
    select_ln41_3_fu_552_p3 <= 
        ap_const_lv15_1 when (icmp_ln41_fu_418_p2(0) = '1') else 
        add_ln41_1_fu_546_p2;
    select_ln41_fu_454_p3 <= 
        ap_const_lv2_0 when (or_ln41_fu_448_p2(0) = '1') else 
        r_fu_118;
    select_ln45_1_fu_512_p3 <= 
        add_ln45_fu_486_p2 when (and_ln41_fu_480_p2(0) = '1') else 
        select_ln41_fu_454_p3;
    select_ln45_2_fu_538_p3 <= 
        ap_const_lv9_1 when (or_ln41_fu_448_p2(0) = '1') else 
        add_ln45_1_fu_532_p2;
    select_ln45_fu_504_p3 <= 
        ap_const_lv8_0 when (or_ln45_1_fu_498_p2(0) = '1') else 
        c_fu_114;
        sext_ln40_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln50_fu_886_p2),7));

        sext_ln43_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln50_1_fu_701_p2),11));

    sub_ln50_1_fu_701_p2 <= std_logic_vector(unsigned(zext_ln50_3_fu_697_p1) - unsigned(zext_ln50_2_fu_685_p1));
    sub_ln50_fu_886_p2 <= std_logic_vector(unsigned(zext_ln50_1_fu_882_p1) - unsigned(zext_ln50_fu_872_p1));
    tmp_29_fu_875_p3 <= (select_ln40_1_reg_1117 & ap_const_lv2_0);
    trunc_ln43_1_fu_621_p1 <= o_fu_134(2 - 1 downto 0);
    trunc_ln43_2_fu_653_p1 <= add_ln40_fu_633_p2(2 - 1 downto 0);
    trunc_ln43_3_fu_711_p1 <= add_ln41_fu_672_p2(6 - 1 downto 0);
    trunc_ln43_4_fu_715_p1 <= select_ln40_1_fu_646_p3(2 - 1 downto 0);
    trunc_ln43_fu_617_p1 <= i_fu_126(6 - 1 downto 0);
    weight_buffer_address0 <= zext_ln41_fu_734_p1(8 - 1 downto 0);

    weight_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weight_buffer_ce0 <= ap_const_logic_1;
        else 
            weight_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln40_fu_424_p2 <= (icmp_ln41_fu_418_p2 xor ap_const_lv1_1);
    xor_ln41_fu_462_p2 <= (icmp_ln45_fu_436_p2 xor ap_const_lv1_1);
    zext_ln41_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_2_fu_727_p3),64));
    zext_ln46_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_1091),9));
    zext_ln50_10_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln50_reg_1177),10));
    zext_ln50_11_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_590_p2),14));
    zext_ln50_12_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_4_fu_841_p2),64));
    zext_ln50_13_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_5_reg_1220),64));
    zext_ln50_15_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_605_p2),10));
    zext_ln50_16_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_605_p2),14));
    zext_ln50_17_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_6_fu_950_p2),64));
    zext_ln50_18_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_7_reg_1240),64));
    zext_ln50_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_875_p3),6));
    zext_ln50_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_1_fu_678_p3),10));
    zext_ln50_3_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_689_p3),10));
    zext_ln50_4_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_reg_1099_pp0_iter1_reg),7));
    zext_ln50_5_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_reg_1099),11));
    zext_ln50_6_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln46_reg_1146),10));
    zext_ln50_7_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_520_p2),14));
    zext_ln50_8_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_2_fu_795_p2),64));
    zext_ln50_9_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_3_reg_1215),64));
    zext_ln50_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_reg_1117),6));
end behav;
