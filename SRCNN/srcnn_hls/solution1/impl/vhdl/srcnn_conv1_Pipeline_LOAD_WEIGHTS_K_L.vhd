-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_Pipeline_LOAD_WEIGHTS_K_L is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_w1_AWVALID : OUT STD_LOGIC;
    m_axi_w1_AWREADY : IN STD_LOGIC;
    m_axi_w1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_WVALID : OUT STD_LOGIC;
    m_axi_w1_WREADY : IN STD_LOGIC;
    m_axi_w1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_WLAST : OUT STD_LOGIC;
    m_axi_w1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_ARVALID : OUT STD_LOGIC;
    m_axi_w1_ARREADY : IN STD_LOGIC;
    m_axi_w1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RVALID : IN STD_LOGIC;
    m_axi_w1_RREADY : OUT STD_LOGIC;
    m_axi_w1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w1_RLAST : IN STD_LOGIC;
    m_axi_w1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_w1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_BVALID : IN STD_LOGIC;
    m_axi_w1_BREADY : OUT STD_LOGIC;
    m_axi_w1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln141 : IN STD_LOGIC_VECTOR (61 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_we0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_we0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv1_Pipeline_LOAD_WEIGHTS_K_L is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_288 : STD_LOGIC_VECTOR (9 downto 0) := "1010001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_51 : STD_LOGIC_VECTOR (7 downto 0) := "01010001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln128_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln128_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln130_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal w1_addr_read_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal p_cast3_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln130_1_fu_315_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln130_2_fu_209_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bout_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln128_1_fu_244_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten13_fu_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln128_1_fu_177_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln128_fu_251_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_96_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_1_fu_203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln128_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln128_mid2_v_fu_255_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_265_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3991_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln128_fu_237_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln128_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln130_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln130_fu_296_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln130_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln130_1_cast_fu_323_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_93_fu_327_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_337_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast1_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln130_fu_307_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_94_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln130_cast_fu_351_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_95_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    bout_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    bout_fu_94 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    bout_fu_94 <= select_ln128_1_fu_244_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln128_fu_171_p2 = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_98 <= add_ln128_1_fu_177_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_98 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_90 <= ap_const_lv8_0;
                elsif (((icmp_ln128_reg_433 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_90 <= select_ln130_2_fu_209_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_86 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_86 <= select_ln130_1_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;

    loop_index_i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    loop_index_i_fu_82 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    loop_index_i_fu_82 <= empty_fu_372_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln128_reg_433 <= icmp_ln128_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_433 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln130_reg_437 <= icmp_ln130_fu_197_p2;
                w1_addr_read_reg_445 <= m_axi_w1_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln128_1_fu_177_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv10_1));
    add_ln128_fu_231_p2 <= std_logic_vector(unsigned(bout_fu_94) + unsigned(ap_const_lv4_1));
    add_ln130_1_fu_203_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_90) + unsigned(ap_const_lv8_1));
    add_ln130_fu_296_p2 <= std_logic_vector(unsigned(select_ln128_fu_237_p3) + unsigned(ap_const_lv4_1));
    and_ln128_fu_290_p2 <= (xor_ln128_fu_279_p2 and exitcond3991_fu_284_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_w1_RVALID, icmp_ln128_reg_433)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln128_reg_433 = ap_const_lv1_0) and (m_axi_w1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_w1_RVALID, icmp_ln128_reg_433)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln128_reg_433 = ap_const_lv1_0) and (m_axi_w1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_w1_RVALID, icmp_ln128_reg_433)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln128_reg_433 = ap_const_lv1_0) and (m_axi_w1_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln128_fu_171_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln128_fu_171_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln128_reg_433, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln128_reg_433 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_98;
        end if; 
    end process;

    empty_93_fu_327_p2 <= std_logic_vector(unsigned(zext_ln130_fu_275_p1) + unsigned(select_ln130_1_cast_fu_323_p1));
    empty_94_fu_345_p2 <= std_logic_vector(unsigned(p_shl2_fu_337_p3) + unsigned(p_cast1_fu_333_p1));
    empty_95_fu_355_p2 <= std_logic_vector(unsigned(empty_94_fu_345_p2) + unsigned(select_ln130_cast_fu_351_p1));
    empty_96_fu_367_p1 <= w1_addr_read_reg_445;
    empty_fu_372_p2 <= std_logic_vector(unsigned(select_ln130_fu_307_p3) + unsigned(ap_const_lv4_1));
    exitcond3991_fu_284_p2 <= "1" when (loop_index_i_fu_82 = ap_const_lv4_9) else "0";
    icmp_ln128_fu_171_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv10_288) else "0";
    icmp_ln130_fu_197_p2 <= "1" when (indvar_flatten_fu_90 = ap_const_lv8_51) else "0";
    m_axi_w1_ARADDR <= ap_const_lv64_0;
    m_axi_w1_ARBURST <= ap_const_lv2_0;
    m_axi_w1_ARCACHE <= ap_const_lv4_0;
    m_axi_w1_ARID <= ap_const_lv1_0;
    m_axi_w1_ARLEN <= ap_const_lv32_0;
    m_axi_w1_ARLOCK <= ap_const_lv2_0;
    m_axi_w1_ARPROT <= ap_const_lv3_0;
    m_axi_w1_ARQOS <= ap_const_lv4_0;
    m_axi_w1_ARREGION <= ap_const_lv4_0;
    m_axi_w1_ARSIZE <= ap_const_lv3_0;
    m_axi_w1_ARUSER <= ap_const_lv1_0;
    m_axi_w1_ARVALID <= ap_const_logic_0;
    m_axi_w1_AWADDR <= ap_const_lv64_0;
    m_axi_w1_AWBURST <= ap_const_lv2_0;
    m_axi_w1_AWCACHE <= ap_const_lv4_0;
    m_axi_w1_AWID <= ap_const_lv1_0;
    m_axi_w1_AWLEN <= ap_const_lv32_0;
    m_axi_w1_AWLOCK <= ap_const_lv2_0;
    m_axi_w1_AWPROT <= ap_const_lv3_0;
    m_axi_w1_AWQOS <= ap_const_lv4_0;
    m_axi_w1_AWREGION <= ap_const_lv4_0;
    m_axi_w1_AWSIZE <= ap_const_lv3_0;
    m_axi_w1_AWUSER <= ap_const_lv1_0;
    m_axi_w1_AWVALID <= ap_const_logic_0;
    m_axi_w1_BREADY <= ap_const_logic_0;

    m_axi_w1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln128_reg_433, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_433 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_w1_RREADY <= ap_const_logic_1;
        else 
            m_axi_w1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w1_WDATA <= ap_const_lv32_0;
    m_axi_w1_WID <= ap_const_lv1_0;
    m_axi_w1_WLAST <= ap_const_logic_0;
    m_axi_w1_WSTRB <= ap_const_lv4_0;
    m_axi_w1_WUSER <= ap_const_lv1_0;
    m_axi_w1_WVALID <= ap_const_logic_0;
    or_ln130_fu_302_p2 <= (icmp_ln130_reg_437 or and_ln128_fu_290_p2);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_address0 <= p_cast3_fu_361_p1(9 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_d0 <= empty_96_fu_367_p1;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln128_fu_251_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln128_fu_251_p1 = ap_const_lv1_0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_we0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_address0 <= p_cast3_fu_361_p1(9 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_d0 <= empty_96_fu_367_p1;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln128_fu_251_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln128_fu_251_p1 = ap_const_lv1_1))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_93_fu_327_p2),9));
    p_cast3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_95_fu_355_p2),64));
    p_shl2_fu_337_p3 <= (empty_93_fu_327_p2 & ap_const_lv3_0);
    select_ln128_1_fu_244_p3 <= 
        add_ln128_fu_231_p2 when (icmp_ln130_reg_437(0) = '1') else 
        bout_fu_94;
    select_ln128_fu_237_p3 <= 
        ap_const_lv4_0 when (icmp_ln130_reg_437(0) = '1') else 
        k_fu_86;
    select_ln130_1_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln130_1_fu_315_p3),6));
    select_ln130_1_fu_315_p3 <= 
        add_ln130_fu_296_p2 when (and_ln128_fu_290_p2(0) = '1') else 
        select_ln128_fu_237_p3;
    select_ln130_2_fu_209_p3 <= 
        ap_const_lv8_1 when (icmp_ln130_fu_197_p2(0) = '1') else 
        add_ln130_1_fu_203_p2;
    select_ln130_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln130_fu_307_p3),9));
    select_ln130_fu_307_p3 <= 
        ap_const_lv4_0 when (or_ln130_fu_302_p2(0) = '1') else 
        loop_index_i_fu_82;
    tmp_fu_265_p4 <= ((zext_ln128_mid2_v_fu_255_p4 & ap_const_lv1_0) & zext_ln128_mid2_v_fu_255_p4);
    trunc_ln128_fu_251_p1 <= select_ln128_1_fu_244_p3(1 - 1 downto 0);

    w1_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_w1_RVALID, icmp_ln128_reg_433, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln128_reg_433 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w1_blk_n_R <= m_axi_w1_RVALID;
        else 
            w1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    xor_ln128_fu_279_p2 <= (icmp_ln130_reg_437 xor ap_const_lv1_1);
    zext_ln128_mid2_v_fu_255_p4 <= select_ln128_1_fu_244_p3(2 downto 1);
    zext_ln130_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_265_p4),6));
end behav;
