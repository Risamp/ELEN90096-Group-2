-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_OUT_BUFFER_TY_OUT_BUFFER_TX is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln30 : IN STD_LOGIC_VECTOR (3 downto 0);
    p_shl_mid2 : IN STD_LOGIC_VECTOR (7 downto 0);
    add_ln118_5 : IN STD_LOGIC_VECTOR (11 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    ti_cast8 : IN STD_LOGIC_VECTOR (3 downto 0);
    tmp_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln115 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv1_output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    output_fm_buffer_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_fm_buffer_1_ce0 : OUT STD_LOGIC;
    output_fm_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_822_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_822_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_822_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_822_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_822_p_ce : OUT STD_LOGIC;
    grp_fu_826_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_826_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_826_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_826_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_826_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_srcnn_Pipeline_OUT_BUFFER_TY_OUT_BUFFER_TX is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_121 : STD_LOGIC_VECTOR (8 downto 0) := "100100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln115_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln115_cast_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_cast_reg_614 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_251_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_619_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln115_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_624_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_624_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_624_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_624_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_624_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_628_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_reg_633_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_reg_643_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_1_load_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i4_i_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i4_i_reg_653_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_659 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln119_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln119_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter6_stage0 : STD_LOGIC;
    signal zext_ln118_9_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln118_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tx_fu_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln116_fu_359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_tx_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ty_fu_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln115_1_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_ty_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_128 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln115_1_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_cast_fu_226_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln115_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln118_2_fu_300_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_6_fu_304_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln118_fu_314_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_318_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_7_fu_310_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln115_fu_284_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_7_fu_326_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_8_fu_338_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_8_fu_342_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ti_cast8_cast_fu_222_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_388_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln118_1_fu_400_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln118_fu_396_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln118_1_fu_408_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_mid1_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln118_mid1_fu_426_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln118_1_mid1_fu_438_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln118_3_fu_434_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln118_5_fu_446_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln118_1_fu_450_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln118_fu_412_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln118_4_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln118_1_fu_466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln118_2_fu_471_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln115_2_fu_456_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln118_6_fu_479_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln118_4_fu_487_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln118_1_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln118_2_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln118_3_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_503_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln118_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln119_fu_536_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln119_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln119_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln119_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_213_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln115_fu_257_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_128 <= add_ln115_1_fu_263_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_128 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    tx_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln115_fu_257_p2 = ap_const_lv1_0))) then 
                    tx_fu_120 <= add_ln116_fu_359_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    tx_fu_120 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ty_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln115_fu_257_p2 = ap_const_lv1_0))) then 
                    ty_fu_124 <= select_ln115_1_fu_292_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ty_fu_124 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_624_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_i4_i_reg_653 <= grp_fu_822_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_i4_i_reg_653_pp0_iter6_reg <= add_i4_i_reg_653;
                add_ln118_reg_643_pp0_iter2_reg <= add_ln118_reg_643_pp0_iter1_reg;
                add_ln118_reg_643_pp0_iter3_reg <= add_ln118_reg_643_pp0_iter2_reg;
                add_ln118_reg_643_pp0_iter4_reg <= add_ln118_reg_643_pp0_iter3_reg;
                add_ln118_reg_643_pp0_iter5_reg <= add_ln118_reg_643_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln115_reg_624_pp0_iter2_reg <= icmp_ln115_reg_624_pp0_iter1_reg;
                icmp_ln115_reg_624_pp0_iter3_reg <= icmp_ln115_reg_624_pp0_iter2_reg;
                icmp_ln115_reg_624_pp0_iter4_reg <= icmp_ln115_reg_624_pp0_iter3_reg;
                icmp_ln115_reg_624_pp0_iter5_reg <= icmp_ln115_reg_624_pp0_iter4_reg;
                icmp_ln116_reg_628_pp0_iter2_reg <= icmp_ln116_reg_628_pp0_iter1_reg;
                icmp_ln116_reg_628_pp0_iter3_reg <= icmp_ln116_reg_628_pp0_iter2_reg;
                icmp_ln116_reg_628_pp0_iter4_reg <= icmp_ln116_reg_628_pp0_iter3_reg;
                icmp_ln116_reg_628_pp0_iter5_reg <= icmp_ln116_reg_628_pp0_iter4_reg;
                select_ln119_reg_665 <= select_ln119_fu_564_p3;
                tmp_mid1_reg_633_pp0_iter2_reg <= tmp_mid1_reg_633_pp0_iter1_reg;
                tmp_mid1_reg_633_pp0_iter3_reg <= tmp_mid1_reg_633_pp0_iter2_reg;
                tmp_mid1_reg_633_pp0_iter4_reg <= tmp_mid1_reg_633_pp0_iter3_reg;
                tmp_mid1_reg_633_pp0_iter5_reg <= tmp_mid1_reg_633_pp0_iter4_reg;
                tmp_reg_619_pp0_iter2_reg <= tmp_reg_619_pp0_iter1_reg;
                tmp_reg_619_pp0_iter3_reg <= tmp_reg_619_pp0_iter2_reg;
                tmp_reg_619_pp0_iter4_reg <= tmp_reg_619_pp0_iter3_reg;
                tmp_reg_619_pp0_iter5_reg <= tmp_reg_619_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln115_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln118_reg_643 <= add_ln118_fu_353_p2;
                icmp_ln116_reg_628 <= icmp_ln116_fu_278_p2;
                tmp_mid1_reg_633 <= tmp_mid1_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln118_reg_643_pp0_iter1_reg <= add_ln118_reg_643;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln115_reg_624 <= icmp_ln115_fu_257_p2;
                icmp_ln115_reg_624_pp0_iter1_reg <= icmp_ln115_reg_624;
                icmp_ln116_reg_628_pp0_iter1_reg <= icmp_ln116_reg_628;
                tmp_mid1_reg_633_pp0_iter1_reg <= tmp_mid1_reg_633;
                tmp_reg_619 <= tmp_fu_251_p2;
                tmp_reg_619_pp0_iter1_reg <= tmp_reg_619;
                    zext_ln115_cast_reg_614(23 downto 0) <= zext_ln115_cast_fu_218_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_624_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_659 <= sext_ln118_fu_513_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_fm_buffer_1_load_reg_648 <= output_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    zext_ln115_cast_reg_614(63 downto 24) <= "0000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln115_1_fu_263_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln115_fu_272_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ty_1) + unsigned(ap_const_lv5_1));
    add_ln116_fu_359_p2 <= std_logic_vector(unsigned(select_ln115_fu_284_p3) + unsigned(ap_const_lv5_1));
    add_ln118_1_fu_466_p2 <= std_logic_vector(unsigned(zext_ln118_4_fu_463_p1) + unsigned(tmp_3));
    add_ln118_2_fu_483_p2 <= std_logic_vector(unsigned(zext_ln115_cast_reg_614) + unsigned(conv1_output_ftmap));
    add_ln118_3_fu_497_p2 <= std_logic_vector(signed(sext_ln118_1_fu_493_p1) + signed(add_ln118_2_fu_483_p2));
    add_ln118_4_fu_487_p2 <= std_logic_vector(unsigned(select_ln115_2_fu_456_p3) + unsigned(zext_ln118_6_fu_479_p1));
    add_ln118_6_fu_304_p2 <= std_logic_vector(unsigned(add_ln118_5) + unsigned(zext_ln118_2_fu_300_p1));
    add_ln118_7_fu_326_p2 <= std_logic_vector(unsigned(p_shl_fu_318_p3) + unsigned(zext_ln118_7_fu_310_p1));
    add_ln118_8_fu_342_p2 <= std_logic_vector(unsigned(add_ln118_7_fu_326_p2) + unsigned(zext_ln118_8_fu_338_p1));
    add_ln118_fu_353_p2 <= std_logic_vector(unsigned(ti_cast8_cast_fu_222_p1) + unsigned(select_ln115_fu_284_p3));
    and_ln119_fu_558_p2 <= (or_ln119_fu_552_p2 and grp_fu_826_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter13, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter13, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter13_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state14_pp0_stage0_iter13 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln115_fu_257_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln115_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter6_stage0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, icmp_ln115_reg_624_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln115_reg_624_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter6_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter6_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_128)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_tx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tx_fu_120, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_tx_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_tx_load <= tx_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_ty_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ty_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_ty_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_ty_1 <= ty_fu_124;
        end if; 
    end process;

    bitcast_ln118_fu_523_p1 <= add_i4_i_reg_653_pp0_iter6_reg;
    empty_38_fu_383_p2 <= std_logic_vector(unsigned(tmp_cast_fu_380_p1) + unsigned(p_shl_mid2));

    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_209_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_209_ce <= ap_const_logic_1;
        else 
            grp_fu_209_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_213_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_213_ce <= ap_const_logic_1;
        else 
            grp_fu_213_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_822_p_ce <= grp_fu_209_ce;
    grp_fu_822_p_din0 <= output_fm_buffer_1_load_reg_648;
    grp_fu_822_p_din1 <= empty;
    grp_fu_822_p_opcode <= ap_const_lv2_0;
    grp_fu_826_p_ce <= grp_fu_213_ce;
    grp_fu_826_p_din0 <= add_i4_i_reg_653;
    grp_fu_826_p_din1 <= ap_const_lv32_0;
    grp_fu_826_p_opcode <= ap_const_lv5_4;
    icmp_ln115_fu_257_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_121) else "0";
    icmp_ln116_fu_278_p2 <= "1" when (ap_sig_allocacmp_tx_load = ap_const_lv5_11) else "0";
    icmp_ln119_1_fu_546_p2 <= "1" when (trunc_ln119_fu_536_p1 = ap_const_lv23_0) else "0";
    icmp_ln119_fu_540_p2 <= "0" when (tmp_1_fu_526_p4 = ap_const_lv8_FF) else "1";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_reg_659;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= select_ln119_reg_665;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln119_fu_552_p2 <= (icmp_ln119_fu_540_p2 or icmp_ln119_1_fu_546_p2);
    output_fm_buffer_1_address0 <= zext_ln118_9_fu_348_p1(15 - 1 downto 0);

    output_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid1_fu_421_p2 <= std_logic_vector(unsigned(tmp_cast_mid1_fu_418_p1) + unsigned(p_shl_mid2));
    p_shl_fu_318_p3 <= (trunc_ln118_fu_314_p1 & ap_const_lv4_0);
    select_ln115_1_fu_292_p3 <= 
        add_ln115_fu_272_p2 when (icmp_ln116_fu_278_p2(0) = '1') else 
        ap_sig_allocacmp_ty_1;
    select_ln115_2_fu_456_p3 <= 
        sub_ln118_1_fu_450_p2 when (icmp_ln116_reg_628_pp0_iter5_reg(0) = '1') else 
        sub_ln118_fu_412_p2;
    select_ln115_fu_284_p3 <= 
        ap_const_lv5_0 when (icmp_ln116_fu_278_p2(0) = '1') else 
        ap_sig_allocacmp_tx_load;
    select_ln119_fu_564_p3 <= 
        ap_const_lv32_0 when (and_ln119_fu_558_p2(0) = '1') else 
        bitcast_ln118_fu_523_p1;
        sext_ln118_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln118_4_fu_487_p2),64));

        sext_ln118_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_503_p4),64));

    shl_ln118_1_fu_400_p3 <= (empty_38_fu_383_p2 & ap_const_lv2_0);
    shl_ln118_1_mid1_fu_438_p3 <= (p_mid1_fu_421_p2 & ap_const_lv2_0);
    shl_ln118_2_fu_471_p3 <= (add_ln118_1_fu_466_p2 & ap_const_lv2_0);
    shl_ln118_mid1_fu_426_p3 <= (p_mid1_fu_421_p2 & ap_const_lv10_0);
    shl_ln_fu_388_p3 <= (empty_38_fu_383_p2 & ap_const_lv10_0);
    sub_ln118_1_fu_450_p2 <= std_logic_vector(unsigned(zext_ln118_3_fu_434_p1) - unsigned(zext_ln118_5_fu_446_p1));
    sub_ln118_fu_412_p2 <= std_logic_vector(unsigned(zext_ln118_fu_396_p1) - unsigned(zext_ln118_1_fu_408_p1));
    ti_cast8_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_cast8),5));
    tmp_1_fu_526_p4 <= bitcast_ln118_fu_523_p1(30 downto 23);
    tmp_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_619_pp0_iter5_reg),8));
    tmp_cast_mid1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_reg_633_pp0_iter5_reg),8));
    tmp_fu_251_p2 <= std_logic_vector(unsigned(zext_ln30_cast_fu_226_p1) + unsigned(ap_sig_allocacmp_ty_1));
    tmp_mid1_fu_332_p2 <= std_logic_vector(unsigned(zext_ln30_cast_fu_226_p1) + unsigned(add_ln115_fu_272_p2));
    trunc_ln118_fu_314_p1 <= add_ln118_6_fu_304_p2(11 - 1 downto 0);
    trunc_ln119_fu_536_p1 <= bitcast_ln118_fu_523_p1(23 - 1 downto 0);
    trunc_ln4_fu_503_p4 <= add_ln118_3_fu_497_p2(63 downto 2);
    zext_ln115_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln115),64));
    zext_ln118_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln118_1_fu_400_p3),19));
    zext_ln118_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln115_1_fu_292_p3),12));
    zext_ln118_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln118_mid1_fu_426_p3),19));
    zext_ln118_4_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_reg_643_pp0_iter5_reg),8));
    zext_ln118_5_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln118_1_mid1_fu_438_p3),19));
    zext_ln118_6_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln118_2_fu_471_p3),19));
    zext_ln118_7_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_6_fu_304_p2),15));
    zext_ln118_8_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln115_fu_284_p3),15));
    zext_ln118_9_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_8_fu_342_p2),64));
    zext_ln118_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_388_p3),19));
    zext_ln30_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30),5));
end behav;
