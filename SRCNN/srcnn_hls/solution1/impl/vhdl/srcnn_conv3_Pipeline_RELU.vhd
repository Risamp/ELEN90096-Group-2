-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3_Pipeline_RELU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bh : IN STD_LOGIC_VECTOR (2 downto 0);
    sext_ln119_1 : IN STD_LOGIC_VECTOR (21 downto 0);
    sext_ln142 : IN STD_LOGIC_VECTOR (21 downto 0);
    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_ce0 : OUT STD_LOGIC;
    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_we0 : OUT STD_LOGIC;
    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_ce0 : OUT STD_LOGIC;
    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_we0 : OUT STD_LOGIC;
    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of srcnn_conv3_Pipeline_RELU is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln139_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal sext_ln142_cast_fu_110_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln142_cast_reg_220 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln119_1_cast_fu_114_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln119_1_cast_reg_225 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln139_fu_132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln139_reg_233 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_267_reg_238 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_268_reg_243 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln142_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bw_fu_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_bw_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln144_cast_fu_203_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln139_fu_138_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_142_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_164_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln142_fu_173_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln142_fu_177_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln144_fu_182_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln144_fu_195_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mux_2_1_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_2_1_24_1_1_U778 : component srcnn_mux_2_1_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 1,
        dout_WIDTH => 24)
    port map (
        din0 => conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_q0,
        din1 => conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_q0,
        din2 => tmp_4_reg_248,
        dout => tmp_fu_164_p4);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bw_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                bw_fu_62 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                bw_fu_62 <= add_ln139_reg_233;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                add_ln139_reg_233 <= add_ln139_fu_132_p2;
                sext_ln119_1_cast_reg_225 <= sext_ln119_1_cast_fu_114_p1;
                sext_ln142_cast_reg_220 <= sext_ln142_cast_fu_110_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_267_reg_238 <= zext_ln142_fu_150_p1(10 - 1 downto 0);
                conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_268_reg_243 <= zext_ln142_fu_150_p1(10 - 1 downto 0);
                tmp_4_reg_248 <= ap_sig_allocacmp_bw_2(7 downto 7);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln139_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln139_fu_132_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bw_2) + unsigned(ap_const_lv8_1));
    add_ln142_fu_177_p2 <= std_logic_vector(unsigned(tmp_fu_164_p4) + unsigned(sext_ln119_1_cast_reg_225));
    add_ln144_fu_182_p2 <= std_logic_vector(unsigned(trunc_ln142_fu_173_p1) + unsigned(sext_ln142_cast_reg_220));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_start_int)
    begin
        if (((icmp_ln139_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bw_2_assign_proc : process(ap_CS_fsm_state1, bw_fu_62, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_bw_2 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_bw_2 <= bw_fu_62;
        end if; 
    end process;


    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_CS_fsm_state2, conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_267_reg_238, tmp_4_reg_248, zext_ln142_fu_150_p1)
    begin
        if (((tmp_4_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_address0 <= conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_267_reg_238;
        elsif (((icmp_ln139_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_address0 <= zext_ln142_fu_150_p1(10 - 1 downto 0);
        else 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_CS_fsm_state2, tmp_4_reg_248, ap_start_int)
    begin
        if ((((tmp_4_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln139_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_ce0 <= ap_const_logic_1;
        else 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_d0 <= select_ln144_cast_fu_203_p1;

    conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_we0_assign_proc : process(ap_CS_fsm_state2, tmp_4_reg_248)
    begin
        if (((tmp_4_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_we0 <= ap_const_logic_1;
        else 
            conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_CS_fsm_state2, conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_268_reg_243, tmp_4_reg_248, zext_ln142_fu_150_p1)
    begin
        if (((tmp_4_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_address0 <= conv3_ap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_268_reg_243;
        elsif (((icmp_ln139_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_address0 <= zext_ln142_fu_150_p1(10 - 1 downto 0);
        else 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln139_fu_126_p2, ap_CS_fsm_state2, tmp_4_reg_248, ap_start_int)
    begin
        if ((((tmp_4_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln139_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_ce0 <= ap_const_logic_1;
        else 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_d0 <= select_ln144_cast_fu_203_p1;

    conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_we0_assign_proc : process(ap_CS_fsm_state2, tmp_4_reg_248)
    begin
        if (((tmp_4_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_we0 <= ap_const_logic_1;
        else 
            conv3_mulmulmulmulap_fixed_255_255_ap_fixed_32_5_5_ap_fixed_ap_fixed_255_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln139_fu_126_p2 <= "1" when (ap_sig_allocacmp_bw_2 = ap_const_lv8_FF) else "0";
    select_ln144_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln144_fu_195_p3),24));
    select_ln144_fu_195_p3 <= 
        ap_const_lv23_0 when (tmp_5_fu_187_p3(0) = '1') else 
        add_ln144_fu_182_p2;
        sext_ln119_1_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln119_1),24));

        sext_ln142_cast_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln142),23));

    tmp_5_fu_187_p3 <= add_ln142_fu_177_p2(23 downto 23);
    tmp_s_fu_142_p3 <= (bh & trunc_ln139_fu_138_p1);
    trunc_ln139_fu_138_p1 <= ap_sig_allocacmp_bw_2(7 - 1 downto 0);
    trunc_ln142_fu_173_p1 <= tmp_fu_164_p4(23 - 1 downto 0);
    zext_ln142_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_142_p3),64));
end behav;
