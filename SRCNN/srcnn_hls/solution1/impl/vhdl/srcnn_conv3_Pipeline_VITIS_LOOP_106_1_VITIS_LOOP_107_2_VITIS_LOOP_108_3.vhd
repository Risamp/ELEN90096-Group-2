-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i3_AWVALID : OUT STD_LOGIC;
    m_axi_i3_AWREADY : IN STD_LOGIC;
    m_axi_i3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WVALID : OUT STD_LOGIC;
    m_axi_i3_WREADY : IN STD_LOGIC;
    m_axi_i3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_WLAST : OUT STD_LOGIC;
    m_axi_i3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARVALID : OUT STD_LOGIC;
    m_axi_i3_ARREADY : IN STD_LOGIC;
    m_axi_i3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RVALID : IN STD_LOGIC;
    m_axi_i3_RREADY : OUT STD_LOGIC;
    m_axi_i3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_RLAST : IN STD_LOGIC;
    m_axi_i3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BVALID : IN STD_LOGIC;
    m_axi_i3_BREADY : OUT STD_LOGIC;
    m_axi_i3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln31 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln55 : IN STD_LOGIC_VECTOR (7 downto 0);
    shl_ln2 : IN STD_LOGIC_VECTOR (4 downto 0);
    select_ln31 : IN STD_LOGIC_VECTOR (3 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    input_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_fm_buffer_ce0 : OUT STD_LOGIC;
    input_fm_buffer_we0 : OUT STD_LOGIC;
    input_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv3_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2_VITIS_LOOP_108_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_DC8 : STD_LOGIC_VECTOR (11 downto 0) := "110111001000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_1B9 : STD_LOGIC_VECTOR (9 downto 0) := "0110111001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_15 : STD_LOGIC_VECTOR (8 downto 0) := "000010101";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_FE : STD_LOGIC_VECTOR (8 downto 0) := "011111110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_15 : STD_LOGIC_VECTOR (11 downto 0) := "000000010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln106_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i3_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i3_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln55_cast2_fu_207_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_cast2_reg_901 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_cast1_fu_211_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_cast1_reg_907 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_cast_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_cast_reg_913 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln31_cast_fu_219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln31_cast_reg_918 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln106_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_fu_559_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_reg_936 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_reg_936_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_addr_reg_941 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_840_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_4_reg_952_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i3_addr_read_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln115_3_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_1_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bx_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln108_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal by_fu_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_1_fu_567_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln107_3_fu_278_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal nin_fu_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln106_1_fu_412_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten62_fu_148 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln106_2_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten62_load : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln107_3_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln107_1_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_309_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_345_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_fu_332_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_359_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_1_fu_375_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln3_fu_367_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_fu_383_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln106_fu_399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln115_fu_423_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln115_fu_423_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln106_fu_429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln106_1_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln106_fu_442_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln106_fu_442_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln106_fu_442_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_mid122_fu_452_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_3_fu_478_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_2_fu_465_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln54_4_fu_486_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln115_mid_fu_494_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln115_1_mid_fu_506_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln115_6_fu_502_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_4_fu_514_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln115_1_fu_518_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln115_fu_387_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln108_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_fu_405_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln106_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln107_fu_548_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln107_3_fu_579_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid1_fu_583_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_mid1_fu_589_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid1_fu_593_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_2_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_2_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_5_fu_625_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_3_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln54_6_fu_639_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_1_mid1_fu_655_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln115_mid1_fu_647_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_5_fu_663_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln115_2_fu_667_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln106_2_fu_524_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp4_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_cast_fu_681_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln111_1_fu_695_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln111_fu_701_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln111_fu_691_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_7_fu_739_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln54_8_fu_747_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln115_2_fu_755_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln106_2_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln107_2_fu_673_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_2_fu_763_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln115_1_fu_772_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln115_3_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_fu_767_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln115_2_fu_782_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_788_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln115_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_840_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_840_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_840_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_840_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_840_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_840_p30 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln106_fu_442_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln115_fu_423_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_4ns_6ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component srcnn_mul_5ns_19ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component srcnn_ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_4ns_6ns_9_1_1_U300 : component srcnn_mul_4ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln115_fu_423_p0,
        din1 => mul_ln115_fu_423_p1,
        dout => mul_ln115_fu_423_p2);

    mul_5ns_19ns_23_1_1_U301 : component srcnn_mul_5ns_19ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 19,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln106_fu_442_p0,
        din1 => mul_ln106_fu_442_p1,
        dout => mul_ln106_fu_442_p2);

    ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1_U302 : component srcnn_ama_addmuladd_9ns_5ns_5ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln115_fu_423_p2,
        din1 => grp_fu_840_p1,
        din2 => grp_fu_840_p2,
        din3 => grp_fu_840_p3,
        ce => grp_fu_840_ce,
        dout => grp_fu_840_p4);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    bx_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bx_fu_132 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln106_reg_923 = ap_const_lv1_0))) then 
                    bx_fu_132 <= add_ln108_fu_808_p2;
                end if;
            end if; 
        end if;
    end process;

    by_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    by_fu_136 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln106_reg_923 = ap_const_lv1_0))) then 
                    by_fu_136 <= select_ln107_1_fu_567_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten62_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln106_fu_251_p2 = ap_const_lv1_0))) then 
                    indvar_flatten62_fu_148 <= add_ln106_2_fu_257_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten62_fu_148 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln106_fu_251_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_140 <= select_ln107_3_fu_278_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_140 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    nin_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    nin_fu_144 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln106_reg_923 = ap_const_lv1_0))) then 
                    nin_fu_144 <= select_ln106_1_fu_412_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln115_4_reg_952 <= grp_fu_840_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln115_4_reg_952_pp0_iter10_reg <= add_ln115_4_reg_952_pp0_iter9_reg;
                add_ln115_4_reg_952_pp0_iter5_reg <= add_ln115_4_reg_952;
                add_ln115_4_reg_952_pp0_iter6_reg <= add_ln115_4_reg_952_pp0_iter5_reg;
                add_ln115_4_reg_952_pp0_iter7_reg <= add_ln115_4_reg_952_pp0_iter6_reg;
                add_ln115_4_reg_952_pp0_iter8_reg <= add_ln115_4_reg_952_pp0_iter7_reg;
                add_ln115_4_reg_952_pp0_iter9_reg <= add_ln115_4_reg_952_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i3_addr_read_reg_957 <= m_axi_i3_RDATA;
                select_ln107_reg_936_pp0_iter2_reg <= select_ln107_reg_936;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln106_reg_923 <= icmp_ln106_fu_251_p2;
                    zext_ln31_cast1_reg_907(7 downto 0) <= zext_ln31_cast1_fu_211_p1(7 downto 0);
                    zext_ln31_cast_reg_918(7 downto 0) <= zext_ln31_cast_fu_219_p1(7 downto 0);
                    zext_ln55_cast2_reg_901(7 downto 0) <= zext_ln55_cast2_fu_207_p1(7 downto 0);
                    zext_ln55_cast_reg_913(7 downto 0) <= zext_ln55_cast_fu_215_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_reg_923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i3_addr_reg_941 <= sext_ln115_1_fu_798_p1;
                select_ln107_reg_936 <= select_ln107_fu_559_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_251_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln107_reg_927 <= icmp_ln107_fu_266_p2;
            end if;
        end if;
    end process;
    zext_ln55_cast2_reg_901(9 downto 8) <= "00";
    zext_ln31_cast1_reg_907(9 downto 8) <= "00";
    zext_ln55_cast_reg_913(8) <= '0';
    zext_ln31_cast_reg_918(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln106_1_fu_433_p2 <= std_logic_vector(unsigned(zext_ln106_fu_429_p1) + unsigned(shl_ln2));
    add_ln106_2_fu_257_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten62_load) + unsigned(ap_const_lv12_1));
    add_ln106_fu_399_p2 <= std_logic_vector(unsigned(nin_fu_144) + unsigned(ap_const_lv4_1));
    add_ln107_3_fu_272_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln107_fu_548_p2 <= std_logic_vector(unsigned(select_ln106_fu_405_p3) + unsigned(ap_const_lv5_1));
    add_ln108_fu_808_p2 <= std_logic_vector(unsigned(select_ln107_fu_559_p3) + unsigned(ap_const_lv5_1));
    add_ln111_1_fu_695_p2 <= std_logic_vector(unsigned(trunc_ln111_cast_fu_681_p1) + unsigned(ap_const_lv6_3E));
    add_ln111_fu_705_p2 <= std_logic_vector(signed(sext_ln111_fu_701_p1) + signed(zext_ln111_fu_691_p1));
    add_ln115_1_fu_772_p2 <= std_logic_vector(unsigned(select_ln107_2_fu_673_p3) + unsigned(sext_ln115_2_fu_763_p1));
    add_ln115_2_fu_782_p2 <= std_logic_vector(signed(sext_ln115_3_fu_778_p1) + signed(add_ln115_fu_767_p2));
    add_ln115_fu_767_p2 <= std_logic_vector(unsigned(zext_ln106_2_fu_448_p1) + unsigned(input_ftmap));
    add_ln55_2_fu_465_p2 <= std_logic_vector(unsigned(zext_ln55_cast_reg_913) + unsigned(ap_const_lv9_1FE));
    add_ln55_3_fu_612_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_589_p1) + signed(zext_ln55_cast2_reg_901));
    add_ln55_fu_332_p2 <= std_logic_vector(signed(tmp_cast_fu_309_p1) + signed(zext_ln55_cast2_reg_901));
    and_ln106_fu_542_p2 <= (xor_ln106_fu_531_p2 and icmp_ln108_fu_536_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_i3_ARREADY, m_axi_i3_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_i3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((m_axi_i3_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_i3_ARREADY, m_axi_i3_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_i3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((m_axi_i3_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_i3_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter10 <= (m_axi_i3_RVALID = ap_const_logic_0);
    end process;

        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln106_fu_251_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln106_reg_923)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_reg_923 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten62_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten62_fu_148)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten62_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten62_load <= indvar_flatten62_fu_148;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_140)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_140;
        end if; 
    end process;

    empty_fu_313_p2 <= std_logic_vector(signed(tmp_cast_fu_309_p1) + signed(zext_ln31_cast1_reg_907));

    grp_fu_840_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_840_ce <= ap_const_logic_1;
        else 
            grp_fu_840_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_840_p1 <= grp_fu_840_p10(5 - 1 downto 0);
    grp_fu_840_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_1_fu_567_p3),9));
    grp_fu_840_p2 <= ap_const_lv12_15(5 - 1 downto 0);
    grp_fu_840_p3 <= grp_fu_840_p30(5 - 1 downto 0);
    grp_fu_840_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_reg_936_pp0_iter2_reg),12));

    i3_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_i3_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            i3_blk_n_AR <= m_axi_i3_ARREADY;
        else 
            i3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_i3_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            i3_blk_n_R <= m_axi_i3_RVALID;
        else 
            i3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln106_fu_251_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten62_load = ap_const_lv12_DC8) else "0";
    icmp_ln107_fu_266_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_1B9) else "0";
    icmp_ln108_fu_536_p2 <= "1" when (bx_fu_132 = ap_const_lv5_15) else "0";
    icmp_ln55_1_fu_719_p2 <= "1" when (signed(add_ln111_fu_705_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln55_2_fu_606_p2 <= "1" when (signed(p_mid1_fu_593_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln55_fu_326_p2 <= "1" when (signed(empty_fu_313_p2) > signed(ap_const_lv10_FE)) else "0";
    input_fm_buffer_address0 <= zext_ln115_3_fu_832_p1(12 - 1 downto 0);

    input_fm_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_fm_buffer_d0 <= i3_addr_read_reg_957;

    input_fm_buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_ARADDR <= i3_addr_reg_941;
    m_axi_i3_ARBURST <= ap_const_lv2_0;
    m_axi_i3_ARCACHE <= ap_const_lv4_0;
    m_axi_i3_ARID <= ap_const_lv1_0;
    m_axi_i3_ARLEN <= ap_const_lv32_1;
    m_axi_i3_ARLOCK <= ap_const_lv2_0;
    m_axi_i3_ARPROT <= ap_const_lv3_0;
    m_axi_i3_ARQOS <= ap_const_lv4_0;
    m_axi_i3_ARREGION <= ap_const_lv4_0;
    m_axi_i3_ARSIZE <= ap_const_lv3_0;
    m_axi_i3_ARUSER <= ap_const_lv1_0;

    m_axi_i3_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_i3_ARVALID <= ap_const_logic_1;
        else 
            m_axi_i3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_AWADDR <= ap_const_lv64_0;
    m_axi_i3_AWBURST <= ap_const_lv2_0;
    m_axi_i3_AWCACHE <= ap_const_lv4_0;
    m_axi_i3_AWID <= ap_const_lv1_0;
    m_axi_i3_AWLEN <= ap_const_lv32_0;
    m_axi_i3_AWLOCK <= ap_const_lv2_0;
    m_axi_i3_AWPROT <= ap_const_lv3_0;
    m_axi_i3_AWQOS <= ap_const_lv4_0;
    m_axi_i3_AWREGION <= ap_const_lv4_0;
    m_axi_i3_AWSIZE <= ap_const_lv3_0;
    m_axi_i3_AWUSER <= ap_const_lv1_0;
    m_axi_i3_AWVALID <= ap_const_logic_0;
    m_axi_i3_BREADY <= ap_const_logic_0;

    m_axi_i3_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_i3_RREADY <= ap_const_logic_1;
        else 
            m_axi_i3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_WDATA <= ap_const_lv32_0;
    m_axi_i3_WID <= ap_const_lv1_0;
    m_axi_i3_WLAST <= ap_const_logic_0;
    m_axi_i3_WSTRB <= ap_const_lv4_0;
    m_axi_i3_WUSER <= ap_const_lv1_0;
    m_axi_i3_WVALID <= ap_const_logic_0;
    mul_ln106_fu_442_p0 <= mul_ln106_fu_442_p00(5 - 1 downto 0);
    mul_ln106_fu_442_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_1_fu_433_p2),23));
    mul_ln106_fu_442_p1 <= ap_const_lv23_3F804(19 - 1 downto 0);
    mul_ln115_fu_423_p0 <= mul_ln115_fu_423_p00(4 - 1 downto 0);
    mul_ln115_fu_423_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln106_1_fu_412_p3),9));
    mul_ln115_fu_423_p1 <= ap_const_lv9_15(6 - 1 downto 0);
    or_ln107_fu_554_p2 <= (icmp_ln107_reg_927 or and_ln106_fu_542_p2);
    or_ln54_1_fu_733_p2 <= (tmp_15_fu_711_p3 or icmp_ln55_1_fu_719_p2);
    or_ln54_2_fu_633_p2 <= (tmp_13_fu_598_p3 or icmp_ln55_2_fu_606_p2);
    or_ln54_fu_353_p2 <= (tmp_9_fu_318_p3 or icmp_ln55_fu_326_p2);
    p_mid122_fu_452_p2 <= std_logic_vector(unsigned(zext_ln31_cast_reg_918) + unsigned(ap_const_lv9_1FE));
    p_mid1_fu_593_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_589_p1) + signed(zext_ln31_cast1_reg_907));
    select_ln106_1_fu_412_p3 <= 
        add_ln106_fu_399_p2 when (icmp_ln107_reg_927(0) = '1') else 
        nin_fu_144;
    select_ln106_2_fu_524_p3 <= 
        sub_ln115_1_fu_518_p2 when (icmp_ln107_reg_927(0) = '1') else 
        sub_ln115_fu_387_p2;
    select_ln106_fu_405_p3 <= 
        ap_const_lv5_0 when (icmp_ln107_reg_927(0) = '1') else 
        by_fu_136;
    select_ln107_1_fu_567_p3 <= 
        add_ln107_fu_548_p2 when (and_ln106_fu_542_p2(0) = '1') else 
        select_ln106_fu_405_p3;
    select_ln107_2_fu_673_p3 <= 
        sub_ln115_2_fu_667_p2 when (and_ln106_fu_542_p2(0) = '1') else 
        select_ln106_2_fu_524_p3;
    select_ln107_3_fu_278_p3 <= 
        ap_const_lv10_1 when (icmp_ln107_fu_266_p2(0) = '1') else 
        add_ln107_3_fu_272_p2;
    select_ln107_fu_559_p3 <= 
        ap_const_lv5_0 when (or_ln107_fu_554_p2(0) = '1') else 
        bx_fu_132;
    select_ln54_3_fu_478_p3 <= 
        ap_const_lv9_0 when (tmp_12_fu_470_p3(0) = '1') else 
        ap_const_lv9_FE;
    select_ln54_4_fu_486_p3 <= 
        select_ln54_3_fu_478_p3 when (tmp_11_fu_457_p3(0) = '1') else 
        add_ln55_2_fu_465_p2;
    select_ln54_5_fu_625_p3 <= 
        ap_const_lv10_0 when (tmp_14_fu_617_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln54_6_fu_639_p3 <= 
        select_ln54_5_fu_625_p3 when (or_ln54_2_fu_633_p2(0) = '1') else 
        add_ln55_3_fu_612_p2;
    select_ln54_7_fu_739_p3 <= 
        ap_const_lv10_0 when (tmp_16_fu_725_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln54_8_fu_747_p3 <= 
        select_ln54_7_fu_739_p3 when (or_ln54_1_fu_733_p2(0) = '1') else 
        add_ln111_fu_705_p2;
    select_ln54_fu_345_p3 <= 
        ap_const_lv10_0 when (tmp_10_fu_337_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln111_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_1_fu_695_p2),10));

        sext_ln115_1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_788_p4),64));

        sext_ln115_2_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_2_fu_755_p3),20));

        sext_ln115_3_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln115_1_fu_772_p2),64));

        sext_ln115_4_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_1_mid_fu_506_p3),20));

        sext_ln115_5_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_1_mid1_fu_655_p3),20));

        sext_ln115_6_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_mid_fu_494_p3),20));

        sext_ln115_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln115_1_fu_375_p3),20));

    shl_ln115_1_fu_375_p3 <= (yClamped_fu_359_p3 & ap_const_lv2_0);
    shl_ln115_1_mid1_fu_655_p3 <= (select_ln54_6_fu_639_p3 & ap_const_lv2_0);
    shl_ln115_1_mid_fu_506_p3 <= (select_ln54_4_fu_486_p3 & ap_const_lv2_0);
    shl_ln115_2_fu_755_p3 <= (select_ln54_8_fu_747_p3 & ap_const_lv2_0);
    shl_ln115_mid1_fu_647_p3 <= (select_ln54_6_fu_639_p3 & ap_const_lv10_0);
    shl_ln115_mid_fu_494_p3 <= (select_ln54_4_fu_486_p3 & ap_const_lv10_0);
    shl_ln3_fu_367_p3 <= (yClamped_fu_359_p3 & ap_const_lv10_0);
    sub_ln115_1_fu_518_p2 <= std_logic_vector(signed(sext_ln115_6_fu_502_p1) - signed(sext_ln115_4_fu_514_p1));
    sub_ln115_2_fu_667_p2 <= std_logic_vector(unsigned(shl_ln115_mid1_fu_647_p3) - unsigned(sext_ln115_5_fu_663_p1));
    sub_ln115_fu_387_p2 <= std_logic_vector(unsigned(shl_ln3_fu_367_p3) - unsigned(sext_ln115_fu_383_p1));
    tmp4_fu_685_p3 <= (select_ln31 & select_ln31);
    tmp_10_fu_337_p3 <= empty_fu_313_p2(9 downto 9);
    tmp_11_fu_457_p3 <= p_mid122_fu_452_p2(8 downto 8);
    tmp_12_fu_470_p3 <= p_mid122_fu_452_p2(8 downto 8);
    tmp_13_fu_598_p3 <= p_mid1_fu_593_p2(9 downto 9);
    tmp_14_fu_617_p3 <= p_mid1_fu_593_p2(9 downto 9);
    tmp_15_fu_711_p3 <= add_ln111_fu_705_p2(9 downto 9);
    tmp_16_fu_725_p3 <= add_ln111_fu_705_p2(9 downto 9);
    tmp_9_fu_318_p3 <= empty_fu_313_p2(9 downto 9);
        tmp_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_303_p2),10));

        tmp_cast_mid1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid1_fu_583_p2),10));

    tmp_fu_303_p2 <= std_logic_vector(unsigned(zext_ln107_1_fu_299_p1) + unsigned(ap_const_lv6_3E));
    tmp_mid1_fu_583_p2 <= std_logic_vector(unsigned(zext_ln107_3_fu_579_p1) + unsigned(ap_const_lv6_3E));
    trunc_ln111_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_fu_559_p3),6));
    trunc_ln7_fu_788_p4 <= add_ln115_2_fu_782_p2(63 downto 2);
    xor_ln106_fu_531_p2 <= (icmp_ln107_reg_927 xor ap_const_lv1_1);
    yClamped_fu_359_p3 <= 
        select_ln54_fu_345_p3 when (or_ln54_fu_353_p2(0) = '1') else 
        add_ln55_fu_332_p2;
    zext_ln106_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln106_fu_442_p2),64));
    zext_ln106_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln106_1_fu_412_p3),5));
    zext_ln107_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_fu_136),6));
    zext_ln107_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_fu_548_p2),6));
    zext_ln111_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_685_p3),10));
    zext_ln115_3_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_4_reg_952_pp0_iter10_reg),64));
    zext_ln31_cast1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31),10));
    zext_ln31_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31),9));
    zext_ln55_cast2_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55),10));
    zext_ln55_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55),9));
end behav;
