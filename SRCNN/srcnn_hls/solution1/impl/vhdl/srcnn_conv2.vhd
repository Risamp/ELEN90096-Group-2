-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_biases : IN STD_LOGIC_VECTOR (63 downto 0);
    conv1_output_ftmap_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    conv1_output_ftmap_ce0 : OUT STD_LOGIC;
    conv1_output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_169_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_169_p_ce : OUT STD_LOGIC;
    grp_fu_173_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_173_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln50_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal gmem_addr_reg_954 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_963 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tj_cast2_fu_427_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tj_cast2_reg_968 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_fu_445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_reg_981 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_42_fu_461_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ti_cast4_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast4_reg_994 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln118_fu_510_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln118_reg_1004 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln118_fu_526_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_reg_1009 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_538_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln109_reg_1017 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln118_2_fu_569_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_2_reg_1022 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln110_fu_581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln110_reg_1030 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln118_1_fu_626_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln118_1_reg_1035 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln110_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_1_reg_1040 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln111_fu_652_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln111_reg_1048 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln111_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_43_fu_702_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_43_reg_1058 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln47_fu_714_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln47_reg_1066 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_1_reg_1071 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_cast47_fu_761_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ty_cast47_reg_1077 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal empty_46_fu_790_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_46_reg_1082 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_1_fu_802_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_1_reg_1090 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_addr_1_reg_1095 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln50_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_828_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln50_reg_1104 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_cast48_fu_834_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_cast48_reg_1109 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln62_fu_903_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_reg_1127 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_1_read_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_load_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln131_fu_919_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln131_reg_1160 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal empty_53_fu_931_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ti_reg_244 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6015_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_256 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln33_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_267 : STD_LOGIC_VECTOR (6 downto 0);
    signal by_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln109_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bx_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal nout_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln49_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_reg_311 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal tx_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln62_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_1_reg_334 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_49_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal nout_1_reg_356 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal empty_52_reg_367 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln131_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast49_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_8_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_10_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast53_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_3_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast54_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln131_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln_fu_387_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_2_fu_492_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_2_fu_500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln118_1_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln118_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_514_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln118_3_fu_522_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_fu_484_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln118_4_fu_544_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln118_1_fu_548_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln118_fu_557_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_561_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln118_5_fu_553_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln54_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln54_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal yClamped_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln118_6_fu_601_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln118_3_fu_605_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln118_1_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_fu_618_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln118_1_fu_610_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln118_7_fu_632_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln118_4_fu_636_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln54_2_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln54_1_fu_663_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xClamped_fu_667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln118_9_fu_672_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln118_5_fu_676_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_fu_690_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_cast_fu_698_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal nout_cast_fu_686_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln49_fu_720_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_724_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln49_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln49_fu_736_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_741_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ty_cast_fu_765_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_44_fu_769_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_45_fu_778_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_fu_782_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_fu_774_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tx_cast_fu_808_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_47_fu_812_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_842_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln65_1_fu_850_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln65_fu_838_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_fu_854_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_1_fu_860_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln65_fu_869_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_fu_873_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln65_2_fu_865_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_2_fu_881_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln65_3_fu_887_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv1_output_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 18496,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_U : component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 9248,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bx_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_575_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                bx_reg_289 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                bx_reg_289 <= add_ln111_reg_1048;
            end if; 
        end if;
    end process;

    by_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_532_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_278 <= ap_const_lv5_0;
            elsif (((icmp_ln111_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                by_reg_278 <= add_ln110_reg_1030;
            end if; 
        end if;
    end process;

    empty_49_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                empty_49_reg_345 <= output_fm_buffer_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                empty_49_reg_345 <= grp_fu_169_p_dout0;
            end if; 
        end if;
    end process;

    empty_52_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_913_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                empty_52_reg_367 <= ap_const_lv14_0;
            elsif (((exitcond6015_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                empty_52_reg_367 <= empty_53_fu_931_p2;
            end if; 
        end if;
    end process;

    empty_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_256 <= empty_42_fu_461_p2;
            elsif (((icmp_ln33_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_256 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    nin_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                nin_1_reg_334 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                nin_1_reg_334 <= add_ln62_reg_1127;
            end if; 
        end if;
    end process;

    nin_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_267 <= ap_const_lv7_0;
            elsif (((icmp_ln110_fu_575_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_267 <= add_ln109_reg_1017;
            end if; 
        end if;
    end process;

    nout_1_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                nout_1_reg_356 <= ap_const_lv6_0;
            elsif (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                nout_1_reg_356 <= add_ln131_reg_1160;
            end if; 
        end if;
    end process;

    nout_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_532_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nout_reg_300 <= ap_const_lv6_0;
            elsif (((icmp_ln49_fu_796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                nout_reg_300 <= add_ln47_reg_1066;
            end if; 
        end if;
    end process;

    ti_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln32_fu_415_p2 = ap_const_lv1_0))) then 
                ti_reg_244 <= ap_const_lv4_0;
            elsif (((exitcond6015_fu_925_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                ti_reg_244 <= add_ln33_reg_981;
            end if; 
        end if;
    end process;

    tj_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_140 <= ap_const_lv4_0;
            elsif (((icmp_ln33_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_140 <= add_ln32_reg_963;
            end if; 
        end if;
    end process;

    tx_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                tx_reg_322 <= ap_const_lv5_0;
            elsif (((icmp_ln62_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                tx_reg_322 <= add_ln50_reg_1104;
            end if; 
        end if;
    end process;

    ty_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ty_reg_311 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_1))) then 
                ty_reg_311 <= add_ln49_1_reg_1090;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln109_reg_1017 <= add_ln109_fu_538_p2;
                add_ln118_reg_1009 <= add_ln118_fu_526_p2;
                sext_ln118_reg_1004 <= sext_ln118_fu_510_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln110_reg_1030 <= add_ln110_fu_581_p2;
                add_ln118_2_reg_1022 <= add_ln118_2_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln111_reg_1048 <= add_ln111_fu_652_p2;
                input_fm_buffer_addr_1_reg_1040 <= zext_ln118_8_fu_641_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln131_reg_1160 <= add_ln131_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln32_reg_963 <= add_ln32_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln33_reg_981 <= add_ln33_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln47_reg_1066 <= add_ln47_fu_714_p2;
                empty_43_reg_1058 <= empty_43_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln49_1_reg_1090 <= add_ln49_1_fu_802_p2;
                empty_46_reg_1082 <= empty_46_fu_790_p2;
                    ty_cast47_reg_1077(4 downto 0) <= ty_cast47_fu_761_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln50_reg_1104 <= add_ln50_fu_828_p2;
                icmp_ln50_reg_1100 <= icmp_ln50_fu_822_p2;
                output_fm_buffer_addr_1_reg_1095 <= p_cast53_fu_817_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln62_reg_1127 <= add_ln62_fu_903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                gmem_addr_1_read_reg_1132 <= m_axi_gmem_RDATA;
                input_fm_buffer_load_reg_1137 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                gmem_addr_1_reg_1071 <= sext_ln62_fu_751_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_954 <= sext_ln131_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_reg_1147 <= grp_fu_173_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_575_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sub_ln118_1_reg_1035 <= sub_ln118_1_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ti_cast4_reg_994(3 downto 0) <= ti_cast4_fu_472_p1(3 downto 0);
                    tmp_1_reg_999(7 downto 4) <= tmp_1_fu_476_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln32_fu_415_p2 = ap_const_lv1_0))) then
                    tj_cast2_reg_968(3 downto 0) <= tj_cast2_fu_427_p1(3 downto 0);
                    tmp_reg_973(7 downto 4) <= tmp_fu_431_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tx_cast48_reg_1109(4 downto 0) <= tx_cast48_fu_834_p1(4 downto 0);
            end if;
        end if;
    end process;
    tj_cast2_reg_968(4) <= '0';
    tmp_reg_973(3 downto 0) <= "0000";
    ti_cast4_reg_994(4) <= '0';
    tmp_1_reg_999(3 downto 0) <= "0000";
    ty_cast47_reg_1077(11 downto 5) <= "0000000";
    tx_cast48_reg_1109(14 downto 5) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state29, ap_CS_fsm_state38, ap_CS_fsm_state12, icmp_ln50_reg_1100, ap_CS_fsm_state21, ap_CS_fsm_state2, icmp_ln32_fu_415_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond4_fu_455_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln110_fu_575_p2, ap_CS_fsm_state7, icmp_ln111_fu_646_p2, ap_CS_fsm_state9, icmp_ln47_fu_708_p2, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state39, exitcond6015_fu_925_p2, icmp_ln33_fu_439_p2, icmp_ln109_fu_532_p2, icmp_ln49_fu_796_p2, ap_block_state12_io, icmp_ln62_fu_897_p2, icmp_ln131_fu_913_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln32_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln33_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln109_fu_532_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln110_fu_575_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln111_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln47_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln49_fu_796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln62_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state29 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln131_fu_913_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((exitcond6015_fu_925_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln109_fu_538_p2 <= std_logic_vector(unsigned(nin_reg_267) + unsigned(ap_const_lv7_1));
    add_ln110_fu_581_p2 <= std_logic_vector(unsigned(by_reg_278) + unsigned(ap_const_lv5_1));
    add_ln111_fu_652_p2 <= std_logic_vector(unsigned(bx_reg_289) + unsigned(ap_const_lv5_1));
    add_ln118_1_fu_548_p2 <= std_logic_vector(unsigned(add_ln118_reg_1009) + unsigned(zext_ln118_4_fu_544_p1));
    add_ln118_2_fu_569_p2 <= std_logic_vector(unsigned(p_shl2_fu_561_p3) + unsigned(zext_ln118_5_fu_553_p1));
    add_ln118_3_fu_605_p2 <= std_logic_vector(signed(sext_ln118_reg_1004) + signed(zext_ln118_6_fu_601_p1));
    add_ln118_4_fu_636_p2 <= std_logic_vector(unsigned(add_ln118_2_reg_1022) + unsigned(zext_ln118_7_fu_632_p1));
    add_ln118_5_fu_676_p2 <= std_logic_vector(unsigned(sub_ln118_1_reg_1035) + unsigned(zext_ln118_9_fu_672_p1));
    add_ln118_fu_526_p2 <= std_logic_vector(unsigned(zext_ln118_3_fu_522_p1) + unsigned(zext_ln118_fu_484_p1));
    add_ln131_fu_919_p2 <= std_logic_vector(unsigned(nout_1_reg_356) + unsigned(ap_const_lv6_1));
    add_ln32_fu_421_p2 <= std_logic_vector(unsigned(tj_fu_140) + unsigned(ap_const_lv4_1));
    add_ln33_fu_445_p2 <= std_logic_vector(unsigned(ti_reg_244) + unsigned(ap_const_lv4_1));
    add_ln47_fu_714_p2 <= std_logic_vector(unsigned(nout_reg_300) + unsigned(ap_const_lv6_1));
    add_ln49_1_fu_802_p2 <= std_logic_vector(unsigned(ty_reg_311) + unsigned(ap_const_lv5_1));
    add_ln49_fu_736_p2 <= std_logic_vector(unsigned(zext_ln49_fu_732_p1) + unsigned(conv2_weights));
    add_ln50_fu_828_p2 <= std_logic_vector(unsigned(tx_reg_322) + unsigned(ap_const_lv5_1));
    add_ln54_2_fu_658_p2 <= std_logic_vector(unsigned(ti_cast4_reg_994) + unsigned(bx_reg_289));
    add_ln54_fu_587_p2 <= std_logic_vector(unsigned(tj_cast2_reg_968) + unsigned(by_reg_278));
    add_ln62_fu_903_p2 <= std_logic_vector(unsigned(nin_1_reg_334) + unsigned(ap_const_lv7_1));
    add_ln65_1_fu_860_p2 <= std_logic_vector(unsigned(add_ln65_fu_854_p2) + unsigned(ty_cast47_reg_1077));
    add_ln65_2_fu_881_p2 <= std_logic_vector(unsigned(p_shl6_fu_873_p3) + unsigned(zext_ln65_2_fu_865_p1));
    add_ln65_3_fu_887_p2 <= std_logic_vector(unsigned(add_ln65_2_fu_881_p2) + unsigned(tx_cast48_reg_1109));
    add_ln65_fu_854_p2 <= std_logic_vector(unsigned(zext_ln65_1_fu_850_p1) + unsigned(zext_ln65_fu_838_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state12_io)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state12_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln50_reg_1100)
    begin
                ap_block_state12_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln50_reg_1100 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_415_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln32_fu_415_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_415_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln32_fu_415_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln65_fu_909_p1 <= gmem_addr_1_read_reg_1132;
    conv1_output_ftmap_address0 <= zext_ln118_10_fu_681_p1(22 - 1 downto 0);

    conv1_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv1_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_42_fu_461_p2 <= std_logic_vector(unsigned(empty_reg_256) + unsigned(ap_const_lv15_1));
    empty_43_fu_702_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_698_p1) + unsigned(nout_cast_fu_686_p1));
    empty_44_fu_769_p2 <= std_logic_vector(unsigned(empty_43_reg_1058) + unsigned(ty_cast_fu_765_p1));
    empty_45_fu_778_p1 <= empty_44_fu_769_p2(10 - 1 downto 0);
    empty_46_fu_790_p2 <= std_logic_vector(unsigned(p_shl5_fu_782_p3) + unsigned(p_cast_fu_774_p1));
    empty_47_fu_812_p2 <= std_logic_vector(unsigned(empty_46_reg_1082) + unsigned(tx_cast_fu_808_p1));
    empty_53_fu_931_p2 <= std_logic_vector(unsigned(empty_52_reg_367) + unsigned(ap_const_lv14_1));
    exitcond4_fu_455_p2 <= "1" when (empty_reg_256 = ap_const_lv15_4840) else "0";
    exitcond6015_fu_925_p2 <= "1" when (empty_52_reg_367 = ap_const_lv14_2420) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, ap_CS_fsm_state12, icmp_ln50_reg_1100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state38, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_169_p_ce <= ap_const_logic_1;
    grp_fu_169_p_din0 <= empty_49_reg_345;
    grp_fu_169_p_din1 <= mul_reg_1147;
    grp_fu_169_p_opcode <= ap_const_lv2_0;
    grp_fu_173_p_ce <= ap_const_logic_1;
    grp_fu_173_p_din0 <= bitcast_ln65_fu_909_p1;
    grp_fu_173_p_din1 <= input_fm_buffer_load_reg_1137;
    icmp_ln109_fu_532_p2 <= "1" when (nin_reg_267 = ap_const_lv7_40) else "0";
    icmp_ln110_fu_575_p2 <= "1" when (by_reg_278 = ap_const_lv5_11) else "0";
    icmp_ln111_fu_646_p2 <= "1" when (bx_reg_289 = ap_const_lv5_11) else "0";
    icmp_ln131_fu_913_p2 <= "1" when (nout_1_reg_356 = ap_const_lv6_20) else "0";
    icmp_ln32_fu_415_p2 <= "1" when (tj_fu_140 = ap_const_lv4_F) else "0";
    icmp_ln33_fu_439_p2 <= "1" when (ti_reg_244 = ap_const_lv4_F) else "0";
    icmp_ln47_fu_708_p2 <= "1" when (nout_reg_300 = ap_const_lv6_20) else "0";
    icmp_ln49_fu_796_p2 <= "1" when (ty_reg_311 = ap_const_lv5_11) else "0";
    icmp_ln50_fu_822_p2 <= "1" when (tx_reg_322 = ap_const_lv5_11) else "0";
    icmp_ln62_fu_897_p2 <= "1" when (nin_1_reg_334 = ap_const_lv7_40) else "0";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state4, input_fm_buffer_addr_1_reg_1040, ap_CS_fsm_state20, ap_CS_fsm_state8, p_cast49_fu_467_p1, zext_ln65_3_fu_892_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_fm_buffer_address0 <= zext_ln65_3_fu_892_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_1_reg_1040;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_address0 <= p_cast49_fu_467_p1(15 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(conv1_output_ftmap_q0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_d0 <= conv1_output_ftmap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond4_fu_455_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond4_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, ap_CS_fsm_state12, icmp_ln50_reg_1100, gmem_addr_reg_954, gmem_addr_1_reg_1071, ap_block_state12_io)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_954;
        elsif (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_1071;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;

    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, ap_CS_fsm_state12, icmp_ln50_reg_1100, ap_block_state12_io)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_20;
        elsif (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_0))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_40;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, ap_CS_fsm_state12, icmp_ln50_reg_1100, ap_block_state12_io)
    begin
        if ((((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln50_reg_1100 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state38, ap_CS_fsm_state21)
    begin
        if ((((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    nout_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nout_reg_300),11));

    output_fm_buffer_address0_assign_proc : process(output_fm_buffer_addr_1_reg_1095, ap_CS_fsm_state20, ap_CS_fsm_state39, p_cast54_fu_937_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_fm_buffer_address0 <= p_cast54_fu_937_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_1_reg_1095;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state39, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state39, empty_49_reg_345)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_fm_buffer_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_fm_buffer_d0 <= empty_49_reg_345;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state39, exitcond6015_fu_925_p2, icmp_ln62_fu_897_p2)
    begin
        if ((((exitcond6015_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((icmp_ln62_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast49_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_256),64));
    p_cast53_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_47_fu_812_p2),64));
    p_cast54_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_52_reg_367),64));
    p_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_44_fu_769_p2),14));
    p_shl2_fu_561_p3 <= (trunc_ln118_fu_557_p1 & ap_const_lv4_0);
    p_shl3_fu_618_p3 <= (trunc_ln118_1_fu_614_p1 & ap_const_lv8_0);
    p_shl5_fu_782_p3 <= (empty_45_fu_778_p1 & ap_const_lv4_0);
    p_shl6_fu_873_p3 <= (trunc_ln65_fu_869_p1 & ap_const_lv4_0);
        sext_ln118_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln118_3_fu_605_p2),22));

        sext_ln118_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln118_fu_504_p2),17));

        sext_ln131_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_387_p4),64));

        sext_ln62_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_741_p4),64));

    shl_ln_fu_724_p3 <= (trunc_ln49_fu_720_p1 & ap_const_lv8_0);
    sub_ln118_1_fu_626_p2 <= std_logic_vector(unsigned(p_shl3_fu_618_p3) - unsigned(sext_ln118_1_fu_610_p1));
    sub_ln118_fu_504_p2 <= std_logic_vector(unsigned(zext_ln118_2_fu_500_p1) - unsigned(zext_ln118_1_fu_488_p1));
    ti_cast4_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_reg_244),5));
    tj_cast2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tj_fu_140),5));
    tmp_1_fu_476_p3 <= (ti_reg_244 & ap_const_lv4_0);
    tmp_2_fu_492_p3 <= (nin_reg_267 & ap_const_lv8_0);
    tmp_3_fu_514_p3 <= (nin_reg_267 & ap_const_lv4_0);
    tmp_4_cast_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_690_p3),11));
    tmp_4_fu_690_p3 <= (nout_reg_300 & ap_const_lv4_0);
    tmp_9_fu_842_p3 <= (nin_1_reg_334 & ap_const_lv4_0);
    tmp_fu_431_p3 <= (tj_fu_140 & ap_const_lv4_0);
    trunc_ln118_1_fu_614_p1 <= add_ln118_3_fu_605_p2(14 - 1 downto 0);
    trunc_ln118_fu_557_p1 <= add_ln118_1_fu_548_p2(11 - 1 downto 0);
    trunc_ln1_fu_741_p4 <= add_ln49_fu_736_p2(63 downto 2);
    trunc_ln49_fu_720_p1 <= nout_reg_300(5 - 1 downto 0);
    trunc_ln65_fu_869_p1 <= add_ln65_1_fu_860_p2(11 - 1 downto 0);
    trunc_ln_fu_387_p4 <= conv2_biases(63 downto 2);
    tx_cast48_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_322),15));
    tx_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_322),14));
    ty_cast47_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_311),12));
    ty_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_311),11));
    xClamped_fu_667_p2 <= std_logic_vector(unsigned(zext_ln54_1_fu_663_p1) + unsigned(tmp_1_reg_999));
    yClamped_fu_596_p2 <= std_logic_vector(unsigned(zext_ln54_fu_592_p1) + unsigned(tmp_reg_973));
    zext_ln118_10_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_5_fu_676_p2),64));
    zext_ln118_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_reg_267),16));
    zext_ln118_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_492_p3),16));
    zext_ln118_3_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_514_p3),12));
    zext_ln118_4_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_278),12));
    zext_ln118_5_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_1_fu_548_p2),15));
    zext_ln118_6_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yClamped_fu_596_p2),17));
    zext_ln118_7_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_289),15));
    zext_ln118_8_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_4_fu_636_p2),64));
    zext_ln118_9_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xClamped_fu_667_p2),22));
    zext_ln118_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_reg_267),12));
    zext_ln49_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_724_p3),64));
    zext_ln54_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_2_fu_658_p2),8));
    zext_ln54_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_587_p2),8));
    zext_ln65_1_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_842_p3),12));
    zext_ln65_2_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_1_fu_860_p2),15));
    zext_ln65_3_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_3_fu_887_p2),64));
    zext_ln65_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_1_reg_334),12));
end behav;
