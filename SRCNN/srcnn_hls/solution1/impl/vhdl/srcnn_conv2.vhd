-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i2_AWVALID : OUT STD_LOGIC;
    m_axi_i2_AWREADY : IN STD_LOGIC;
    m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WVALID : OUT STD_LOGIC;
    m_axi_i2_WREADY : IN STD_LOGIC;
    m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_WLAST : OUT STD_LOGIC;
    m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARVALID : OUT STD_LOGIC;
    m_axi_i2_ARREADY : IN STD_LOGIC;
    m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RVALID : IN STD_LOGIC;
    m_axi_i2_RREADY : OUT STD_LOGIC;
    m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_RLAST : IN STD_LOGIC;
    m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BVALID : IN STD_LOGIC;
    m_axi_i2_BREADY : OUT STD_LOGIC;
    m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_AWVALID : OUT STD_LOGIC;
    m_axi_w2_AWREADY : IN STD_LOGIC;
    m_axi_w2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_WVALID : OUT STD_LOGIC;
    m_axi_w2_WREADY : IN STD_LOGIC;
    m_axi_w2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_WLAST : OUT STD_LOGIC;
    m_axi_w2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_ARVALID : OUT STD_LOGIC;
    m_axi_w2_ARREADY : IN STD_LOGIC;
    m_axi_w2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_w2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_w2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_w2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RVALID : IN STD_LOGIC;
    m_axi_w2_RREADY : OUT STD_LOGIC;
    m_axi_w2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_w2_RLAST : IN STD_LOGIC;
    m_axi_w2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_w2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_BVALID : IN STD_LOGIC;
    m_axi_w2_BREADY : OUT STD_LOGIC;
    m_axi_w2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_w2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_w2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWVALID : OUT STD_LOGIC;
    m_axi_i3_AWREADY : IN STD_LOGIC;
    m_axi_i3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WVALID : OUT STD_LOGIC;
    m_axi_i3_WREADY : IN STD_LOGIC;
    m_axi_i3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_WLAST : OUT STD_LOGIC;
    m_axi_i3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARVALID : OUT STD_LOGIC;
    m_axi_i3_ARREADY : IN STD_LOGIC;
    m_axi_i3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RVALID : IN STD_LOGIC;
    m_axi_i3_RREADY : OUT STD_LOGIC;
    m_axi_i3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i3_RLAST : IN STD_LOGIC;
    m_axi_i3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BVALID : IN STD_LOGIC;
    m_axi_i3_BREADY : OUT STD_LOGIC;
    m_axi_i3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_292_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_292_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_292_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_292_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_292_p_ce : OUT STD_LOGIC;
    grp_fu_284_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_284_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_284_p_ce : OUT STD_LOGIC;
    grp_fu_288_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_288_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_2FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111101";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv8_AA : STD_LOGIC_VECTOR (7 downto 0) := "10101010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv24_3F804 : STD_LOGIC_VECTOR (23 downto 0) := "000000111111100000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv13_2FD : STD_LOGIC_VECTOR (12 downto 0) := "0001011111101";
    constant ap_const_lv13_FF : STD_LOGIC_VECTOR (12 downto 0) := "0000011111111";
    constant ap_const_lv13_1FE : STD_LOGIC_VECTOR (12 downto 0) := "0000111111110";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal input_fm_buffer_1_ce0 : STD_LOGIC;
    signal input_fm_buffer_1_we0 : STD_LOGIC;
    signal input_fm_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buffer_3_0_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_buffer_3_0_0_ce0 : STD_LOGIC;
    signal weight_buffer_3_0_0_we0 : STD_LOGIC;
    signal weight_buffer_3_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buffer_3_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_fm_buffer_ce0 : STD_LOGIC;
    signal output_fm_buffer_we0 : STD_LOGIC;
    signal output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal w2_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal w2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i3_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal icmp_ln105_reg_2047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal add_ln30_1_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_1_reg_1793 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln30_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln30_reg_1798 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln30_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_702_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln30_1_reg_1803 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln30_fu_710_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln30_reg_1808 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_1813 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_726_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln101_reg_1818 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln74_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_reg_1824 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_1_fu_786_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln74_1_reg_1829 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln74_fu_796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln74_reg_1837 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_addr_reg_1842 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln74_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_89_fu_876_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_89_reg_1848 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln75_fu_888_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln75_reg_1856 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_fm_buffer_1_addr_reg_1861 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal empty_91_fu_914_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_91_reg_1869 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_addr_read_reg_1874 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln100_fu_932_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln100_reg_1882 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_fu_924_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_958_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1887 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln88_fu_972_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_reg_1895 : STD_LOGIC_VECTOR (3 downto 0);
    signal w2_addr_reg_1900 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln88_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_buffer_3_0_0_addr_reg_1906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln89_fu_1052_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln89_reg_1914 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_addr_read_reg_1919 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln45_cast_fu_1088_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln45_cast_reg_1924 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_13_fu_1092_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1929 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_fu_1106_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln39_reg_1937 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln45_1_cast_fu_1138_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln45_1_cast_reg_1942 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln40_fu_1158_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_reg_1955 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_buffer_3_0_0_load_reg_1960 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sub_ln45_2_fu_1193_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln45_2_reg_1965 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sub_ln45_3_fu_1220_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln45_3_reg_1970 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln42_fu_1232_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1978 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal output_fm_buffer_addr_4_reg_1988 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln43_fu_1272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_reg_1996 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_fm_buffer_1_load_reg_2001 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal mul_reg_2006 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_2011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal add_ln104_fu_1284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln104_reg_2019 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln104_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_fu_1318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln108_reg_2029 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln104_fu_1345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln104_reg_2035 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal empty_98_fu_1349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_98_reg_2041 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln105_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal sub_ln111_1_fu_1384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln111_1_reg_2051 : STD_LOGIC_VECTOR (12 downto 0);
    signal i3_addr_reg_2057 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln105_fu_1459_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln105_reg_2063 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal empty_101_fu_1483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_101_reg_2076 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln108_fu_1489_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln108_reg_2081 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond5516_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_4_fu_1537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln108_4_reg_2087 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln111_2_fu_1571_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln111_2_reg_2092 : STD_LOGIC_VECTOR (12 downto 0);
    signal i3_addr_2_reg_2101 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln105_1_fu_1578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal empty_106_fu_1622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_106_reg_2115 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_fu_1628_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln105_reg_2120 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond5918_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_1_fu_1639_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln57_1_reg_2125 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal add_ln62_fu_1645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_reg_2130 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_1_fu_1651_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_1_reg_2135 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln57_fu_1663_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_reg_2143 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_1669_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln57_fu_1657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_1696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal add_ln60_1_fu_1722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal add_ln60_2_fu_1748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_conv2_Pipeline_RELU_fu_617_ap_start : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_ap_done : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_ap_idle : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_ap_ready : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_ce0 : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_we0 : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_ce : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_ce : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_ap_start : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_ap_done : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_ap_idle : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_ap_ready : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_ce0 : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_we0 : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_ce : STD_LOGIC;
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_ce : STD_LOGIC;
    signal bin_reg_404 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln75_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bh_reg_415 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond6_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal loop_index_i_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal out_reg_437 : STD_LOGIC_VECTOR (5 downto 0);
    signal bout_reg_449 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bin_2_reg_460 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal o_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln40_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_482 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln42_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_493 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln43_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_504 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal bout_1_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state54 : BOOLEAN;
    signal bh_2_reg_527 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_index_0_i_reg_539 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_index_1_i_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_1_reg_561 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln60_2_fu_1742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_572 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln60_fu_1690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_reg_595 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln60_1_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_6_reg_606 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_Pipeline_RELU_fu_617_ap_start_reg : STD_LOGIC := '0';
    signal grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state54_ignore_call0 : BOOLEAN;
    signal p_cast115_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_1_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast116_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_9_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_10_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast20_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast124_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast127_fu_1611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_fu_1685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_3_fu_1711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_5_fu_1737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln89_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln118_fu_1449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln118_1_fu_1592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_102_fu_1542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_107_fu_1634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_936_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_fu_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_633_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln31_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_682_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_mid2_v_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_730_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_fu_742_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_738_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl1_cast_fu_750_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_109_fu_754_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_fu_768_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_fu_776_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal bin_cast_fu_764_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_780_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_83_fu_802_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_84_fu_811_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_84_fu_811_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_84_fu_811_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_cast16_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_821_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_85_fu_826_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_831_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bh_cast_fu_851_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_87_fu_855_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_88_fu_864_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_fu_868_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast100_fu_860_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal loop_index_i_cast102_fu_894_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_90_fu_898_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln91_fu_954_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_978_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_988_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast18_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_1002_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_93_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_1012_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln91_fu_1032_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln91_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1070_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln45_1_fu_1078_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln45_fu_1066_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln45_fu_1082_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln39_fu_1062_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_1120_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_4_fu_1128_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_3_fu_1116_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln45_1_fu_1132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_2_fu_1112_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_96_fu_1142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_6_fu_1168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln45_fu_1172_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln45_fu_1181_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_fu_1185_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln45_fu_1177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln45_5_fu_1164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln45_3_fu_1199_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_1_fu_1208_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_fu_1212_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln45_1_fu_1204_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln45_8_fu_1242_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln45_4_fu_1246_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln45_7_fu_1238_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln45_5_fu_1256_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln104_fu_1290_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_97_fu_1294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln108_fu_1308_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln108_fu_1308_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln108_fu_1308_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln108_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1327_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln111_3_fu_1335_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln111_fu_1323_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln111_fu_1339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln111_4_fu_1359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln111_fu_1363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_fu_1372_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl9_fu_1376_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln111_fu_1368_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln105_fu_1391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln108_1_fu_1395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_1400_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln108_1_fu_1412_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln108_1_fu_1408_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln108_2_fu_1420_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln108_fu_1424_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln108_fu_1430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln108_2_fu_1434_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_1439_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index_0_i_cast107_fu_1463_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_100_fu_1467_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln108_3_fu_1494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln108_3_fu_1498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln108_2_fu_1503_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln108_3_fu_1515_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln108_4_fu_1511_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln108_5_fu_1523_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln108_1_fu_1527_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln108_1_fu_1533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_5_fu_1547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln111_1_fu_1550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_1_fu_1559_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_1563_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln111_1_fu_1555_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln118_1_fu_1583_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index_1_i_cast108_fu_1602_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_105_fu_1606_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln62_fu_1675_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_2_fu_1679_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln62_2_fu_1702_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_3_fu_1706_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln62_4_fu_1728_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_4_fu_1732_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_633_ce : STD_LOGIC;
    signal grp_fu_2177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2177_ce : STD_LOGIC;
    signal grp_fu_2177_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal empty_84_fu_811_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln108_fu_1308_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv2_Pipeline_RELU IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_ln111_1 : IN STD_LOGIC_VECTOR (12 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_fm_buffer_ce0 : OUT STD_LOGIC;
        output_fm_buffer_we0 : OUT STD_LOGIC;
        output_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_fm_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_633_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_ce : OUT STD_LOGIC;
        grp_fu_2177_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_2177_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_2177_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_2177_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_2177_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv2_Pipeline_RELU3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_ln111_2 : IN STD_LOGIC_VECTOR (12 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        output_fm_buffer_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_fm_buffer_ce0 : OUT STD_LOGIC;
        output_fm_buffer_we0 : OUT STD_LOGIC;
        output_fm_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_fm_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_633_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_ce : OUT STD_LOGIC;
        grp_fu_2177_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_2177_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_2177_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_2177_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_2177_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_6ns_19ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component srcnn_mul_5ns_19ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv2_input_fm_buffer_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_weight_buffer_3_0_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_1_U : component srcnn_conv2_input_fm_buffer_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 24480,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_1_address0,
        ce0 => input_fm_buffer_1_ce0,
        we0 => input_fm_buffer_1_we0,
        d0 => input_fm_buffer_1_d0,
        q0 => input_fm_buffer_1_q0);

    weight_buffer_3_0_0_U : component srcnn_conv2_weight_buffer_3_0_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_buffer_3_0_0_address0,
        ce0 => weight_buffer_3_0_0_ce0,
        we0 => weight_buffer_3_0_0_we0,
        d0 => weight_buffer_3_0_0_d0,
        q0 => weight_buffer_3_0_0_q0);

    output_fm_buffer_U : component srcnn_conv2_output_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_address0,
        ce0 => output_fm_buffer_ce0,
        we0 => output_fm_buffer_we0,
        d0 => output_fm_buffer_d0,
        q0 => output_fm_buffer_q0);

    grp_conv2_Pipeline_RELU_fu_617 : component srcnn_conv2_Pipeline_RELU
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2_Pipeline_RELU_fu_617_ap_start,
        ap_done => grp_conv2_Pipeline_RELU_fu_617_ap_done,
        ap_idle => grp_conv2_Pipeline_RELU_fu_617_ap_idle,
        ap_ready => grp_conv2_Pipeline_RELU_fu_617_ap_ready,
        sub_ln111_1 => sub_ln111_1_reg_2051,
        empty => empty_98_reg_2041,
        output_fm_buffer_address0 => grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_address0,
        output_fm_buffer_ce0 => grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_ce0,
        output_fm_buffer_we0 => grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_we0,
        output_fm_buffer_d0 => grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_d0,
        output_fm_buffer_q0 => output_fm_buffer_q0,
        grp_fu_633_p_din0 => grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din0,
        grp_fu_633_p_din1 => grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din1,
        grp_fu_633_p_opcode => grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_opcode,
        grp_fu_633_p_dout0 => grp_fu_284_p_dout0,
        grp_fu_633_p_ce => grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_ce,
        grp_fu_2177_p_din0 => grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din0,
        grp_fu_2177_p_din1 => grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din1,
        grp_fu_2177_p_opcode => grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_opcode,
        grp_fu_2177_p_dout0 => grp_fu_292_p_dout0,
        grp_fu_2177_p_ce => grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_ce);

    grp_conv2_Pipeline_RELU3_fu_625 : component srcnn_conv2_Pipeline_RELU3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2_Pipeline_RELU3_fu_625_ap_start,
        ap_done => grp_conv2_Pipeline_RELU3_fu_625_ap_done,
        ap_idle => grp_conv2_Pipeline_RELU3_fu_625_ap_idle,
        ap_ready => grp_conv2_Pipeline_RELU3_fu_625_ap_ready,
        sub_ln111_2 => sub_ln111_2_reg_2092,
        empty => empty_98_reg_2041,
        output_fm_buffer_address0 => grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_address0,
        output_fm_buffer_ce0 => grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_ce0,
        output_fm_buffer_we0 => grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_we0,
        output_fm_buffer_d0 => grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_d0,
        output_fm_buffer_q0 => output_fm_buffer_q0,
        grp_fu_633_p_din0 => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din0,
        grp_fu_633_p_din1 => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din1,
        grp_fu_633_p_opcode => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_opcode,
        grp_fu_633_p_dout0 => grp_fu_284_p_dout0,
        grp_fu_633_p_ce => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_ce,
        grp_fu_2177_p_din0 => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din0,
        grp_fu_2177_p_din1 => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din1,
        grp_fu_2177_p_opcode => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_opcode,
        grp_fu_2177_p_dout0 => grp_fu_292_p_dout0,
        grp_fu_2177_p_ce => grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_ce);

    mul_6ns_19ns_24_1_1_U59 : component srcnn_mul_6ns_19ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 24)
    port map (
        din0 => empty_84_fu_811_p0,
        din1 => empty_84_fu_811_p1,
        dout => empty_84_fu_811_p2);

    mul_5ns_19ns_23_1_1_U60 : component srcnn_mul_5ns_19ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 19,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln108_fu_1308_p0,
        din1 => mul_ln108_fu_1308_p1,
        dout => mul_ln108_fu_1308_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) and (icmp_ln105_1_fu_1578_p2 = ap_const_lv1_0) and (icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_Pipeline_RELU3_fu_625_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_Pipeline_RELU_fu_617_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2_Pipeline_RELU_fu_617_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln105_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    grp_conv2_Pipeline_RELU_fu_617_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_Pipeline_RELU_fu_617_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_Pipeline_RELU_fu_617_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bh_2_reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                bh_2_reg_527 <= ap_const_lv3_0;
            elsif (((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                bh_2_reg_527 <= add_ln105_reg_2120;
            end if; 
        end if;
    end process;

    bh_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                bh_reg_415 <= ap_const_lv2_0;
            elsif (((exitcond6_fu_908_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                bh_reg_415 <= add_ln75_reg_1856;
            end if; 
        end if;
    end process;

    bin_2_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                bin_2_reg_460 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                bin_2_reg_460 <= add_ln89_reg_1914;
            end if; 
        end if;
    end process;

    bin_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_664_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bin_reg_404 <= ap_const_lv6_0;
            elsif (((icmp_ln75_fu_882_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                bin_reg_404 <= add_ln74_reg_1837;
            end if; 
        end if;
    end process;

    bout_1_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_1100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                bout_1_reg_515 <= ap_const_lv4_0;
            elsif ((not(((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state54) and ((icmp_ln105_1_fu_1578_p2 = ap_const_lv1_1) or (icmp_ln105_reg_2047 = ap_const_lv1_0)))) then 
                bout_1_reg_515 <= add_ln104_reg_2019;
            end if; 
        end if;
    end process;

    bout_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_924_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                bout_reg_449 <= ap_const_lv4_0;
            elsif (((icmp_ln89_fu_1046_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                bout_reg_449 <= add_ln88_reg_1895;
            end if; 
        end if;
    end process;

    c_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_1226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                c_reg_504 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                c_reg_504 <= add_ln43_reg_1996;
            end if; 
        end if;
    end process;

    h_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_212 <= ap_const_lv8_0;
            elsif (((tmp_4_fu_924_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                h_fu_212 <= add_ln31_fu_936_p2;
            end if; 
        end if;
    end process;

    i_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_reg_482 <= ap_const_lv6_0;
            elsif (((icmp_ln42_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_reg_482 <= add_ln40_reg_1955;
            end if; 
        end if;
    end process;

    in_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                in_fu_216 <= ap_const_lv7_0;
            elsif (((tmp_4_fu_924_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                in_fu_216 <= select_ln30_1_reg_1803;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_220 <= ap_const_lv8_0;
            elsif (((tmp_4_fu_924_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                indvar_flatten_fu_220 <= add_ln30_1_reg_1793;
            end if; 
        end if;
    end process;

    loop_index_0_i_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                loop_index_0_i_reg_539 <= empty_101_reg_2076;
            elsif ((not(((grp_conv2_Pipeline_RELU_fu_617_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                loop_index_0_i_reg_539 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    loop_index_1_i_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                loop_index_1_i_reg_550 <= empty_106_reg_2115;
            elsif ((not(((grp_conv2_Pipeline_RELU3_fu_625_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                loop_index_1_i_reg_550 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    loop_index_i_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                loop_index_i_reg_426 <= empty_91_reg_1869;
            elsif (((icmp_ln75_fu_882_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                loop_index_i_reg_426 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    o_1_reg_561_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_1278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                o_1_reg_561 <= ap_const_lv4_0;
            elsif (((icmp_ln60_2_fu_1742_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                o_1_reg_561 <= add_ln57_reg_2143;
            end if; 
        end if;
    end process;

    o_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                o_reg_471 <= ap_const_lv4_0;
            elsif (((icmp_ln40_fu_1152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                o_reg_471 <= add_ln39_reg_1937;
            end if; 
        end if;
    end process;

    out_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_reg_437 <= ap_const_lv6_0;
            elsif (((icmp_ln57_fu_1657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                out_reg_437 <= add_ln35_fu_1669_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_572_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_1278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_mul_reg_572 <= ap_const_lv13_0;
            elsif (((icmp_ln60_2_fu_1742_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                phi_mul_reg_572 <= add_ln57_1_reg_2125;
            end if; 
        end if;
    end process;

    r_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                r_reg_493 <= ap_const_lv2_0;
            elsif (((icmp_ln43_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                r_reg_493 <= add_ln42_reg_1978;
            end if; 
        end if;
    end process;

    w_5_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_1690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                w_5_reg_595 <= ap_const_lv8_0;
            elsif (((icmp_ln60_1_fu_1716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                w_5_reg_595 <= add_ln60_1_fu_1722_p2;
            end if; 
        end if;
    end process;

    w_6_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_1_fu_1716_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                w_6_reg_606 <= ap_const_lv8_0;
            elsif (((icmp_ln60_2_fu_1742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                w_6_reg_606 <= add_ln60_2_fu_1748_p2;
            end if; 
        end if;
    end process;

    w_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_1657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                w_reg_584 <= ap_const_lv8_0;
            elsif (((icmp_ln60_fu_1690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                w_reg_584 <= add_ln60_fu_1696_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln104_reg_2019 <= add_ln104_fu_1284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5918_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                add_ln105_reg_2120 <= add_ln105_fu_1628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5516_fu_1477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                add_ln108_4_reg_2087 <= add_ln108_4_fu_1537_p2;
                    or_ln108_reg_2081(1) <= or_ln108_fu_1489_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_1278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                add_ln108_reg_2029 <= add_ln108_fu_1318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln30_1_reg_1793 <= add_ln30_1_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln39_reg_1937 <= add_ln39_fu_1106_p2;
                sub_ln45_cast_reg_1924 <= sub_ln45_cast_fu_1088_p1;
                    tmp_13_reg_1929(7 downto 5) <= tmp_13_fu_1092_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln40_reg_1955 <= add_ln40_fu_1158_p2;
                sub_ln45_1_cast_reg_1942 <= sub_ln45_1_cast_fu_1138_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln42_reg_1978 <= add_ln42_fu_1232_p2;
                sub_ln45_2_reg_1965 <= sub_ln45_2_fu_1193_p2;
                sub_ln45_3_reg_1970 <= sub_ln45_3_fu_1220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln43_reg_1996 <= add_ln43_fu_1272_p2;
                output_fm_buffer_addr_4_reg_1988 <= zext_ln45_10_fu_1261_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                add_ln57_1_reg_2125 <= add_ln57_1_fu_1639_p2;
                add_ln57_reg_2143 <= add_ln57_fu_1663_p2;
                add_ln62_1_reg_2135 <= add_ln62_1_fu_1651_p2;
                add_ln62_reg_2130 <= add_ln62_fu_1645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln74_reg_1837 <= add_ln74_fu_796_p2;
                sext_ln74_1_reg_1829 <= sext_ln74_1_fu_786_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln75_reg_1856 <= add_ln75_fu_888_p2;
                empty_89_reg_1848 <= empty_89_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln88_reg_1895 <= add_ln88_fu_972_p2;
                    tmp_10_reg_1887(7 downto 5) <= tmp_10_fu_958_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln89_reg_1914 <= add_ln89_fu_1052_p2;
                weight_buffer_3_0_0_addr_reg_1906 <= zext_ln91_1_fu_1041_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_reg_2011 <= grp_fu_284_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                empty_101_reg_2076 <= empty_101_fu_1483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                empty_106_reg_2115 <= empty_106_fu_1622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                empty_91_reg_1869 <= empty_91_fu_914_p2;
                input_fm_buffer_1_addr_reg_1861 <= p_cast115_fu_903_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                empty_98_reg_2041 <= empty_98_fu_1349_p1;
                sext_ln104_reg_2035 <= sext_ln104_fu_1345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i2_addr_read_reg_1874 <= m_axi_i2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i2_addr_reg_1842 <= sext_ln75_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_1_fu_1578_p2 = ap_const_lv1_0) and (icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                i3_addr_2_reg_2101 <= sext_ln118_1_fu_1592_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                i3_addr_reg_2057 <= sext_ln118_fu_1449_p1;
                sub_ln111_1_reg_2051 <= sub_ln111_1_fu_1384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                icmp_ln105_reg_2047 <= icmp_ln105_fu_1353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                input_fm_buffer_1_load_reg_2001 <= input_fm_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                mul_reg_2006 <= grp_fu_288_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_641 <= output_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_664_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln30_1_reg_1803 <= select_ln30_1_fu_702_p3;
                select_ln30_reg_1798 <= select_ln30_fu_694_p3;
                    sext_ln74_reg_1824(63 downto 2) <= sext_ln74_fu_760_p1(63 downto 2);
                trunc_ln30_reg_1808 <= trunc_ln30_fu_710_p1;
                    zext_ln101_reg_1818(7 downto 0) <= zext_ln101_fu_726_p1(7 downto 0);
                    zext_ln30_reg_1813(7 downto 2) <= zext_ln30_fu_722_p1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                sub_ln111_2_reg_2092 <= sub_ln111_2_fu_1571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_924_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                trunc_ln100_reg_1882 <= trunc_ln100_fu_932_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                trunc_ln105_reg_2063 <= trunc_ln105_fu_1459_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                w2_addr_read_reg_1919 <= m_axi_w2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_966_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                w2_addr_reg_1900 <= sext_ln89_fu_1022_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                weight_buffer_3_0_0_load_reg_1960 <= weight_buffer_3_0_0_q0;
            end if;
        end if;
    end process;
    zext_ln30_reg_1813(1 downto 0) <= "00";
    zext_ln30_reg_1813(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln101_reg_1818(8) <= '0';
    sext_ln74_reg_1824(1 downto 0) <= "00";
    tmp_10_reg_1887(4 downto 0) <= "00000";
    tmp_13_reg_1929(4 downto 0) <= "00000";
    or_ln108_reg_2081(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_i2_ARREADY, m_axi_i2_RVALID, m_axi_w2_ARREADY, m_axi_w2_RVALID, m_axi_i3_AWREADY, m_axi_i3_WREADY, m_axi_i3_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state46, ap_CS_fsm_state49, ap_CS_fsm_state54, icmp_ln105_reg_2047, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state2, icmp_ln30_fu_664_p2, ap_CS_fsm_state3, icmp_ln74_fu_790_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, tmp_4_fu_924_p3, ap_CS_fsm_state17, icmp_ln88_fu_966_p2, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state43, icmp_ln104_fu_1278_p2, icmp_ln105_fu_1353_p2, ap_CS_fsm_state45, ap_CS_fsm_state47, exitcond5516_fu_1477_p2, icmp_ln105_1_fu_1578_p2, ap_CS_fsm_state56, exitcond5918_fu_1616_p2, ap_CS_fsm_state64, icmp_ln57_fu_1657_p2, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, grp_conv2_Pipeline_RELU_fu_617_ap_done, grp_conv2_Pipeline_RELU3_fu_625_ap_done, icmp_ln75_fu_882_p2, exitcond6_fu_908_p2, icmp_ln89_fu_1046_p2, icmp_ln40_fu_1152_p2, icmp_ln42_fu_1226_p2, icmp_ln39_fu_1100_p2, icmp_ln43_fu_1266_p2, icmp_ln60_2_fu_1742_p2, icmp_ln60_fu_1690_p2, icmp_ln60_1_fu_1716_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln30_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln74_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_i2_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln75_fu_882_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((exitcond6_fu_908_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_i2_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((tmp_4_fu_924_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln88_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_w2_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln89_fu_1046_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w2_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln39_fu_1100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln40_fu_1152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln42_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln43_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln104_fu_1278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln105_fu_1353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if ((not(((grp_conv2_Pipeline_RELU_fu_617_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((exitcond5516_fu_1477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if ((not(((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state54) and ((icmp_ln105_1_fu_1578_p2 = ap_const_lv1_1) or (icmp_ln105_reg_2047 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                elsif ((not(((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) and (icmp_ln105_1_fu_1578_p2 = ap_const_lv1_0) and (icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if ((not(((grp_conv2_Pipeline_RELU3_fu_625_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((exitcond5918_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((icmp_ln57_fu_1657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                if (((icmp_ln60_fu_1690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln60_1_fu_1716_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((icmp_ln60_2_fu_1742_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_fu_1284_p2 <= std_logic_vector(unsigned(bout_1_reg_515) + unsigned(ap_const_lv4_1));
    add_ln105_fu_1628_p2 <= std_logic_vector(unsigned(bh_2_reg_527) + unsigned(ap_const_lv3_2));
    add_ln108_1_fu_1395_p2 <= std_logic_vector(unsigned(zext_ln105_fu_1391_p1) + unsigned(zext_ln101_reg_1818));
    add_ln108_2_fu_1434_p2 <= std_logic_vector(signed(sext_ln108_fu_1430_p1) + signed(add_ln108_reg_2029));
    add_ln108_3_fu_1498_p2 <= std_logic_vector(unsigned(zext_ln108_3_fu_1494_p1) + unsigned(zext_ln101_reg_1818));
    add_ln108_4_fu_1537_p2 <= std_logic_vector(signed(sext_ln108_1_fu_1533_p1) + signed(add_ln108_reg_2029));
    add_ln108_fu_1318_p2 <= std_logic_vector(unsigned(zext_ln108_fu_1314_p1) + unsigned(output_ftmap));
    add_ln111_1_fu_1550_p2 <= std_logic_vector(signed(sext_ln104_reg_2035) + signed(zext_ln111_5_fu_1547_p1));
    add_ln111_fu_1363_p2 <= std_logic_vector(signed(sext_ln104_reg_2035) + signed(zext_ln111_4_fu_1359_p1));
    add_ln30_1_fu_670_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_220) + unsigned(ap_const_lv8_1));
    add_ln30_fu_682_p2 <= std_logic_vector(unsigned(in_fu_216) + unsigned(ap_const_lv7_20));
    add_ln31_fu_936_p2 <= std_logic_vector(unsigned(select_ln30_reg_1798) + unsigned(ap_const_lv8_3));
    add_ln35_fu_1669_p2 <= std_logic_vector(unsigned(out_reg_437) + unsigned(ap_const_lv6_8));
    add_ln39_fu_1106_p2 <= std_logic_vector(unsigned(o_reg_471) + unsigned(ap_const_lv4_1));
    add_ln40_fu_1158_p2 <= std_logic_vector(unsigned(i_reg_482) + unsigned(ap_const_lv6_1));
    add_ln42_fu_1232_p2 <= std_logic_vector(unsigned(r_reg_493) + unsigned(ap_const_lv2_1));
    add_ln43_fu_1272_p2 <= std_logic_vector(unsigned(c_reg_504) + unsigned(ap_const_lv8_1));
    add_ln45_3_fu_1199_p2 <= std_logic_vector(signed(sub_ln45_cast_reg_1924) + signed(zext_ln45_5_fu_1164_p1));
    add_ln45_4_fu_1246_p2 <= std_logic_vector(unsigned(sub_ln45_2_reg_1965) + unsigned(zext_ln45_8_fu_1242_p1));
    add_ln45_5_fu_1256_p2 <= std_logic_vector(unsigned(sub_ln45_3_reg_1970) + unsigned(zext_ln45_7_fu_1238_p1));
    add_ln45_fu_1172_p2 <= std_logic_vector(signed(sub_ln45_1_cast_reg_1942) + signed(zext_ln45_6_fu_1168_p1));
    add_ln57_1_fu_1639_p2 <= std_logic_vector(unsigned(phi_mul_reg_572) + unsigned(ap_const_lv13_2FD));
    add_ln57_fu_1663_p2 <= std_logic_vector(unsigned(o_1_reg_561) + unsigned(ap_const_lv4_1));
    add_ln60_1_fu_1722_p2 <= std_logic_vector(unsigned(w_5_reg_595) + unsigned(ap_const_lv8_1));
    add_ln60_2_fu_1748_p2 <= std_logic_vector(unsigned(w_6_reg_606) + unsigned(ap_const_lv8_1));
    add_ln60_fu_1696_p2 <= std_logic_vector(unsigned(w_reg_584) + unsigned(ap_const_lv8_1));
    add_ln62_1_fu_1651_p2 <= std_logic_vector(unsigned(phi_mul_reg_572) + unsigned(ap_const_lv13_1FE));
    add_ln62_2_fu_1679_p2 <= std_logic_vector(unsigned(phi_mul_reg_572) + unsigned(zext_ln62_fu_1675_p1));
    add_ln62_3_fu_1706_p2 <= std_logic_vector(unsigned(add_ln62_reg_2130) + unsigned(zext_ln62_2_fu_1702_p1));
    add_ln62_4_fu_1732_p2 <= std_logic_vector(unsigned(add_ln62_1_reg_2135) + unsigned(zext_ln62_4_fu_1728_p1));
    add_ln62_fu_1645_p2 <= std_logic_vector(unsigned(phi_mul_reg_572) + unsigned(ap_const_lv13_FF));
    add_ln74_fu_796_p2 <= std_logic_vector(unsigned(bin_reg_404) + unsigned(ap_const_lv6_1));
    add_ln75_fu_888_p2 <= std_logic_vector(unsigned(bh_reg_415) + unsigned(ap_const_lv2_1));
    add_ln88_fu_972_p2 <= std_logic_vector(unsigned(bout_reg_449) + unsigned(ap_const_lv4_1));
    add_ln89_fu_1052_p2 <= std_logic_vector(unsigned(bin_2_reg_460) + unsigned(ap_const_lv6_1));
    add_ln91_fu_1036_p2 <= std_logic_vector(unsigned(tmp_10_reg_1887) + unsigned(zext_ln91_fu_1032_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_i2_RVALID)
    begin
        if ((m_axi_i2_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_w2_ARREADY)
    begin
        if ((m_axi_w2_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_w2_RVALID)
    begin
        if ((m_axi_w2_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(m_axi_i3_AWREADY, grp_conv2_Pipeline_RELU_fu_617_ap_done)
    begin
        if (((grp_conv2_Pipeline_RELU_fu_617_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;

    ap_ST_fsm_state49_blk_assign_proc : process(m_axi_i3_WREADY)
    begin
        if ((m_axi_i3_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_i2_ARREADY)
    begin
        if ((m_axi_i2_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(m_axi_i3_BVALID, icmp_ln105_reg_2047)
    begin
        if (((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state55_blk_assign_proc : process(m_axi_i3_AWREADY, grp_conv2_Pipeline_RELU3_fu_625_ap_done)
    begin
        if (((grp_conv2_Pipeline_RELU3_fu_625_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;

    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_i3_WREADY)
    begin
        if ((m_axi_i3_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;

    ap_ST_fsm_state63_blk_assign_proc : process(m_axi_i3_BVALID)
    begin
        if ((m_axi_i3_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state54_assign_proc : process(m_axi_i3_BVALID, icmp_ln105_reg_2047)
    begin
                ap_block_state54 <= ((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0));
    end process;


    ap_block_state54_ignore_call0_assign_proc : process(m_axi_i3_BVALID, icmp_ln105_reg_2047)
    begin
                ap_block_state54_ignore_call0 <= ((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln30_fu_664_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln30_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln30_fu_664_p2)
    begin
        if (((icmp_ln30_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bh_cast_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_415),10));
    bin_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bin_reg_404),9));
    conv2_biases_address0 <= p_cast20_fu_1299_p1(5 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_1467_p2 <= std_logic_vector(unsigned(sub_ln111_1_reg_2051) + unsigned(loop_index_0_i_cast107_fu_1463_p1));
    empty_101_fu_1483_p2 <= std_logic_vector(unsigned(loop_index_0_i_reg_539) + unsigned(ap_const_lv8_1));
    empty_102_fu_1542_p1 <= reg_641;
    empty_105_fu_1606_p2 <= std_logic_vector(unsigned(sub_ln111_2_reg_2092) + unsigned(loop_index_1_i_cast108_fu_1602_p1));
    empty_106_fu_1622_p2 <= std_logic_vector(unsigned(loop_index_1_i_reg_550) + unsigned(ap_const_lv8_1));
    empty_107_fu_1634_p1 <= reg_641;
    empty_109_fu_754_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_738_p1) - unsigned(p_shl1_cast_fu_750_p1));
    empty_83_fu_802_p2 <= std_logic_vector(unsigned(bin_reg_404) + unsigned(trunc_ln30_reg_1808));
    empty_84_fu_811_p0 <= empty_84_fu_811_p00(6 - 1 downto 0);
    empty_84_fu_811_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_83_fu_802_p2),24));
    empty_84_fu_811_p1 <= ap_const_lv24_3F804(19 - 1 downto 0);
    empty_85_fu_826_p2 <= std_logic_vector(unsigned(tmp_fu_821_p2) + unsigned(sext_ln74_reg_1824));
    empty_87_fu_855_p2 <= std_logic_vector(signed(sext_ln74_1_reg_1829) + signed(bh_cast_fu_851_p1));
    empty_88_fu_864_p1 <= empty_87_fu_855_p2(7 - 1 downto 0);
    empty_89_fu_876_p2 <= std_logic_vector(unsigned(p_shl3_fu_868_p3) - unsigned(p_cast100_fu_860_p1));
    empty_90_fu_898_p2 <= std_logic_vector(unsigned(empty_89_reg_1848) + unsigned(loop_index_i_cast102_fu_894_p1));
    empty_91_fu_914_p2 <= std_logic_vector(unsigned(loop_index_i_reg_426) + unsigned(ap_const_lv8_1));
    empty_93_fu_1007_p2 <= std_logic_vector(unsigned(tmp1_fu_1002_p2) + unsigned(zext_ln30_reg_1813));
    empty_96_fu_1142_p2 <= std_logic_vector(unsigned(tmp_13_reg_1929) + unsigned(zext_ln45_2_fu_1112_p1));
    empty_97_fu_1294_p2 <= std_logic_vector(unsigned(zext_ln104_fu_1290_p1) + unsigned(trunc_ln100_reg_1882));
    empty_98_fu_1349_p1 <= conv2_biases_q0;
    empty_fu_780_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_776_p1) - unsigned(bin_cast_fu_764_p1));
    exitcond5516_fu_1477_p2 <= "1" when (loop_index_0_i_reg_539 = ap_const_lv8_FF) else "0";
    exitcond5918_fu_1616_p2 <= "1" when (loop_index_1_i_reg_550 = ap_const_lv8_FF) else "0";
    exitcond6_fu_908_p2 <= "1" when (loop_index_i_reg_426 = ap_const_lv8_FF) else "0";
    grp_conv2_Pipeline_RELU3_fu_625_ap_start <= grp_conv2_Pipeline_RELU3_fu_625_ap_start_reg;
    grp_conv2_Pipeline_RELU_fu_617_ap_start <= grp_conv2_Pipeline_RELU_fu_617_ap_start_reg;

    grp_fu_2177_ce_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_ce, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_2177_ce <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_2177_ce <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_ce;
        else 
            grp_fu_2177_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_2177_opcode_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_opcode, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_opcode)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_2177_opcode <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_2177_opcode <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_opcode;
        else 
            grp_fu_2177_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_2177_p0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din0, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_2177_p0 <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_2177_p0 <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din0;
        else 
            grp_fu_2177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2177_p1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din1, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_2177_p1 <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_2177_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_2177_p1 <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_2177_p_din1;
        else 
            grp_fu_2177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_284_p_ce <= grp_fu_633_ce;
    grp_fu_284_p_din0 <= grp_fu_633_p0;
    grp_fu_284_p_din1 <= grp_fu_633_p1;
    grp_fu_284_p_opcode <= ap_const_lv2_0;
    grp_fu_288_p_ce <= ap_const_logic_1;
    grp_fu_288_p_din0 <= weight_buffer_3_0_0_load_reg_1960;
    grp_fu_288_p_din1 <= input_fm_buffer_1_load_reg_2001;
    grp_fu_292_p_ce <= grp_fu_2177_ce;
    grp_fu_292_p_din0 <= grp_fu_2177_p0;
    grp_fu_292_p_din1 <= grp_fu_2177_p1;
    grp_fu_292_p_opcode <= grp_fu_2177_opcode;

    grp_fu_633_ce_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_ce, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_633_ce <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_ce <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_ce;
        else 
            grp_fu_633_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_633_p0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, reg_641, grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din0, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_633_p0 <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_p0 <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_633_p0 <= reg_641;
        else 
            grp_fu_633_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_633_p1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, mul_reg_2006, grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din1, grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din1, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_633_p1 <= grp_conv2_Pipeline_RELU3_fu_625_grp_fu_633_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_p1 <= grp_conv2_Pipeline_RELU_fu_617_grp_fu_633_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_633_p1 <= mul_reg_2006;
        else 
            grp_fu_633_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    i2_blk_n_AR_assign_proc : process(m_axi_i2_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            i2_blk_n_AR <= m_axi_i2_ARREADY;
        else 
            i2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    i2_blk_n_R_assign_proc : process(m_axi_i2_RVALID, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            i2_blk_n_R <= m_axi_i2_RVALID;
        else 
            i2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_AW_assign_proc : process(m_axi_i3_AWREADY, ap_CS_fsm_state46, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            i3_blk_n_AW <= m_axi_i3_AWREADY;
        else 
            i3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_B_assign_proc : process(m_axi_i3_BVALID, ap_CS_fsm_state54, icmp_ln105_reg_2047, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or ((icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            i3_blk_n_B <= m_axi_i3_BVALID;
        else 
            i3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    i3_blk_n_W_assign_proc : process(m_axi_i3_WREADY, ap_CS_fsm_state49, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            i3_blk_n_W <= m_axi_i3_WREADY;
        else 
            i3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln104_fu_1278_p2 <= "1" when (bout_1_reg_515 = ap_const_lv4_8) else "0";
    icmp_ln105_1_fu_1578_p2 <= "1" when (or_ln108_reg_2081 = ap_const_lv2_3) else "0";
    icmp_ln105_fu_1353_p2 <= "1" when (unsigned(bh_2_reg_527) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln30_fu_664_p2 <= "1" when (indvar_flatten_fu_220 = ap_const_lv8_AA) else "0";
    icmp_ln31_fu_688_p2 <= "1" when (h_fu_212 = ap_const_lv8_FF) else "0";
    icmp_ln39_fu_1100_p2 <= "1" when (o_reg_471 = ap_const_lv4_8) else "0";
    icmp_ln40_fu_1152_p2 <= "1" when (i_reg_482 = ap_const_lv6_20) else "0";
    icmp_ln42_fu_1226_p2 <= "1" when (r_reg_493 = ap_const_lv2_3) else "0";
    icmp_ln43_fu_1266_p2 <= "1" when (c_reg_504 = ap_const_lv8_FF) else "0";
    icmp_ln57_fu_1657_p2 <= "1" when (o_1_reg_561 = ap_const_lv4_8) else "0";
    icmp_ln60_1_fu_1716_p2 <= "1" when (w_5_reg_595 = ap_const_lv8_FF) else "0";
    icmp_ln60_2_fu_1742_p2 <= "1" when (w_6_reg_606 = ap_const_lv8_FF) else "0";
    icmp_ln60_fu_1690_p2 <= "1" when (w_reg_584 = ap_const_lv8_FF) else "0";
    icmp_ln74_fu_790_p2 <= "1" when (bin_reg_404 = ap_const_lv6_20) else "0";
    icmp_ln75_fu_882_p2 <= "1" when (bh_reg_415 = ap_const_lv2_3) else "0";
    icmp_ln88_fu_966_p2 <= "1" when (bout_reg_449 = ap_const_lv4_8) else "0";
    icmp_ln89_fu_1046_p2 <= "1" when (bin_2_reg_460 = ap_const_lv6_20) else "0";

    input_fm_buffer_1_address0_assign_proc : process(input_fm_buffer_1_addr_reg_1861, ap_CS_fsm_state33, ap_CS_fsm_state15, zext_ln45_9_fu_1251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input_fm_buffer_1_address0 <= zext_ln45_9_fu_1251_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_fm_buffer_1_address0 <= input_fm_buffer_1_addr_reg_1861;
        else 
            input_fm_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            input_fm_buffer_1_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_fm_buffer_1_d0 <= i2_addr_read_reg_1874;

    input_fm_buffer_1_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_fm_buffer_1_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index_0_i_cast107_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_0_i_reg_539),13));
    loop_index_1_i_cast108_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_1_i_reg_550),13));
    loop_index_i_cast102_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_i_reg_426),15));
    m_axi_i2_ARADDR <= i2_addr_reg_1842;
    m_axi_i2_ARBURST <= ap_const_lv2_0;
    m_axi_i2_ARCACHE <= ap_const_lv4_0;
    m_axi_i2_ARID <= ap_const_lv1_0;
    m_axi_i2_ARLEN <= ap_const_lv32_2FD;
    m_axi_i2_ARLOCK <= ap_const_lv2_0;
    m_axi_i2_ARPROT <= ap_const_lv3_0;
    m_axi_i2_ARQOS <= ap_const_lv4_0;
    m_axi_i2_ARREGION <= ap_const_lv4_0;
    m_axi_i2_ARSIZE <= ap_const_lv3_0;
    m_axi_i2_ARUSER <= ap_const_lv1_0;

    m_axi_i2_ARVALID_assign_proc : process(m_axi_i2_ARREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_i2_ARREADY = ap_const_logic_1))) then 
            m_axi_i2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_i2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_AWADDR <= ap_const_lv64_0;
    m_axi_i2_AWBURST <= ap_const_lv2_0;
    m_axi_i2_AWCACHE <= ap_const_lv4_0;
    m_axi_i2_AWID <= ap_const_lv1_0;
    m_axi_i2_AWLEN <= ap_const_lv32_0;
    m_axi_i2_AWLOCK <= ap_const_lv2_0;
    m_axi_i2_AWPROT <= ap_const_lv3_0;
    m_axi_i2_AWQOS <= ap_const_lv4_0;
    m_axi_i2_AWREGION <= ap_const_lv4_0;
    m_axi_i2_AWSIZE <= ap_const_lv3_0;
    m_axi_i2_AWUSER <= ap_const_lv1_0;
    m_axi_i2_AWVALID <= ap_const_logic_0;
    m_axi_i2_BREADY <= ap_const_logic_0;

    m_axi_i2_RREADY_assign_proc : process(m_axi_i2_RVALID, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_i2_RVALID = ap_const_logic_1))) then 
            m_axi_i2_RREADY <= ap_const_logic_1;
        else 
            m_axi_i2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_WDATA <= ap_const_lv32_0;
    m_axi_i2_WID <= ap_const_lv1_0;
    m_axi_i2_WLAST <= ap_const_logic_0;
    m_axi_i2_WSTRB <= ap_const_lv4_0;
    m_axi_i2_WUSER <= ap_const_lv1_0;
    m_axi_i2_WVALID <= ap_const_logic_0;
    m_axi_i3_ARADDR <= ap_const_lv64_0;
    m_axi_i3_ARBURST <= ap_const_lv2_0;
    m_axi_i3_ARCACHE <= ap_const_lv4_0;
    m_axi_i3_ARID <= ap_const_lv1_0;
    m_axi_i3_ARLEN <= ap_const_lv32_0;
    m_axi_i3_ARLOCK <= ap_const_lv2_0;
    m_axi_i3_ARPROT <= ap_const_lv3_0;
    m_axi_i3_ARQOS <= ap_const_lv4_0;
    m_axi_i3_ARREGION <= ap_const_lv4_0;
    m_axi_i3_ARSIZE <= ap_const_lv3_0;
    m_axi_i3_ARUSER <= ap_const_lv1_0;
    m_axi_i3_ARVALID <= ap_const_logic_0;

    m_axi_i3_AWADDR_assign_proc : process(m_axi_i3_AWREADY, ap_CS_fsm_state46, ap_CS_fsm_state55, i3_addr_reg_2057, i3_addr_2_reg_2101, grp_conv2_Pipeline_RELU_fu_617_ap_done, grp_conv2_Pipeline_RELU3_fu_625_ap_done)
    begin
        if ((not(((grp_conv2_Pipeline_RELU3_fu_625_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            m_axi_i3_AWADDR <= i3_addr_2_reg_2101;
        elsif ((not(((grp_conv2_Pipeline_RELU_fu_617_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            m_axi_i3_AWADDR <= i3_addr_reg_2057;
        else 
            m_axi_i3_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_i3_AWBURST <= ap_const_lv2_0;
    m_axi_i3_AWCACHE <= ap_const_lv4_0;
    m_axi_i3_AWID <= ap_const_lv1_0;
    m_axi_i3_AWLEN <= ap_const_lv32_FF;
    m_axi_i3_AWLOCK <= ap_const_lv2_0;
    m_axi_i3_AWPROT <= ap_const_lv3_0;
    m_axi_i3_AWQOS <= ap_const_lv4_0;
    m_axi_i3_AWREGION <= ap_const_lv4_0;
    m_axi_i3_AWSIZE <= ap_const_lv3_0;
    m_axi_i3_AWUSER <= ap_const_lv1_0;

    m_axi_i3_AWVALID_assign_proc : process(m_axi_i3_AWREADY, ap_CS_fsm_state46, ap_CS_fsm_state55, grp_conv2_Pipeline_RELU_fu_617_ap_done, grp_conv2_Pipeline_RELU3_fu_625_ap_done)
    begin
        if (((not(((grp_conv2_Pipeline_RELU3_fu_625_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55)) or (not(((grp_conv2_Pipeline_RELU_fu_617_ap_done = ap_const_logic_0) or (m_axi_i3_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            m_axi_i3_AWVALID <= ap_const_logic_1;
        else 
            m_axi_i3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_i3_BREADY_assign_proc : process(m_axi_i3_BVALID, ap_CS_fsm_state54, icmp_ln105_reg_2047, ap_CS_fsm_state63)
    begin
        if ((((m_axi_i3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or (not(((icmp_ln105_reg_2047 = ap_const_lv1_1) and (m_axi_i3_BVALID = ap_const_logic_0))) and (icmp_ln105_reg_2047 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            m_axi_i3_BREADY <= ap_const_logic_1;
        else 
            m_axi_i3_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i3_RREADY <= ap_const_logic_0;

    m_axi_i3_WDATA_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state58, empty_102_fu_1542_p1, empty_107_fu_1634_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            m_axi_i3_WDATA <= empty_107_fu_1634_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            m_axi_i3_WDATA <= empty_102_fu_1542_p1;
        else 
            m_axi_i3_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_i3_WID <= ap_const_lv1_0;
    m_axi_i3_WLAST <= ap_const_logic_0;
    m_axi_i3_WSTRB <= ap_const_lv4_F;
    m_axi_i3_WUSER <= ap_const_lv1_0;

    m_axi_i3_WVALID_assign_proc : process(m_axi_i3_WREADY, ap_CS_fsm_state49, ap_CS_fsm_state58)
    begin
        if ((((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((m_axi_i3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            m_axi_i3_WVALID <= ap_const_logic_1;
        else 
            m_axi_i3_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_ARADDR <= w2_addr_reg_1900;
    m_axi_w2_ARBURST <= ap_const_lv2_0;
    m_axi_w2_ARCACHE <= ap_const_lv4_0;
    m_axi_w2_ARID <= ap_const_lv1_0;
    m_axi_w2_ARLEN <= ap_const_lv32_20;
    m_axi_w2_ARLOCK <= ap_const_lv2_0;
    m_axi_w2_ARPROT <= ap_const_lv3_0;
    m_axi_w2_ARQOS <= ap_const_lv4_0;
    m_axi_w2_ARREGION <= ap_const_lv4_0;
    m_axi_w2_ARSIZE <= ap_const_lv3_0;
    m_axi_w2_ARUSER <= ap_const_lv1_0;

    m_axi_w2_ARVALID_assign_proc : process(m_axi_w2_ARREADY, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_w2_ARREADY = ap_const_logic_1))) then 
            m_axi_w2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_w2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_AWADDR <= ap_const_lv64_0;
    m_axi_w2_AWBURST <= ap_const_lv2_0;
    m_axi_w2_AWCACHE <= ap_const_lv4_0;
    m_axi_w2_AWID <= ap_const_lv1_0;
    m_axi_w2_AWLEN <= ap_const_lv32_0;
    m_axi_w2_AWLOCK <= ap_const_lv2_0;
    m_axi_w2_AWPROT <= ap_const_lv3_0;
    m_axi_w2_AWQOS <= ap_const_lv4_0;
    m_axi_w2_AWREGION <= ap_const_lv4_0;
    m_axi_w2_AWSIZE <= ap_const_lv3_0;
    m_axi_w2_AWUSER <= ap_const_lv1_0;
    m_axi_w2_AWVALID <= ap_const_logic_0;
    m_axi_w2_BREADY <= ap_const_logic_0;

    m_axi_w2_RREADY_assign_proc : process(m_axi_w2_RVALID, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_w2_RVALID = ap_const_logic_1))) then 
            m_axi_w2_RREADY <= ap_const_logic_1;
        else 
            m_axi_w2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_w2_WDATA <= ap_const_lv32_0;
    m_axi_w2_WID <= ap_const_lv1_0;
    m_axi_w2_WLAST <= ap_const_logic_0;
    m_axi_w2_WSTRB <= ap_const_lv4_0;
    m_axi_w2_WUSER <= ap_const_lv1_0;
    m_axi_w2_WVALID <= ap_const_logic_0;
    mul_ln108_fu_1308_p0 <= mul_ln108_fu_1308_p00(5 - 1 downto 0);
    mul_ln108_fu_1308_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_fu_1294_p2),23));
    mul_ln108_fu_1308_p1 <= ap_const_lv23_3F804(19 - 1 downto 0);
    or_ln108_fu_1489_p2 <= (trunc_ln105_reg_2063 or ap_const_lv2_1);

    output_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, output_fm_buffer_addr_4_reg_1988, ap_CS_fsm_state47, ap_CS_fsm_state56, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_address0, grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_address0, ap_CS_fsm_state42, p_cast124_fu_1472_p1, p_cast127_fu_1611_p1, zext_ln62_1_fu_1685_p1, zext_ln62_3_fu_1711_p1, zext_ln62_5_fu_1737_p1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            output_fm_buffer_address0 <= zext_ln62_5_fu_1737_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_fm_buffer_address0 <= zext_ln62_3_fu_1711_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            output_fm_buffer_address0 <= zext_ln62_1_fu_1685_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output_fm_buffer_address0 <= p_cast127_fu_1611_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_fm_buffer_address0 <= p_cast124_fu_1472_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_fm_buffer_address0 <= output_fm_buffer_addr_4_reg_1988;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_fm_buffer_address0 <= grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_fm_buffer_address0 <= grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_address0;
        else 
            output_fm_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, ap_CS_fsm_state47, ap_CS_fsm_state56, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_ce0, grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_ce0, ap_CS_fsm_state42, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            output_fm_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_fm_buffer_ce0 <= grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_fm_buffer_ce0 <= grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_ce0;
        else 
            output_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, add_reg_2011, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_d0, grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_d0, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            output_fm_buffer_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_fm_buffer_d0 <= add_reg_2011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_fm_buffer_d0 <= grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_fm_buffer_d0 <= grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_d0;
        else 
            output_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_we0, grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_we0, ap_CS_fsm_state42, icmp_ln60_2_fu_1742_p2, icmp_ln60_fu_1690_p2, icmp_ln60_1_fu_1716_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((icmp_ln60_2_fu_1742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((icmp_ln60_1_fu_1716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((icmp_ln60_fu_1690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            output_fm_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_fm_buffer_we0 <= grp_conv2_Pipeline_RELU3_fu_625_output_fm_buffer_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_fm_buffer_we0 <= grp_conv2_Pipeline_RELU_fu_617_output_fm_buffer_we0;
        else 
            output_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast100_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_87_fu_855_p2),15));

    p_cast115_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_90_fu_898_p2),64));
    p_cast116_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_96_fu_1142_p2),64));
    p_cast124_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_100_fu_1467_p2),64));
    p_cast127_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_105_fu_1606_p2),64));
    p_cast16_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_84_fu_811_p2),64));
    p_cast18_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_988_p4),64));
    p_cast20_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_fu_1294_p2),64));
    p_shl1_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_742_p3),19));
    p_shl1_fu_742_p3 <= (select_ln30_fu_694_p3 & ap_const_lv2_0);
    p_shl3_fu_868_p3 <= (empty_88_fu_864_p1 & ap_const_lv8_0);
    p_shl4_fu_1563_p3 <= (trunc_ln111_1_fu_1559_p1 & ap_const_lv8_0);
    p_shl6_fu_1212_p3 <= (trunc_ln45_1_fu_1208_p1 & ap_const_lv8_0);
    p_shl7_fu_1185_p3 <= (trunc_ln45_fu_1181_p1 & ap_const_lv8_0);
    p_shl9_fu_1376_p3 <= (trunc_ln111_fu_1372_p1 & ap_const_lv8_0);
    p_shl_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_730_p3),19));
    p_shl_fu_730_p3 <= (select_ln30_fu_694_p3 & ap_const_lv10_0);
    select_ln30_1_fu_702_p3 <= 
        add_ln30_fu_682_p2 when (icmp_ln31_fu_688_p2(0) = '1') else 
        in_fu_216;
    select_ln30_fu_694_p3 <= 
        ap_const_lv8_0 when (icmp_ln31_fu_688_p2(0) = '1') else 
        h_fu_212;
        sext_ln104_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln111_fu_1339_p2),8));

        sext_ln108_1_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln108_1_fu_1527_p2),64));

        sext_ln108_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln108_fu_1424_p2),64));

        sext_ln111_1_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_1_fu_1550_p2),13));

        sext_ln111_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_fu_1363_p2),13));

        sext_ln118_1_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln118_1_fu_1583_p4),64));

        sext_ln118_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1439_p4),64));

        sext_ln45_1_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_3_fu_1199_p2),13));

        sext_ln45_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_fu_1172_p2),15));

        sext_ln74_1_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_780_p2),10));

        sext_ln74_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_109_fu_754_p2),64));

        sext_ln75_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_831_p4),64));

        sext_ln89_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_1012_p4),64));

    shl_ln108_1_fu_1412_p3 <= (add_ln108_1_fu_1395_p2 & ap_const_lv2_0);
    shl_ln108_2_fu_1503_p3 <= (add_ln108_3_fu_1498_p2 & ap_const_lv10_0);
    shl_ln108_3_fu_1515_p3 <= (add_ln108_3_fu_1498_p2 & ap_const_lv2_0);
    shl_ln_fu_1400_p3 <= (add_ln108_1_fu_1395_p2 & ap_const_lv10_0);
    sub_ln108_1_fu_1527_p2 <= std_logic_vector(unsigned(zext_ln108_4_fu_1511_p1) - unsigned(zext_ln108_5_fu_1523_p1));
    sub_ln108_fu_1424_p2 <= std_logic_vector(unsigned(zext_ln108_1_fu_1408_p1) - unsigned(zext_ln108_2_fu_1420_p1));
    sub_ln111_1_fu_1384_p2 <= std_logic_vector(unsigned(p_shl9_fu_1376_p3) - unsigned(sext_ln111_fu_1368_p1));
    sub_ln111_2_fu_1571_p2 <= std_logic_vector(unsigned(p_shl4_fu_1563_p3) - unsigned(sext_ln111_1_fu_1555_p1));
    sub_ln111_fu_1339_p2 <= std_logic_vector(unsigned(zext_ln111_3_fu_1335_p1) - unsigned(zext_ln111_fu_1323_p1));
        sub_ln45_1_cast_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln45_1_fu_1132_p2),10));

    sub_ln45_1_fu_1132_p2 <= std_logic_vector(unsigned(zext_ln45_4_fu_1128_p1) - unsigned(zext_ln45_3_fu_1116_p1));
    sub_ln45_2_fu_1193_p2 <= std_logic_vector(unsigned(p_shl7_fu_1185_p3) - unsigned(sext_ln45_fu_1177_p1));
    sub_ln45_3_fu_1220_p2 <= std_logic_vector(unsigned(p_shl6_fu_1212_p3) - unsigned(sext_ln45_1_fu_1204_p1));
        sub_ln45_cast_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln45_fu_1082_p2),8));

    sub_ln45_fu_1082_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_1078_p1) - unsigned(zext_ln45_fu_1066_p1));
    tmp1_fu_1002_p2 <= std_logic_vector(unsigned(p_cast18_fu_998_p1) + unsigned(conv2_weights));
    tmp_10_fu_958_p3 <= (trunc_ln91_fu_954_p1 & ap_const_lv5_0);
    tmp_11_fu_988_p4 <= ((tmp_7_fu_978_p4 & trunc_ln91_fu_954_p1) & ap_const_lv8_0);
    tmp_12_fu_1070_p3 <= (o_reg_471 & ap_const_lv2_0);
    tmp_13_fu_1092_p3 <= (trunc_ln39_fu_1062_p1 & ap_const_lv5_0);
    tmp_14_fu_1120_p3 <= (i_reg_482 & ap_const_lv2_0);
    tmp_15_fu_1327_p3 <= (bout_1_reg_515 & ap_const_lv2_0);
    tmp_24_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_768_p3),9));
    tmp_4_fu_924_p3 <= out_reg_437(5 downto 5);
    tmp_7_fu_978_p4 <= out_reg_437(4 downto 3);
    tmp_fu_821_p2 <= std_logic_vector(unsigned(p_cast16_fu_817_p1) + unsigned(input_ftmap));
    tmp_s_fu_768_p3 <= (bin_reg_404 & ap_const_lv2_0);
    trunc_ln100_fu_932_p1 <= out_reg_437(5 - 1 downto 0);
    trunc_ln105_fu_1459_p1 <= bh_2_reg_527(2 - 1 downto 0);
    trunc_ln111_1_fu_1559_p1 <= add_ln111_1_fu_1550_p2(5 - 1 downto 0);
    trunc_ln111_fu_1372_p1 <= add_ln111_fu_1363_p2(5 - 1 downto 0);
    trunc_ln118_1_fu_1583_p4 <= add_ln108_4_reg_2087(63 downto 2);
    trunc_ln1_fu_1439_p4 <= add_ln108_2_fu_1434_p2(63 downto 2);
    trunc_ln30_fu_710_p1 <= select_ln30_1_fu_702_p3(6 - 1 downto 0);
    trunc_ln39_fu_1062_p1 <= o_reg_471(3 - 1 downto 0);
    trunc_ln45_1_fu_1208_p1 <= add_ln45_3_fu_1199_p2(5 - 1 downto 0);
    trunc_ln45_fu_1181_p1 <= add_ln45_fu_1172_p2(7 - 1 downto 0);
    trunc_ln8_fu_1012_p4 <= empty_93_fu_1007_p2(63 downto 2);
    trunc_ln91_fu_954_p1 <= bout_reg_449(3 - 1 downto 0);
    trunc_ln_fu_831_p4 <= empty_85_fu_826_p2(63 downto 2);

    w2_blk_n_AR_assign_proc : process(m_axi_w2_ARREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w2_blk_n_AR <= m_axi_w2_ARREADY;
        else 
            w2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    w2_blk_n_R_assign_proc : process(m_axi_w2_RVALID, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w2_blk_n_R <= m_axi_w2_RVALID;
        else 
            w2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    weight_buffer_3_0_0_address0_assign_proc : process(weight_buffer_3_0_0_addr_reg_1906, ap_CS_fsm_state30, ap_CS_fsm_state28, p_cast116_fu_1147_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            weight_buffer_3_0_0_address0 <= p_cast116_fu_1147_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weight_buffer_3_0_0_address0 <= weight_buffer_3_0_0_addr_reg_1906;
        else 
            weight_buffer_3_0_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weight_buffer_3_0_0_ce0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            weight_buffer_3_0_0_ce0 <= ap_const_logic_1;
        else 
            weight_buffer_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_3_0_0_d0 <= w2_addr_read_reg_1919;

    weight_buffer_3_0_0_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weight_buffer_3_0_0_we0 <= ap_const_logic_1;
        else 
            weight_buffer_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln101_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_694_p3),9));
    zext_ln104_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bout_1_reg_515),5));
    zext_ln105_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_2_reg_527),9));
    zext_ln108_1_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1400_p3),20));
    zext_ln108_2_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln108_1_fu_1412_p3),20));
    zext_ln108_3_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln108_fu_1489_p2),9));
    zext_ln108_4_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln108_2_fu_1503_p3),20));
    zext_ln108_5_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln108_3_fu_1515_p3),20));
    zext_ln108_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln108_fu_1308_p2),64));
    zext_ln111_3_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1327_p3),7));
    zext_ln111_4_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_2_reg_527),8));
    zext_ln111_5_fu_1547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln108_reg_2081),8));
    zext_ln111_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bout_1_reg_515),7));
    zext_ln30_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31_mid2_v_fu_714_p3),64));
    zext_ln31_mid2_v_fu_714_p3 <= (trunc_ln30_fu_710_p1 & ap_const_lv2_0);
    zext_ln45_10_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_5_fu_1256_p2),64));
    zext_ln45_1_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1070_p3),7));
    zext_ln45_2_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_482),8));
    zext_ln45_3_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_482),9));
    zext_ln45_4_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1120_p3),9));
    zext_ln45_5_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_493),8));
    zext_ln45_6_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_493),10));
    zext_ln45_7_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_504),13));
    zext_ln45_8_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_504),15));
    zext_ln45_9_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_4_fu_1246_p2),64));
    zext_ln45_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_471),7));
    zext_ln62_1_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_2_fu_1679_p2),64));
    zext_ln62_2_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_5_reg_595),13));
    zext_ln62_3_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_3_fu_1706_p2),64));
    zext_ln62_4_fu_1728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_6_reg_606),13));
    zext_ln62_5_fu_1737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_4_fu_1732_p2),64));
    zext_ln62_fu_1675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_584),13));
    zext_ln91_1_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_1036_p2),64));
    zext_ln91_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bin_2_reg_460),8));
end behav;
