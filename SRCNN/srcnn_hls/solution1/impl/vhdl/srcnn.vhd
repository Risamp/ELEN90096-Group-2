-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=633071667,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=2138,HLS_SYN_LUT=4346,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv1_output_ftmap_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal conv1_output_ftmap_ce0 : STD_LOGIC;
    signal conv1_output_ftmap_we0 : STD_LOGIC;
    signal conv1_output_ftmap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_ftmap_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv2_output_ftmap_ce0 : STD_LOGIC;
    signal conv2_output_ftmap_we0 : STD_LOGIC;
    signal conv2_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_ftmap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal sext_ln34_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_reg_1088 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_447_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_reg_1093 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln17_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln17_reg_1101 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln17_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_28_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_2_cast11_fu_480_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal h_2_cast11_reg_1128 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_26_fu_509_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_26_reg_1133 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln21_1_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_1_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_2_cast12_fu_531_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal w_2_cast12_reg_1146 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal conv2_output_ftmap_addr_reg_1151 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln22_1_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_1_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln33_fu_644_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln33_reg_1177 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv2_weights_load_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv1_output_ftmap_load_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_1_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln34_fu_720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln34_reg_1197 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln21_fu_726_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_reg_1202 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ftmap_addr_reg_1215 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln22_fu_756_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_reg_1220 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_reg_1228 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln34_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln25_fu_780_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_reg_1238 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln25_fu_790_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln25_reg_1246 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln26_fu_855_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_reg_1251 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln25_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_fu_859_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_reg_1256 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln26_fu_869_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_reg_1264 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln33_fu_934_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln33_reg_1269 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln26_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln33_1_fu_1066_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln33_1_reg_1287 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv3_weights_load_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_2_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_conv1_fu_353_ap_start : STD_LOGIC;
    signal grp_conv1_fu_353_ap_done : STD_LOGIC;
    signal grp_conv1_fu_353_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_353_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_353_input_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv1_fu_353_input_ftmap_ce0 : STD_LOGIC;
    signal grp_conv1_fu_353_conv1_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_fu_353_conv1_weights_ce0 : STD_LOGIC;
    signal grp_conv1_fu_353_conv1_biases_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_conv1_fu_353_conv1_biases_ce0 : STD_LOGIC;
    signal grp_conv1_fu_353_conv1_output_ftmap_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv1_fu_353_conv1_output_ftmap_ce0 : STD_LOGIC;
    signal grp_conv1_fu_353_conv1_output_ftmap_we0 : STD_LOGIC;
    signal grp_conv1_fu_353_conv1_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_365_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_365_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_365_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_353_grp_fu_365_p_ce : STD_LOGIC;
    signal grp_conv1_fu_353_grp_fu_373_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_373_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_373_p_ce : STD_LOGIC;
    signal grp_conv1_fu_353_grp_fu_377_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_377_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_grp_fu_377_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv1_fu_353_grp_fu_377_p_ce : STD_LOGIC;
    signal h_3_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_1_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_2_reg_243 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln21_1_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n1_reg_254 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_add4227_i_phi_fu_268_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4227_i_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln21_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f3h_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal add42_lcssa_lcssa21_i_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal f3w_reg_307 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_1_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add42_lcssa20_i_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal n2_1_reg_330 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_30_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln17_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast19_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_6_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_7_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_2_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_11_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_14_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_3_fu_425_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_cast_fu_433_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal n2_cast_fu_421_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_437_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln17_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_2_cast_fu_484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_24_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_25_fu_497_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_501_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_cast10_fu_493_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal w_2_cast_fu_535_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_27_fu_539_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_569_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_5_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_4_fu_565_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln34_1_fu_581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_1_fu_587_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln34_1_fu_591_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln34_fu_600_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_604_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln34_2_fu_596_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln34_2_fu_612_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln34_2_fu_618_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln34_3_fu_561_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_3_fu_628_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln41_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_658_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_668_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_1_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_712_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_708_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_1_fu_742_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_796_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_802_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_29_fu_806_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_825_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_811_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_833_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yPixelClamped_1_fu_847_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_875_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln30_fu_881_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_fu_885_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_904_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_1_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_2_fu_912_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xPixelClamped_1_fu_926_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_946_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_10_fu_954_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_9_fu_942_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln34_3_fu_958_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln34_3_fu_964_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_4_fu_968_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_fu_977_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_fu_981_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln34_4_fu_973_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln34_4_fu_989_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_5_fu_995_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_12_fu_1013_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_8_fu_938_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_6_fu_1017_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_7_fu_1023_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln34_2_fu_1032_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1036_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln34_13_fu_1028_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_8_fu_1044_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_9_fu_1050_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_365_ce : STD_LOGIC;
    signal grp_fu_373_ce : STD_LOGIC;
    signal grp_fu_377_ce : STD_LOGIC;
    signal grp_fu_377_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_ftmap_ce0 : OUT STD_LOGIC;
        input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv1_weights_ce0 : OUT STD_LOGIC;
        conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        conv1_biases_ce0 : OUT STD_LOGIC;
        conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_output_ftmap_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        conv1_output_ftmap_ce0 : OUT STD_LOGIC;
        conv1_output_ftmap_we0 : OUT STD_LOGIC;
        conv1_output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_365_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_365_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_365_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_365_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_365_p_ce : OUT STD_LOGIC;
        grp_fu_373_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_373_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_373_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_373_p_ce : OUT STD_LOGIC;
        grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_377_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_conv1_output_ftmap_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_output_ftmap_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_output_ftmap_U : component srcnn_conv1_output_ftmap_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4161600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_output_ftmap_address0,
        ce0 => conv1_output_ftmap_ce0,
        we0 => conv1_output_ftmap_we0,
        d0 => grp_conv1_fu_353_conv1_output_ftmap_d0,
        q0 => conv1_output_ftmap_q0);

    conv2_output_ftmap_U : component srcnn_conv2_output_ftmap_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2080800,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_output_ftmap_address0,
        ce0 => conv2_output_ftmap_ce0,
        we0 => conv2_output_ftmap_we0,
        d0 => conv2_output_ftmap_d0,
        q0 => conv2_output_ftmap_q0);

    grp_conv1_fu_353 : component srcnn_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv1_fu_353_ap_start,
        ap_done => grp_conv1_fu_353_ap_done,
        ap_idle => grp_conv1_fu_353_ap_idle,
        ap_ready => grp_conv1_fu_353_ap_ready,
        input_ftmap_address0 => grp_conv1_fu_353_input_ftmap_address0,
        input_ftmap_ce0 => grp_conv1_fu_353_input_ftmap_ce0,
        input_ftmap_q0 => input_ftmap_q0,
        conv1_weights_address0 => grp_conv1_fu_353_conv1_weights_address0,
        conv1_weights_ce0 => grp_conv1_fu_353_conv1_weights_ce0,
        conv1_weights_q0 => conv1_weights_q0,
        conv1_biases_address0 => grp_conv1_fu_353_conv1_biases_address0,
        conv1_biases_ce0 => grp_conv1_fu_353_conv1_biases_ce0,
        conv1_biases_q0 => conv1_biases_q0,
        conv1_output_ftmap_address0 => grp_conv1_fu_353_conv1_output_ftmap_address0,
        conv1_output_ftmap_ce0 => grp_conv1_fu_353_conv1_output_ftmap_ce0,
        conv1_output_ftmap_we0 => grp_conv1_fu_353_conv1_output_ftmap_we0,
        conv1_output_ftmap_d0 => grp_conv1_fu_353_conv1_output_ftmap_d0,
        conv1_output_ftmap_q0 => conv1_output_ftmap_q0,
        grp_fu_365_p_din0 => grp_conv1_fu_353_grp_fu_365_p_din0,
        grp_fu_365_p_din1 => grp_conv1_fu_353_grp_fu_365_p_din1,
        grp_fu_365_p_opcode => grp_conv1_fu_353_grp_fu_365_p_opcode,
        grp_fu_365_p_dout0 => grp_fu_365_p2,
        grp_fu_365_p_ce => grp_conv1_fu_353_grp_fu_365_p_ce,
        grp_fu_373_p_din0 => grp_conv1_fu_353_grp_fu_373_p_din0,
        grp_fu_373_p_din1 => grp_conv1_fu_353_grp_fu_373_p_din1,
        grp_fu_373_p_dout0 => grp_fu_373_p2,
        grp_fu_373_p_ce => grp_conv1_fu_353_grp_fu_373_p_ce,
        grp_fu_377_p_din0 => grp_conv1_fu_353_grp_fu_377_p_din0,
        grp_fu_377_p_din1 => grp_conv1_fu_353_grp_fu_377_p_din1,
        grp_fu_377_p_opcode => grp_conv1_fu_353_grp_fu_377_p_opcode,
        grp_fu_377_p_dout0 => grp_fu_377_p2,
        grp_fu_377_p_ce => grp_conv1_fu_353_grp_fu_377_p_ce);

    fadd_32ns_32ns_32_4_full_dsp_1_U8 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => grp_fu_365_ce,
        dout => grp_fu_365_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U9 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => grp_fu_373_ce,
        dout => grp_fu_373_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U10 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => grp_fu_377_ce,
        opcode => grp_fu_377_opcode,
        dout => grp_fu_377_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv1_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_conv1_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4227_i_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                add4227_i_reg_265 <= conv2_output_ftmap_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                add4227_i_reg_265 <= grp_fu_365_p2;
            end if; 
        end if;
    end process;

    add42_lcssa20_i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                add42_lcssa20_i_reg_318 <= add42_lcssa_lcssa21_i_reg_297;
            elsif (((icmp_ln33_1_fu_1060_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                add42_lcssa20_i_reg_318 <= empty_30_reg_341;
            end if; 
        end if;
    end process;

    add42_lcssa_lcssa21_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                add42_lcssa_lcssa21_i_reg_297 <= bitcast_ln34_fu_776_p1;
            elsif (((icmp_ln26_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                add42_lcssa_lcssa21_i_reg_297 <= add42_lcssa20_i_reg_318;
            end if; 
        end if;
    end process;

    empty_30_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_863_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                empty_30_reg_341 <= add42_lcssa20_i_reg_318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                empty_30_reg_341 <= grp_fu_365_p2;
            end if; 
        end if;
    end process;

    f3h_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                f3h_reg_286 <= ap_const_lv3_0;
            elsif (((icmp_ln26_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                f3h_reg_286 <= add_ln25_reg_1246;
            end if; 
        end if;
    end process;

    f3w_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                f3w_reg_307 <= ap_const_lv3_0;
            elsif (((icmp_ln33_1_fu_1060_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                f3w_reg_307 <= add_ln26_reg_1264;
            end if; 
        end if;
    end process;

    h_3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                h_3_reg_232 <= ap_const_lv8_0;
            elsif (((icmp_ln22_1_fu_549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                h_3_reg_232 <= add_ln21_1_reg_1141;
            end if; 
        end if;
    end process;

    h_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_455_p2 = ap_const_lv1_1))) then 
                h_fu_136 <= ap_const_lv8_0;
            elsif (((icmp_ln22_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                h_fu_136 <= add_ln21_reg_1210;
            end if; 
        end if;
    end process;

    n1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n1_reg_254 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                n1_reg_254 <= add_ln33_reg_1177;
            end if; 
        end if;
    end process;

    n2_1_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_863_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                n2_1_reg_330 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                n2_1_reg_330 <= add_ln33_1_reg_1287;
            end if; 
        end if;
    end process;

    n2_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n2_fu_132 <= ap_const_lv6_0;
            elsif (((icmp_ln21_1_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                n2_fu_132 <= add_ln17_reg_1101;
            end if; 
        end if;
    end process;

    w_2_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_1_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_2_reg_243 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                w_2_reg_243 <= add_ln22_1_reg_1159;
            end if; 
        end if;
    end process;

    w_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                w_reg_275 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                w_reg_275 <= add_ln22_reg_1228;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln17_reg_1101 <= add_ln17_fu_461_p2;
                sext_ln34_reg_1088 <= sext_ln34_fu_443_p1;
                    tmp_4_reg_1093(10 downto 6) <= tmp_4_fu_447_p3(10 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln21_1_reg_1141 <= add_ln21_1_fu_521_p2;
                empty_26_reg_1133 <= empty_26_fu_509_p2;
                    h_2_cast11_reg_1128(7 downto 0) <= h_2_cast11_fu_480_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln21_reg_1210 <= add_ln21_fu_736_p2;
                sub_ln34_reg_1197 <= sub_ln34_fu_720_p2;
                    zext_ln21_reg_1202(7 downto 0) <= zext_ln21_fu_726_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln22_1_reg_1159 <= add_ln22_1_fu_555_p2;
                conv2_output_ftmap_addr_reg_1151 <= p_cast19_fu_544_p1(21 - 1 downto 0);
                    w_2_cast12_reg_1146(7 downto 0) <= w_2_cast12_fu_531_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln22_reg_1228 <= add_ln22_fu_766_p2;
                output_ftmap_addr_reg_1215 <= zext_ln34_2_fu_751_p1(16 - 1 downto 0);
                    zext_ln22_reg_1220(7 downto 0) <= zext_ln22_fu_756_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln25_reg_1246 <= add_ln25_fu_790_p2;
                    zext_ln25_reg_1238(2 downto 0) <= zext_ln25_fu_780_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln26_reg_1264 <= add_ln26_fu_869_p2;
                    zext_ln26_reg_1256(2 downto 0) <= zext_ln26_fu_859_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln33_1_reg_1287 <= add_ln33_1_fu_1066_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln33_reg_1177 <= add_ln33_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv1_output_ftmap_load_reg_1187 <= conv1_output_ftmap_q0;
                conv2_weights_load_reg_1182 <= conv2_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                conv3_weights_load_reg_1292 <= conv3_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_23_reg_1123 <= empty_23_fu_476_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_455_p2 = ap_const_lv1_1))) then
                empty_28_reg_1118 <= empty_28_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_382 <= conv2_output_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_388 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_399 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                sext_ln26_reg_1251 <= sext_ln26_fu_855_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_863_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                sext_ln33_reg_1269 <= sext_ln33_fu_934_p1;
            end if;
        end if;
    end process;
    tmp_4_reg_1093(5 downto 0) <= "000000";
    h_2_cast11_reg_1128(16 downto 8) <= "000000000";
    w_2_cast12_reg_1146(21 downto 8) <= "00000000000000";
    zext_ln21_reg_1202(9 downto 8) <= "00";
    zext_ln22_reg_1220(9 downto 8) <= "00";
    zext_ln25_reg_1238(8 downto 3) <= "000000";
    zext_ln26_reg_1256(9 downto 3) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln17_fu_455_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state25, icmp_ln25_fu_784_p2, ap_CS_fsm_state26, icmp_ln26_fu_863_p2, ap_CS_fsm_state27, grp_conv1_fu_353_ap_done, icmp_ln22_1_fu_549_p2, icmp_ln21_1_fu_515_p2, icmp_ln21_fu_730_p2, icmp_ln33_1_fu_1060_p2, ap_CS_fsm_state2, icmp_ln22_fu_760_p2, icmp_ln33_fu_638_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv1_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_455_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln21_1_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln22_1_fu_549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln33_fu_638_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln21_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln22_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln25_fu_784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln26_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln33_1_fu_1060_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_461_p2 <= std_logic_vector(unsigned(n2_fu_132) + unsigned(ap_const_lv6_1));
    add_ln21_1_fu_521_p2 <= std_logic_vector(unsigned(h_3_reg_232) + unsigned(ap_const_lv8_1));
    add_ln21_fu_736_p2 <= std_logic_vector(unsigned(h_fu_136) + unsigned(ap_const_lv8_1));
    add_ln22_1_fu_555_p2 <= std_logic_vector(unsigned(w_2_reg_243) + unsigned(ap_const_lv8_1));
    add_ln22_fu_766_p2 <= std_logic_vector(unsigned(w_reg_275) + unsigned(ap_const_lv8_1));
    add_ln25_fu_790_p2 <= std_logic_vector(unsigned(f3h_reg_286) + unsigned(ap_const_lv3_1));
    add_ln26_fu_869_p2 <= std_logic_vector(unsigned(f3w_reg_307) + unsigned(ap_const_lv3_1));
    add_ln30_1_fu_885_p2 <= std_logic_vector(signed(sext_ln30_fu_881_p1) + signed(zext_ln22_reg_1220));
    add_ln30_fu_875_p2 <= std_logic_vector(unsigned(f3w_reg_307) + unsigned(ap_const_lv3_6));
    add_ln33_1_fu_1066_p2 <= std_logic_vector(unsigned(n2_1_reg_330) + unsigned(ap_const_lv6_1));
    add_ln33_fu_644_p2 <= std_logic_vector(unsigned(n1_reg_254) + unsigned(ap_const_lv7_1));
    add_ln34_1_fu_591_p2 <= std_logic_vector(signed(sext_ln34_1_fu_587_p1) + signed(h_2_cast11_reg_1128));
    add_ln34_2_fu_618_p2 <= std_logic_vector(unsigned(sub_ln34_2_fu_612_p2) + unsigned(w_2_cast12_reg_1146));
    add_ln34_3_fu_628_p2 <= std_logic_vector(unsigned(tmp_4_reg_1093) + unsigned(zext_ln34_3_fu_561_p1));
    add_ln34_4_fu_968_p2 <= std_logic_vector(signed(sext_ln34_3_fu_964_p1) + signed(sext_ln26_reg_1251));
    add_ln34_5_fu_995_p2 <= std_logic_vector(unsigned(sub_ln34_4_fu_989_p2) + unsigned(sext_ln33_reg_1269));
    add_ln34_6_fu_1017_p2 <= std_logic_vector(unsigned(zext_ln34_12_fu_1013_p1) + unsigned(zext_ln34_8_fu_938_p1));
    add_ln34_7_fu_1023_p2 <= std_logic_vector(unsigned(add_ln34_6_fu_1017_p2) + unsigned(zext_ln25_reg_1238));
    add_ln34_8_fu_1044_p2 <= std_logic_vector(unsigned(p_shl5_fu_1036_p3) + unsigned(zext_ln34_13_fu_1028_p1));
    add_ln34_9_fu_1050_p2 <= std_logic_vector(unsigned(add_ln34_8_fu_1044_p2) + unsigned(zext_ln26_reg_1256));
    add_ln34_fu_746_p2 <= std_logic_vector(unsigned(sub_ln34_reg_1197) + unsigned(zext_ln34_1_fu_742_p1));
    and_ln41_fu_690_p2 <= (or_ln41_fu_684_p2 and grp_fu_377_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_conv1_fu_353_ap_done)
    begin
        if ((grp_conv1_fu_353_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state22, icmp_ln21_fu_730_p2)
    begin
        if (((icmp_ln21_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_add4227_i_phi_fu_268_p4 <= add4227_i_reg_265;

    ap_ready_assign_proc : process(ap_CS_fsm_state22, icmp_ln21_fu_730_p2)
    begin
        if (((icmp_ln21_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_1_fu_650_p1 <= conv2_weights_load_reg_1182;
    bitcast_ln34_2_fu_1072_p1 <= conv3_weights_load_reg_1292;
    bitcast_ln34_fu_776_p1 <= output_ftmap_q0;
    bitcast_ln41_fu_654_p1 <= reg_399;
    conv1_biases_address0 <= grp_conv1_fu_353_conv1_biases_address0;
    conv1_biases_ce0 <= grp_conv1_fu_353_conv1_biases_ce0;

    conv1_output_ftmap_address0_assign_proc : process(ap_CS_fsm_state8, grp_conv1_fu_353_conv1_output_ftmap_address0, ap_CS_fsm_state2, zext_ln34_6_fu_623_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_output_ftmap_address0 <= zext_ln34_6_fu_623_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_output_ftmap_address0 <= grp_conv1_fu_353_conv1_output_ftmap_address0;
        else 
            conv1_output_ftmap_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state8, grp_conv1_fu_353_conv1_output_ftmap_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_output_ftmap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_output_ftmap_ce0 <= grp_conv1_fu_353_conv1_output_ftmap_ce0;
        else 
            conv1_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ftmap_we0_assign_proc : process(grp_conv1_fu_353_conv1_output_ftmap_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_output_ftmap_we0 <= grp_conv1_fu_353_conv1_output_ftmap_we0;
        else 
            conv1_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_weights_address0 <= grp_conv1_fu_353_conv1_weights_address0;
    conv1_weights_ce0 <= grp_conv1_fu_353_conv1_weights_ce0;
    conv2_biases_address0 <= zext_ln17_fu_416_p1(5 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_ftmap_address0_assign_proc : process(ap_CS_fsm_state6, conv2_output_ftmap_addr_reg_1151, ap_CS_fsm_state27, ap_CS_fsm_state21, p_cast19_fu_544_p1, zext_ln34_11_fu_1000_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv2_output_ftmap_address0 <= zext_ln34_11_fu_1000_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv2_output_ftmap_address0 <= conv2_output_ftmap_addr_reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_output_ftmap_address0 <= p_cast19_fu_544_p1(21 - 1 downto 0);
        else 
            conv2_output_ftmap_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state27, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv2_output_ftmap_ce0 <= ap_const_logic_1;
        else 
            conv2_output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_output_ftmap_d0 <= 
        ap_const_lv32_0 when (and_ln41_fu_690_p2(0) = '1') else 
        reg_399;

    conv2_output_ftmap_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv2_output_ftmap_we0 <= ap_const_logic_1;
        else 
            conv2_output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weights_address0 <= zext_ln34_7_fu_633_p1(11 - 1 downto 0);

    conv2_weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_weights_address0 <= zext_ln34_14_fu_1055_p1(10 - 1 downto 0);

    conv3_weights_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv3_weights_ce0 <= ap_const_logic_1;
        else 
            conv3_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_23_fu_476_p1 <= conv2_biases_q0;
    empty_24_fu_488_p2 <= std_logic_vector(signed(sext_ln34_reg_1088) + signed(h_2_cast_fu_484_p1));
    empty_25_fu_497_p1 <= empty_24_fu_488_p2(13 - 1 downto 0);
    empty_26_fu_509_p2 <= std_logic_vector(unsigned(p_shl1_fu_501_p3) - unsigned(p_cast10_fu_493_p1));
    empty_27_fu_539_p2 <= std_logic_vector(unsigned(empty_26_reg_1133) + unsigned(w_2_cast_fu_535_p1));
    empty_28_fu_467_p1 <= conv3_biases;
    empty_29_fu_806_p2 <= std_logic_vector(signed(tmp_cast_fu_802_p1) + signed(zext_ln21_reg_1202));
    empty_fu_437_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_433_p1) - unsigned(n2_cast_fu_421_p1));
    grp_conv1_fu_353_ap_start <= grp_conv1_fu_353_ap_start_reg;

    grp_fu_365_ce_assign_proc : process(grp_conv1_fu_353_grp_fu_365_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_365_ce <= grp_conv1_fu_353_grp_fu_365_p_ce;
        else 
            grp_fu_365_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state25, grp_conv1_fu_353_grp_fu_365_p_din0, ap_phi_mux_add4227_i_phi_fu_268_p4, add4227_i_reg_265, add42_lcssa_lcssa21_i_reg_297, empty_30_reg_341, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_365_p0 <= grp_conv1_fu_353_grp_fu_365_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_365_p0 <= empty_30_reg_341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_365_p0 <= add42_lcssa_lcssa21_i_reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_365_p0 <= add4227_i_reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_365_p0 <= ap_phi_mux_add4227_i_phi_fu_268_p4;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(reg_388, empty_28_reg_1118, empty_23_reg_1123, ap_CS_fsm_state8, ap_CS_fsm_state25, grp_conv1_fu_353_grp_fu_365_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_365_p1 <= grp_conv1_fu_353_grp_fu_365_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_365_p1 <= empty_28_reg_1118;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_365_p1 <= reg_388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_365_p1 <= empty_23_reg_1123;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_ce_assign_proc : process(grp_conv1_fu_353_grp_fu_373_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_373_ce <= grp_conv1_fu_353_grp_fu_373_p_ce;
        else 
            grp_fu_373_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_373_p0_assign_proc : process(bitcast_ln34_1_fu_650_p1, ap_CS_fsm_state10, bitcast_ln34_2_fu_1072_p1, ap_CS_fsm_state29, grp_conv1_fu_353_grp_fu_373_p_din0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_373_p0 <= grp_conv1_fu_353_grp_fu_373_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_373_p0 <= bitcast_ln34_2_fu_1072_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_373_p0 <= bitcast_ln34_1_fu_650_p1;
        else 
            grp_fu_373_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_p1_assign_proc : process(reg_382, conv1_output_ftmap_load_reg_1187, ap_CS_fsm_state10, ap_CS_fsm_state29, grp_conv1_fu_353_grp_fu_373_p_din1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_373_p1 <= grp_conv1_fu_353_grp_fu_373_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_373_p1 <= reg_382;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_373_p1 <= conv1_output_ftmap_load_reg_1187;
        else 
            grp_fu_373_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_ce_assign_proc : process(grp_conv1_fu_353_grp_fu_377_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_377_ce <= grp_conv1_fu_353_grp_fu_377_p_ce;
        else 
            grp_fu_377_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_377_opcode_assign_proc : process(grp_conv1_fu_353_grp_fu_377_p_opcode, ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_377_opcode <= grp_conv1_fu_353_grp_fu_377_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_377_opcode <= ap_const_lv5_4;
        else 
            grp_fu_377_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(reg_399, grp_conv1_fu_353_grp_fu_377_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_377_p0 <= grp_conv1_fu_353_grp_fu_377_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_377_p0 <= reg_399;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(grp_conv1_fu_353_grp_fu_377_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_377_p1 <= grp_conv1_fu_353_grp_fu_377_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_377_p1 <= ap_const_lv32_0;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_2_cast11_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_3_reg_232),17));
    h_2_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_3_reg_232),16));
    icmp_ln17_fu_455_p2 <= "1" when (n2_fu_132 = ap_const_lv6_20) else "0";
    icmp_ln21_1_fu_515_p2 <= "1" when (h_3_reg_232 = ap_const_lv8_FF) else "0";
    icmp_ln21_fu_730_p2 <= "1" when (h_fu_136 = ap_const_lv8_FF) else "0";
    icmp_ln22_1_fu_549_p2 <= "1" when (w_2_reg_243 = ap_const_lv8_FF) else "0";
    icmp_ln22_fu_760_p2 <= "1" when (w_reg_275 = ap_const_lv8_FF) else "0";
    icmp_ln25_fu_784_p2 <= "1" when (f3h_reg_286 = ap_const_lv3_5) else "0";
    icmp_ln26_fu_863_p2 <= "1" when (f3w_reg_307 = ap_const_lv3_5) else "0";
    icmp_ln33_1_fu_1060_p2 <= "1" when (n2_1_reg_330 = ap_const_lv6_20) else "0";
    icmp_ln33_fu_638_p2 <= "1" when (n1_reg_254 = ap_const_lv7_40) else "0";
    icmp_ln41_1_fu_678_p2 <= "1" when (trunc_ln41_fu_668_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_672_p2 <= "0" when (tmp_1_fu_658_p4 = ap_const_lv8_FF) else "1";
    icmp_ln84_1_fu_898_p2 <= "1" when (signed(add_ln30_1_fu_885_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln84_fu_819_p2 <= "1" when (signed(empty_29_fu_806_p2) > signed(ap_const_lv10_FE)) else "0";
    input_ftmap_address0 <= grp_conv1_fu_353_input_ftmap_address0;
    input_ftmap_ce0 <= grp_conv1_fu_353_input_ftmap_ce0;
    n2_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_132),15));
    or_ln41_fu_684_p2 <= (icmp_ln41_fu_672_p2 or icmp_ln41_1_fu_678_p2);
    or_ln83_1_fu_920_p2 <= (tmp_10_fu_890_p3 or icmp_ln84_1_fu_898_p2);
    or_ln83_fu_841_p2 <= (tmp_6_fu_811_p3 or icmp_ln84_fu_819_p2);

    output_ftmap_address0_assign_proc : process(output_ftmap_addr_reg_1215, ap_CS_fsm_state23, ap_CS_fsm_state39, zext_ln34_2_fu_751_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_ftmap_address0 <= output_ftmap_addr_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_ftmap_address0 <= zext_ln34_2_fu_751_p1(16 - 1 downto 0);
        else 
            output_ftmap_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            output_ftmap_ce0 <= ap_const_logic_1;
        else 
            output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_ftmap_d0 <= reg_399;

    output_ftmap_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_ftmap_we0 <= ap_const_logic_1;
        else 
            output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast10_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_24_fu_488_p2),21));

    p_cast19_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_fu_539_p2),64));
    p_shl1_fu_501_p3 <= (empty_25_fu_497_p1 & ap_const_lv8_0);
    p_shl2_fu_604_p3 <= (trunc_ln34_fu_600_p1 & ap_const_lv8_0);
    p_shl5_fu_1036_p3 <= (trunc_ln34_2_fu_1032_p1 & ap_const_lv2_0);
    p_shl7_fu_981_p3 <= (trunc_ln34_1_fu_977_p1 & ap_const_lv8_0);
    select_ln83_2_fu_912_p3 <= 
        ap_const_lv10_0 when (tmp_12_fu_904_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln83_fu_833_p3 <= 
        ap_const_lv10_0 when (tmp_8_fu_825_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln26_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(yPixelClamped_1_fu_847_p3),16));

        sext_ln30_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_fu_875_p2),10));

        sext_ln33_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xPixelClamped_1_fu_926_p3),21));

        sext_ln34_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln34_1_fu_581_p2),17));

        sext_ln34_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_fu_591_p2),22));

        sext_ln34_3_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln34_3_fu_958_p2),16));

        sext_ln34_4_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_4_fu_968_p2),21));

        sext_ln34_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_437_p2),16));

    sub_ln34_1_fu_581_p2 <= std_logic_vector(unsigned(zext_ln34_5_fu_577_p1) - unsigned(zext_ln34_4_fu_565_p1));
    sub_ln34_2_fu_612_p2 <= std_logic_vector(unsigned(p_shl2_fu_604_p3) - unsigned(sext_ln34_2_fu_596_p1));
    sub_ln34_3_fu_958_p2 <= std_logic_vector(unsigned(zext_ln34_10_fu_954_p1) - unsigned(zext_ln34_9_fu_942_p1));
    sub_ln34_4_fu_989_p2 <= std_logic_vector(unsigned(p_shl7_fu_981_p3) - unsigned(sext_ln34_4_fu_973_p1));
    sub_ln34_fu_720_p2 <= std_logic_vector(unsigned(tmp_5_fu_712_p3) - unsigned(zext_ln34_fu_708_p1));
    tmp_10_fu_890_p3 <= add_ln30_1_fu_885_p2(9 downto 9);
    tmp_12_fu_904_p3 <= add_ln30_1_fu_885_p2(9 downto 9);
    tmp_1_fu_658_p4 <= bitcast_ln41_fu_654_p1(30 downto 23);
    tmp_3_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_425_p3),15));
    tmp_3_fu_425_p3 <= (n2_fu_132 & ap_const_lv8_0);
    tmp_4_fu_447_p3 <= (trunc_ln17_fu_412_p1 & ap_const_lv6_0);
    tmp_5_fu_712_p3 <= (h_fu_136 & ap_const_lv8_0);
    tmp_6_fu_811_p3 <= empty_29_fu_806_p2(9 downto 9);
    tmp_7_fu_569_p3 <= (n1_reg_254 & ap_const_lv8_0);
    tmp_8_fu_825_p3 <= empty_29_fu_806_p2(9 downto 9);
    tmp_9_fu_946_p3 <= (n2_1_reg_330 & ap_const_lv8_0);
        tmp_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_796_p2),10));

    tmp_fu_796_p2 <= std_logic_vector(unsigned(f3h_reg_286) + unsigned(ap_const_lv3_6));
    tmp_s_fu_1005_p3 <= (n2_1_reg_330 & ap_const_lv2_0);
    trunc_ln17_fu_412_p1 <= n2_fu_132(5 - 1 downto 0);
    trunc_ln34_1_fu_977_p1 <= add_ln34_4_fu_968_p2(13 - 1 downto 0);
    trunc_ln34_2_fu_1032_p1 <= add_ln34_7_fu_1023_p2(8 - 1 downto 0);
    trunc_ln34_fu_600_p1 <= add_ln34_1_fu_591_p2(14 - 1 downto 0);
    trunc_ln41_fu_668_p1 <= bitcast_ln41_fu_654_p1(23 - 1 downto 0);
    w_2_cast12_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_2_reg_243),22));
    w_2_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_2_reg_243),21));
    xPixelClamped_1_fu_926_p3 <= 
        select_ln83_2_fu_912_p3 when (or_ln83_1_fu_920_p2(0) = '1') else 
        add_ln30_1_fu_885_p2;
    yPixelClamped_1_fu_847_p3 <= 
        select_ln83_fu_833_p3 when (or_ln83_fu_841_p2(0) = '1') else 
        empty_29_fu_806_p2;
    zext_ln17_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_132),64));
    zext_ln21_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_136),10));
    zext_ln22_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_275),10));
    zext_ln25_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f3h_reg_286),9));
    zext_ln26_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f3w_reg_307),10));
    zext_ln34_10_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_946_p3),15));
    zext_ln34_11_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_5_fu_995_p2),64));
    zext_ln34_12_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1005_p3),9));
    zext_ln34_13_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_7_fu_1023_p2),10));
    zext_ln34_14_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_9_fu_1050_p2),64));
    zext_ln34_1_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_275),16));
    zext_ln34_2_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_746_p2),64));
    zext_ln34_3_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_reg_254),11));
    zext_ln34_4_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_reg_254),16));
    zext_ln34_5_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_569_p3),16));
    zext_ln34_6_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_2_fu_618_p2),64));
    zext_ln34_7_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_3_fu_628_p2),64));
    zext_ln34_8_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_330),9));
    zext_ln34_9_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_330),15));
    zext_ln34_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_136),16));
end behav;
