-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
generic (
    C_M_AXI_BUNDLE_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUNDLE_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUNDLE_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_WEIGHTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_WEIGHTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BIASES_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BIASES_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIASES_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUNDLE_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUNDLE_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUNDLE_2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BIASES_USER_VALUE : INTEGER := 0;
    C_M_AXI_BIASES_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BIASES_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUNDLE_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUNDLE_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUNDLE_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUNDLE_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUNDLE_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUNDLE_2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WEIGHTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_bundle_1_AWVALID : OUT STD_LOGIC;
    m_axi_bundle_1_AWREADY : IN STD_LOGIC;
    m_axi_bundle_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ADDR_WIDTH-1 downto 0);
    m_axi_bundle_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ID_WIDTH-1 downto 0);
    m_axi_bundle_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bundle_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_AWUSER_WIDTH-1 downto 0);
    m_axi_bundle_1_WVALID : OUT STD_LOGIC;
    m_axi_bundle_1_WREADY : IN STD_LOGIC;
    m_axi_bundle_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_DATA_WIDTH-1 downto 0);
    m_axi_bundle_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_DATA_WIDTH/8-1 downto 0);
    m_axi_bundle_1_WLAST : OUT STD_LOGIC;
    m_axi_bundle_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ID_WIDTH-1 downto 0);
    m_axi_bundle_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_WUSER_WIDTH-1 downto 0);
    m_axi_bundle_1_ARVALID : OUT STD_LOGIC;
    m_axi_bundle_1_ARREADY : IN STD_LOGIC;
    m_axi_bundle_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ADDR_WIDTH-1 downto 0);
    m_axi_bundle_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ID_WIDTH-1 downto 0);
    m_axi_bundle_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bundle_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ARUSER_WIDTH-1 downto 0);
    m_axi_bundle_1_RVALID : IN STD_LOGIC;
    m_axi_bundle_1_RREADY : OUT STD_LOGIC;
    m_axi_bundle_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_DATA_WIDTH-1 downto 0);
    m_axi_bundle_1_RLAST : IN STD_LOGIC;
    m_axi_bundle_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ID_WIDTH-1 downto 0);
    m_axi_bundle_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_RUSER_WIDTH-1 downto 0);
    m_axi_bundle_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_BVALID : IN STD_LOGIC;
    m_axi_bundle_1_BREADY : OUT STD_LOGIC;
    m_axi_bundle_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_ID_WIDTH-1 downto 0);
    m_axi_bundle_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_1_BUSER_WIDTH-1 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_AWUSER_WIDTH-1 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH/8-1 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_WUSER_WIDTH-1 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ARUSER_WIDTH-1 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_RUSER_WIDTH-1 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_BUSER_WIDTH-1 downto 0);
    m_axi_biases_AWVALID : OUT STD_LOGIC;
    m_axi_biases_AWREADY : IN STD_LOGIC;
    m_axi_biases_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ADDR_WIDTH-1 downto 0);
    m_axi_biases_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ID_WIDTH-1 downto 0);
    m_axi_biases_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_biases_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_biases_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_biases_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_AWUSER_WIDTH-1 downto 0);
    m_axi_biases_WVALID : OUT STD_LOGIC;
    m_axi_biases_WREADY : IN STD_LOGIC;
    m_axi_biases_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_DATA_WIDTH-1 downto 0);
    m_axi_biases_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_DATA_WIDTH/8-1 downto 0);
    m_axi_biases_WLAST : OUT STD_LOGIC;
    m_axi_biases_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ID_WIDTH-1 downto 0);
    m_axi_biases_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_WUSER_WIDTH-1 downto 0);
    m_axi_biases_ARVALID : OUT STD_LOGIC;
    m_axi_biases_ARREADY : IN STD_LOGIC;
    m_axi_biases_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ADDR_WIDTH-1 downto 0);
    m_axi_biases_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ID_WIDTH-1 downto 0);
    m_axi_biases_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_biases_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_biases_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_biases_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_biases_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIASES_ARUSER_WIDTH-1 downto 0);
    m_axi_biases_RVALID : IN STD_LOGIC;
    m_axi_biases_RREADY : OUT STD_LOGIC;
    m_axi_biases_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BIASES_DATA_WIDTH-1 downto 0);
    m_axi_biases_RLAST : IN STD_LOGIC;
    m_axi_biases_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BIASES_ID_WIDTH-1 downto 0);
    m_axi_biases_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BIASES_RUSER_WIDTH-1 downto 0);
    m_axi_biases_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_BVALID : IN STD_LOGIC;
    m_axi_biases_BREADY : OUT STD_LOGIC;
    m_axi_biases_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_biases_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BIASES_ID_WIDTH-1 downto 0);
    m_axi_biases_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BIASES_BUSER_WIDTH-1 downto 0);
    m_axi_bundle_2_AWVALID : OUT STD_LOGIC;
    m_axi_bundle_2_AWREADY : IN STD_LOGIC;
    m_axi_bundle_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ADDR_WIDTH-1 downto 0);
    m_axi_bundle_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ID_WIDTH-1 downto 0);
    m_axi_bundle_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bundle_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_AWUSER_WIDTH-1 downto 0);
    m_axi_bundle_2_WVALID : OUT STD_LOGIC;
    m_axi_bundle_2_WREADY : IN STD_LOGIC;
    m_axi_bundle_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_DATA_WIDTH-1 downto 0);
    m_axi_bundle_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_DATA_WIDTH/8-1 downto 0);
    m_axi_bundle_2_WLAST : OUT STD_LOGIC;
    m_axi_bundle_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ID_WIDTH-1 downto 0);
    m_axi_bundle_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_WUSER_WIDTH-1 downto 0);
    m_axi_bundle_2_ARVALID : OUT STD_LOGIC;
    m_axi_bundle_2_ARREADY : IN STD_LOGIC;
    m_axi_bundle_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ADDR_WIDTH-1 downto 0);
    m_axi_bundle_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ID_WIDTH-1 downto 0);
    m_axi_bundle_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bundle_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bundle_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bundle_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ARUSER_WIDTH-1 downto 0);
    m_axi_bundle_2_RVALID : IN STD_LOGIC;
    m_axi_bundle_2_RREADY : OUT STD_LOGIC;
    m_axi_bundle_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_DATA_WIDTH-1 downto 0);
    m_axi_bundle_2_RLAST : IN STD_LOGIC;
    m_axi_bundle_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ID_WIDTH-1 downto 0);
    m_axi_bundle_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_RUSER_WIDTH-1 downto 0);
    m_axi_bundle_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_BVALID : IN STD_LOGIC;
    m_axi_bundle_2_BREADY : OUT STD_LOGIC;
    m_axi_bundle_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bundle_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_ID_WIDTH-1 downto 0);
    m_axi_bundle_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUNDLE_2_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck24-ubva530-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.704800,HLS_SYN_LAT=349841180,HLS_SYN_TPT=none,HLS_SYN_MEM=356,HLS_SYN_DSP=0,HLS_SYN_FF=38462,HLS_SYN_LUT=69051,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_weights : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_biases : STD_LOGIC_VECTOR (63 downto 0);
    signal output_ftmap : STD_LOGIC_VECTOR (63 downto 0);
    signal biases_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal biases_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal output_ftmap_read_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_weights_read_reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_output_ftmap_read_reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_biases_read_reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_weights_read_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_output_ftmap_read_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_biases_read_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_weights_read_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_ftmap_read_reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal biases_addr_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_ap_start : STD_LOGIC;
    signal grp_conv1_fu_264_ap_done : STD_LOGIC;
    signal grp_conv1_fu_264_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_264_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_WVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_WLAST : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_1_RREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_1_BREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_WVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_WLAST : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_biases_RREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_biases_BREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_WVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_WLAST : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_264_m_axi_bundle_2_RREADY : STD_LOGIC;
    signal grp_conv1_fu_264_m_axi_bundle_2_BREADY : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_481_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_481_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_481_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_grp_fu_481_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_485_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_485_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_485_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_grp_fu_485_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_489_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_489_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_489_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_grp_fu_489_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_493_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_493_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_493_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_264_grp_fu_493_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_497_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_497_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_497_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_501_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_501_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_501_p_ce : STD_LOGIC;
    signal grp_conv1_fu_264_grp_fu_505_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_505_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_264_grp_fu_505_p_ce : STD_LOGIC;
    signal grp_conv2_fu_300_ap_start : STD_LOGIC;
    signal grp_conv2_fu_300_ap_done : STD_LOGIC;
    signal grp_conv2_fu_300_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_300_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_WVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_WLAST : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_2_RREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_2_BREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_WVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_WLAST : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_biases_RREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_biases_BREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_WVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_WLAST : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_300_m_axi_bundle_1_RREADY : STD_LOGIC;
    signal grp_conv2_fu_300_m_axi_bundle_1_BREADY : STD_LOGIC;
    signal grp_conv2_fu_300_grp_fu_481_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_481_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_481_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_300_grp_fu_481_p_ce : STD_LOGIC;
    signal grp_conv2_fu_300_grp_fu_497_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_497_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_497_p_ce : STD_LOGIC;
    signal grp_conv2_fu_300_grp_fu_509_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_509_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_300_grp_fu_509_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_fu_300_grp_fu_509_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_ap_start : STD_LOGIC;
    signal grp_conv3_fu_330_ap_done : STD_LOGIC;
    signal grp_conv3_fu_330_ap_idle : STD_LOGIC;
    signal grp_conv3_fu_330_ap_ready : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_AWVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_WVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_WLAST : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_1_RREADY : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_1_BREADY : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_AWVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_WVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_WLAST : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARVALID : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv3_fu_330_m_axi_bundle_2_RREADY : STD_LOGIC;
    signal grp_conv3_fu_330_m_axi_bundle_2_BREADY : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_481_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_481_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_481_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_grp_fu_481_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_485_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_485_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_485_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_grp_fu_485_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_489_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_489_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_489_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_grp_fu_489_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_493_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_493_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_493_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_330_grp_fu_493_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_497_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_497_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_497_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_501_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_501_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_501_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_505_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_505_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_505_p_ce : STD_LOGIC;
    signal grp_conv3_fu_330_grp_fu_509_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_509_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_330_grp_fu_509_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv3_fu_330_grp_fu_509_p_ce : STD_LOGIC;
    signal biases_AWREADY : STD_LOGIC;
    signal biases_WREADY : STD_LOGIC;
    signal biases_ARVALID : STD_LOGIC;
    signal biases_ARREADY : STD_LOGIC;
    signal biases_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal biases_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal biases_RVALID : STD_LOGIC;
    signal biases_RREADY : STD_LOGIC;
    signal biases_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal biases_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal biases_BVALID : STD_LOGIC;
    signal bundle_1_AWVALID : STD_LOGIC;
    signal bundle_1_AWREADY : STD_LOGIC;
    signal bundle_1_WVALID : STD_LOGIC;
    signal bundle_1_WREADY : STD_LOGIC;
    signal bundle_1_ARVALID : STD_LOGIC;
    signal bundle_1_ARREADY : STD_LOGIC;
    signal bundle_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal bundle_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bundle_1_RVALID : STD_LOGIC;
    signal bundle_1_RREADY : STD_LOGIC;
    signal bundle_1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bundle_1_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal bundle_1_BVALID : STD_LOGIC;
    signal bundle_1_BREADY : STD_LOGIC;
    signal bundle_2_AWVALID : STD_LOGIC;
    signal bundle_2_AWREADY : STD_LOGIC;
    signal bundle_2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal bundle_2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bundle_2_WVALID : STD_LOGIC;
    signal bundle_2_WREADY : STD_LOGIC;
    signal bundle_2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bundle_2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal bundle_2_ARVALID : STD_LOGIC;
    signal bundle_2_ARREADY : STD_LOGIC;
    signal bundle_2_RVALID : STD_LOGIC;
    signal bundle_2_RREADY : STD_LOGIC;
    signal bundle_2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bundle_2_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal bundle_2_BVALID : STD_LOGIC;
    signal bundle_2_BREADY : STD_LOGIC;
    signal weights_AWREADY : STD_LOGIC;
    signal weights_WREADY : STD_LOGIC;
    signal weights_ARVALID : STD_LOGIC;
    signal weights_ARREADY : STD_LOGIC;
    signal weights_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_RVALID : STD_LOGIC;
    signal weights_RREADY : STD_LOGIC;
    signal weights_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_BVALID : STD_LOGIC;
    signal grp_conv1_fu_264_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_conv2_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_conv3_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_cast_cast_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_398_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_ce : STD_LOGIC;
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_485_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_485_ce : STD_LOGIC;
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_ce : STD_LOGIC;
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_ce : STD_LOGIC;
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_497_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_497_ce : STD_LOGIC;
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_501_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_501_ce : STD_LOGIC;
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_ce : STD_LOGIC;
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_509_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_509_ce : STD_LOGIC;
    signal grp_fu_509_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bundle_1_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_1_AWREADY : IN STD_LOGIC;
        m_axi_bundle_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WVALID : OUT STD_LOGIC;
        m_axi_bundle_1_WREADY : IN STD_LOGIC;
        m_axi_bundle_1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_WLAST : OUT STD_LOGIC;
        m_axi_bundle_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_1_ARREADY : IN STD_LOGIC;
        m_axi_bundle_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RVALID : IN STD_LOGIC;
        m_axi_bundle_1_RREADY : OUT STD_LOGIC;
        m_axi_bundle_1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_RLAST : IN STD_LOGIC;
        m_axi_bundle_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BVALID : IN STD_LOGIC;
        m_axi_bundle_1_BREADY : OUT STD_LOGIC;
        m_axi_bundle_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv1_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_AWVALID : OUT STD_LOGIC;
        m_axi_biases_AWREADY : IN STD_LOGIC;
        m_axi_biases_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_WVALID : OUT STD_LOGIC;
        m_axi_biases_WREADY : IN STD_LOGIC;
        m_axi_biases_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_WLAST : OUT STD_LOGIC;
        m_axi_biases_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_ARVALID : OUT STD_LOGIC;
        m_axi_biases_ARREADY : IN STD_LOGIC;
        m_axi_biases_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RVALID : IN STD_LOGIC;
        m_axi_biases_RREADY : OUT STD_LOGIC;
        m_axi_biases_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_RLAST : IN STD_LOGIC;
        m_axi_biases_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_biases_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_BVALID : IN STD_LOGIC;
        m_axi_biases_BREADY : OUT STD_LOGIC;
        m_axi_biases_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv1_biases : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_2_AWREADY : IN STD_LOGIC;
        m_axi_bundle_2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WVALID : OUT STD_LOGIC;
        m_axi_bundle_2_WREADY : IN STD_LOGIC;
        m_axi_bundle_2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_WLAST : OUT STD_LOGIC;
        m_axi_bundle_2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_2_ARREADY : IN STD_LOGIC;
        m_axi_bundle_2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RVALID : IN STD_LOGIC;
        m_axi_bundle_2_RREADY : OUT STD_LOGIC;
        m_axi_bundle_2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_RLAST : IN STD_LOGIC;
        m_axi_bundle_2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BVALID : IN STD_LOGIC;
        m_axi_bundle_2_BREADY : OUT STD_LOGIC;
        m_axi_bundle_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_481_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_481_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_ce : OUT STD_LOGIC;
        grp_fu_485_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_485_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_ce : OUT STD_LOGIC;
        grp_fu_489_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_489_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_ce : OUT STD_LOGIC;
        grp_fu_493_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_493_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_ce : OUT STD_LOGIC;
        grp_fu_497_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_ce : OUT STD_LOGIC;
        grp_fu_501_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_ce : OUT STD_LOGIC;
        grp_fu_505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bundle_2_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_2_AWREADY : IN STD_LOGIC;
        m_axi_bundle_2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WVALID : OUT STD_LOGIC;
        m_axi_bundle_2_WREADY : IN STD_LOGIC;
        m_axi_bundle_2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_WLAST : OUT STD_LOGIC;
        m_axi_bundle_2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_2_ARREADY : IN STD_LOGIC;
        m_axi_bundle_2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RVALID : IN STD_LOGIC;
        m_axi_bundle_2_RREADY : OUT STD_LOGIC;
        m_axi_bundle_2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_RLAST : IN STD_LOGIC;
        m_axi_bundle_2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BVALID : IN STD_LOGIC;
        m_axi_bundle_2_BREADY : OUT STD_LOGIC;
        m_axi_bundle_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv2_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_AWVALID : OUT STD_LOGIC;
        m_axi_biases_AWREADY : IN STD_LOGIC;
        m_axi_biases_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_WVALID : OUT STD_LOGIC;
        m_axi_biases_WREADY : IN STD_LOGIC;
        m_axi_biases_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_WLAST : OUT STD_LOGIC;
        m_axi_biases_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_ARVALID : OUT STD_LOGIC;
        m_axi_biases_ARREADY : IN STD_LOGIC;
        m_axi_biases_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_biases_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_biases_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_biases_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RVALID : IN STD_LOGIC;
        m_axi_biases_RREADY : OUT STD_LOGIC;
        m_axi_biases_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_biases_RLAST : IN STD_LOGIC;
        m_axi_biases_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_biases_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_BVALID : IN STD_LOGIC;
        m_axi_biases_BREADY : OUT STD_LOGIC;
        m_axi_biases_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_biases_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_biases_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv2_biases : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_1_AWREADY : IN STD_LOGIC;
        m_axi_bundle_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WVALID : OUT STD_LOGIC;
        m_axi_bundle_1_WREADY : IN STD_LOGIC;
        m_axi_bundle_1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_WLAST : OUT STD_LOGIC;
        m_axi_bundle_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_1_ARREADY : IN STD_LOGIC;
        m_axi_bundle_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RVALID : IN STD_LOGIC;
        m_axi_bundle_1_RREADY : OUT STD_LOGIC;
        m_axi_bundle_1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_RLAST : IN STD_LOGIC;
        m_axi_bundle_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BVALID : IN STD_LOGIC;
        m_axi_bundle_1_BREADY : OUT STD_LOGIC;
        m_axi_bundle_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_481_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_481_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_ce : OUT STD_LOGIC;
        grp_fu_497_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_ce : OUT STD_LOGIC;
        grp_fu_509_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_509_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_509_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_509_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_509_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bundle_1_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_1_AWREADY : IN STD_LOGIC;
        m_axi_bundle_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WVALID : OUT STD_LOGIC;
        m_axi_bundle_1_WREADY : IN STD_LOGIC;
        m_axi_bundle_1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_WLAST : OUT STD_LOGIC;
        m_axi_bundle_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_1_ARREADY : IN STD_LOGIC;
        m_axi_bundle_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RVALID : IN STD_LOGIC;
        m_axi_bundle_1_RREADY : OUT STD_LOGIC;
        m_axi_bundle_1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_1_RLAST : IN STD_LOGIC;
        m_axi_bundle_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BVALID : IN STD_LOGIC;
        m_axi_bundle_1_BREADY : OUT STD_LOGIC;
        m_axi_bundle_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
        conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_AWVALID : OUT STD_LOGIC;
        m_axi_bundle_2_AWREADY : IN STD_LOGIC;
        m_axi_bundle_2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WVALID : OUT STD_LOGIC;
        m_axi_bundle_2_WREADY : IN STD_LOGIC;
        m_axi_bundle_2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_WLAST : OUT STD_LOGIC;
        m_axi_bundle_2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARVALID : OUT STD_LOGIC;
        m_axi_bundle_2_ARREADY : IN STD_LOGIC;
        m_axi_bundle_2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_bundle_2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bundle_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bundle_2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RVALID : IN STD_LOGIC;
        m_axi_bundle_2_RREADY : OUT STD_LOGIC;
        m_axi_bundle_2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bundle_2_RLAST : IN STD_LOGIC;
        m_axi_bundle_2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_bundle_2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BVALID : IN STD_LOGIC;
        m_axi_bundle_2_BREADY : OUT STD_LOGIC;
        m_axi_bundle_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bundle_2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bundle_2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_481_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_481_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_481_p_ce : OUT STD_LOGIC;
        grp_fu_485_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_485_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_485_p_ce : OUT STD_LOGIC;
        grp_fu_489_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_489_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_489_p_ce : OUT STD_LOGIC;
        grp_fu_493_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_493_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_493_p_ce : OUT STD_LOGIC;
        grp_fu_497_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_497_p_ce : OUT STD_LOGIC;
        grp_fu_501_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_501_p_ce : OUT STD_LOGIC;
        grp_fu_505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_505_p_ce : OUT STD_LOGIC;
        grp_fu_509_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_509_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_509_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_509_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_509_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv1_output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv2_output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv3_weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv3_biases : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component srcnn_biases_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component srcnn_bundle_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component srcnn_bundle_2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component srcnn_weights_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_conv1_fu_264 : component srcnn_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_264_ap_start,
        ap_done => grp_conv1_fu_264_ap_done,
        ap_idle => grp_conv1_fu_264_ap_idle,
        ap_ready => grp_conv1_fu_264_ap_ready,
        m_axi_bundle_1_AWVALID => grp_conv1_fu_264_m_axi_bundle_1_AWVALID,
        m_axi_bundle_1_AWREADY => ap_const_logic_0,
        m_axi_bundle_1_AWADDR => grp_conv1_fu_264_m_axi_bundle_1_AWADDR,
        m_axi_bundle_1_AWID => grp_conv1_fu_264_m_axi_bundle_1_AWID,
        m_axi_bundle_1_AWLEN => grp_conv1_fu_264_m_axi_bundle_1_AWLEN,
        m_axi_bundle_1_AWSIZE => grp_conv1_fu_264_m_axi_bundle_1_AWSIZE,
        m_axi_bundle_1_AWBURST => grp_conv1_fu_264_m_axi_bundle_1_AWBURST,
        m_axi_bundle_1_AWLOCK => grp_conv1_fu_264_m_axi_bundle_1_AWLOCK,
        m_axi_bundle_1_AWCACHE => grp_conv1_fu_264_m_axi_bundle_1_AWCACHE,
        m_axi_bundle_1_AWPROT => grp_conv1_fu_264_m_axi_bundle_1_AWPROT,
        m_axi_bundle_1_AWQOS => grp_conv1_fu_264_m_axi_bundle_1_AWQOS,
        m_axi_bundle_1_AWREGION => grp_conv1_fu_264_m_axi_bundle_1_AWREGION,
        m_axi_bundle_1_AWUSER => grp_conv1_fu_264_m_axi_bundle_1_AWUSER,
        m_axi_bundle_1_WVALID => grp_conv1_fu_264_m_axi_bundle_1_WVALID,
        m_axi_bundle_1_WREADY => ap_const_logic_0,
        m_axi_bundle_1_WDATA => grp_conv1_fu_264_m_axi_bundle_1_WDATA,
        m_axi_bundle_1_WSTRB => grp_conv1_fu_264_m_axi_bundle_1_WSTRB,
        m_axi_bundle_1_WLAST => grp_conv1_fu_264_m_axi_bundle_1_WLAST,
        m_axi_bundle_1_WID => grp_conv1_fu_264_m_axi_bundle_1_WID,
        m_axi_bundle_1_WUSER => grp_conv1_fu_264_m_axi_bundle_1_WUSER,
        m_axi_bundle_1_ARVALID => grp_conv1_fu_264_m_axi_bundle_1_ARVALID,
        m_axi_bundle_1_ARREADY => bundle_1_ARREADY,
        m_axi_bundle_1_ARADDR => grp_conv1_fu_264_m_axi_bundle_1_ARADDR,
        m_axi_bundle_1_ARID => grp_conv1_fu_264_m_axi_bundle_1_ARID,
        m_axi_bundle_1_ARLEN => grp_conv1_fu_264_m_axi_bundle_1_ARLEN,
        m_axi_bundle_1_ARSIZE => grp_conv1_fu_264_m_axi_bundle_1_ARSIZE,
        m_axi_bundle_1_ARBURST => grp_conv1_fu_264_m_axi_bundle_1_ARBURST,
        m_axi_bundle_1_ARLOCK => grp_conv1_fu_264_m_axi_bundle_1_ARLOCK,
        m_axi_bundle_1_ARCACHE => grp_conv1_fu_264_m_axi_bundle_1_ARCACHE,
        m_axi_bundle_1_ARPROT => grp_conv1_fu_264_m_axi_bundle_1_ARPROT,
        m_axi_bundle_1_ARQOS => grp_conv1_fu_264_m_axi_bundle_1_ARQOS,
        m_axi_bundle_1_ARREGION => grp_conv1_fu_264_m_axi_bundle_1_ARREGION,
        m_axi_bundle_1_ARUSER => grp_conv1_fu_264_m_axi_bundle_1_ARUSER,
        m_axi_bundle_1_RVALID => bundle_1_RVALID,
        m_axi_bundle_1_RREADY => grp_conv1_fu_264_m_axi_bundle_1_RREADY,
        m_axi_bundle_1_RDATA => bundle_1_RDATA,
        m_axi_bundle_1_RLAST => ap_const_logic_0,
        m_axi_bundle_1_RID => ap_const_lv1_0,
        m_axi_bundle_1_RFIFONUM => bundle_1_RFIFONUM,
        m_axi_bundle_1_RUSER => ap_const_lv1_0,
        m_axi_bundle_1_RRESP => ap_const_lv2_0,
        m_axi_bundle_1_BVALID => ap_const_logic_0,
        m_axi_bundle_1_BREADY => grp_conv1_fu_264_m_axi_bundle_1_BREADY,
        m_axi_bundle_1_BRESP => ap_const_lv2_0,
        m_axi_bundle_1_BID => ap_const_lv1_0,
        m_axi_bundle_1_BUSER => ap_const_lv1_0,
        input_ftmap => input_ftmap_read_reg_465,
        m_axi_weights_AWVALID => grp_conv1_fu_264_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_conv1_fu_264_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_conv1_fu_264_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_conv1_fu_264_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_conv1_fu_264_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_conv1_fu_264_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_conv1_fu_264_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_conv1_fu_264_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_conv1_fu_264_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_conv1_fu_264_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_conv1_fu_264_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_conv1_fu_264_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_conv1_fu_264_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_conv1_fu_264_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_conv1_fu_264_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_conv1_fu_264_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_conv1_fu_264_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_conv1_fu_264_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_conv1_fu_264_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => weights_ARREADY,
        m_axi_weights_ARADDR => grp_conv1_fu_264_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_conv1_fu_264_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_conv1_fu_264_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_conv1_fu_264_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_conv1_fu_264_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_conv1_fu_264_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_conv1_fu_264_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_conv1_fu_264_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_conv1_fu_264_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_conv1_fu_264_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_conv1_fu_264_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => weights_RVALID,
        m_axi_weights_RREADY => grp_conv1_fu_264_m_axi_weights_RREADY,
        m_axi_weights_RDATA => weights_RDATA,
        m_axi_weights_RLAST => ap_const_logic_0,
        m_axi_weights_RID => ap_const_lv1_0,
        m_axi_weights_RFIFONUM => weights_RFIFONUM,
        m_axi_weights_RUSER => ap_const_lv1_0,
        m_axi_weights_RRESP => ap_const_lv2_0,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_conv1_fu_264_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        conv1_weights => conv1_weights_read_reg_460,
        m_axi_biases_AWVALID => grp_conv1_fu_264_m_axi_biases_AWVALID,
        m_axi_biases_AWREADY => ap_const_logic_0,
        m_axi_biases_AWADDR => grp_conv1_fu_264_m_axi_biases_AWADDR,
        m_axi_biases_AWID => grp_conv1_fu_264_m_axi_biases_AWID,
        m_axi_biases_AWLEN => grp_conv1_fu_264_m_axi_biases_AWLEN,
        m_axi_biases_AWSIZE => grp_conv1_fu_264_m_axi_biases_AWSIZE,
        m_axi_biases_AWBURST => grp_conv1_fu_264_m_axi_biases_AWBURST,
        m_axi_biases_AWLOCK => grp_conv1_fu_264_m_axi_biases_AWLOCK,
        m_axi_biases_AWCACHE => grp_conv1_fu_264_m_axi_biases_AWCACHE,
        m_axi_biases_AWPROT => grp_conv1_fu_264_m_axi_biases_AWPROT,
        m_axi_biases_AWQOS => grp_conv1_fu_264_m_axi_biases_AWQOS,
        m_axi_biases_AWREGION => grp_conv1_fu_264_m_axi_biases_AWREGION,
        m_axi_biases_AWUSER => grp_conv1_fu_264_m_axi_biases_AWUSER,
        m_axi_biases_WVALID => grp_conv1_fu_264_m_axi_biases_WVALID,
        m_axi_biases_WREADY => ap_const_logic_0,
        m_axi_biases_WDATA => grp_conv1_fu_264_m_axi_biases_WDATA,
        m_axi_biases_WSTRB => grp_conv1_fu_264_m_axi_biases_WSTRB,
        m_axi_biases_WLAST => grp_conv1_fu_264_m_axi_biases_WLAST,
        m_axi_biases_WID => grp_conv1_fu_264_m_axi_biases_WID,
        m_axi_biases_WUSER => grp_conv1_fu_264_m_axi_biases_WUSER,
        m_axi_biases_ARVALID => grp_conv1_fu_264_m_axi_biases_ARVALID,
        m_axi_biases_ARREADY => biases_ARREADY,
        m_axi_biases_ARADDR => grp_conv1_fu_264_m_axi_biases_ARADDR,
        m_axi_biases_ARID => grp_conv1_fu_264_m_axi_biases_ARID,
        m_axi_biases_ARLEN => grp_conv1_fu_264_m_axi_biases_ARLEN,
        m_axi_biases_ARSIZE => grp_conv1_fu_264_m_axi_biases_ARSIZE,
        m_axi_biases_ARBURST => grp_conv1_fu_264_m_axi_biases_ARBURST,
        m_axi_biases_ARLOCK => grp_conv1_fu_264_m_axi_biases_ARLOCK,
        m_axi_biases_ARCACHE => grp_conv1_fu_264_m_axi_biases_ARCACHE,
        m_axi_biases_ARPROT => grp_conv1_fu_264_m_axi_biases_ARPROT,
        m_axi_biases_ARQOS => grp_conv1_fu_264_m_axi_biases_ARQOS,
        m_axi_biases_ARREGION => grp_conv1_fu_264_m_axi_biases_ARREGION,
        m_axi_biases_ARUSER => grp_conv1_fu_264_m_axi_biases_ARUSER,
        m_axi_biases_RVALID => biases_RVALID,
        m_axi_biases_RREADY => grp_conv1_fu_264_m_axi_biases_RREADY,
        m_axi_biases_RDATA => biases_RDATA,
        m_axi_biases_RLAST => ap_const_logic_0,
        m_axi_biases_RID => ap_const_lv1_0,
        m_axi_biases_RFIFONUM => biases_RFIFONUM,
        m_axi_biases_RUSER => ap_const_lv1_0,
        m_axi_biases_RRESP => ap_const_lv2_0,
        m_axi_biases_BVALID => ap_const_logic_0,
        m_axi_biases_BREADY => grp_conv1_fu_264_m_axi_biases_BREADY,
        m_axi_biases_BRESP => ap_const_lv2_0,
        m_axi_biases_BID => ap_const_lv1_0,
        m_axi_biases_BUSER => ap_const_lv1_0,
        conv1_biases => conv1_biases_read_reg_455,
        m_axi_bundle_2_AWVALID => grp_conv1_fu_264_m_axi_bundle_2_AWVALID,
        m_axi_bundle_2_AWREADY => bundle_2_AWREADY,
        m_axi_bundle_2_AWADDR => grp_conv1_fu_264_m_axi_bundle_2_AWADDR,
        m_axi_bundle_2_AWID => grp_conv1_fu_264_m_axi_bundle_2_AWID,
        m_axi_bundle_2_AWLEN => grp_conv1_fu_264_m_axi_bundle_2_AWLEN,
        m_axi_bundle_2_AWSIZE => grp_conv1_fu_264_m_axi_bundle_2_AWSIZE,
        m_axi_bundle_2_AWBURST => grp_conv1_fu_264_m_axi_bundle_2_AWBURST,
        m_axi_bundle_2_AWLOCK => grp_conv1_fu_264_m_axi_bundle_2_AWLOCK,
        m_axi_bundle_2_AWCACHE => grp_conv1_fu_264_m_axi_bundle_2_AWCACHE,
        m_axi_bundle_2_AWPROT => grp_conv1_fu_264_m_axi_bundle_2_AWPROT,
        m_axi_bundle_2_AWQOS => grp_conv1_fu_264_m_axi_bundle_2_AWQOS,
        m_axi_bundle_2_AWREGION => grp_conv1_fu_264_m_axi_bundle_2_AWREGION,
        m_axi_bundle_2_AWUSER => grp_conv1_fu_264_m_axi_bundle_2_AWUSER,
        m_axi_bundle_2_WVALID => grp_conv1_fu_264_m_axi_bundle_2_WVALID,
        m_axi_bundle_2_WREADY => bundle_2_WREADY,
        m_axi_bundle_2_WDATA => grp_conv1_fu_264_m_axi_bundle_2_WDATA,
        m_axi_bundle_2_WSTRB => grp_conv1_fu_264_m_axi_bundle_2_WSTRB,
        m_axi_bundle_2_WLAST => grp_conv1_fu_264_m_axi_bundle_2_WLAST,
        m_axi_bundle_2_WID => grp_conv1_fu_264_m_axi_bundle_2_WID,
        m_axi_bundle_2_WUSER => grp_conv1_fu_264_m_axi_bundle_2_WUSER,
        m_axi_bundle_2_ARVALID => grp_conv1_fu_264_m_axi_bundle_2_ARVALID,
        m_axi_bundle_2_ARREADY => ap_const_logic_0,
        m_axi_bundle_2_ARADDR => grp_conv1_fu_264_m_axi_bundle_2_ARADDR,
        m_axi_bundle_2_ARID => grp_conv1_fu_264_m_axi_bundle_2_ARID,
        m_axi_bundle_2_ARLEN => grp_conv1_fu_264_m_axi_bundle_2_ARLEN,
        m_axi_bundle_2_ARSIZE => grp_conv1_fu_264_m_axi_bundle_2_ARSIZE,
        m_axi_bundle_2_ARBURST => grp_conv1_fu_264_m_axi_bundle_2_ARBURST,
        m_axi_bundle_2_ARLOCK => grp_conv1_fu_264_m_axi_bundle_2_ARLOCK,
        m_axi_bundle_2_ARCACHE => grp_conv1_fu_264_m_axi_bundle_2_ARCACHE,
        m_axi_bundle_2_ARPROT => grp_conv1_fu_264_m_axi_bundle_2_ARPROT,
        m_axi_bundle_2_ARQOS => grp_conv1_fu_264_m_axi_bundle_2_ARQOS,
        m_axi_bundle_2_ARREGION => grp_conv1_fu_264_m_axi_bundle_2_ARREGION,
        m_axi_bundle_2_ARUSER => grp_conv1_fu_264_m_axi_bundle_2_ARUSER,
        m_axi_bundle_2_RVALID => ap_const_logic_0,
        m_axi_bundle_2_RREADY => grp_conv1_fu_264_m_axi_bundle_2_RREADY,
        m_axi_bundle_2_RDATA => ap_const_lv32_0,
        m_axi_bundle_2_RLAST => ap_const_logic_0,
        m_axi_bundle_2_RID => ap_const_lv1_0,
        m_axi_bundle_2_RFIFONUM => ap_const_lv13_0,
        m_axi_bundle_2_RUSER => ap_const_lv1_0,
        m_axi_bundle_2_RRESP => ap_const_lv2_0,
        m_axi_bundle_2_BVALID => bundle_2_BVALID,
        m_axi_bundle_2_BREADY => grp_conv1_fu_264_m_axi_bundle_2_BREADY,
        m_axi_bundle_2_BRESP => ap_const_lv2_0,
        m_axi_bundle_2_BID => ap_const_lv1_0,
        m_axi_bundle_2_BUSER => ap_const_lv1_0,
        output_ftmap => conv1_output_ftmap_read_reg_449,
        grp_fu_481_p_din0 => grp_conv1_fu_264_grp_fu_481_p_din0,
        grp_fu_481_p_din1 => grp_conv1_fu_264_grp_fu_481_p_din1,
        grp_fu_481_p_opcode => grp_conv1_fu_264_grp_fu_481_p_opcode,
        grp_fu_481_p_dout0 => grp_fu_481_p2,
        grp_fu_481_p_ce => grp_conv1_fu_264_grp_fu_481_p_ce,
        grp_fu_485_p_din0 => grp_conv1_fu_264_grp_fu_485_p_din0,
        grp_fu_485_p_din1 => grp_conv1_fu_264_grp_fu_485_p_din1,
        grp_fu_485_p_opcode => grp_conv1_fu_264_grp_fu_485_p_opcode,
        grp_fu_485_p_dout0 => grp_fu_485_p2,
        grp_fu_485_p_ce => grp_conv1_fu_264_grp_fu_485_p_ce,
        grp_fu_489_p_din0 => grp_conv1_fu_264_grp_fu_489_p_din0,
        grp_fu_489_p_din1 => grp_conv1_fu_264_grp_fu_489_p_din1,
        grp_fu_489_p_opcode => grp_conv1_fu_264_grp_fu_489_p_opcode,
        grp_fu_489_p_dout0 => grp_fu_489_p2,
        grp_fu_489_p_ce => grp_conv1_fu_264_grp_fu_489_p_ce,
        grp_fu_493_p_din0 => grp_conv1_fu_264_grp_fu_493_p_din0,
        grp_fu_493_p_din1 => grp_conv1_fu_264_grp_fu_493_p_din1,
        grp_fu_493_p_opcode => grp_conv1_fu_264_grp_fu_493_p_opcode,
        grp_fu_493_p_dout0 => grp_fu_493_p2,
        grp_fu_493_p_ce => grp_conv1_fu_264_grp_fu_493_p_ce,
        grp_fu_497_p_din0 => grp_conv1_fu_264_grp_fu_497_p_din0,
        grp_fu_497_p_din1 => grp_conv1_fu_264_grp_fu_497_p_din1,
        grp_fu_497_p_dout0 => grp_fu_497_p2,
        grp_fu_497_p_ce => grp_conv1_fu_264_grp_fu_497_p_ce,
        grp_fu_501_p_din0 => grp_conv1_fu_264_grp_fu_501_p_din0,
        grp_fu_501_p_din1 => grp_conv1_fu_264_grp_fu_501_p_din1,
        grp_fu_501_p_dout0 => grp_fu_501_p2,
        grp_fu_501_p_ce => grp_conv1_fu_264_grp_fu_501_p_ce,
        grp_fu_505_p_din0 => grp_conv1_fu_264_grp_fu_505_p_din0,
        grp_fu_505_p_din1 => grp_conv1_fu_264_grp_fu_505_p_din1,
        grp_fu_505_p_dout0 => grp_fu_505_p2,
        grp_fu_505_p_ce => grp_conv1_fu_264_grp_fu_505_p_ce);

    grp_conv2_fu_300 : component srcnn_conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_300_ap_start,
        ap_done => grp_conv2_fu_300_ap_done,
        ap_idle => grp_conv2_fu_300_ap_idle,
        ap_ready => grp_conv2_fu_300_ap_ready,
        m_axi_bundle_2_AWVALID => grp_conv2_fu_300_m_axi_bundle_2_AWVALID,
        m_axi_bundle_2_AWREADY => ap_const_logic_0,
        m_axi_bundle_2_AWADDR => grp_conv2_fu_300_m_axi_bundle_2_AWADDR,
        m_axi_bundle_2_AWID => grp_conv2_fu_300_m_axi_bundle_2_AWID,
        m_axi_bundle_2_AWLEN => grp_conv2_fu_300_m_axi_bundle_2_AWLEN,
        m_axi_bundle_2_AWSIZE => grp_conv2_fu_300_m_axi_bundle_2_AWSIZE,
        m_axi_bundle_2_AWBURST => grp_conv2_fu_300_m_axi_bundle_2_AWBURST,
        m_axi_bundle_2_AWLOCK => grp_conv2_fu_300_m_axi_bundle_2_AWLOCK,
        m_axi_bundle_2_AWCACHE => grp_conv2_fu_300_m_axi_bundle_2_AWCACHE,
        m_axi_bundle_2_AWPROT => grp_conv2_fu_300_m_axi_bundle_2_AWPROT,
        m_axi_bundle_2_AWQOS => grp_conv2_fu_300_m_axi_bundle_2_AWQOS,
        m_axi_bundle_2_AWREGION => grp_conv2_fu_300_m_axi_bundle_2_AWREGION,
        m_axi_bundle_2_AWUSER => grp_conv2_fu_300_m_axi_bundle_2_AWUSER,
        m_axi_bundle_2_WVALID => grp_conv2_fu_300_m_axi_bundle_2_WVALID,
        m_axi_bundle_2_WREADY => ap_const_logic_0,
        m_axi_bundle_2_WDATA => grp_conv2_fu_300_m_axi_bundle_2_WDATA,
        m_axi_bundle_2_WSTRB => grp_conv2_fu_300_m_axi_bundle_2_WSTRB,
        m_axi_bundle_2_WLAST => grp_conv2_fu_300_m_axi_bundle_2_WLAST,
        m_axi_bundle_2_WID => grp_conv2_fu_300_m_axi_bundle_2_WID,
        m_axi_bundle_2_WUSER => grp_conv2_fu_300_m_axi_bundle_2_WUSER,
        m_axi_bundle_2_ARVALID => grp_conv2_fu_300_m_axi_bundle_2_ARVALID,
        m_axi_bundle_2_ARREADY => bundle_2_ARREADY,
        m_axi_bundle_2_ARADDR => grp_conv2_fu_300_m_axi_bundle_2_ARADDR,
        m_axi_bundle_2_ARID => grp_conv2_fu_300_m_axi_bundle_2_ARID,
        m_axi_bundle_2_ARLEN => grp_conv2_fu_300_m_axi_bundle_2_ARLEN,
        m_axi_bundle_2_ARSIZE => grp_conv2_fu_300_m_axi_bundle_2_ARSIZE,
        m_axi_bundle_2_ARBURST => grp_conv2_fu_300_m_axi_bundle_2_ARBURST,
        m_axi_bundle_2_ARLOCK => grp_conv2_fu_300_m_axi_bundle_2_ARLOCK,
        m_axi_bundle_2_ARCACHE => grp_conv2_fu_300_m_axi_bundle_2_ARCACHE,
        m_axi_bundle_2_ARPROT => grp_conv2_fu_300_m_axi_bundle_2_ARPROT,
        m_axi_bundle_2_ARQOS => grp_conv2_fu_300_m_axi_bundle_2_ARQOS,
        m_axi_bundle_2_ARREGION => grp_conv2_fu_300_m_axi_bundle_2_ARREGION,
        m_axi_bundle_2_ARUSER => grp_conv2_fu_300_m_axi_bundle_2_ARUSER,
        m_axi_bundle_2_RVALID => bundle_2_RVALID,
        m_axi_bundle_2_RREADY => grp_conv2_fu_300_m_axi_bundle_2_RREADY,
        m_axi_bundle_2_RDATA => bundle_2_RDATA,
        m_axi_bundle_2_RLAST => ap_const_logic_0,
        m_axi_bundle_2_RID => ap_const_lv1_0,
        m_axi_bundle_2_RFIFONUM => bundle_2_RFIFONUM,
        m_axi_bundle_2_RUSER => ap_const_lv1_0,
        m_axi_bundle_2_RRESP => ap_const_lv2_0,
        m_axi_bundle_2_BVALID => ap_const_logic_0,
        m_axi_bundle_2_BREADY => grp_conv2_fu_300_m_axi_bundle_2_BREADY,
        m_axi_bundle_2_BRESP => ap_const_lv2_0,
        m_axi_bundle_2_BID => ap_const_lv1_0,
        m_axi_bundle_2_BUSER => ap_const_lv1_0,
        input_ftmap => conv1_output_ftmap_read_reg_449,
        m_axi_weights_AWVALID => grp_conv2_fu_300_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_conv2_fu_300_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_conv2_fu_300_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_conv2_fu_300_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_conv2_fu_300_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_conv2_fu_300_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_conv2_fu_300_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_conv2_fu_300_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_conv2_fu_300_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_conv2_fu_300_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_conv2_fu_300_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_conv2_fu_300_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_conv2_fu_300_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_conv2_fu_300_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_conv2_fu_300_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_conv2_fu_300_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_conv2_fu_300_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_conv2_fu_300_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_conv2_fu_300_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => weights_ARREADY,
        m_axi_weights_ARADDR => grp_conv2_fu_300_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_conv2_fu_300_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_conv2_fu_300_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_conv2_fu_300_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_conv2_fu_300_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_conv2_fu_300_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_conv2_fu_300_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_conv2_fu_300_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_conv2_fu_300_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_conv2_fu_300_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_conv2_fu_300_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => weights_RVALID,
        m_axi_weights_RREADY => grp_conv2_fu_300_m_axi_weights_RREADY,
        m_axi_weights_RDATA => weights_RDATA,
        m_axi_weights_RLAST => ap_const_logic_0,
        m_axi_weights_RID => ap_const_lv1_0,
        m_axi_weights_RFIFONUM => weights_RFIFONUM,
        m_axi_weights_RUSER => ap_const_lv1_0,
        m_axi_weights_RRESP => ap_const_lv2_0,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_conv2_fu_300_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        conv2_weights => conv2_weights_read_reg_444,
        m_axi_biases_AWVALID => grp_conv2_fu_300_m_axi_biases_AWVALID,
        m_axi_biases_AWREADY => ap_const_logic_0,
        m_axi_biases_AWADDR => grp_conv2_fu_300_m_axi_biases_AWADDR,
        m_axi_biases_AWID => grp_conv2_fu_300_m_axi_biases_AWID,
        m_axi_biases_AWLEN => grp_conv2_fu_300_m_axi_biases_AWLEN,
        m_axi_biases_AWSIZE => grp_conv2_fu_300_m_axi_biases_AWSIZE,
        m_axi_biases_AWBURST => grp_conv2_fu_300_m_axi_biases_AWBURST,
        m_axi_biases_AWLOCK => grp_conv2_fu_300_m_axi_biases_AWLOCK,
        m_axi_biases_AWCACHE => grp_conv2_fu_300_m_axi_biases_AWCACHE,
        m_axi_biases_AWPROT => grp_conv2_fu_300_m_axi_biases_AWPROT,
        m_axi_biases_AWQOS => grp_conv2_fu_300_m_axi_biases_AWQOS,
        m_axi_biases_AWREGION => grp_conv2_fu_300_m_axi_biases_AWREGION,
        m_axi_biases_AWUSER => grp_conv2_fu_300_m_axi_biases_AWUSER,
        m_axi_biases_WVALID => grp_conv2_fu_300_m_axi_biases_WVALID,
        m_axi_biases_WREADY => ap_const_logic_0,
        m_axi_biases_WDATA => grp_conv2_fu_300_m_axi_biases_WDATA,
        m_axi_biases_WSTRB => grp_conv2_fu_300_m_axi_biases_WSTRB,
        m_axi_biases_WLAST => grp_conv2_fu_300_m_axi_biases_WLAST,
        m_axi_biases_WID => grp_conv2_fu_300_m_axi_biases_WID,
        m_axi_biases_WUSER => grp_conv2_fu_300_m_axi_biases_WUSER,
        m_axi_biases_ARVALID => grp_conv2_fu_300_m_axi_biases_ARVALID,
        m_axi_biases_ARREADY => biases_ARREADY,
        m_axi_biases_ARADDR => grp_conv2_fu_300_m_axi_biases_ARADDR,
        m_axi_biases_ARID => grp_conv2_fu_300_m_axi_biases_ARID,
        m_axi_biases_ARLEN => grp_conv2_fu_300_m_axi_biases_ARLEN,
        m_axi_biases_ARSIZE => grp_conv2_fu_300_m_axi_biases_ARSIZE,
        m_axi_biases_ARBURST => grp_conv2_fu_300_m_axi_biases_ARBURST,
        m_axi_biases_ARLOCK => grp_conv2_fu_300_m_axi_biases_ARLOCK,
        m_axi_biases_ARCACHE => grp_conv2_fu_300_m_axi_biases_ARCACHE,
        m_axi_biases_ARPROT => grp_conv2_fu_300_m_axi_biases_ARPROT,
        m_axi_biases_ARQOS => grp_conv2_fu_300_m_axi_biases_ARQOS,
        m_axi_biases_ARREGION => grp_conv2_fu_300_m_axi_biases_ARREGION,
        m_axi_biases_ARUSER => grp_conv2_fu_300_m_axi_biases_ARUSER,
        m_axi_biases_RVALID => biases_RVALID,
        m_axi_biases_RREADY => grp_conv2_fu_300_m_axi_biases_RREADY,
        m_axi_biases_RDATA => biases_RDATA,
        m_axi_biases_RLAST => ap_const_logic_0,
        m_axi_biases_RID => ap_const_lv1_0,
        m_axi_biases_RFIFONUM => biases_RFIFONUM,
        m_axi_biases_RUSER => ap_const_lv1_0,
        m_axi_biases_RRESP => ap_const_lv2_0,
        m_axi_biases_BVALID => ap_const_logic_0,
        m_axi_biases_BREADY => grp_conv2_fu_300_m_axi_biases_BREADY,
        m_axi_biases_BRESP => ap_const_lv2_0,
        m_axi_biases_BID => ap_const_lv1_0,
        m_axi_biases_BUSER => ap_const_lv1_0,
        conv2_biases => conv2_biases_read_reg_439,
        m_axi_bundle_1_AWVALID => grp_conv2_fu_300_m_axi_bundle_1_AWVALID,
        m_axi_bundle_1_AWREADY => bundle_1_AWREADY,
        m_axi_bundle_1_AWADDR => grp_conv2_fu_300_m_axi_bundle_1_AWADDR,
        m_axi_bundle_1_AWID => grp_conv2_fu_300_m_axi_bundle_1_AWID,
        m_axi_bundle_1_AWLEN => grp_conv2_fu_300_m_axi_bundle_1_AWLEN,
        m_axi_bundle_1_AWSIZE => grp_conv2_fu_300_m_axi_bundle_1_AWSIZE,
        m_axi_bundle_1_AWBURST => grp_conv2_fu_300_m_axi_bundle_1_AWBURST,
        m_axi_bundle_1_AWLOCK => grp_conv2_fu_300_m_axi_bundle_1_AWLOCK,
        m_axi_bundle_1_AWCACHE => grp_conv2_fu_300_m_axi_bundle_1_AWCACHE,
        m_axi_bundle_1_AWPROT => grp_conv2_fu_300_m_axi_bundle_1_AWPROT,
        m_axi_bundle_1_AWQOS => grp_conv2_fu_300_m_axi_bundle_1_AWQOS,
        m_axi_bundle_1_AWREGION => grp_conv2_fu_300_m_axi_bundle_1_AWREGION,
        m_axi_bundle_1_AWUSER => grp_conv2_fu_300_m_axi_bundle_1_AWUSER,
        m_axi_bundle_1_WVALID => grp_conv2_fu_300_m_axi_bundle_1_WVALID,
        m_axi_bundle_1_WREADY => bundle_1_WREADY,
        m_axi_bundle_1_WDATA => grp_conv2_fu_300_m_axi_bundle_1_WDATA,
        m_axi_bundle_1_WSTRB => grp_conv2_fu_300_m_axi_bundle_1_WSTRB,
        m_axi_bundle_1_WLAST => grp_conv2_fu_300_m_axi_bundle_1_WLAST,
        m_axi_bundle_1_WID => grp_conv2_fu_300_m_axi_bundle_1_WID,
        m_axi_bundle_1_WUSER => grp_conv2_fu_300_m_axi_bundle_1_WUSER,
        m_axi_bundle_1_ARVALID => grp_conv2_fu_300_m_axi_bundle_1_ARVALID,
        m_axi_bundle_1_ARREADY => ap_const_logic_0,
        m_axi_bundle_1_ARADDR => grp_conv2_fu_300_m_axi_bundle_1_ARADDR,
        m_axi_bundle_1_ARID => grp_conv2_fu_300_m_axi_bundle_1_ARID,
        m_axi_bundle_1_ARLEN => grp_conv2_fu_300_m_axi_bundle_1_ARLEN,
        m_axi_bundle_1_ARSIZE => grp_conv2_fu_300_m_axi_bundle_1_ARSIZE,
        m_axi_bundle_1_ARBURST => grp_conv2_fu_300_m_axi_bundle_1_ARBURST,
        m_axi_bundle_1_ARLOCK => grp_conv2_fu_300_m_axi_bundle_1_ARLOCK,
        m_axi_bundle_1_ARCACHE => grp_conv2_fu_300_m_axi_bundle_1_ARCACHE,
        m_axi_bundle_1_ARPROT => grp_conv2_fu_300_m_axi_bundle_1_ARPROT,
        m_axi_bundle_1_ARQOS => grp_conv2_fu_300_m_axi_bundle_1_ARQOS,
        m_axi_bundle_1_ARREGION => grp_conv2_fu_300_m_axi_bundle_1_ARREGION,
        m_axi_bundle_1_ARUSER => grp_conv2_fu_300_m_axi_bundle_1_ARUSER,
        m_axi_bundle_1_RVALID => ap_const_logic_0,
        m_axi_bundle_1_RREADY => grp_conv2_fu_300_m_axi_bundle_1_RREADY,
        m_axi_bundle_1_RDATA => ap_const_lv32_0,
        m_axi_bundle_1_RLAST => ap_const_logic_0,
        m_axi_bundle_1_RID => ap_const_lv1_0,
        m_axi_bundle_1_RFIFONUM => ap_const_lv13_0,
        m_axi_bundle_1_RUSER => ap_const_lv1_0,
        m_axi_bundle_1_RRESP => ap_const_lv2_0,
        m_axi_bundle_1_BVALID => bundle_1_BVALID,
        m_axi_bundle_1_BREADY => grp_conv2_fu_300_m_axi_bundle_1_BREADY,
        m_axi_bundle_1_BRESP => ap_const_lv2_0,
        m_axi_bundle_1_BID => ap_const_lv1_0,
        m_axi_bundle_1_BUSER => ap_const_lv1_0,
        output_ftmap => conv2_output_ftmap_read_reg_433,
        grp_fu_481_p_din0 => grp_conv2_fu_300_grp_fu_481_p_din0,
        grp_fu_481_p_din1 => grp_conv2_fu_300_grp_fu_481_p_din1,
        grp_fu_481_p_opcode => grp_conv2_fu_300_grp_fu_481_p_opcode,
        grp_fu_481_p_dout0 => grp_fu_481_p2,
        grp_fu_481_p_ce => grp_conv2_fu_300_grp_fu_481_p_ce,
        grp_fu_497_p_din0 => grp_conv2_fu_300_grp_fu_497_p_din0,
        grp_fu_497_p_din1 => grp_conv2_fu_300_grp_fu_497_p_din1,
        grp_fu_497_p_dout0 => grp_fu_497_p2,
        grp_fu_497_p_ce => grp_conv2_fu_300_grp_fu_497_p_ce,
        grp_fu_509_p_din0 => grp_conv2_fu_300_grp_fu_509_p_din0,
        grp_fu_509_p_din1 => grp_conv2_fu_300_grp_fu_509_p_din1,
        grp_fu_509_p_opcode => grp_conv2_fu_300_grp_fu_509_p_opcode,
        grp_fu_509_p_dout0 => grp_fu_509_p2,
        grp_fu_509_p_ce => grp_conv2_fu_300_grp_fu_509_p_ce);

    grp_conv3_fu_330 : component srcnn_conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv3_fu_330_ap_start,
        ap_done => grp_conv3_fu_330_ap_done,
        ap_idle => grp_conv3_fu_330_ap_idle,
        ap_ready => grp_conv3_fu_330_ap_ready,
        m_axi_bundle_1_AWVALID => grp_conv3_fu_330_m_axi_bundle_1_AWVALID,
        m_axi_bundle_1_AWREADY => ap_const_logic_0,
        m_axi_bundle_1_AWADDR => grp_conv3_fu_330_m_axi_bundle_1_AWADDR,
        m_axi_bundle_1_AWID => grp_conv3_fu_330_m_axi_bundle_1_AWID,
        m_axi_bundle_1_AWLEN => grp_conv3_fu_330_m_axi_bundle_1_AWLEN,
        m_axi_bundle_1_AWSIZE => grp_conv3_fu_330_m_axi_bundle_1_AWSIZE,
        m_axi_bundle_1_AWBURST => grp_conv3_fu_330_m_axi_bundle_1_AWBURST,
        m_axi_bundle_1_AWLOCK => grp_conv3_fu_330_m_axi_bundle_1_AWLOCK,
        m_axi_bundle_1_AWCACHE => grp_conv3_fu_330_m_axi_bundle_1_AWCACHE,
        m_axi_bundle_1_AWPROT => grp_conv3_fu_330_m_axi_bundle_1_AWPROT,
        m_axi_bundle_1_AWQOS => grp_conv3_fu_330_m_axi_bundle_1_AWQOS,
        m_axi_bundle_1_AWREGION => grp_conv3_fu_330_m_axi_bundle_1_AWREGION,
        m_axi_bundle_1_AWUSER => grp_conv3_fu_330_m_axi_bundle_1_AWUSER,
        m_axi_bundle_1_WVALID => grp_conv3_fu_330_m_axi_bundle_1_WVALID,
        m_axi_bundle_1_WREADY => ap_const_logic_0,
        m_axi_bundle_1_WDATA => grp_conv3_fu_330_m_axi_bundle_1_WDATA,
        m_axi_bundle_1_WSTRB => grp_conv3_fu_330_m_axi_bundle_1_WSTRB,
        m_axi_bundle_1_WLAST => grp_conv3_fu_330_m_axi_bundle_1_WLAST,
        m_axi_bundle_1_WID => grp_conv3_fu_330_m_axi_bundle_1_WID,
        m_axi_bundle_1_WUSER => grp_conv3_fu_330_m_axi_bundle_1_WUSER,
        m_axi_bundle_1_ARVALID => grp_conv3_fu_330_m_axi_bundle_1_ARVALID,
        m_axi_bundle_1_ARREADY => bundle_1_ARREADY,
        m_axi_bundle_1_ARADDR => grp_conv3_fu_330_m_axi_bundle_1_ARADDR,
        m_axi_bundle_1_ARID => grp_conv3_fu_330_m_axi_bundle_1_ARID,
        m_axi_bundle_1_ARLEN => grp_conv3_fu_330_m_axi_bundle_1_ARLEN,
        m_axi_bundle_1_ARSIZE => grp_conv3_fu_330_m_axi_bundle_1_ARSIZE,
        m_axi_bundle_1_ARBURST => grp_conv3_fu_330_m_axi_bundle_1_ARBURST,
        m_axi_bundle_1_ARLOCK => grp_conv3_fu_330_m_axi_bundle_1_ARLOCK,
        m_axi_bundle_1_ARCACHE => grp_conv3_fu_330_m_axi_bundle_1_ARCACHE,
        m_axi_bundle_1_ARPROT => grp_conv3_fu_330_m_axi_bundle_1_ARPROT,
        m_axi_bundle_1_ARQOS => grp_conv3_fu_330_m_axi_bundle_1_ARQOS,
        m_axi_bundle_1_ARREGION => grp_conv3_fu_330_m_axi_bundle_1_ARREGION,
        m_axi_bundle_1_ARUSER => grp_conv3_fu_330_m_axi_bundle_1_ARUSER,
        m_axi_bundle_1_RVALID => bundle_1_RVALID,
        m_axi_bundle_1_RREADY => grp_conv3_fu_330_m_axi_bundle_1_RREADY,
        m_axi_bundle_1_RDATA => bundle_1_RDATA,
        m_axi_bundle_1_RLAST => ap_const_logic_0,
        m_axi_bundle_1_RID => ap_const_lv1_0,
        m_axi_bundle_1_RFIFONUM => bundle_1_RFIFONUM,
        m_axi_bundle_1_RUSER => ap_const_lv1_0,
        m_axi_bundle_1_RRESP => ap_const_lv2_0,
        m_axi_bundle_1_BVALID => ap_const_logic_0,
        m_axi_bundle_1_BREADY => grp_conv3_fu_330_m_axi_bundle_1_BREADY,
        m_axi_bundle_1_BRESP => ap_const_lv2_0,
        m_axi_bundle_1_BID => ap_const_lv1_0,
        m_axi_bundle_1_BUSER => ap_const_lv1_0,
        input_ftmap => conv2_output_ftmap_read_reg_433,
        m_axi_weights_AWVALID => grp_conv3_fu_330_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_conv3_fu_330_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_conv3_fu_330_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_conv3_fu_330_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_conv3_fu_330_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_conv3_fu_330_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_conv3_fu_330_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_conv3_fu_330_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_conv3_fu_330_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_conv3_fu_330_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_conv3_fu_330_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_conv3_fu_330_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_conv3_fu_330_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_conv3_fu_330_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_conv3_fu_330_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_conv3_fu_330_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_conv3_fu_330_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_conv3_fu_330_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_conv3_fu_330_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => weights_ARREADY,
        m_axi_weights_ARADDR => grp_conv3_fu_330_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_conv3_fu_330_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_conv3_fu_330_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_conv3_fu_330_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_conv3_fu_330_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_conv3_fu_330_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_conv3_fu_330_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_conv3_fu_330_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_conv3_fu_330_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_conv3_fu_330_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_conv3_fu_330_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => weights_RVALID,
        m_axi_weights_RREADY => grp_conv3_fu_330_m_axi_weights_RREADY,
        m_axi_weights_RDATA => weights_RDATA,
        m_axi_weights_RLAST => ap_const_logic_0,
        m_axi_weights_RID => ap_const_lv1_0,
        m_axi_weights_RFIFONUM => weights_RFIFONUM,
        m_axi_weights_RUSER => ap_const_lv1_0,
        m_axi_weights_RRESP => ap_const_lv2_0,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_conv3_fu_330_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        conv3_weights => conv3_weights_read_reg_428,
        conv3_biases_0_0_val => empty_reg_476,
        m_axi_bundle_2_AWVALID => grp_conv3_fu_330_m_axi_bundle_2_AWVALID,
        m_axi_bundle_2_AWREADY => bundle_2_AWREADY,
        m_axi_bundle_2_AWADDR => grp_conv3_fu_330_m_axi_bundle_2_AWADDR,
        m_axi_bundle_2_AWID => grp_conv3_fu_330_m_axi_bundle_2_AWID,
        m_axi_bundle_2_AWLEN => grp_conv3_fu_330_m_axi_bundle_2_AWLEN,
        m_axi_bundle_2_AWSIZE => grp_conv3_fu_330_m_axi_bundle_2_AWSIZE,
        m_axi_bundle_2_AWBURST => grp_conv3_fu_330_m_axi_bundle_2_AWBURST,
        m_axi_bundle_2_AWLOCK => grp_conv3_fu_330_m_axi_bundle_2_AWLOCK,
        m_axi_bundle_2_AWCACHE => grp_conv3_fu_330_m_axi_bundle_2_AWCACHE,
        m_axi_bundle_2_AWPROT => grp_conv3_fu_330_m_axi_bundle_2_AWPROT,
        m_axi_bundle_2_AWQOS => grp_conv3_fu_330_m_axi_bundle_2_AWQOS,
        m_axi_bundle_2_AWREGION => grp_conv3_fu_330_m_axi_bundle_2_AWREGION,
        m_axi_bundle_2_AWUSER => grp_conv3_fu_330_m_axi_bundle_2_AWUSER,
        m_axi_bundle_2_WVALID => grp_conv3_fu_330_m_axi_bundle_2_WVALID,
        m_axi_bundle_2_WREADY => bundle_2_WREADY,
        m_axi_bundle_2_WDATA => grp_conv3_fu_330_m_axi_bundle_2_WDATA,
        m_axi_bundle_2_WSTRB => grp_conv3_fu_330_m_axi_bundle_2_WSTRB,
        m_axi_bundle_2_WLAST => grp_conv3_fu_330_m_axi_bundle_2_WLAST,
        m_axi_bundle_2_WID => grp_conv3_fu_330_m_axi_bundle_2_WID,
        m_axi_bundle_2_WUSER => grp_conv3_fu_330_m_axi_bundle_2_WUSER,
        m_axi_bundle_2_ARVALID => grp_conv3_fu_330_m_axi_bundle_2_ARVALID,
        m_axi_bundle_2_ARREADY => ap_const_logic_0,
        m_axi_bundle_2_ARADDR => grp_conv3_fu_330_m_axi_bundle_2_ARADDR,
        m_axi_bundle_2_ARID => grp_conv3_fu_330_m_axi_bundle_2_ARID,
        m_axi_bundle_2_ARLEN => grp_conv3_fu_330_m_axi_bundle_2_ARLEN,
        m_axi_bundle_2_ARSIZE => grp_conv3_fu_330_m_axi_bundle_2_ARSIZE,
        m_axi_bundle_2_ARBURST => grp_conv3_fu_330_m_axi_bundle_2_ARBURST,
        m_axi_bundle_2_ARLOCK => grp_conv3_fu_330_m_axi_bundle_2_ARLOCK,
        m_axi_bundle_2_ARCACHE => grp_conv3_fu_330_m_axi_bundle_2_ARCACHE,
        m_axi_bundle_2_ARPROT => grp_conv3_fu_330_m_axi_bundle_2_ARPROT,
        m_axi_bundle_2_ARQOS => grp_conv3_fu_330_m_axi_bundle_2_ARQOS,
        m_axi_bundle_2_ARREGION => grp_conv3_fu_330_m_axi_bundle_2_ARREGION,
        m_axi_bundle_2_ARUSER => grp_conv3_fu_330_m_axi_bundle_2_ARUSER,
        m_axi_bundle_2_RVALID => ap_const_logic_0,
        m_axi_bundle_2_RREADY => grp_conv3_fu_330_m_axi_bundle_2_RREADY,
        m_axi_bundle_2_RDATA => ap_const_lv32_0,
        m_axi_bundle_2_RLAST => ap_const_logic_0,
        m_axi_bundle_2_RID => ap_const_lv1_0,
        m_axi_bundle_2_RFIFONUM => ap_const_lv13_0,
        m_axi_bundle_2_RUSER => ap_const_lv1_0,
        m_axi_bundle_2_RRESP => ap_const_lv2_0,
        m_axi_bundle_2_BVALID => bundle_2_BVALID,
        m_axi_bundle_2_BREADY => grp_conv3_fu_330_m_axi_bundle_2_BREADY,
        m_axi_bundle_2_BRESP => ap_const_lv2_0,
        m_axi_bundle_2_BID => ap_const_lv1_0,
        m_axi_bundle_2_BUSER => ap_const_lv1_0,
        output_ftmap => output_ftmap_read_reg_423,
        grp_fu_481_p_din0 => grp_conv3_fu_330_grp_fu_481_p_din0,
        grp_fu_481_p_din1 => grp_conv3_fu_330_grp_fu_481_p_din1,
        grp_fu_481_p_opcode => grp_conv3_fu_330_grp_fu_481_p_opcode,
        grp_fu_481_p_dout0 => grp_fu_481_p2,
        grp_fu_481_p_ce => grp_conv3_fu_330_grp_fu_481_p_ce,
        grp_fu_485_p_din0 => grp_conv3_fu_330_grp_fu_485_p_din0,
        grp_fu_485_p_din1 => grp_conv3_fu_330_grp_fu_485_p_din1,
        grp_fu_485_p_opcode => grp_conv3_fu_330_grp_fu_485_p_opcode,
        grp_fu_485_p_dout0 => grp_fu_485_p2,
        grp_fu_485_p_ce => grp_conv3_fu_330_grp_fu_485_p_ce,
        grp_fu_489_p_din0 => grp_conv3_fu_330_grp_fu_489_p_din0,
        grp_fu_489_p_din1 => grp_conv3_fu_330_grp_fu_489_p_din1,
        grp_fu_489_p_opcode => grp_conv3_fu_330_grp_fu_489_p_opcode,
        grp_fu_489_p_dout0 => grp_fu_489_p2,
        grp_fu_489_p_ce => grp_conv3_fu_330_grp_fu_489_p_ce,
        grp_fu_493_p_din0 => grp_conv3_fu_330_grp_fu_493_p_din0,
        grp_fu_493_p_din1 => grp_conv3_fu_330_grp_fu_493_p_din1,
        grp_fu_493_p_opcode => grp_conv3_fu_330_grp_fu_493_p_opcode,
        grp_fu_493_p_dout0 => grp_fu_493_p2,
        grp_fu_493_p_ce => grp_conv3_fu_330_grp_fu_493_p_ce,
        grp_fu_497_p_din0 => grp_conv3_fu_330_grp_fu_497_p_din0,
        grp_fu_497_p_din1 => grp_conv3_fu_330_grp_fu_497_p_din1,
        grp_fu_497_p_dout0 => grp_fu_497_p2,
        grp_fu_497_p_ce => grp_conv3_fu_330_grp_fu_497_p_ce,
        grp_fu_501_p_din0 => grp_conv3_fu_330_grp_fu_501_p_din0,
        grp_fu_501_p_din1 => grp_conv3_fu_330_grp_fu_501_p_din1,
        grp_fu_501_p_dout0 => grp_fu_501_p2,
        grp_fu_501_p_ce => grp_conv3_fu_330_grp_fu_501_p_ce,
        grp_fu_505_p_din0 => grp_conv3_fu_330_grp_fu_505_p_din0,
        grp_fu_505_p_din1 => grp_conv3_fu_330_grp_fu_505_p_din1,
        grp_fu_505_p_dout0 => grp_fu_505_p2,
        grp_fu_505_p_ce => grp_conv3_fu_330_grp_fu_505_p_ce,
        grp_fu_509_p_din0 => grp_conv3_fu_330_grp_fu_509_p_din0,
        grp_fu_509_p_din1 => grp_conv3_fu_330_grp_fu_509_p_din1,
        grp_fu_509_p_opcode => grp_conv3_fu_330_grp_fu_509_p_opcode,
        grp_fu_509_p_dout0 => grp_fu_509_p2,
        grp_fu_509_p_ce => grp_conv3_fu_330_grp_fu_509_p_ce);

    control_s_axi_U : component srcnn_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_ftmap => input_ftmap,
        conv1_weights => conv1_weights,
        conv1_biases => conv1_biases,
        conv1_output_ftmap => conv1_output_ftmap,
        conv2_weights => conv2_weights,
        conv2_biases => conv2_biases,
        conv2_output_ftmap => conv2_output_ftmap,
        conv3_weights => conv3_weights,
        conv3_biases => conv3_biases,
        output_ftmap => output_ftmap,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    biases_m_axi_U : component srcnn_biases_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BIASES_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BIASES_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BIASES_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BIASES_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BIASES_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BIASES_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BIASES_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BIASES_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BIASES_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BIASES_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BIASES_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_biases_AWVALID,
        AWREADY => m_axi_biases_AWREADY,
        AWADDR => m_axi_biases_AWADDR,
        AWID => m_axi_biases_AWID,
        AWLEN => m_axi_biases_AWLEN,
        AWSIZE => m_axi_biases_AWSIZE,
        AWBURST => m_axi_biases_AWBURST,
        AWLOCK => m_axi_biases_AWLOCK,
        AWCACHE => m_axi_biases_AWCACHE,
        AWPROT => m_axi_biases_AWPROT,
        AWQOS => m_axi_biases_AWQOS,
        AWREGION => m_axi_biases_AWREGION,
        AWUSER => m_axi_biases_AWUSER,
        WVALID => m_axi_biases_WVALID,
        WREADY => m_axi_biases_WREADY,
        WDATA => m_axi_biases_WDATA,
        WSTRB => m_axi_biases_WSTRB,
        WLAST => m_axi_biases_WLAST,
        WID => m_axi_biases_WID,
        WUSER => m_axi_biases_WUSER,
        ARVALID => m_axi_biases_ARVALID,
        ARREADY => m_axi_biases_ARREADY,
        ARADDR => m_axi_biases_ARADDR,
        ARID => m_axi_biases_ARID,
        ARLEN => m_axi_biases_ARLEN,
        ARSIZE => m_axi_biases_ARSIZE,
        ARBURST => m_axi_biases_ARBURST,
        ARLOCK => m_axi_biases_ARLOCK,
        ARCACHE => m_axi_biases_ARCACHE,
        ARPROT => m_axi_biases_ARPROT,
        ARQOS => m_axi_biases_ARQOS,
        ARREGION => m_axi_biases_ARREGION,
        ARUSER => m_axi_biases_ARUSER,
        RVALID => m_axi_biases_RVALID,
        RREADY => m_axi_biases_RREADY,
        RDATA => m_axi_biases_RDATA,
        RLAST => m_axi_biases_RLAST,
        RID => m_axi_biases_RID,
        RUSER => m_axi_biases_RUSER,
        RRESP => m_axi_biases_RRESP,
        BVALID => m_axi_biases_BVALID,
        BREADY => m_axi_biases_BREADY,
        BRESP => m_axi_biases_BRESP,
        BID => m_axi_biases_BID,
        BUSER => m_axi_biases_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => biases_ARVALID,
        I_ARREADY => biases_ARREADY,
        I_ARADDR => biases_ARADDR,
        I_ARLEN => biases_ARLEN,
        I_RVALID => biases_RVALID,
        I_RREADY => biases_RREADY,
        I_RDATA => biases_RDATA,
        I_RFIFONUM => biases_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => biases_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => biases_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => biases_BVALID,
        I_BREADY => ap_const_logic_0);

    bundle_1_m_axi_U : component srcnn_bundle_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 256,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUNDLE_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUNDLE_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUNDLE_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUNDLE_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUNDLE_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUNDLE_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUNDLE_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUNDLE_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUNDLE_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUNDLE_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUNDLE_1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 13,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_bundle_1_AWVALID,
        AWREADY => m_axi_bundle_1_AWREADY,
        AWADDR => m_axi_bundle_1_AWADDR,
        AWID => m_axi_bundle_1_AWID,
        AWLEN => m_axi_bundle_1_AWLEN,
        AWSIZE => m_axi_bundle_1_AWSIZE,
        AWBURST => m_axi_bundle_1_AWBURST,
        AWLOCK => m_axi_bundle_1_AWLOCK,
        AWCACHE => m_axi_bundle_1_AWCACHE,
        AWPROT => m_axi_bundle_1_AWPROT,
        AWQOS => m_axi_bundle_1_AWQOS,
        AWREGION => m_axi_bundle_1_AWREGION,
        AWUSER => m_axi_bundle_1_AWUSER,
        WVALID => m_axi_bundle_1_WVALID,
        WREADY => m_axi_bundle_1_WREADY,
        WDATA => m_axi_bundle_1_WDATA,
        WSTRB => m_axi_bundle_1_WSTRB,
        WLAST => m_axi_bundle_1_WLAST,
        WID => m_axi_bundle_1_WID,
        WUSER => m_axi_bundle_1_WUSER,
        ARVALID => m_axi_bundle_1_ARVALID,
        ARREADY => m_axi_bundle_1_ARREADY,
        ARADDR => m_axi_bundle_1_ARADDR,
        ARID => m_axi_bundle_1_ARID,
        ARLEN => m_axi_bundle_1_ARLEN,
        ARSIZE => m_axi_bundle_1_ARSIZE,
        ARBURST => m_axi_bundle_1_ARBURST,
        ARLOCK => m_axi_bundle_1_ARLOCK,
        ARCACHE => m_axi_bundle_1_ARCACHE,
        ARPROT => m_axi_bundle_1_ARPROT,
        ARQOS => m_axi_bundle_1_ARQOS,
        ARREGION => m_axi_bundle_1_ARREGION,
        ARUSER => m_axi_bundle_1_ARUSER,
        RVALID => m_axi_bundle_1_RVALID,
        RREADY => m_axi_bundle_1_RREADY,
        RDATA => m_axi_bundle_1_RDATA,
        RLAST => m_axi_bundle_1_RLAST,
        RID => m_axi_bundle_1_RID,
        RUSER => m_axi_bundle_1_RUSER,
        RRESP => m_axi_bundle_1_RRESP,
        BVALID => m_axi_bundle_1_BVALID,
        BREADY => m_axi_bundle_1_BREADY,
        BRESP => m_axi_bundle_1_BRESP,
        BID => m_axi_bundle_1_BID,
        BUSER => m_axi_bundle_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => bundle_1_ARVALID,
        I_ARREADY => bundle_1_ARREADY,
        I_ARADDR => bundle_1_ARADDR,
        I_ARLEN => bundle_1_ARLEN,
        I_RVALID => bundle_1_RVALID,
        I_RREADY => bundle_1_RREADY,
        I_RDATA => bundle_1_RDATA,
        I_RFIFONUM => bundle_1_RFIFONUM,
        I_AWVALID => bundle_1_AWVALID,
        I_AWREADY => bundle_1_AWREADY,
        I_AWADDR => grp_conv2_fu_300_m_axi_bundle_1_AWADDR,
        I_AWLEN => grp_conv2_fu_300_m_axi_bundle_1_AWLEN,
        I_WVALID => bundle_1_WVALID,
        I_WREADY => bundle_1_WREADY,
        I_WDATA => grp_conv2_fu_300_m_axi_bundle_1_WDATA,
        I_WSTRB => grp_conv2_fu_300_m_axi_bundle_1_WSTRB,
        I_BVALID => bundle_1_BVALID,
        I_BREADY => bundle_1_BREADY);

    bundle_2_m_axi_U : component srcnn_bundle_2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 256,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUNDLE_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUNDLE_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUNDLE_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUNDLE_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUNDLE_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUNDLE_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUNDLE_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUNDLE_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUNDLE_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUNDLE_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUNDLE_2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 13,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_bundle_2_AWVALID,
        AWREADY => m_axi_bundle_2_AWREADY,
        AWADDR => m_axi_bundle_2_AWADDR,
        AWID => m_axi_bundle_2_AWID,
        AWLEN => m_axi_bundle_2_AWLEN,
        AWSIZE => m_axi_bundle_2_AWSIZE,
        AWBURST => m_axi_bundle_2_AWBURST,
        AWLOCK => m_axi_bundle_2_AWLOCK,
        AWCACHE => m_axi_bundle_2_AWCACHE,
        AWPROT => m_axi_bundle_2_AWPROT,
        AWQOS => m_axi_bundle_2_AWQOS,
        AWREGION => m_axi_bundle_2_AWREGION,
        AWUSER => m_axi_bundle_2_AWUSER,
        WVALID => m_axi_bundle_2_WVALID,
        WREADY => m_axi_bundle_2_WREADY,
        WDATA => m_axi_bundle_2_WDATA,
        WSTRB => m_axi_bundle_2_WSTRB,
        WLAST => m_axi_bundle_2_WLAST,
        WID => m_axi_bundle_2_WID,
        WUSER => m_axi_bundle_2_WUSER,
        ARVALID => m_axi_bundle_2_ARVALID,
        ARREADY => m_axi_bundle_2_ARREADY,
        ARADDR => m_axi_bundle_2_ARADDR,
        ARID => m_axi_bundle_2_ARID,
        ARLEN => m_axi_bundle_2_ARLEN,
        ARSIZE => m_axi_bundle_2_ARSIZE,
        ARBURST => m_axi_bundle_2_ARBURST,
        ARLOCK => m_axi_bundle_2_ARLOCK,
        ARCACHE => m_axi_bundle_2_ARCACHE,
        ARPROT => m_axi_bundle_2_ARPROT,
        ARQOS => m_axi_bundle_2_ARQOS,
        ARREGION => m_axi_bundle_2_ARREGION,
        ARUSER => m_axi_bundle_2_ARUSER,
        RVALID => m_axi_bundle_2_RVALID,
        RREADY => m_axi_bundle_2_RREADY,
        RDATA => m_axi_bundle_2_RDATA,
        RLAST => m_axi_bundle_2_RLAST,
        RID => m_axi_bundle_2_RID,
        RUSER => m_axi_bundle_2_RUSER,
        RRESP => m_axi_bundle_2_RRESP,
        BVALID => m_axi_bundle_2_BVALID,
        BREADY => m_axi_bundle_2_BREADY,
        BRESP => m_axi_bundle_2_BRESP,
        BID => m_axi_bundle_2_BID,
        BUSER => m_axi_bundle_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => bundle_2_ARVALID,
        I_ARREADY => bundle_2_ARREADY,
        I_ARADDR => grp_conv2_fu_300_m_axi_bundle_2_ARADDR,
        I_ARLEN => grp_conv2_fu_300_m_axi_bundle_2_ARLEN,
        I_RVALID => bundle_2_RVALID,
        I_RREADY => bundle_2_RREADY,
        I_RDATA => bundle_2_RDATA,
        I_RFIFONUM => bundle_2_RFIFONUM,
        I_AWVALID => bundle_2_AWVALID,
        I_AWREADY => bundle_2_AWREADY,
        I_AWADDR => bundle_2_AWADDR,
        I_AWLEN => bundle_2_AWLEN,
        I_WVALID => bundle_2_WVALID,
        I_WREADY => bundle_2_WREADY,
        I_WDATA => bundle_2_WDATA,
        I_WSTRB => bundle_2_WSTRB,
        I_BVALID => bundle_2_BVALID,
        I_BREADY => bundle_2_BREADY);

    weights_m_axi_U : component srcnn_weights_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 256,
        C_M_AXI_ID_WIDTH => C_M_AXI_WEIGHTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WEIGHTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WEIGHTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WEIGHTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WEIGHTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WEIGHTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WEIGHTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WEIGHTS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WEIGHTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WEIGHTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WEIGHTS_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 13,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_weights_AWVALID,
        AWREADY => m_axi_weights_AWREADY,
        AWADDR => m_axi_weights_AWADDR,
        AWID => m_axi_weights_AWID,
        AWLEN => m_axi_weights_AWLEN,
        AWSIZE => m_axi_weights_AWSIZE,
        AWBURST => m_axi_weights_AWBURST,
        AWLOCK => m_axi_weights_AWLOCK,
        AWCACHE => m_axi_weights_AWCACHE,
        AWPROT => m_axi_weights_AWPROT,
        AWQOS => m_axi_weights_AWQOS,
        AWREGION => m_axi_weights_AWREGION,
        AWUSER => m_axi_weights_AWUSER,
        WVALID => m_axi_weights_WVALID,
        WREADY => m_axi_weights_WREADY,
        WDATA => m_axi_weights_WDATA,
        WSTRB => m_axi_weights_WSTRB,
        WLAST => m_axi_weights_WLAST,
        WID => m_axi_weights_WID,
        WUSER => m_axi_weights_WUSER,
        ARVALID => m_axi_weights_ARVALID,
        ARREADY => m_axi_weights_ARREADY,
        ARADDR => m_axi_weights_ARADDR,
        ARID => m_axi_weights_ARID,
        ARLEN => m_axi_weights_ARLEN,
        ARSIZE => m_axi_weights_ARSIZE,
        ARBURST => m_axi_weights_ARBURST,
        ARLOCK => m_axi_weights_ARLOCK,
        ARCACHE => m_axi_weights_ARCACHE,
        ARPROT => m_axi_weights_ARPROT,
        ARQOS => m_axi_weights_ARQOS,
        ARREGION => m_axi_weights_ARREGION,
        ARUSER => m_axi_weights_ARUSER,
        RVALID => m_axi_weights_RVALID,
        RREADY => m_axi_weights_RREADY,
        RDATA => m_axi_weights_RDATA,
        RLAST => m_axi_weights_RLAST,
        RID => m_axi_weights_RID,
        RUSER => m_axi_weights_RUSER,
        RRESP => m_axi_weights_RRESP,
        BVALID => m_axi_weights_BVALID,
        BREADY => m_axi_weights_BREADY,
        BRESP => m_axi_weights_BRESP,
        BID => m_axi_weights_BID,
        BUSER => m_axi_weights_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => weights_ARVALID,
        I_ARREADY => weights_ARREADY,
        I_ARADDR => weights_ARADDR,
        I_ARLEN => weights_ARLEN,
        I_RVALID => weights_RVALID,
        I_RREADY => weights_RREADY,
        I_RDATA => weights_RDATA,
        I_RFIFONUM => weights_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => weights_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => weights_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => weights_BVALID,
        I_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_4_full_dsp_1_U499 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_481_p0,
        din1 => grp_fu_481_p1,
        ce => grp_fu_481_ce,
        dout => grp_fu_481_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U500 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_485_p0,
        din1 => grp_fu_485_p1,
        ce => grp_fu_485_ce,
        dout => grp_fu_485_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U501 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_489_p0,
        din1 => grp_fu_489_p1,
        ce => grp_fu_489_ce,
        dout => grp_fu_489_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U502 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_493_p0,
        din1 => grp_fu_493_p1,
        ce => grp_fu_493_ce,
        dout => grp_fu_493_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U503 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_497_p0,
        din1 => grp_fu_497_p1,
        ce => grp_fu_497_ce,
        dout => grp_fu_497_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U504 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_501_p0,
        din1 => grp_fu_501_p1,
        ce => grp_fu_501_ce,
        dout => grp_fu_501_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U505 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_505_p0,
        din1 => grp_fu_505_p1,
        ce => grp_fu_505_ce,
        dout => grp_fu_505_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U506 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_509_p0,
        din1 => grp_fu_509_p1,
        ce => grp_fu_509_ce,
        opcode => grp_fu_509_opcode,
        dout => grp_fu_509_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_264_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv1_fu_264_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_conv1_fu_264_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_264_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_264_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_conv2_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv3_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (biases_RVALID = ap_const_logic_1))) then 
                    grp_conv3_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                biases_addr_reg_470 <= p_cast_cast_fu_408_p1;
                conv1_biases_read_reg_455 <= conv1_biases;
                conv1_output_ftmap_read_reg_449 <= conv1_output_ftmap;
                conv1_weights_read_reg_460 <= conv1_weights;
                conv2_biases_read_reg_439 <= conv2_biases;
                conv2_output_ftmap_read_reg_433 <= conv2_output_ftmap;
                conv2_weights_read_reg_444 <= conv2_weights;
                conv3_weights_read_reg_428 <= conv3_weights;
                input_ftmap_read_reg_465 <= input_ftmap;
                output_ftmap_read_reg_423 <= output_ftmap;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                empty_reg_476 <= empty_fu_418_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state13, grp_conv1_fu_264_ap_done, grp_conv2_fu_300_ap_done, grp_conv3_fu_330_ap_done, biases_ARREADY, biases_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv1_fu_264_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_conv2_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((biases_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (biases_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_conv3_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(biases_RVALID)
    begin
        if ((biases_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(grp_conv3_fu_330_ap_done)
    begin
        if ((grp_conv3_fu_330_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_conv1_fu_264_ap_done)
    begin
        if ((grp_conv1_fu_264_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_conv2_fu_300_ap_done)
    begin
        if ((grp_conv2_fu_300_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(biases_ARREADY)
    begin
        if ((biases_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_conv3_fu_330_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_conv3_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_conv3_fu_330_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_conv3_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    biases_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, biases_addr_reg_470, grp_conv1_fu_264_m_axi_biases_ARADDR, grp_conv2_fu_300_m_axi_biases_ARADDR, biases_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((biases_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            biases_ARADDR <= biases_addr_reg_470;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            biases_ARADDR <= grp_conv2_fu_300_m_axi_biases_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            biases_ARADDR <= grp_conv1_fu_264_m_axi_biases_ARADDR;
        else 
            biases_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    biases_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, grp_conv1_fu_264_m_axi_biases_ARLEN, grp_conv2_fu_300_m_axi_biases_ARLEN, biases_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((biases_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            biases_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            biases_ARLEN <= grp_conv2_fu_300_m_axi_biases_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            biases_ARLEN <= grp_conv1_fu_264_m_axi_biases_ARLEN;
        else 
            biases_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    biases_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, grp_conv1_fu_264_m_axi_biases_ARVALID, grp_conv2_fu_300_m_axi_biases_ARVALID, biases_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((biases_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            biases_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            biases_ARVALID <= grp_conv2_fu_300_m_axi_biases_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            biases_ARVALID <= grp_conv1_fu_264_m_axi_biases_ARVALID;
        else 
            biases_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    biases_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_biases_RREADY, grp_conv2_fu_300_m_axi_biases_RREADY, biases_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (biases_RVALID = ap_const_logic_1))) then 
            biases_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            biases_RREADY <= grp_conv2_fu_300_m_axi_biases_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            biases_RREADY <= grp_conv1_fu_264_m_axi_biases_RREADY;
        else 
            biases_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    biases_blk_n_AR_assign_proc : process(m_axi_biases_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            biases_blk_n_AR <= m_axi_biases_ARREADY;
        else 
            biases_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    biases_blk_n_R_assign_proc : process(m_axi_biases_RVALID, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            biases_blk_n_R <= m_axi_biases_RVALID;
        else 
            biases_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    bundle_1_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_1_ARADDR, grp_conv3_fu_330_m_axi_bundle_1_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_1_ARADDR <= grp_conv3_fu_330_m_axi_bundle_1_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_1_ARADDR <= grp_conv1_fu_264_m_axi_bundle_1_ARADDR;
        else 
            bundle_1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bundle_1_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_1_ARLEN, grp_conv3_fu_330_m_axi_bundle_1_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_1_ARLEN <= grp_conv3_fu_330_m_axi_bundle_1_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_1_ARLEN <= grp_conv1_fu_264_m_axi_bundle_1_ARLEN;
        else 
            bundle_1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bundle_1_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_1_ARVALID, grp_conv3_fu_330_m_axi_bundle_1_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_1_ARVALID <= grp_conv3_fu_330_m_axi_bundle_1_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_1_ARVALID <= grp_conv1_fu_264_m_axi_bundle_1_ARVALID;
        else 
            bundle_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    bundle_1_AWVALID_assign_proc : process(grp_conv2_fu_300_m_axi_bundle_1_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bundle_1_AWVALID <= grp_conv2_fu_300_m_axi_bundle_1_AWVALID;
        else 
            bundle_1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    bundle_1_BREADY_assign_proc : process(grp_conv2_fu_300_m_axi_bundle_1_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bundle_1_BREADY <= grp_conv2_fu_300_m_axi_bundle_1_BREADY;
        else 
            bundle_1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    bundle_1_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_1_RREADY, grp_conv3_fu_330_m_axi_bundle_1_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_1_RREADY <= grp_conv3_fu_330_m_axi_bundle_1_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_1_RREADY <= grp_conv1_fu_264_m_axi_bundle_1_RREADY;
        else 
            bundle_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    bundle_1_WVALID_assign_proc : process(grp_conv2_fu_300_m_axi_bundle_1_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bundle_1_WVALID <= grp_conv2_fu_300_m_axi_bundle_1_WVALID;
        else 
            bundle_1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    bundle_2_ARVALID_assign_proc : process(grp_conv2_fu_300_m_axi_bundle_2_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bundle_2_ARVALID <= grp_conv2_fu_300_m_axi_bundle_2_ARVALID;
        else 
            bundle_2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    bundle_2_AWADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_AWADDR, grp_conv3_fu_330_m_axi_bundle_2_AWADDR, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_AWADDR <= grp_conv3_fu_330_m_axi_bundle_2_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_AWADDR <= grp_conv1_fu_264_m_axi_bundle_2_AWADDR;
        else 
            bundle_2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bundle_2_AWLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_AWLEN, grp_conv3_fu_330_m_axi_bundle_2_AWLEN, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_AWLEN <= grp_conv3_fu_330_m_axi_bundle_2_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_AWLEN <= grp_conv1_fu_264_m_axi_bundle_2_AWLEN;
        else 
            bundle_2_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bundle_2_AWVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_AWVALID, grp_conv3_fu_330_m_axi_bundle_2_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_AWVALID <= grp_conv3_fu_330_m_axi_bundle_2_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_AWVALID <= grp_conv1_fu_264_m_axi_bundle_2_AWVALID;
        else 
            bundle_2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    bundle_2_BREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_BREADY, grp_conv3_fu_330_m_axi_bundle_2_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_BREADY <= grp_conv3_fu_330_m_axi_bundle_2_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_BREADY <= grp_conv1_fu_264_m_axi_bundle_2_BREADY;
        else 
            bundle_2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    bundle_2_RREADY_assign_proc : process(grp_conv2_fu_300_m_axi_bundle_2_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bundle_2_RREADY <= grp_conv2_fu_300_m_axi_bundle_2_RREADY;
        else 
            bundle_2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    bundle_2_WDATA_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_WDATA, grp_conv3_fu_330_m_axi_bundle_2_WDATA, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_WDATA <= grp_conv3_fu_330_m_axi_bundle_2_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_WDATA <= grp_conv1_fu_264_m_axi_bundle_2_WDATA;
        else 
            bundle_2_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bundle_2_WSTRB_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_WSTRB, grp_conv3_fu_330_m_axi_bundle_2_WSTRB, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_WSTRB <= grp_conv3_fu_330_m_axi_bundle_2_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_WSTRB <= grp_conv1_fu_264_m_axi_bundle_2_WSTRB;
        else 
            bundle_2_WSTRB <= "XXXX";
        end if; 
    end process;


    bundle_2_WVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_bundle_2_WVALID, grp_conv3_fu_330_m_axi_bundle_2_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bundle_2_WVALID <= grp_conv3_fu_330_m_axi_bundle_2_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bundle_2_WVALID <= grp_conv1_fu_264_m_axi_bundle_2_WVALID;
        else 
            bundle_2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_418_p1 <= biases_RDATA;
    grp_conv1_fu_264_ap_start <= grp_conv1_fu_264_ap_start_reg;
    grp_conv2_fu_300_ap_start <= grp_conv2_fu_300_ap_start_reg;
    grp_conv3_fu_330_ap_start <= grp_conv3_fu_330_ap_start_reg;

    grp_fu_481_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_481_p_ce, grp_conv2_fu_300_grp_fu_481_p_ce, grp_conv3_fu_330_grp_fu_481_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_481_ce <= grp_conv3_fu_330_grp_fu_481_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_481_ce <= grp_conv2_fu_300_grp_fu_481_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_481_ce <= grp_conv1_fu_264_grp_fu_481_p_ce;
        else 
            grp_fu_481_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_481_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_481_p_din0, grp_conv2_fu_300_grp_fu_481_p_din0, grp_conv3_fu_330_grp_fu_481_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_481_p0 <= grp_conv3_fu_330_grp_fu_481_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_481_p0 <= grp_conv2_fu_300_grp_fu_481_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_481_p0 <= grp_conv1_fu_264_grp_fu_481_p_din0;
        else 
            grp_fu_481_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_481_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_481_p_din1, grp_conv2_fu_300_grp_fu_481_p_din1, grp_conv3_fu_330_grp_fu_481_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_481_p1 <= grp_conv3_fu_330_grp_fu_481_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_481_p1 <= grp_conv2_fu_300_grp_fu_481_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_481_p1 <= grp_conv1_fu_264_grp_fu_481_p_din1;
        else 
            grp_fu_481_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_485_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_485_p_ce, grp_conv3_fu_330_grp_fu_485_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_485_ce <= grp_conv3_fu_330_grp_fu_485_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_485_ce <= grp_conv1_fu_264_grp_fu_485_p_ce;
        else 
            grp_fu_485_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_485_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_485_p_din0, grp_conv3_fu_330_grp_fu_485_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_485_p0 <= grp_conv3_fu_330_grp_fu_485_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_485_p0 <= grp_conv1_fu_264_grp_fu_485_p_din0;
        else 
            grp_fu_485_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_485_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_485_p_din1, grp_conv3_fu_330_grp_fu_485_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_485_p1 <= grp_conv3_fu_330_grp_fu_485_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_485_p1 <= grp_conv1_fu_264_grp_fu_485_p_din1;
        else 
            grp_fu_485_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_489_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_489_p_ce, grp_conv3_fu_330_grp_fu_489_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_489_ce <= grp_conv3_fu_330_grp_fu_489_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_489_ce <= grp_conv1_fu_264_grp_fu_489_p_ce;
        else 
            grp_fu_489_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_489_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_489_p_din0, grp_conv3_fu_330_grp_fu_489_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_489_p0 <= grp_conv3_fu_330_grp_fu_489_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_489_p0 <= grp_conv1_fu_264_grp_fu_489_p_din0;
        else 
            grp_fu_489_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_489_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_489_p_din1, grp_conv3_fu_330_grp_fu_489_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_489_p1 <= grp_conv3_fu_330_grp_fu_489_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_489_p1 <= grp_conv1_fu_264_grp_fu_489_p_din1;
        else 
            grp_fu_489_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_493_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_493_p_ce, grp_conv3_fu_330_grp_fu_493_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_493_ce <= grp_conv3_fu_330_grp_fu_493_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_493_ce <= grp_conv1_fu_264_grp_fu_493_p_ce;
        else 
            grp_fu_493_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_493_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_493_p_din0, grp_conv3_fu_330_grp_fu_493_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_493_p0 <= grp_conv3_fu_330_grp_fu_493_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_493_p0 <= grp_conv1_fu_264_grp_fu_493_p_din0;
        else 
            grp_fu_493_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_493_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_493_p_din1, grp_conv3_fu_330_grp_fu_493_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_493_p1 <= grp_conv3_fu_330_grp_fu_493_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_493_p1 <= grp_conv1_fu_264_grp_fu_493_p_din1;
        else 
            grp_fu_493_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_497_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_497_p_ce, grp_conv2_fu_300_grp_fu_497_p_ce, grp_conv3_fu_330_grp_fu_497_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_497_ce <= grp_conv3_fu_330_grp_fu_497_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_497_ce <= grp_conv2_fu_300_grp_fu_497_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_497_ce <= grp_conv1_fu_264_grp_fu_497_p_ce;
        else 
            grp_fu_497_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_497_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_497_p_din0, grp_conv2_fu_300_grp_fu_497_p_din0, grp_conv3_fu_330_grp_fu_497_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_497_p0 <= grp_conv3_fu_330_grp_fu_497_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_497_p0 <= grp_conv2_fu_300_grp_fu_497_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_497_p0 <= grp_conv1_fu_264_grp_fu_497_p_din0;
        else 
            grp_fu_497_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_497_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_497_p_din1, grp_conv2_fu_300_grp_fu_497_p_din1, grp_conv3_fu_330_grp_fu_497_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_497_p1 <= grp_conv3_fu_330_grp_fu_497_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_497_p1 <= grp_conv2_fu_300_grp_fu_497_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_497_p1 <= grp_conv1_fu_264_grp_fu_497_p_din1;
        else 
            grp_fu_497_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_501_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_501_p_ce, grp_conv3_fu_330_grp_fu_501_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_501_ce <= grp_conv3_fu_330_grp_fu_501_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_501_ce <= grp_conv1_fu_264_grp_fu_501_p_ce;
        else 
            grp_fu_501_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_501_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_501_p_din0, grp_conv3_fu_330_grp_fu_501_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_501_p0 <= grp_conv3_fu_330_grp_fu_501_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_501_p0 <= grp_conv1_fu_264_grp_fu_501_p_din0;
        else 
            grp_fu_501_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_501_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_501_p_din1, grp_conv3_fu_330_grp_fu_501_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_501_p1 <= grp_conv3_fu_330_grp_fu_501_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_501_p1 <= grp_conv1_fu_264_grp_fu_501_p_din1;
        else 
            grp_fu_501_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_505_ce_assign_proc : process(grp_conv1_fu_264_grp_fu_505_p_ce, grp_conv3_fu_330_grp_fu_505_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_505_ce <= grp_conv3_fu_330_grp_fu_505_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_505_ce <= grp_conv1_fu_264_grp_fu_505_p_ce;
        else 
            grp_fu_505_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_505_p0_assign_proc : process(grp_conv1_fu_264_grp_fu_505_p_din0, grp_conv3_fu_330_grp_fu_505_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_505_p0 <= grp_conv3_fu_330_grp_fu_505_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_505_p0 <= grp_conv1_fu_264_grp_fu_505_p_din0;
        else 
            grp_fu_505_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_505_p1_assign_proc : process(grp_conv1_fu_264_grp_fu_505_p_din1, grp_conv3_fu_330_grp_fu_505_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_505_p1 <= grp_conv3_fu_330_grp_fu_505_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_505_p1 <= grp_conv1_fu_264_grp_fu_505_p_din1;
        else 
            grp_fu_505_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_509_ce_assign_proc : process(grp_conv2_fu_300_grp_fu_509_p_ce, grp_conv3_fu_330_grp_fu_509_p_ce, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_509_ce <= grp_conv3_fu_330_grp_fu_509_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_509_ce <= grp_conv2_fu_300_grp_fu_509_p_ce;
        else 
            grp_fu_509_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_509_opcode_assign_proc : process(grp_conv2_fu_300_grp_fu_509_p_opcode, grp_conv3_fu_330_grp_fu_509_p_opcode, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_509_opcode <= grp_conv3_fu_330_grp_fu_509_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_509_opcode <= grp_conv2_fu_300_grp_fu_509_p_opcode;
        else 
            grp_fu_509_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_509_p0_assign_proc : process(grp_conv2_fu_300_grp_fu_509_p_din0, grp_conv3_fu_330_grp_fu_509_p_din0, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_509_p0 <= grp_conv3_fu_330_grp_fu_509_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_509_p0 <= grp_conv2_fu_300_grp_fu_509_p_din0;
        else 
            grp_fu_509_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_509_p1_assign_proc : process(grp_conv2_fu_300_grp_fu_509_p_din1, grp_conv3_fu_330_grp_fu_509_p_din1, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_509_p1 <= grp_conv3_fu_330_grp_fu_509_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_509_p1 <= grp_conv2_fu_300_grp_fu_509_p_din1;
        else 
            grp_fu_509_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        p_cast_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_398_p4),64));

    p_cast_fu_398_p4 <= conv3_biases(63 downto 2);

    weights_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_weights_ARADDR, grp_conv2_fu_300_m_axi_weights_ARADDR, grp_conv3_fu_330_m_axi_weights_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            weights_ARADDR <= grp_conv3_fu_330_m_axi_weights_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_ARADDR <= grp_conv2_fu_300_m_axi_weights_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_ARADDR <= grp_conv1_fu_264_m_axi_weights_ARADDR;
        else 
            weights_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_weights_ARLEN, grp_conv2_fu_300_m_axi_weights_ARLEN, grp_conv3_fu_330_m_axi_weights_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            weights_ARLEN <= grp_conv3_fu_330_m_axi_weights_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_ARLEN <= grp_conv2_fu_300_m_axi_weights_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_ARLEN <= grp_conv1_fu_264_m_axi_weights_ARLEN;
        else 
            weights_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_weights_ARVALID, grp_conv2_fu_300_m_axi_weights_ARVALID, grp_conv3_fu_330_m_axi_weights_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            weights_ARVALID <= grp_conv3_fu_330_m_axi_weights_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_ARVALID <= grp_conv2_fu_300_m_axi_weights_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_ARVALID <= grp_conv1_fu_264_m_axi_weights_ARVALID;
        else 
            weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    weights_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, grp_conv1_fu_264_m_axi_weights_RREADY, grp_conv2_fu_300_m_axi_weights_RREADY, grp_conv3_fu_330_m_axi_weights_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            weights_RREADY <= grp_conv3_fu_330_m_axi_weights_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_RREADY <= grp_conv2_fu_300_m_axi_weights_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_RREADY <= grp_conv1_fu_264_m_axi_weights_RREADY;
        else 
            weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
