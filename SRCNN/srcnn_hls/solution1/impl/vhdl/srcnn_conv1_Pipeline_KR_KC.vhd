-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_Pipeline_KR_KC is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (5 downto 0);
    select_ln42_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    select_ln42_4 : IN STD_LOGIC_VECTOR (1 downto 0);
    zext_ln43_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln43 : IN STD_LOGIC_VECTOR (7 downto 0);
    add_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_out_ap_vld : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce1 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce1 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 : OUT STD_LOGIC;
    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_ce0 : OUT STD_LOGIC;
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2181_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2181_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2181_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2181_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2181_p_ce : OUT STD_LOGIC;
    grp_fu_2185_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2185_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2185_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2185_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1_Pipeline_KR_KC is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv11_107 : STD_LOGIC_VECTOR (10 downto 0) := "00100000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal icmp_ln45_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage8 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln43_1_cast_fu_567_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_1_cast_reg_1128 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_cast_fu_575_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln43_cast_reg_1134 : STD_LOGIC_VECTOR (10 downto 0);
    signal kc_1_reg_1139 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln45_fu_612_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_1_fu_660_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln46_1_reg_1203 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln6_fu_666_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln6_reg_1209 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln46_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln46_reg_1219 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln46_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1224_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_1_fu_714_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_1_reg_1238 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_2_fu_754_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln46_2_reg_1254 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln46_mid1_reg_1260 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_854_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln45_3_fu_877_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln45_3_reg_1316 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid1_fu_882_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid1_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_935_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_5_fu_978_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal select_ln45_2_fu_1018_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_2_reg_1391 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_5_mid1_fu_1023_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_9_fu_1044_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal mul_mid1_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_1441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal add_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_5_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal p_cast_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast1_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln45_4_cast_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_1_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln53_2_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln53_4_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add52_117_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_add52_117_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal kc_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln46_fu_945_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kc_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kr_fu_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln45_7_fu_790_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kr_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln45_1_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal lshr_ln5_fu_616_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln5_cast_fu_626_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_104_fu_630_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln45_fu_608_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln42_1_cast_fu_571_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_105_fu_650_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_106_fu_654_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_fu_704_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln45_mid1_fu_718_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln45_mid1_cast_fu_728_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_107_fu_732_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln45_1_fu_710_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_108_fu_744_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid125_fu_748_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln45_4_fu_770_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_808_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_831_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_863_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln46_fu_891_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_895_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_915_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_935_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln48_fu_956_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_fu_959_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1074_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1083_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln45_6_fu_999_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln46_fu_1005_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_1_fu_1009_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1091_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1074_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1074_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1074_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1083_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1083_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1091_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1091_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1091_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal grp_fu_1074_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1074_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1083_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1091_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1091_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_2_1_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component srcnn_mac_muladd_3ns_9ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_9_4_32_1_1_U7 : component srcnn_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_q1,
        din1 => ap_const_lv32_0,
        din2 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_q0,
        din3 => ap_const_lv32_0,
        din4 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_q0,
        din5 => ap_const_lv32_0,
        din6 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_q0,
        din7 => ap_const_lv32_0,
        din8 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_q0,
        din9 => kc_1_reg_1139,
        dout => tmp_s_fu_808_p11);

    mux_9_4_32_1_1_U8 : component srcnn_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_q1,
        din1 => ap_const_lv32_0,
        din2 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_q0,
        din3 => ap_const_lv32_0,
        din4 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_q0,
        din5 => ap_const_lv32_0,
        din6 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_q0,
        din7 => ap_const_lv32_0,
        din8 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_q0,
        din9 => kc_1_reg_1139,
        dout => tmp_3_fu_831_p11);

    mux_2_1_32_1_1_U9 : component srcnn_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_808_p11,
        din1 => tmp_3_fu_831_p11,
        din2 => trunc_ln45_reg_1147,
        dout => tmp_4_fu_854_p4);

    mux_2_1_32_1_1_U10 : component srcnn_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_q0,
        din1 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_q0,
        din2 => trunc_ln45_1_reg_1238,
        dout => tmp_4_mid1_fu_882_p4);

    mux_7_3_32_1_1_U11 : component srcnn_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_q0,
        din1 => ap_const_lv32_0,
        din2 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_q0,
        din3 => ap_const_lv32_0,
        din4 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_q0,
        din5 => ap_const_lv32_0,
        din6 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_q0,
        din7 => trunc_ln46_fu_891_p1,
        dout => tmp_6_fu_895_p9);

    mux_7_3_32_1_1_U12 : component srcnn_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_q0,
        din1 => ap_const_lv32_0,
        din2 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_q0,
        din3 => ap_const_lv32_0,
        din4 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_q0,
        din5 => ap_const_lv32_0,
        din6 => p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_q0,
        din7 => trunc_ln46_fu_891_p1,
        dout => tmp_7_fu_915_p9);

    mux_2_1_32_1_1_U13 : component srcnn_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_6_fu_895_p9,
        din1 => tmp_7_fu_915_p9,
        din2 => tmp_8_fu_935_p3,
        dout => tmp_8_fu_935_p4);

    mux_4_2_32_1_1_U14 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din4 => add_ln46_1_reg_1203,
        dout => tmp_5_fu_978_p6);

    mux_4_2_32_1_1_U15 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din4 => add_ln46_2_reg_1254,
        dout => tmp_5_mid1_fu_1023_p6);

    mux_4_2_32_1_1_U16 : component srcnn_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_q0,
        din1 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_q0,
        din2 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_q0,
        din3 => conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_q0,
        din4 => select_ln45_2_reg_1391,
        dout => tmp_9_fu_1044_p6);

    mac_muladd_3ns_9ns_9ns_11_4_1_U17 : component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1074_p0,
        din1 => grp_fu_1074_p1,
        din2 => grp_fu_1074_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1074_p3);

    mac_muladd_3ns_9ns_8ns_11_4_1_U18 : component srcnn_mac_muladd_3ns_9ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1083_p0,
        din1 => grp_fu_1083_p1,
        din2 => grp_fu_1083_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1083_p3);

    mac_muladd_3ns_9ns_9ns_11_4_1_U19 : component srcnn_mac_muladd_3ns_9ns_9ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1091_p0,
        din1 => grp_fu_1091_p1,
        din2 => grp_fu_1091_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1091_p3);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage8,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    add52_117_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add52_117_fu_124 <= tmp;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln45_reg_1234_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                add52_117_fu_124 <= grp_fu_2181_p_dout0;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_692_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_136 <= add_ln45_1_fu_698_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_136 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    kc_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kc_fu_128 <= ap_const_lv4_0;
            elsif (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kc_fu_128 <= add_ln46_fu_945_p2;
            end if; 
        end if;
    end process;

    kr_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_692_p2 = ap_const_lv1_0))) then 
                    kr_fu_132 <= select_ln45_7_fu_790_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kr_fu_132 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln46_1_reg_1203 <= add_ln46_1_fu_660_p2;
                icmp_ln45_reg_1234 <= icmp_ln45_fu_692_p2;
                icmp_ln45_reg_1234_pp0_iter1_reg <= icmp_ln45_reg_1234;
                icmp_ln46_reg_1224 <= icmp_ln46_fu_686_p2;
                icmp_ln46_reg_1224_pp0_iter1_reg <= icmp_ln46_reg_1224;
                kc_1_reg_1139 <= ap_sig_allocacmp_kc_1;
                lshr_ln6_reg_1209 <= empty_106_fu_654_p2(4 downto 2);
                    or_ln46_reg_1219(3 downto 1) <= or_ln46_fu_680_p2(3 downto 1);
                trunc_ln45_reg_1147 <= trunc_ln45_fu_612_p1;
                    zext_ln43_1_cast_reg_1128(7 downto 0) <= zext_ln43_1_cast_fu_567_p1(7 downto 0);
                    zext_ln43_cast_reg_1134(7 downto 0) <= zext_ln43_cast_fu_575_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln46_2_reg_1254 <= add_ln46_2_fu_754_p2;
                lshr_ln46_mid1_reg_1260 <= p_mid125_fu_748_p2(4 downto 2);
                trunc_ln45_1_reg_1238 <= trunc_ln45_1_fu_714_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_reg_1446 <= grp_fu_2181_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul_1_reg_1441 <= grp_fu_2185_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_1224 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_mid1_reg_1436 <= grp_fu_2185_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul_reg_1421 <= grp_fu_2185_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                select_ln45_2_reg_1391 <= select_ln45_2_fu_1018_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln45_3_reg_1316 <= select_ln45_3_fu_877_p3;
                tmp_8_reg_1326 <= tmp_8_fu_935_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln46_reg_1224 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_4_mid1_reg_1321 <= tmp_4_mid1_fu_882_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_4_reg_1306 <= tmp_4_fu_854_p4;
            end if;
        end if;
    end process;
    zext_ln43_1_cast_reg_1128(8) <= '0';
    zext_ln43_cast_reg_1134(10 downto 8) <= "000";
    or_ln46_reg_1219(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_block_pp0_stage7_subdone, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln45_1_fu_698_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln45_fu_704_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_kr_1) + unsigned(ap_const_lv4_1));
    add_ln46_1_fu_660_p2 <= std_logic_vector(unsigned(empty_105_fu_650_p1) + unsigned(select_ln42_4));
    add_ln46_2_fu_754_p2 <= std_logic_vector(unsigned(empty_108_fu_744_p1) + unsigned(select_ln42_4));
    add_ln46_fu_945_p2 <= std_logic_vector(unsigned(select_ln45_fu_863_p3) + unsigned(ap_const_lv4_2));
    add_ln51_1_fu_1009_p2 <= std_logic_vector(unsigned(zext_ln46_fu_1005_p1) + unsigned(zext_ln43_1_cast_reg_1128));
    add_ln51_fu_959_p2 <= std_logic_vector(unsigned(zext_ln48_fu_956_p1) + unsigned(zext_ln43_1_cast_reg_1128));
    add_out <= grp_fu_2181_p_dout0;

    add_out_ap_vld_assign_proc : process(icmp_ln45_reg_1234_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln45_reg_1234_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_out_ap_vld <= ap_const_logic_1;
        else 
            add_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, icmp_ln45_reg_1234)
    begin
        if (((icmp_ln45_reg_1234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln45_reg_1234_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln45_reg_1234_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage8;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add52_117_load_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln45_reg_1234_pp0_iter1_reg, ap_CS_fsm_pp0_stage7, add52_117_fu_124, ap_block_pp0_stage7, grp_fu_2181_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln45_reg_1234_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_sig_allocacmp_add52_117_load <= grp_fu_2181_p_dout0;
        else 
            ap_sig_allocacmp_add52_117_load <= add52_117_fu_124;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_136)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_136;
        end if; 
    end process;


    ap_sig_allocacmp_kc_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kc_fu_128)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_kc_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kc_1 <= kc_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_kr_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kr_fu_132)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_kr_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kr_1 <= kr_fu_132;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln53_1_fu_971_p1, ap_block_pp0_stage3, zext_ln53_2_fu_992_p1, ap_block_pp0_stage4, zext_ln53_4_fu_1037_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln53_4_fu_1037_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln53_2_fu_992_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= zext_ln53_1_fu_971_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln53_1_fu_971_p1, ap_block_pp0_stage3, zext_ln53_2_fu_992_p1, ap_block_pp0_stage4, zext_ln53_4_fu_1037_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln53_4_fu_1037_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln53_2_fu_992_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= zext_ln53_1_fu_971_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln53_1_fu_971_p1, ap_block_pp0_stage3, zext_ln53_2_fu_992_p1, ap_block_pp0_stage4, zext_ln53_4_fu_1037_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln53_4_fu_1037_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln53_2_fu_992_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= zext_ln53_1_fu_971_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, zext_ln53_1_fu_971_p1, ap_block_pp0_stage3, zext_ln53_2_fu_992_p1, ap_block_pp0_stage4, zext_ln53_4_fu_1037_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln53_4_fu_1037_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln53_2_fu_992_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= zext_ln53_1_fu_971_p1(11 - 1 downto 0);
            else 
                conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_1;
        else 
            conv1_float_255_255_float_1_9_9_float_float_255_255_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_104_fu_630_p2 <= std_logic_vector(unsigned(empty) + unsigned(lshr_ln5_cast_fu_626_p1));
    empty_105_fu_650_p1 <= ap_sig_allocacmp_kr_1(2 - 1 downto 0);
    empty_106_fu_654_p2 <= std_logic_vector(unsigned(zext_ln45_fu_608_p1) + unsigned(select_ln42_1_cast_fu_571_p1));
    empty_107_fu_732_p2 <= std_logic_vector(unsigned(empty) + unsigned(lshr_ln45_mid1_cast_fu_728_p1));
    empty_108_fu_744_p1 <= add_ln45_fu_704_p2(2 - 1 downto 0);
    grp_fu_1074_p0 <= grp_fu_1074_p00(3 - 1 downto 0);
    grp_fu_1074_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_fu_666_p4),11));
    grp_fu_1074_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_1074_p2 <= grp_fu_1074_p20(9 - 1 downto 0);
    grp_fu_1074_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_fu_959_p2),11));
    grp_fu_1083_p0 <= grp_fu_1083_p00(3 - 1 downto 0);
    grp_fu_1083_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln46_mid1_reg_1260),11));
    grp_fu_1083_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_1083_p2 <= zext_ln43_cast_reg_1134(8 - 1 downto 0);
    grp_fu_1091_p0 <= grp_fu_1091_p00(3 - 1 downto 0);
    grp_fu_1091_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_3_reg_1316),11));
    grp_fu_1091_p1 <= ap_const_lv11_107(9 - 1 downto 0);
    grp_fu_1091_p2 <= grp_fu_1091_p20(9 - 1 downto 0);
    grp_fu_1091_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_1_fu_1009_p2),11));
    grp_fu_2181_p_ce <= ap_const_logic_1;
    grp_fu_2181_p_din0 <= grp_fu_557_p0;
    grp_fu_2181_p_din1 <= grp_fu_557_p1;
    grp_fu_2181_p_opcode <= ap_const_lv2_0;
    grp_fu_2185_p_ce <= ap_const_logic_1;
    grp_fu_2185_p_din0 <= grp_fu_563_p0;
    grp_fu_2185_p_din1 <= grp_fu_563_p1;

    grp_fu_557_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, select_ln45_5_fu_1062_p3, ap_block_pp0_stage4, ap_sig_allocacmp_add52_117_load, ap_block_pp0_stage7, ap_block_pp0_stage1, grp_fu_2181_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_557_p0 <= select_ln45_5_fu_1062_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_557_p0 <= grp_fu_2181_p_dout0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_557_p0 <= ap_sig_allocacmp_add52_117_load;
        else 
            grp_fu_557_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_557_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, mul_reg_1421, ap_CS_fsm_pp0_stage7, mul_mid1_reg_1436, mul_1_reg_1441, ap_block_pp0_stage4, ap_block_pp0_stage7, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_557_p1 <= mul_1_reg_1441;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_557_p1 <= mul_mid1_reg_1436;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_557_p1 <= mul_reg_1421;
        else 
            grp_fu_557_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_563_p0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_4_reg_1306, tmp_4_mid1_reg_1321, tmp_8_reg_1326, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_563_p0 <= tmp_8_reg_1326;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_563_p0 <= tmp_4_mid1_reg_1321;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_563_p0 <= tmp_4_reg_1306;
            else 
                grp_fu_563_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_563_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_563_p1_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_fu_978_p6, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_5_mid1_fu_1023_p6, ap_CS_fsm_pp0_stage6, tmp_9_fu_1044_p6, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_563_p1 <= tmp_9_fu_1044_p6;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_563_p1 <= tmp_5_mid1_fu_1023_p6;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_563_p1 <= tmp_5_fu_978_p6;
            else 
                grp_fu_563_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_563_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln45_fu_692_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_24) else "0";
    icmp_ln46_fu_686_p2 <= "1" when (unsigned(or_ln46_fu_680_p2) < unsigned(ap_const_lv4_9)) else "0";
    lshr_ln45_mid1_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln45_mid1_fu_718_p4),6));
    lshr_ln45_mid1_fu_718_p4 <= add_ln45_fu_704_p2(3 downto 1);
    lshr_ln5_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_616_p4),6));
    lshr_ln5_fu_616_p4 <= ap_sig_allocacmp_kr_1(3 downto 1);
    lshr_ln6_fu_666_p4 <= empty_106_fu_654_p2(4 downto 2);
    or_ln46_fu_680_p2 <= (ap_sig_allocacmp_kc_1 or ap_const_lv4_1);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_address0 <= p_cast1_fu_738_p1(6 - 1 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_address1 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce1 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_0_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_address0 <= p_cast1_fu_738_p1(6 - 1 downto 0);
    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_address1 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce1 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_address0 <= select_ln45_4_cast_fu_778_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_address0 <= p_cast_fu_636_p1(6 - 1 downto 0);

    p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_ce0 <= ap_const_logic_1;
        else 
            p_ZZ5conv1PA255_A255_fPA1_A9_A9_fPfS1_E13weight_buffer_1_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_107_fu_732_p2),64));
    p_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_104_fu_630_p2),64));
    p_mid125_fu_748_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_710_p1) + unsigned(select_ln42_1_cast_fu_571_p1));
    select_ln42_1_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_1),5));
    select_ln45_2_fu_1018_p3 <= 
        add_ln46_1_reg_1203 when (icmp_ln46_reg_1224(0) = '1') else 
        add_ln46_2_reg_1254;
    select_ln45_3_fu_877_p3 <= 
        lshr_ln6_reg_1209 when (icmp_ln46_reg_1224(0) = '1') else 
        lshr_ln46_mid1_reg_1260;
    select_ln45_4_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_4_fu_770_p3),64));
    select_ln45_4_fu_770_p3 <= 
        empty_104_fu_630_p2 when (icmp_ln46_fu_686_p2(0) = '1') else 
        empty_107_fu_732_p2;
    select_ln45_5_fu_1062_p3 <= 
        add_reg_1446 when (icmp_ln46_reg_1224_pp0_iter1_reg(0) = '1') else 
        grp_fu_2181_p_dout0;
    select_ln45_6_fu_999_p3 <= 
        or_ln46_reg_1219 when (icmp_ln46_reg_1224(0) = '1') else 
        ap_const_lv4_1;
    select_ln45_7_fu_790_p3 <= 
        ap_sig_allocacmp_kr_1 when (icmp_ln46_fu_686_p2(0) = '1') else 
        add_ln45_fu_704_p2;
    select_ln45_fu_863_p3 <= 
        kc_1_reg_1139 when (icmp_ln46_reg_1224(0) = '1') else 
        ap_const_lv4_0;
    tmp_8_fu_935_p3 <= 
        trunc_ln45_reg_1147 when (icmp_ln46_reg_1224(0) = '1') else 
        trunc_ln45_1_reg_1238;
    trunc_ln45_1_fu_714_p1 <= add_ln45_fu_704_p2(1 - 1 downto 0);
    trunc_ln45_fu_612_p1 <= ap_sig_allocacmp_kr_1(1 - 1 downto 0);
    trunc_ln46_fu_891_p1 <= select_ln45_fu_863_p3(3 - 1 downto 0);
    zext_ln43_1_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln43_1),9));
    zext_ln43_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln43),11));
    zext_ln45_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_704_p2),5));
    zext_ln45_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_kr_1),5));
    zext_ln46_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_6_fu_999_p3),9));
    zext_ln48_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_1_reg_1139),9));
    zext_ln53_1_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1074_p3),64));
    zext_ln53_2_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1083_p3),64));
    zext_ln53_4_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1091_p3),64));
end behav;
