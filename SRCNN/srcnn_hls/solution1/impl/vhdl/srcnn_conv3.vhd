-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_739_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_ce : OUT STD_LOGIC;
    grp_fu_743_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_743_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_743_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_743_p_ce : OUT STD_LOGIC;
    grp_fu_747_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_747_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_747_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_747_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_747_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv18_3DE20 : STD_LOGIC_VECTOR (17 downto 0) := "111101111000100000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv12_59 : STD_LOGIC_VECTOR (11 downto 0) := "000001011001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv18_59 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001011001";
    constant ap_const_lv7_59 : STD_LOGIC_VECTOR (6 downto 0) := "1011001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_55 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010101";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv13_1C39 : STD_LOGIC_VECTOR (12 downto 0) := "1110000111001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_fm_buffer_0_ce0 : STD_LOGIC;
    signal output_fm_buffer_0_we0 : STD_LOGIC;
    signal output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal phi_mul26_load_reg_2331 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln31_1_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_1_reg_2336 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_858_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_reg_2344 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast3_fu_870_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast3_reg_2349 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln31_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_879_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln32_reg_2361 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln32_1_fu_883_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_1_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_895_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln32_reg_2374 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_70_fu_915_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln112_fu_931_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln112_reg_2387 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond393_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln107_1_fu_935_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln107_1_reg_2392 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln107_fu_951_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln107_reg_2400 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln107_fu_979_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln107_reg_2405 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln107_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_2410 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln108_fu_1007_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln108_reg_2415 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln108_fu_1023_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln108_reg_2423 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln116_1_fu_1103_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln116_1_reg_2428 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln108_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_2_reg_2433 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln109_fu_1133_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln109_reg_2441 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln109_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_1_fu_1231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln48_1_reg_2486 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln48_fu_1243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_reg_2494 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_fm_buffer_0_addr_1_reg_2499 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln49_fu_1270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_reg_2507 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln52_fu_1276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln52_reg_2517 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln52_fu_1290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln52_reg_2531 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln53_fu_1302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln53_reg_2536 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln52_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln53_1_fu_1306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_1_reg_2548 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln53_fu_1320_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_reg_2563 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln61_fu_1332_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln61_reg_2568 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln53_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln61_fu_1346_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln61_reg_2580 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_11_reg_2591 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln61_fu_1442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_reg_2605 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln63_7_fu_1497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_7_reg_2610 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln63_fu_1502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal or_ln61_1_fu_1537_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln61_1_reg_2631 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln63_1_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal or_ln61_2_fu_1614_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln61_2_reg_2652 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln63_2_fu_1629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal or_ln61_3_fu_1691_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln61_3_reg_2673 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln63_3_fu_1706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal or_ln61_4_fu_1768_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln61_4_reg_2694 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln63_4_fu_1783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln63_39_fu_1905_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_39_reg_2715 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_45_fu_1970_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_45_reg_2720 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln63_5_fu_1975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_2304_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln63_41_reg_2740 : STD_LOGIC_VECTOR (17 downto 0);
    signal bitcast_ln63_6_fu_1988_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal bitcast_ln63_7_fu_2001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln129_1_fu_2006_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln129_1_reg_2770 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal add_ln129_fu_2022_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln129_reg_2778 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln132_fu_2045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln132_reg_2783 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln129_fu_2016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal add_ln130_fu_2076_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln130_reg_2796 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln132_2_fu_2092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln132_2_reg_2801 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln130_fu_2070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_76_fu_2112_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal sub_ln83_fu_2138_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln83_reg_2814 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal add_ln80_fu_2150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln80_reg_2822 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ftmap_addr_reg_2827 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal add_ln81_fu_2176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_reg_2835 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ftmap_load_reg_2840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal bitcast_ln83_fu_2186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ti_reg_551 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond8314_fu_2106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul24_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_69_reg_574 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln32_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_585 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_596 : STD_LOGIC_VECTOR (11 downto 0);
    signal by_reg_608 : STD_LOGIC_VECTOR (6 downto 0);
    signal bx_reg_619 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ty_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln49_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul20_reg_642 : STD_LOGIC_VECTOR (12 downto 0);
    signal tx_reg_654 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_reg_666 : STD_LOGIC_VECTOR (2 downto 0);
    signal add51_7_lcssa_lcssa28_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_689 : STD_LOGIC_VECTOR (2 downto 0);
    signal add51_725_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal add51_7_lcssa27_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal nin_1_reg_712 : STD_LOGIC_VECTOR (5 downto 0);
    signal ty_1_reg_736 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul22_reg_747 : STD_LOGIC_VECTOR (12 downto 0);
    signal tx_1_reg_759 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal empty_75_reg_770 : STD_LOGIC_VECTOR (12 downto 0);
    signal xr_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln80_fu_2144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal p_cast38_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_4_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_5_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast41_fu_1259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_3_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_6_fu_1437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_9_fu_1507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_12_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_16_fu_1560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_19_fu_1609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_23_fu_1637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_26_fu_1686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_30_fu_1714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_33_fu_1763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_37_fu_1791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_40_fu_1840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_44_fu_1980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_47_fu_1984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_51_fu_1993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_54_fu_1997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_2_fu_2061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_4_fu_2097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast45_fu_2118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_2_fu_2165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul26_fu_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal tj_fu_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal yr_fu_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln81_fu_2170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1209_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln132_fu_2101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln84_fu_2232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_792_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_797_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_fu_842_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_864_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln112_1_fu_926_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln107_fu_941_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_961_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln116_1_fu_969_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln116_fu_957_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln116_fu_973_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln116_2_fu_993_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln116_fu_997_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln108_fu_1007_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln108_fu_1007_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln108_1_fu_1013_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_71_fu_1029_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1034_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_fu_1056_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_1070_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln116_fu_1078_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln116_1_fu_1082_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln116_fu_1091_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_1095_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln116_1_fu_1087_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln116_3_fu_1109_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln116_2_fu_1113_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln109_fu_1123_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln112_fu_1139_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_2_fu_1166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xClamped_fu_1180_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln116_2_fu_1188_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln116_3_fu_1192_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tx_cast_fu_1249_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_72_fu_1253_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln52_1_fu_1280_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_73_fu_1296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_2_fu_1310_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln57_fu_1326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln63_fu_1340_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln63_fu_1340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2241_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_1366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_4_fu_1374_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_fu_1358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_2_fu_1378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_cast_fu_1384_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_1394_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_cast_fu_1406_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_1416_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_5_fu_1402_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_3_fu_1426_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_4_fu_1432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln61_fu_1448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_2_fu_1457_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_2_fu_1457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln63_fu_1463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_1475_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln63_fu_1469_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_1485_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_10_fu_1493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2250_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_1514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_11_fu_1511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_8_fu_1521_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_9_fu_1527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln63_4_fu_1546_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_4_fu_1546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2259_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_fu_1564_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_17_fu_1571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_13_fu_1557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_12_fu_1575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_13_fu_1581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_1590_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_18_fu_1586_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_14_fu_1598_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_15_fu_1604_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln63_6_fu_1623_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_6_fu_1623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2268_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_fu_1641_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_24_fu_1648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_20_fu_1634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_18_fu_1652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_19_fu_1658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1667_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_25_fu_1663_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_20_fu_1675_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_21_fu_1681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln63_8_fu_1700_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_8_fu_1700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2277_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_16_fu_1718_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_31_fu_1725_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_27_fu_1711_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_24_fu_1729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_25_fu_1735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_fu_1744_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_32_fu_1740_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_26_fu_1752_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_27_fu_1758_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln63_10_fu_1777_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_10_fu_1777_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2286_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_fu_1795_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_38_fu_1802_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_34_fu_1788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_30_fu_1806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_31_fu_1812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_1821_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_39_fu_1817_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_32_fu_1829_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_33_fu_1835_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln61_5_fu_1845_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_12_fu_1858_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_12_fu_1858_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1864_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_45_fu_1872_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_41_fu_1850_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_36_fu_1876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_37_fu_1882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_1891_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_46_fu_1887_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_38_fu_1899_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln61_6_fu_1910_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_14_fu_1923_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln63_14_fu_1923_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_1929_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_52_fu_1937_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_48_fu_1915_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_42_fu_1941_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_43_fu_1947_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_1956_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_53_fu_1952_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_44_fu_1964_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2295_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln129_fu_2012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_74_fu_2028_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_2037_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln132_fu_2033_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln132_1_fu_2051_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln132_1_fu_2055_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln130_fu_2066_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln132_fu_2082_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln132_3_fu_2088_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_2130_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln83_fu_2126_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln83_1_fu_2156_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln83_fu_2160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln83_1_fu_2190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_2194_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln84_fu_2204_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln84_1_fu_2214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_2208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_fu_2220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_fu_2226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln63_fu_1340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2241_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2241_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mul_ln63_2_fu_1457_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2250_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2250_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal mul_ln63_4_fu_1546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2259_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal mul_ln63_6_fu_1623_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2268_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2268_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal mul_ln63_8_fu_1700_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2277_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2277_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal mul_ln63_10_fu_1777_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2286_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2286_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal mul_ln63_12_fu_1858_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2295_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2295_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal mul_ln63_14_fu_1923_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2304_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2304_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal mul_ln108_fu_1007_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln63_10_fu_1777_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_12_fu_1858_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_14_fu_1923_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_2_fu_1457_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_4_fu_1546_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_6_fu_1623_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_8_fu_1700_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln63_fu_1340_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_mul_12ns_8ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component srcnn_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_6ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_mul_5ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 253472,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_0_U : component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 7225,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_0_address0,
        ce0 => output_fm_buffer_0_ce0,
        we0 => output_fm_buffer_0_we0,
        d0 => output_fm_buffer_0_d0,
        q0 => output_fm_buffer_0_q0);

    mul_12ns_8ns_18_1_1_U86 : component srcnn_mul_12ns_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln108_fu_1007_p0,
        din1 => mul_ln108_fu_1007_p1,
        dout => mul_ln108_fu_1007_p2);

    mux_8_3_32_1_1_U87 : component srcnn_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_q0,
        din1 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_q0,
        din2 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_q0,
        din3 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_q0,
        din4 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_q0,
        din5 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_q0,
        din6 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_q0,
        din7 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_q0,
        din8 => trunc_ln1_reg_2410,
        dout => tmp_fu_1209_p10);

    mul_6ns_8ns_12_1_1_U88 : component srcnn_mul_6ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_fu_1340_p0,
        din1 => mul_ln63_fu_1340_p1,
        dout => mul_ln63_fu_1340_p2);

    mul_5ns_8ns_12_1_1_U89 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_2_fu_1457_p0,
        din1 => mul_ln63_2_fu_1457_p1,
        dout => mul_ln63_2_fu_1457_p2);

    mul_5ns_8ns_12_1_1_U90 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_4_fu_1546_p0,
        din1 => mul_ln63_4_fu_1546_p1,
        dout => mul_ln63_4_fu_1546_p2);

    mul_5ns_8ns_12_1_1_U91 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_6_fu_1623_p0,
        din1 => mul_ln63_6_fu_1623_p1,
        dout => mul_ln63_6_fu_1623_p2);

    mul_5ns_8ns_12_1_1_U92 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_8_fu_1700_p0,
        din1 => mul_ln63_8_fu_1700_p1,
        dout => mul_ln63_8_fu_1700_p2);

    mul_5ns_8ns_12_1_1_U93 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_10_fu_1777_p0,
        din1 => mul_ln63_10_fu_1777_p1,
        dout => mul_ln63_10_fu_1777_p2);

    mul_5ns_8ns_12_1_1_U94 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_12_fu_1858_p0,
        din1 => mul_ln63_12_fu_1858_p1,
        dout => mul_ln63_12_fu_1858_p2);

    mul_5ns_8ns_12_1_1_U95 : component srcnn_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln63_14_fu_1923_p0,
        din1 => mul_ln63_14_fu_1923_p1,
        dout => mul_ln63_14_fu_1923_p2);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U96 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_fu_1340_p2,
        din1 => grp_fu_2241_p1,
        din2 => grp_fu_2241_p2,
        din3 => grp_fu_2241_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2241_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U97 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_2_fu_1457_p2,
        din1 => grp_fu_2250_p1,
        din2 => grp_fu_2250_p2,
        din3 => grp_fu_2250_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2250_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U98 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_4_fu_1546_p2,
        din1 => grp_fu_2259_p1,
        din2 => grp_fu_2259_p2,
        din3 => grp_fu_2259_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2259_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U99 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_6_fu_1623_p2,
        din1 => grp_fu_2268_p1,
        din2 => grp_fu_2268_p2,
        din3 => grp_fu_2268_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2268_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U100 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_8_fu_1700_p2,
        din1 => grp_fu_2277_p1,
        din2 => grp_fu_2277_p2,
        din3 => grp_fu_2277_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2277_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U101 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_10_fu_1777_p2,
        din1 => grp_fu_2286_p1,
        din2 => grp_fu_2286_p2,
        din3 => grp_fu_2286_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2286_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U102 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_12_fu_1858_p2,
        din1 => grp_fu_2295_p1,
        din2 => grp_fu_2295_p2,
        din3 => grp_fu_2295_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2295_p4);

    ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1_U103 : component srcnn_ama_addmuladd_12ns_7ns_7ns_7ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln63_14_fu_1923_p2,
        din1 => grp_fu_2304_p1,
        din2 => grp_fu_2304_p2,
        din3 => grp_fu_2304_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2304_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add51_725_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                add51_725_reg_724 <= add51_7_lcssa27_reg_700;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                add51_725_reg_724 <= grp_fu_739_p_dout0;
            end if; 
        end if;
    end process;

    add51_7_lcssa27_reg_700_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                add51_7_lcssa27_reg_700 <= add51_7_lcssa_lcssa28_reg_678;
            elsif (((tmp_11_reg_2591 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                add51_7_lcssa27_reg_700 <= add51_725_reg_724;
            end if; 
        end if;
    end process;

    add51_7_lcssa_lcssa28_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                add51_7_lcssa_lcssa28_reg_678 <= output_fm_buffer_0_q0;
            elsif (((icmp_ln53_fu_1314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                add51_7_lcssa_lcssa28_reg_678 <= add51_7_lcssa27_reg_700;
            end if; 
        end if;
    end process;

    bx_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_1017_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                bx_reg_619 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                bx_reg_619 <= add_ln109_reg_2441;
            end if; 
        end if;
    end process;

    by_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                by_reg_608 <= ap_const_lv7_0;
            elsif (((icmp_ln109_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                by_reg_608 <= add_ln108_reg_2423;
            end if; 
        end if;
    end process;

    empty_69_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond393_fu_909_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_69_reg_574 <= empty_70_fu_915_p2;
            elsif (((icmp_ln32_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_69_reg_574 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    empty_75_reg_770_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                empty_75_reg_770 <= ap_const_lv13_0;
            elsif (((exitcond8314_fu_2106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                empty_75_reg_770 <= empty_76_fu_2112_p2;
            end if; 
        end if;
    end process;

    kx_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                kx_reg_689 <= ap_const_lv3_0;
            elsif (((tmp_11_reg_2591 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                kx_reg_689 <= add_ln53_reg_2563;
            end if; 
        end if;
    end process;

    ky_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ky_reg_666 <= ap_const_lv3_0;
            elsif (((icmp_ln53_fu_1314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ky_reg_666 <= add_ln52_reg_2531;
            end if; 
        end if;
    end process;

    nin_1_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                nin_1_reg_712 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                nin_1_reg_712 <= add_ln61_reg_2605;
            end if; 
        end if;
    end process;

    nin_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond393_fu_909_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nin_reg_585 <= ap_const_lv6_0;
            elsif (((icmp_ln108_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nin_reg_585 <= add_ln107_reg_2400;
            end if; 
        end if;
    end process;

    phi_mul20_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul20_reg_642 <= ap_const_lv13_0;
            elsif (((icmp_ln49_fu_1264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul20_reg_642 <= add_ln48_1_reg_2486;
            end if; 
        end if;
    end process;

    phi_mul22_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul22_reg_747 <= ap_const_lv13_0;
            elsif (((icmp_ln130_fu_2070_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                phi_mul22_reg_747 <= add_ln129_1_reg_2770;
            end if; 
        end if;
    end process;

    phi_mul24_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul24_reg_562 <= ap_const_lv8_0;
            elsif (((exitcond8314_fu_2106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                phi_mul24_reg_562 <= add_ln32_1_reg_2366;
            end if; 
        end if;
    end process;

    phi_mul26_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul26_fu_224 <= ap_const_lv8_0;
            elsif (((icmp_ln32_fu_889_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul26_fu_224 <= add_ln31_1_reg_2336;
            end if; 
        end if;
    end process;

    phi_mul_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond393_fu_909_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_596 <= ap_const_lv12_0;
            elsif (((icmp_ln108_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_596 <= add_ln107_1_reg_2392;
            end if; 
        end if;
    end process;

    ti_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_551 <= ap_const_lv2_0;
            elsif (((exitcond8314_fu_2106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                ti_reg_551 <= add_ln32_reg_2374;
            end if; 
        end if;
    end process;

    tj_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_228 <= ap_const_lv2_0;
            elsif (((icmp_ln32_fu_889_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_228 <= add_ln31_reg_2344;
            end if; 
        end if;
    end process;

    tx_1_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_2016_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                tx_1_reg_759 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                tx_1_reg_759 <= add_ln130_reg_2796;
            end if; 
        end if;
    end process;

    tx_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                tx_reg_654 <= ap_const_lv7_0;
            elsif (((icmp_ln52_fu_1284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                tx_reg_654 <= add_ln49_reg_2507;
            end if; 
        end if;
    end process;

    ty_1_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ty_1_reg_736 <= ap_const_lv7_0;
            elsif (((icmp_ln130_fu_2070_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                ty_1_reg_736 <= add_ln129_reg_2778;
            end if; 
        end if;
    end process;

    ty_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ty_reg_630 <= ap_const_lv7_0;
            elsif (((icmp_ln49_fu_1264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                ty_reg_630 <= add_ln48_reg_2494;
            end if; 
        end if;
    end process;

    xr_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                xr_reg_781 <= add_ln81_reg_2835;
            elsif (((icmp_ln80_fu_2144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                xr_reg_781 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    yr_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                yr_fu_232 <= ap_const_lv8_0;
            elsif (((icmp_ln81_fu_2170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                yr_fu_232 <= add_ln80_reg_2822;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln107_1_reg_2392 <= add_ln107_1_fu_935_p2;
                add_ln107_reg_2400 <= add_ln107_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln108_reg_2423 <= add_ln108_fu_1023_p2;
                mul_ln108_reg_2415 <= mul_ln108_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln109_reg_2441 <= add_ln109_fu_1133_p2;
                input_fm_buffer_addr_2_reg_2433 <= zext_ln116_4_fu_1118_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_ln129_1_reg_2770 <= add_ln129_1_fu_2006_p2;
                add_ln129_reg_2778 <= add_ln129_fu_2022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                add_ln130_reg_2796 <= add_ln130_fu_2076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_2070_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                add_ln132_2_reg_2801 <= add_ln132_2_fu_2092_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_1_reg_2336 <= add_ln31_1_fu_846_p2;
                add_ln31_reg_2344 <= add_ln31_fu_858_p2;
                phi_mul26_load_reg_2331 <= phi_mul26_fu_224;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_1_reg_2366 <= add_ln32_1_fu_883_p2;
                add_ln32_reg_2374 <= add_ln32_fu_895_p2;
                    zext_ln32_reg_2361(7 downto 0) <= zext_ln32_fu_879_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln48_1_reg_2486 <= add_ln48_1_fu_1231_p2;
                add_ln48_reg_2494 <= add_ln48_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln49_reg_2507 <= add_ln49_fu_1270_p2;
                output_fm_buffer_0_addr_1_reg_2499 <= p_cast41_fu_1259_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln52_reg_2531 <= add_ln52_fu_1290_p2;
                    zext_ln52_reg_2517(2 downto 0) <= zext_ln52_fu_1276_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln53_reg_2563 <= add_ln53_fu_1320_p2;
                    zext_ln53_1_reg_2548(2 downto 0) <= zext_ln53_1_fu_1306_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_reg_2591 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln61_reg_2605 <= add_ln61_fu_1442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                add_ln63_39_reg_2715 <= add_ln63_39_fu_1905_p2;
                add_ln63_45_reg_2720 <= add_ln63_45_fu_1970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln63_41_reg_2740 <= grp_fu_2304_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln63_7_reg_2610 <= add_ln63_7_fu_1497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                add_ln80_reg_2822 <= add_ln80_fu_2150_p2;
                sub_ln83_reg_2814 <= sub_ln83_fu_2138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                add_ln81_reg_2835 <= add_ln81_fu_2176_p2;
                output_ftmap_addr_reg_2827 <= zext_ln83_2_fu_2165_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    or_ln61_1_reg_2631(0) <= or_ln61_1_fu_1537_p2(0);    or_ln61_1_reg_2631(4 downto 2) <= or_ln61_1_fu_1537_p2(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    or_ln61_2_reg_2652(4 downto 2) <= or_ln61_2_fu_1614_p2(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    or_ln61_3_reg_2673(1 downto 0) <= or_ln61_3_fu_1691_p2(1 downto 0);    or_ln61_3_reg_2673(4 downto 3) <= or_ln61_3_fu_1691_p2(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    or_ln61_4_reg_2694(1) <= or_ln61_4_fu_1768_p2(1);    or_ln61_4_reg_2694(4 downto 3) <= or_ln61_4_fu_1768_p2(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                output_ftmap_load_reg_2840 <= output_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_cast3_reg_2349 <= p_cast3_fu_870_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_806 <= conv3_weights_q0;
                reg_810 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_815 <= grp_fu_743_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_820 <= grp_fu_739_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sext_ln107_reg_2405 <= sext_ln107_fu_979_p1;
                trunc_ln1_reg_2410 <= nin_reg_585(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond393_fu_909_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln112_reg_2387 <= sext_ln112_fu_931_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_1017_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sub_ln116_1_reg_2428 <= sub_ln116_1_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_2016_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                sub_ln132_reg_2783 <= sub_ln132_fu_2045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_11_reg_2591 <= nin_1_reg_712(5 downto 5);
                trunc_ln61_reg_2580 <= trunc_ln61_fu_1346_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln53_reg_2536(6 downto 0) <= zext_ln53_fu_1302_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    zext_ln61_reg_2568(6 downto 0) <= zext_ln61_fu_1332_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_2361(8) <= '0';
    zext_ln52_reg_2517(7 downto 3) <= "00000";
    zext_ln53_reg_2536(11 downto 7) <= "00000";
    zext_ln53_1_reg_2548(9 downto 3) <= "0000000";
    zext_ln61_reg_2568(17 downto 7) <= "00000000000";
    or_ln61_1_reg_2631(1) <= '1';
    or_ln61_2_reg_2652(1 downto 0) <= "11";
    or_ln61_3_reg_2673(2) <= '1';
    or_ln61_4_reg_2694(0) <= '1';
    or_ln61_4_reg_2694(2) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_852_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond393_fu_909_p2, ap_CS_fsm_state5, icmp_ln107_fu_945_p2, ap_CS_fsm_state6, icmp_ln108_fu_1017_p2, ap_CS_fsm_state7, icmp_ln109_fu_1127_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, icmp_ln52_fu_1284_p2, ap_CS_fsm_state13, icmp_ln53_fu_1314_p2, tmp_11_reg_2591, ap_CS_fsm_state17, ap_CS_fsm_state54, icmp_ln129_fu_2016_p2, ap_CS_fsm_state55, icmp_ln130_fu_2070_p2, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, exitcond8314_fu_2106_p2, icmp_ln32_fu_889_p2, icmp_ln49_fu_1264_p2, icmp_ln48_fu_1237_p2, icmp_ln80_fu_2144_p2, icmp_ln81_fu_2170_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_889_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond393_fu_909_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln107_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln108_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln109_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln48_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln49_fu_1264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln52_fu_1284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln53_fu_1314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((tmp_11_reg_2591 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln129_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                if (((icmp_ln130_fu_2070_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state57 => 
                if (((exitcond8314_fu_2106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln80_fu_2144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln81_fu_2170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln107_1_fu_935_p2 <= std_logic_vector(unsigned(phi_mul_reg_596) + unsigned(ap_const_lv12_59));
    add_ln107_fu_951_p2 <= std_logic_vector(unsigned(nin_reg_585) + unsigned(ap_const_lv6_1));
    add_ln108_fu_1023_p2 <= std_logic_vector(unsigned(by_reg_608) + unsigned(ap_const_lv7_1));
    add_ln109_fu_1133_p2 <= std_logic_vector(unsigned(bx_reg_619) + unsigned(ap_const_lv7_1));
    add_ln112_1_fu_926_p2 <= std_logic_vector(unsigned(zext_ln32_reg_2361) + unsigned(ap_const_lv9_1FE));
    add_ln112_fu_1139_p2 <= std_logic_vector(signed(sext_ln112_reg_2387) + signed(zext_ln109_fu_1123_p1));
    add_ln116_1_fu_1082_p2 <= std_logic_vector(signed(sext_ln107_reg_2405) + signed(sext_ln116_fu_1078_p1));
    add_ln116_2_fu_1113_p2 <= std_logic_vector(unsigned(mul_ln108_reg_2415) + unsigned(zext_ln116_3_fu_1109_p1));
    add_ln116_3_fu_1192_p2 <= std_logic_vector(unsigned(sub_ln116_1_reg_2428) + unsigned(sext_ln116_2_fu_1188_p1));
    add_ln116_fu_997_p2 <= std_logic_vector(unsigned(phi_mul_reg_596) + unsigned(zext_ln116_2_fu_993_p1));
    add_ln129_1_fu_2006_p2 <= std_logic_vector(unsigned(phi_mul22_reg_747) + unsigned(ap_const_lv13_55));
    add_ln129_fu_2022_p2 <= std_logic_vector(unsigned(ty_1_reg_736) + unsigned(ap_const_lv7_1));
    add_ln130_fu_2076_p2 <= std_logic_vector(unsigned(tx_1_reg_759) + unsigned(ap_const_lv7_1));
    add_ln132_1_fu_2055_p2 <= std_logic_vector(unsigned(phi_mul22_reg_747) + unsigned(zext_ln132_1_fu_2051_p1));
    add_ln132_2_fu_2092_p2 <= std_logic_vector(unsigned(sub_ln132_reg_2783) + unsigned(zext_ln132_3_fu_2088_p1));
    add_ln132_fu_2082_p2 <= std_logic_vector(unsigned(zext_ln130_fu_2066_p1) + unsigned(phi_mul24_reg_562));
    add_ln31_1_fu_846_p2 <= std_logic_vector(unsigned(phi_mul26_fu_224) + unsigned(ap_const_lv8_55));
    add_ln31_fu_858_p2 <= std_logic_vector(unsigned(tj_fu_228) + unsigned(ap_const_lv2_1));
    add_ln32_1_fu_883_p2 <= std_logic_vector(unsigned(phi_mul24_reg_562) + unsigned(ap_const_lv8_55));
    add_ln32_fu_895_p2 <= std_logic_vector(unsigned(ti_reg_551) + unsigned(ap_const_lv2_1));
    add_ln48_1_fu_1231_p2 <= std_logic_vector(unsigned(phi_mul20_reg_642) + unsigned(ap_const_lv13_55));
    add_ln48_fu_1243_p2 <= std_logic_vector(unsigned(ty_reg_630) + unsigned(ap_const_lv7_1));
    add_ln49_fu_1270_p2 <= std_logic_vector(unsigned(tx_reg_654) + unsigned(ap_const_lv7_1));
    add_ln52_fu_1290_p2 <= std_logic_vector(unsigned(ky_reg_666) + unsigned(ap_const_lv3_1));
    add_ln53_fu_1320_p2 <= std_logic_vector(unsigned(kx_reg_689) + unsigned(ap_const_lv3_1));
    add_ln57_fu_1326_p2 <= std_logic_vector(unsigned(zext_ln53_2_fu_1310_p1) + unsigned(tx_reg_654));
    add_ln61_fu_1442_p2 <= std_logic_vector(unsigned(nin_1_reg_712) + unsigned(ap_const_lv6_8));
    add_ln63_12_fu_1575_p2 <= std_logic_vector(unsigned(zext_ln63_17_fu_1571_p1) + unsigned(zext_ln63_13_fu_1557_p1));
    add_ln63_13_fu_1581_p2 <= std_logic_vector(unsigned(add_ln63_12_fu_1575_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_14_fu_1598_p2 <= std_logic_vector(unsigned(p_shl3_fu_1590_p3) + unsigned(zext_ln63_18_fu_1586_p1));
    add_ln63_15_fu_1604_p2 <= std_logic_vector(unsigned(add_ln63_14_fu_1598_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_18_fu_1652_p2 <= std_logic_vector(unsigned(zext_ln63_24_fu_1648_p1) + unsigned(zext_ln63_20_fu_1634_p1));
    add_ln63_19_fu_1658_p2 <= std_logic_vector(unsigned(add_ln63_18_fu_1652_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_20_fu_1675_p2 <= std_logic_vector(unsigned(p_shl5_fu_1667_p3) + unsigned(zext_ln63_25_fu_1663_p1));
    add_ln63_21_fu_1681_p2 <= std_logic_vector(unsigned(add_ln63_20_fu_1675_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_24_fu_1729_p2 <= std_logic_vector(unsigned(zext_ln63_31_fu_1725_p1) + unsigned(zext_ln63_27_fu_1711_p1));
    add_ln63_25_fu_1735_p2 <= std_logic_vector(unsigned(add_ln63_24_fu_1729_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_26_fu_1752_p2 <= std_logic_vector(unsigned(p_shl7_fu_1744_p3) + unsigned(zext_ln63_32_fu_1740_p1));
    add_ln63_27_fu_1758_p2 <= std_logic_vector(unsigned(add_ln63_26_fu_1752_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_2_fu_1378_p2 <= std_logic_vector(unsigned(zext_ln63_4_fu_1374_p1) + unsigned(zext_ln63_fu_1358_p1));
    add_ln63_30_fu_1806_p2 <= std_logic_vector(unsigned(zext_ln63_38_fu_1802_p1) + unsigned(zext_ln63_34_fu_1788_p1));
    add_ln63_31_fu_1812_p2 <= std_logic_vector(unsigned(add_ln63_30_fu_1806_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_32_fu_1829_p2 <= std_logic_vector(unsigned(p_shl8_fu_1821_p3) + unsigned(zext_ln63_39_fu_1817_p1));
    add_ln63_33_fu_1835_p2 <= std_logic_vector(unsigned(add_ln63_32_fu_1829_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_36_fu_1876_p2 <= std_logic_vector(unsigned(zext_ln63_45_fu_1872_p1) + unsigned(zext_ln63_41_fu_1850_p1));
    add_ln63_37_fu_1882_p2 <= std_logic_vector(unsigned(add_ln63_36_fu_1876_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_38_fu_1899_p2 <= std_logic_vector(unsigned(p_shl6_fu_1891_p3) + unsigned(zext_ln63_46_fu_1887_p1));
    add_ln63_39_fu_1905_p2 <= std_logic_vector(unsigned(add_ln63_38_fu_1899_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_3_fu_1426_p2 <= std_logic_vector(unsigned(p_shl2_fu_1416_p4) + unsigned(zext_ln63_5_fu_1402_p1));
    add_ln63_42_fu_1941_p2 <= std_logic_vector(unsigned(zext_ln63_52_fu_1937_p1) + unsigned(zext_ln63_48_fu_1915_p1));
    add_ln63_43_fu_1947_p2 <= std_logic_vector(unsigned(add_ln63_42_fu_1941_p2) + unsigned(zext_ln52_reg_2517));
    add_ln63_44_fu_1964_p2 <= std_logic_vector(unsigned(p_shl4_fu_1956_p3) + unsigned(zext_ln63_53_fu_1952_p1));
    add_ln63_45_fu_1970_p2 <= std_logic_vector(unsigned(add_ln63_44_fu_1964_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_4_fu_1432_p2 <= std_logic_vector(unsigned(add_ln63_3_fu_1426_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln63_7_fu_1497_p2 <= std_logic_vector(unsigned(zext_ln63_10_fu_1493_p1) + unsigned(zext_ln52_reg_2517));
    add_ln63_8_fu_1521_p2 <= std_logic_vector(unsigned(p_shl_fu_1514_p3) + unsigned(zext_ln63_11_fu_1511_p1));
    add_ln63_9_fu_1527_p2 <= std_logic_vector(unsigned(add_ln63_8_fu_1521_p2) + unsigned(zext_ln53_1_reg_2548));
    add_ln80_fu_2150_p2 <= std_logic_vector(unsigned(yr_fu_232) + unsigned(ap_const_lv8_1));
    add_ln81_fu_2176_p2 <= std_logic_vector(unsigned(xr_reg_781) + unsigned(ap_const_lv8_1));
    add_ln83_fu_2160_p2 <= std_logic_vector(unsigned(sub_ln83_reg_2814) + unsigned(zext_ln83_1_fu_2156_p1));
    and_ln84_fu_2226_p2 <= (or_ln84_fu_2220_p2 and grp_fu_747_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state58, icmp_ln80_fu_2144_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln80_fu_2144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state58, icmp_ln80_fu_2144_p2)
    begin
        if (((icmp_ln80_fu_2144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln132_fu_2101_p1 <= output_fm_buffer_0_q0;
    bitcast_ln63_1_fu_1552_p1 <= reg_806;
    bitcast_ln63_2_fu_1629_p1 <= reg_806;
    bitcast_ln63_3_fu_1706_p1 <= reg_806;
    bitcast_ln63_4_fu_1783_p1 <= reg_806;
    bitcast_ln63_5_fu_1975_p1 <= reg_806;
    bitcast_ln63_6_fu_1988_p1 <= reg_806;
    bitcast_ln63_7_fu_2001_p1 <= reg_806;
    bitcast_ln63_fu_1502_p1 <= reg_806;
    bitcast_ln83_1_fu_2190_p1 <= reg_820;
    bitcast_ln83_fu_2186_p1 <= output_ftmap_load_reg_2840;

    conv3_weights_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state17, zext_ln63_6_fu_1437_p1, zext_ln63_12_fu_1532_p1, zext_ln63_19_fu_1609_p1, zext_ln63_26_fu_1686_p1, zext_ln63_33_fu_1763_p1, zext_ln63_40_fu_1840_p1, zext_ln63_47_fu_1984_p1, zext_ln63_54_fu_1997_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            conv3_weights_address0 <= zext_ln63_54_fu_1997_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            conv3_weights_address0 <= zext_ln63_47_fu_1984_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            conv3_weights_address0 <= zext_ln63_40_fu_1840_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            conv3_weights_address0 <= zext_ln63_33_fu_1763_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            conv3_weights_address0 <= zext_ln63_26_fu_1686_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_weights_address0 <= zext_ln63_19_fu_1609_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3_weights_address0 <= zext_ln63_12_fu_1532_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv3_weights_address0 <= zext_ln63_6_fu_1437_p1(10 - 1 downto 0);
        else 
            conv3_weights_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv3_weights_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            conv3_weights_ce0 <= ap_const_logic_1;
        else 
            conv3_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_70_fu_915_p2 <= std_logic_vector(unsigned(empty_69_reg_574) + unsigned(ap_const_lv18_1));
    empty_71_fu_1029_p2 <= std_logic_vector(signed(p_cast3_reg_2349) + signed(zext_ln108_1_fu_1013_p1));
    empty_72_fu_1253_p2 <= std_logic_vector(unsigned(phi_mul20_reg_642) + unsigned(tx_cast_fu_1249_p1));
    empty_73_fu_1296_p2 <= std_logic_vector(unsigned(zext_ln52_1_fu_1280_p1) + unsigned(ty_reg_630));
    empty_74_fu_2028_p2 <= std_logic_vector(unsigned(zext_ln129_fu_2012_p1) + unsigned(phi_mul26_load_reg_2331));
    empty_76_fu_2112_p2 <= std_logic_vector(unsigned(empty_75_reg_770) + unsigned(ap_const_lv13_1));
    empty_fu_864_p2 <= std_logic_vector(unsigned(zext_ln31_fu_842_p1) + unsigned(ap_const_lv9_1FE));
    exitcond393_fu_909_p2 <= "1" when (empty_69_reg_574 = ap_const_lv18_3DE20) else "0";
    exitcond8314_fu_2106_p2 <= "1" when (empty_75_reg_770 = ap_const_lv13_1C39) else "0";
    grp_fu_2241_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2241_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2241_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2250_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2250_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2250_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2259_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2259_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2259_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2268_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2268_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2268_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2277_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2277_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2277_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2286_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2286_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2286_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2295_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2295_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2295_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_2304_p1 <= zext_ln53_reg_2536(7 - 1 downto 0);
    grp_fu_2304_p2 <= ap_const_lv18_59(7 - 1 downto 0);
    grp_fu_2304_p3 <= zext_ln61_reg_2568(7 - 1 downto 0);
    grp_fu_739_p_ce <= ap_const_logic_1;
    grp_fu_739_p_din0 <= grp_fu_792_p0;
    grp_fu_739_p_din1 <= grp_fu_792_p1;
    grp_fu_739_p_opcode <= ap_const_lv2_0;
    grp_fu_743_p_ce <= ap_const_logic_1;
    grp_fu_743_p_din0 <= grp_fu_797_p0;
    grp_fu_743_p_din1 <= reg_810;
    grp_fu_747_p_ce <= ap_const_logic_1;
    grp_fu_747_p_din0 <= reg_820;
    grp_fu_747_p_din1 <= ap_const_lv32_0;
    grp_fu_747_p_opcode <= ap_const_lv5_4;

    grp_fu_792_p0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state46, reg_820, bitcast_ln83_fu_2186_p1, ap_CS_fsm_state61, add51_725_reg_724, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_792_p0 <= bitcast_ln83_fu_2186_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_792_p0 <= reg_820;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_792_p0 <= add51_725_reg_724;
        else 
            grp_fu_792_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_792_p1_assign_proc : process(conv3_biases_0_0_val, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state46, reg_815, ap_CS_fsm_state61, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_792_p1 <= conv3_biases_0_0_val;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_792_p1 <= reg_815;
        else 
            grp_fu_792_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_797_p0_assign_proc : process(bitcast_ln63_fu_1502_p1, ap_CS_fsm_state19, bitcast_ln63_1_fu_1552_p1, ap_CS_fsm_state23, bitcast_ln63_2_fu_1629_p1, ap_CS_fsm_state27, bitcast_ln63_3_fu_1706_p1, ap_CS_fsm_state31, bitcast_ln63_4_fu_1783_p1, ap_CS_fsm_state35, bitcast_ln63_5_fu_1975_p1, ap_CS_fsm_state39, bitcast_ln63_6_fu_1988_p1, ap_CS_fsm_state43, bitcast_ln63_7_fu_2001_p1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_797_p0 <= bitcast_ln63_7_fu_2001_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_797_p0 <= bitcast_ln63_6_fu_1988_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_797_p0 <= bitcast_ln63_5_fu_1975_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_797_p0 <= bitcast_ln63_4_fu_1783_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_797_p0 <= bitcast_ln63_3_fu_1706_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_797_p0 <= bitcast_ln63_2_fu_1629_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_797_p0 <= bitcast_ln63_1_fu_1552_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_797_p0 <= bitcast_ln63_fu_1502_p1;
        else 
            grp_fu_797_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln107_fu_945_p2 <= "1" when (nin_reg_585 = ap_const_lv6_20) else "0";
    icmp_ln108_fu_1017_p2 <= "1" when (by_reg_608 = ap_const_lv7_59) else "0";
    icmp_ln109_fu_1127_p2 <= "1" when (bx_reg_619 = ap_const_lv7_59) else "0";
    icmp_ln129_fu_2016_p2 <= "1" when (ty_1_reg_736 = ap_const_lv7_55) else "0";
    icmp_ln130_fu_2070_p2 <= "1" when (tx_1_reg_759 = ap_const_lv7_55) else "0";
    icmp_ln31_fu_852_p2 <= "1" when (tj_fu_228 = ap_const_lv2_3) else "0";
    icmp_ln32_fu_889_p2 <= "1" when (ti_reg_551 = ap_const_lv2_3) else "0";
    icmp_ln41_1_fu_1152_p2 <= "1" when (signed(add_ln112_fu_1139_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln41_fu_1042_p2 <= "1" when (signed(empty_71_fu_1029_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln48_fu_1237_p2 <= "1" when (ty_reg_630 = ap_const_lv7_55) else "0";
    icmp_ln49_fu_1264_p2 <= "1" when (tx_reg_654 = ap_const_lv7_55) else "0";
    icmp_ln52_fu_1284_p2 <= "1" when (ky_reg_666 = ap_const_lv3_5) else "0";
    icmp_ln53_fu_1314_p2 <= "1" when (kx_reg_689 = ap_const_lv3_5) else "0";
    icmp_ln80_fu_2144_p2 <= "1" when (yr_fu_232 = ap_const_lv8_FF) else "0";
    icmp_ln81_fu_2170_p2 <= "1" when (xr_reg_781 = ap_const_lv8_FF) else "0";
    icmp_ln84_1_fu_2214_p2 <= "1" when (trunc_ln84_fu_2204_p1 = ap_const_lv23_0) else "0";
    icmp_ln84_fu_2208_p2 <= "0" when (tmp_1_fu_2194_p4 = ap_const_lv8_FF) else "1";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state4, input_fm_buffer_addr_2_reg_2433, ap_CS_fsm_state17, ap_CS_fsm_state8, p_cast38_fu_921_p1, zext_ln63_3_fu_1362_p1, zext_ln63_9_fu_1507_p1, zext_ln63_16_fu_1560_p1, zext_ln63_23_fu_1637_p1, zext_ln63_30_fu_1714_p1, zext_ln63_37_fu_1791_p1, zext_ln63_44_fu_1980_p1, zext_ln63_51_fu_1993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            input_fm_buffer_address0 <= zext_ln63_51_fu_1993_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            input_fm_buffer_address0 <= zext_ln63_44_fu_1980_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            input_fm_buffer_address0 <= zext_ln63_37_fu_1791_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input_fm_buffer_address0 <= zext_ln63_30_fu_1714_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_fm_buffer_address0 <= zext_ln63_23_fu_1637_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_fm_buffer_address0 <= zext_ln63_16_fu_1560_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_fm_buffer_address0 <= zext_ln63_9_fu_1507_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_fm_buffer_address0 <= zext_ln63_3_fu_1362_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_2_reg_2433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_address0 <= p_cast38_fu_921_p1(18 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_fu_1209_p10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_fm_buffer_d0 <= tmp_fu_1209_p10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond393_fu_909_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond393_fu_909_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln108_fu_1007_p0 <= mul_ln108_fu_1007_p00(12 - 1 downto 0);
    mul_ln108_fu_1007_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_997_p2),18));
    mul_ln108_fu_1007_p1 <= ap_const_lv18_59(8 - 1 downto 0);
    mul_ln63_10_fu_1777_p0 <= mul_ln63_10_fu_1777_p00(5 - 1 downto 0);
    mul_ln63_10_fu_1777_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_4_fu_1768_p2),12));
    mul_ln63_10_fu_1777_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_12_fu_1858_p0 <= mul_ln63_12_fu_1858_p00(5 - 1 downto 0);
    mul_ln63_12_fu_1858_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_5_fu_1845_p2),12));
    mul_ln63_12_fu_1858_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_14_fu_1923_p0 <= mul_ln63_14_fu_1923_p00(5 - 1 downto 0);
    mul_ln63_14_fu_1923_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_6_fu_1910_p2),12));
    mul_ln63_14_fu_1923_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_2_fu_1457_p0 <= mul_ln63_2_fu_1457_p00(5 - 1 downto 0);
    mul_ln63_2_fu_1457_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_fu_1448_p2),12));
    mul_ln63_2_fu_1457_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_4_fu_1546_p0 <= mul_ln63_4_fu_1546_p00(5 - 1 downto 0);
    mul_ln63_4_fu_1546_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_1_fu_1537_p2),12));
    mul_ln63_4_fu_1546_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_6_fu_1623_p0 <= mul_ln63_6_fu_1623_p00(5 - 1 downto 0);
    mul_ln63_6_fu_1623_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_2_fu_1614_p2),12));
    mul_ln63_6_fu_1623_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_8_fu_1700_p0 <= mul_ln63_8_fu_1700_p00(5 - 1 downto 0);
    mul_ln63_8_fu_1700_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_3_fu_1691_p2),12));
    mul_ln63_8_fu_1700_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    mul_ln63_fu_1340_p0 <= mul_ln63_fu_1340_p00(6 - 1 downto 0);
    mul_ln63_fu_1340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_1_reg_712),12));
    mul_ln63_fu_1340_p1 <= ap_const_lv12_59(8 - 1 downto 0);
    or_ln40_1_fu_1174_p2 <= (tmp_7_fu_1144_p3 or icmp_ln41_1_fu_1152_p2);
    or_ln40_fu_1064_p2 <= (tmp_3_fu_1034_p3 or icmp_ln41_fu_1042_p2);
    or_ln61_1_fu_1537_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_2);
    or_ln61_2_fu_1614_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_3);
    or_ln61_3_fu_1691_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_4);
    or_ln61_4_fu_1768_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_5);
    or_ln61_5_fu_1845_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_6);
    or_ln61_6_fu_1910_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_7);
    or_ln61_fu_1448_p2 <= (trunc_ln61_reg_2580 or ap_const_lv5_1);
    or_ln63_fu_1469_p2 <= (shl_ln63_fu_1463_p2 or or_ln61_fu_1448_p2);
    or_ln84_fu_2220_p2 <= (icmp_ln84_fu_2208_p2 or icmp_ln84_1_fu_2214_p2);

    output_fm_buffer_0_address0_assign_proc : process(output_fm_buffer_0_addr_1_reg_2499, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state55, ap_CS_fsm_state57, p_cast41_fu_1259_p1, zext_ln132_2_fu_2061_p1, p_cast45_fu_2118_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_0_address0 <= p_cast45_fu_2118_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_fm_buffer_0_address0 <= zext_ln132_2_fu_2061_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_fm_buffer_0_address0 <= output_fm_buffer_0_addr_1_reg_2499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_fm_buffer_0_address0 <= p_cast41_fu_1259_p1(13 - 1 downto 0);
        else 
            output_fm_buffer_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state55, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_fm_buffer_0_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state57, add51_7_lcssa_lcssa28_reg_678)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            output_fm_buffer_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_fm_buffer_0_d0 <= add51_7_lcssa_lcssa28_reg_678;
        else 
            output_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln52_fu_1284_p2, ap_CS_fsm_state57, exitcond8314_fu_2106_p2)
    begin
        if ((((exitcond8314_fu_2106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((icmp_ln52_fu_1284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            output_fm_buffer_0_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_ftmap_address0_assign_proc : process(output_ftmap_addr_reg_2827, ap_CS_fsm_state59, ap_CS_fsm_state56, ap_CS_fsm_state66, zext_ln132_4_fu_2097_p1, zext_ln83_2_fu_2165_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_ftmap_address0 <= output_ftmap_addr_reg_2827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            output_ftmap_address0 <= zext_ln83_2_fu_2165_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output_ftmap_address0 <= zext_ln132_4_fu_2097_p1(16 - 1 downto 0);
        else 
            output_ftmap_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state56, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            output_ftmap_ce0 <= ap_const_logic_1;
        else 
            output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_ftmap_d0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state66, bitcast_ln132_fu_2101_p1, select_ln84_fu_2232_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_ftmap_d0 <= select_ln84_fu_2232_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output_ftmap_d0 <= bitcast_ln132_fu_2101_p1;
        else 
            output_ftmap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_ftmap_we0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            output_ftmap_we0 <= ap_const_logic_1;
        else 
            output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast38_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_69_reg_574),64));
        p_cast3_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_864_p2),10));

    p_cast41_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_72_fu_1253_p2),64));
    p_cast45_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_reg_770),64));
    p_shl1_fu_1095_p3 <= (trunc_ln116_fu_1091_p1 & ap_const_lv8_0);
    p_shl2_fu_1416_p4 <= ((tmp_13_cast_fu_1406_p4 & ky_reg_666) & ap_const_lv2_0);
    p_shl3_fu_1590_p3 <= (add_ln63_13_fu_1581_p2 & ap_const_lv2_0);
    p_shl4_fu_1956_p3 <= (add_ln63_43_fu_1947_p2 & ap_const_lv2_0);
    p_shl5_fu_1667_p3 <= (add_ln63_19_fu_1658_p2 & ap_const_lv2_0);
    p_shl6_fu_1891_p3 <= (add_ln63_37_fu_1882_p2 & ap_const_lv2_0);
    p_shl7_fu_1744_p3 <= (add_ln63_25_fu_1735_p2 & ap_const_lv2_0);
    p_shl8_fu_1821_p3 <= (add_ln63_31_fu_1812_p2 & ap_const_lv2_0);
    p_shl_fu_1514_p3 <= (add_ln63_7_reg_2610 & ap_const_lv2_0);
    select_ln40_2_fu_1166_p3 <= 
        ap_const_lv10_0 when (tmp_10_fu_1158_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln40_fu_1056_p3 <= 
        ap_const_lv10_0 when (tmp_5_fu_1048_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln84_fu_2232_p3 <= 
        ap_const_lv32_0 when (and_ln84_fu_2226_p2(0) = '1') else 
        bitcast_ln83_1_fu_2190_p1;
        sext_ln107_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln116_fu_973_p2),12));

        sext_ln112_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln112_1_fu_926_p2),10));

        sext_ln116_1_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln116_1_fu_1082_p2),18));

        sext_ln116_2_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xClamped_fu_1180_p3),18));

        sext_ln116_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(yClamped_fu_1070_p3),12));

    shl_ln63_fu_1463_p2 <= std_logic_vector(shift_left(unsigned(or_ln61_fu_1448_p2),to_integer(unsigned('0' & ap_const_lv5_2(5-1 downto 0)))));
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 <= zext_ln116_5_fu_1197_p1(18 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln116_1_fu_1103_p2 <= std_logic_vector(unsigned(p_shl1_fu_1095_p3) - unsigned(sext_ln116_1_fu_1087_p1));
    sub_ln116_fu_973_p2 <= std_logic_vector(unsigned(zext_ln116_1_fu_969_p1) - unsigned(zext_ln116_fu_957_p1));
    sub_ln132_fu_2045_p2 <= std_logic_vector(unsigned(tmp_8_fu_2037_p3) - unsigned(zext_ln132_fu_2033_p1));
    sub_ln83_fu_2138_p2 <= std_logic_vector(unsigned(tmp_4_fu_2130_p3) - unsigned(zext_ln83_fu_2126_p1));
    tmp_10_fu_1158_p3 <= add_ln112_fu_1139_p2(9 downto 9);
    tmp_11_cast_fu_1384_p4 <= add_ln63_2_fu_1378_p2(8 downto 3);
    tmp_12_fu_1475_p4 <= or_ln61_fu_1448_p2(4 downto 3);
    tmp_13_cast_fu_1406_p4 <= add_ln63_2_fu_1378_p2(7 downto 3);
    tmp_13_fu_1485_p3 <= (tmp_12_fu_1475_p4 & or_ln63_fu_1469_p2);
    tmp_14_fu_1564_p3 <= (or_ln61_1_reg_2631 & ap_const_lv2_0);
    tmp_15_fu_1641_p3 <= (or_ln61_2_reg_2652 & ap_const_lv2_0);
    tmp_16_fu_1718_p3 <= (or_ln61_3_reg_2673 & ap_const_lv2_0);
    tmp_17_fu_1795_p3 <= (or_ln61_4_reg_2694 & ap_const_lv2_0);
    tmp_18_fu_1864_p3 <= (or_ln61_5_fu_1845_p2 & ap_const_lv2_0);
    tmp_19_fu_1929_p3 <= (or_ln61_6_fu_1910_p2 & ap_const_lv2_0);
    tmp_1_fu_2194_p4 <= bitcast_ln83_1_fu_2190_p1(30 downto 23);
    tmp_3_fu_1034_p3 <= empty_71_fu_1029_p2(9 downto 9);
    tmp_4_fu_2130_p3 <= (yr_fu_232 & ap_const_lv8_0);
    tmp_5_fu_1048_p3 <= empty_71_fu_1029_p2(9 downto 9);
    tmp_6_fu_961_p3 <= (trunc_ln107_fu_941_p1 & ap_const_lv8_0);
    tmp_7_fu_1144_p3 <= add_ln112_fu_1139_p2(9 downto 9);
    tmp_8_fu_2037_p3 <= (empty_74_fu_2028_p2 & ap_const_lv8_0);
    tmp_9_fu_1366_p3 <= (nin_1_reg_712 & ap_const_lv2_0);
    tmp_s_fu_1394_p3 <= (tmp_11_cast_fu_1384_p4 & ky_reg_666);
    trunc_ln107_fu_941_p1 <= nin_reg_585(2 - 1 downto 0);
    trunc_ln116_fu_1091_p1 <= add_ln116_1_fu_1082_p2(10 - 1 downto 0);
    trunc_ln61_fu_1346_p1 <= nin_1_reg_712(5 - 1 downto 0);
    trunc_ln84_fu_2204_p1 <= bitcast_ln83_1_fu_2190_p1(23 - 1 downto 0);
    tx_cast_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_654),13));
    xClamped_fu_1180_p3 <= 
        select_ln40_2_fu_1166_p3 when (or_ln40_1_fu_1174_p2(0) = '1') else 
        add_ln112_fu_1139_p2;
    yClamped_fu_1070_p3 <= 
        select_ln40_fu_1056_p3 when (or_ln40_fu_1064_p2(0) = '1') else 
        empty_71_fu_1029_p2;
    zext_ln108_1_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_608),10));
    zext_ln109_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_619),10));
    zext_ln116_1_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_961_p3),11));
    zext_ln116_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_608),12));
    zext_ln116_3_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_619),18));
    zext_ln116_4_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_2_fu_1113_p2),64));
    zext_ln116_5_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_3_fu_1192_p2),64));
    zext_ln116_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln107_fu_941_p1),11));
    zext_ln129_fu_2012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_736),8));
    zext_ln130_fu_2066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_759),8));
    zext_ln132_1_fu_2051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_759),13));
    zext_ln132_2_fu_2061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_1_fu_2055_p2),64));
    zext_ln132_3_fu_2088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_fu_2082_p2),16));
    zext_ln132_4_fu_2097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_2_reg_2801),64));
    zext_ln132_fu_2033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_74_fu_2028_p2),16));
    zext_ln31_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul26_fu_224),9));
    zext_ln32_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul24_reg_562),9));
    zext_ln52_1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_666),7));
    zext_ln52_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_666),8));
    zext_ln53_1_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_689),10));
    zext_ln53_2_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_689),7));
    zext_ln53_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_73_fu_1296_p2),12));
    zext_ln61_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1326_p2),18));
    zext_ln63_10_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1485_p3),8));
    zext_ln63_11_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_7_reg_2610),10));
    zext_ln63_12_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_9_fu_1527_p2),64));
    zext_ln63_13_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_1_reg_2631),8));
    zext_ln63_16_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2259_p4),64));
    zext_ln63_17_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1564_p3),8));
    zext_ln63_18_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_13_fu_1581_p2),10));
    zext_ln63_19_fu_1609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_15_fu_1604_p2),64));
    zext_ln63_20_fu_1634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_2_reg_2652),8));
    zext_ln63_23_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2268_p4),64));
    zext_ln63_24_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1641_p3),8));
    zext_ln63_25_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_19_fu_1658_p2),10));
    zext_ln63_26_fu_1686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_21_fu_1681_p2),64));
    zext_ln63_27_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_3_reg_2673),8));
    zext_ln63_30_fu_1714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2277_p4),64));
    zext_ln63_31_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1718_p3),8));
    zext_ln63_32_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_25_fu_1735_p2),10));
    zext_ln63_33_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_27_fu_1758_p2),64));
    zext_ln63_34_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_4_reg_2694),8));
    zext_ln63_37_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2286_p4),64));
    zext_ln63_38_fu_1802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1795_p3),8));
    zext_ln63_39_fu_1817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_31_fu_1812_p2),10));
    zext_ln63_3_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2241_p4),64));
    zext_ln63_40_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_33_fu_1835_p2),64));
    zext_ln63_41_fu_1850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_5_fu_1845_p2),8));
    zext_ln63_44_fu_1980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2295_p4),64));
    zext_ln63_45_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1864_p3),8));
    zext_ln63_46_fu_1887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_37_fu_1882_p2),10));
    zext_ln63_47_fu_1984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_39_reg_2715),64));
    zext_ln63_48_fu_1915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_6_fu_1910_p2),8));
    zext_ln63_4_fu_1374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1366_p3),9));
    zext_ln63_51_fu_1993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_41_reg_2740),64));
    zext_ln63_52_fu_1937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1929_p3),8));
    zext_ln63_53_fu_1952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_43_fu_1947_p2),10));
    zext_ln63_54_fu_1997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_45_reg_2720),64));
    zext_ln63_5_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1394_p3),10));
    zext_ln63_6_fu_1437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_4_fu_1432_p2),64));
    zext_ln63_9_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2250_p4),64));
    zext_ln63_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_1_reg_712),9));
    zext_ln83_1_fu_2156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xr_reg_781),16));
    zext_ln83_2_fu_2165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_fu_2160_p2),64));
    zext_ln83_fu_2126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yr_fu_232),16));
end behav;
