-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_597_p_ce : OUT STD_LOGIC;
    grp_fu_601_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_601_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_DC8 : STD_LOGIC_VECTOR (11 downto 0) := "110111001000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv23_3F804 : STD_LOGIC_VECTOR (22 downto 0) := "00000111111100000000100";
    constant ap_const_lv12_15 : STD_LOGIC_VECTOR (11 downto 0) := "000000010101";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_121 : STD_LOGIC_VECTOR (8 downto 0) := "100100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_fm_buffer_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_fm_buffer_ce0 : STD_LOGIC;
    signal input_fm_buffer_we0 : STD_LOGIC;
    signal input_fm_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_fm_buffer_0_ce0 : STD_LOGIC;
    signal output_fm_buffer_0_we0 : STD_LOGIC;
    signal output_fm_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fm_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal add_ln31_fu_554_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_1402 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1407 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_568_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_reg_1412 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_578_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_reg_1420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_shl1_fu_584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ti_cast17_fu_592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ti_cast17_reg_1430 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_fu_606_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_reg_1438 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_59_fu_618_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln1_fu_633_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_1451 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln98_1_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln98_1_reg_1457 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln98_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln98_reg_1465 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln107_fu_682_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln107_reg_1470 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln98_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln99_fu_701_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln99_reg_1475 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln99_fu_717_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln99_reg_1483 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln107_fu_802_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln107_reg_1488 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln99_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_fm_buffer_addr_1_reg_1493 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln100_fu_832_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln100_reg_1501 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_4_reg_1506 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_4_read_reg_1512 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_fu_972_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_62_reg_1517 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln54_fu_984_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln54_reg_1525 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_fm_buffer_0_addr_2_reg_1530 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln55_fu_1010_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_reg_1538 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln58_fu_1026_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_reg_1551 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln67_fu_1038_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_reg_1556 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln58_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln67_1_fu_1068_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_reg_1561 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_fu_1082_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln59_reg_1569 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln67_3_fu_1094_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln67_3_reg_1574 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln59_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_fu_1106_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln66_reg_1579 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_7_fu_1110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_7_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal input_fm_buffer_addr_2_reg_1589 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln66_fu_1130_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln66_reg_1597 : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_addr_5_reg_1602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_addr_5_read_reg_1608 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fm_buffer_load_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln67_fu_1169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln124_4_fu_1185_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_4_reg_1633 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln121_fu_1201_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_reg_1641 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln122_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln122_reg_1646 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln121_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln122_fu_1266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln122_reg_1659 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_reg_1664 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln122_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fm_buffer_0_load_reg_1671 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_reg_1676 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln124_fu_1328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_68_fu_1343_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ti_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6713_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tn_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln54_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_334 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln39_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nin_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal by_reg_368 : STD_LOGIC_VECTOR (4 downto 0);
    signal bx_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ty_1_reg_390 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln55_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_1_reg_402 : STD_LOGIC_VECTOR (4 downto 0);
    signal ky_reg_414 : STD_LOGIC_VECTOR (2 downto 0);
    signal add57_lcssa_lcssa19_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln66_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add57_lcssa18_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul46_reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal nin_1_reg_470 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_65_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ty_reg_493 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_reg_504 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_67_reg_515 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast49_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_3_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast54_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_6_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_6_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast50_fu_1349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln107_1_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln107_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal trunc_ln41_fu_629_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln98_fu_647_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_60_fu_663_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln107_fu_672_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln107_fu_672_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln107_fu_672_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln99_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_1_fu_687_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln107_3_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln99_fu_701_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln99_fu_701_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln99_2_fu_707_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_723_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_729_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_61_fu_733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_760_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yClamped_fu_774_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln107_1_fu_790_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln2_fu_782_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln107_fu_798_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln107_2_fu_808_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln107_4_fu_812_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln100_fu_822_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln103_1_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln103_fu_856_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_fu_846_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln103_fu_860_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_2_fu_894_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_3_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln107_2_fu_910_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln107_2_fu_918_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln107_1_fu_922_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln107_3_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln107_2_fu_931_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_936_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_3_fu_964_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ty_1_cast_fu_960_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_1_cast_fu_990_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_63_fu_994_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln58_fu_1016_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_64_fu_1032_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln67_1_fu_1050_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln3_fu_1042_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_fu_1058_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_1_fu_1062_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_1_fu_1072_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln63_fu_1088_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln67_2_fu_1098_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1354_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1363_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln67_4_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_4_fu_1139_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_3_fu_1144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_1149_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_1_fu_1177_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln124_fu_1173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln121_fu_1191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_66_fu_1207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_1212_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln124_1_fu_1224_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln124_1_fu_1220_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln124_2_fu_1232_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln124_fu_1236_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln124_5_fu_1246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_5_fu_1250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_fu_1272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln124_3_fu_1277_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_1_fu_1281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln124_2_fu_1286_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln124_4_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_3_fu_1298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_2_fu_1303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1308_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1354_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1363_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1363_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1363_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_526_ce : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal grp_fu_1363_p00 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln107_fu_672_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln99_fu_701_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_5ns_19ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component srcnn_mul_8ns_6ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_ama_addmuladd_8ns_5ns_5ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_ama_addmuladd_4ns_5ns_7ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_fm_buffer_U : component srcnn_conv3_input_fm_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3528,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_fm_buffer_address0,
        ce0 => input_fm_buffer_ce0,
        we0 => input_fm_buffer_we0,
        d0 => input_fm_buffer_d0,
        q0 => input_fm_buffer_q0);

    output_fm_buffer_0_U : component srcnn_conv3_output_fm_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 289,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_fm_buffer_0_address0,
        ce0 => output_fm_buffer_0_ce0,
        we0 => output_fm_buffer_0_we0,
        d0 => output_fm_buffer_0_d0,
        q0 => output_fm_buffer_0_q0);

    mul_5ns_19ns_23_1_1_U28 : component srcnn_mul_5ns_19ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 19,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln107_fu_672_p0,
        din1 => mul_ln107_fu_672_p1,
        dout => mul_ln107_fu_672_p2);

    mul_8ns_6ns_12_1_1_U29 : component srcnn_mul_8ns_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln99_fu_701_p0,
        din1 => mul_ln99_fu_701_p1,
        dout => mul_ln99_fu_701_p2);

    ama_addmuladd_8ns_5ns_5ns_5ns_12_4_1_U30 : component srcnn_ama_addmuladd_8ns_5ns_5ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi_mul46_reg_459,
        din1 => grp_fu_1354_p1,
        din2 => grp_fu_1354_p2,
        din3 => grp_fu_1354_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1354_p4);

    ama_addmuladd_4ns_5ns_7ns_5ns_12_4_1_U31 : component srcnn_ama_addmuladd_4ns_5ns_7ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 7,
        din3_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1363_p0,
        din1 => shl_ln1_reg_1451,
        din2 => grp_fu_1363_p2,
        din3 => grp_fu_1363_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1363_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add57_lcssa18_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                add57_lcssa18_reg_447 <= add57_lcssa_lcssa19_reg_425;
            elsif (((icmp_ln66_fu_1124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                add57_lcssa18_reg_447 <= empty_65_reg_481;
            end if; 
        end if;
    end process;

    add57_lcssa_lcssa19_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                add57_lcssa_lcssa19_reg_425 <= output_fm_buffer_0_q0;
            elsif (((icmp_ln59_fu_1076_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                add57_lcssa_lcssa19_reg_425 <= add57_lcssa18_reg_447;
            end if; 
        end if;
    end process;

    bx_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                bx_reg_379 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                bx_reg_379 <= add_ln100_reg_1501;
            end if; 
        end if;
    end process;

    by_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                by_reg_368 <= ap_const_lv5_0;
            elsif (((icmp_ln100_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                by_reg_368 <= add_ln99_reg_1483;
            end if; 
        end if;
    end process;

    empty_65_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_1076_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                empty_65_reg_481 <= add57_lcssa18_reg_447;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                empty_65_reg_481 <= grp_fu_597_p_dout0;
            end if; 
        end if;
    end process;

    empty_67_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_1195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                empty_67_reg_515 <= ap_const_lv9_0;
            elsif (((exitcond6713_fu_1337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                empty_67_reg_515 <= empty_68_fu_1343_p2;
            end if; 
        end if;
    end process;

    empty_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                empty_reg_334 <= empty_59_fu_618_p2;
            elsif (((icmp_ln39_fu_600_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_reg_334 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    kx_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                kx_reg_436 <= ap_const_lv3_0;
            elsif (((icmp_ln66_fu_1124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                kx_reg_436 <= add_ln59_reg_1569;
            end if; 
        end if;
    end process;

    ky_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                ky_reg_414 <= ap_const_lv3_0;
            elsif (((icmp_ln59_fu_1076_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                ky_reg_414 <= add_ln58_reg_1551;
            end if; 
        end if;
    end process;

    nin_1_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_1076_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                nin_1_reg_470 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                nin_1_reg_470 <= add_ln66_reg_1597;
            end if; 
        end if;
    end process;

    nin_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nin_reg_345 <= ap_const_lv4_0;
            elsif (((icmp_ln99_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                nin_reg_345 <= add_ln98_reg_1465;
            end if; 
        end if;
    end process;

    phi_mul46_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_1076_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                phi_mul46_reg_459 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                phi_mul46_reg_459 <= add_ln67_7_reg_1584;
            end if; 
        end if;
    end process;

    phi_mul_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_356 <= ap_const_lv8_0;
            elsif (((icmp_ln99_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_356 <= add_ln98_1_reg_1457;
            end if; 
        end if;
    end process;

    ti_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_548_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ti_reg_310 <= ap_const_lv4_0;
            elsif (((exitcond6713_fu_1337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                ti_reg_310 <= add_ln32_reg_1420;
            end if; 
        end if;
    end process;

    tj_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tj_fu_178 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tj_fu_178 <= add_ln31_reg_1402;
            end if; 
        end if;
    end process;

    tn_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tn_reg_322 <= ap_const_lv3_0;
            elsif (((icmp_ln54_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                tn_reg_322 <= add_ln39_reg_1438;
            end if; 
        end if;
    end process;

    tx_1_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_978_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                tx_1_reg_402 <= ap_const_lv5_0;
            elsif (((icmp_ln58_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                tx_1_reg_402 <= add_ln55_reg_1538;
            end if; 
        end if;
    end process;

    tx_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_1195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                tx_reg_504 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                tx_reg_504 <= add_ln122_reg_1659;
            end if; 
        end if;
    end process;

    ty_1_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ty_1_reg_390 <= ap_const_lv5_0;
            elsif (((icmp_ln55_fu_1004_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                ty_1_reg_390 <= add_ln54_reg_1525;
            end if; 
        end if;
    end process;

    ty_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ty_reg_493 <= ap_const_lv5_0;
            elsif (((icmp_ln122_fu_1260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                ty_reg_493 <= add_ln121_reg_1641;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln100_reg_1501 <= add_ln100_fu_832_p2;
                input_fm_buffer_addr_1_reg_1493 <= zext_ln107_3_fu_817_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln107_reg_1470 <= add_ln107_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln121_reg_1641 <= add_ln121_fu_1201_p2;
                add_ln124_4_reg_1633 <= add_ln124_4_fu_1185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln122_reg_1659 <= add_ln122_fu_1266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_1402 <= add_ln31_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_1420 <= add_ln32_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln39_reg_1438 <= add_ln39_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln54_reg_1525 <= add_ln54_fu_984_p2;
                empty_62_reg_1517 <= empty_62_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln55_reg_1538 <= add_ln55_fu_1010_p2;
                output_fm_buffer_0_addr_2_reg_1530 <= p_cast54_fu_999_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln58_reg_1551 <= add_ln58_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln59_reg_1569 <= add_ln59_fu_1082_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln66_reg_1597 <= add_ln66_fu_1130_p2;
                input_fm_buffer_addr_2_reg_1589 <= zext_ln67_6_fu_1116_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln67_7_reg_1584 <= add_ln67_7_fu_1110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln98_1_reg_1457 <= add_ln98_1_fu_641_p2;
                add_ln98_reg_1465 <= add_ln98_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln99_reg_1483 <= add_ln99_fu_717_p2;
                mul_ln99_reg_1475 <= mul_ln99_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                gmem_addr_4_read_reg_1512 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_826_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                gmem_addr_4_reg_1506 <= sext_ln107_1_fu_946_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                gmem_addr_5_read_reg_1608 <= m_axi_gmem_RDATA;
                input_fm_buffer_load_reg_1613 <= input_fm_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                gmem_addr_5_reg_1602 <= sext_ln67_fu_1159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                gmem_addr_read_reg_1676 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_1260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                gmem_addr_reg_1664 <= sext_ln124_fu_1318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                mul_reg_1623 <= grp_fu_601_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                output_fm_buffer_0_load_reg_1671 <= output_fm_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    p_shl1_reg_1425(7 downto 4) <= p_shl1_fu_584_p3(7 downto 4);
                    ti_cast17_reg_1430(3 downto 0) <= ti_cast17_fu_592_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state53))) then
                reg_535 <= grp_fu_597_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_1195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    sext_ln122_reg_1646(63 downto 2) <= sext_ln122_fu_1242_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    shl_ln1_reg_1451(4 downto 3) <= shl_ln1_fu_633_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    sub_ln107_reg_1488(19 downto 2) <= sub_ln107_fu_802_p2(19 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_548_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1407 <= tmp_fu_560_p3;
                    zext_ln32_reg_1412(7 downto 0) <= zext_ln32_fu_568_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_1076_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    zext_ln66_reg_1579(4 downto 2) <= zext_ln66_fu_1106_p1(4 downto 2);
                    zext_ln67_3_reg_1574(4 downto 0) <= zext_ln67_3_fu_1094_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    zext_ln67_1_reg_1561(6 downto 2) <= zext_ln67_1_fu_1068_p1(6 downto 2);
                    zext_ln67_reg_1556(4 downto 0) <= zext_ln67_fu_1038_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln32_reg_1412(9 downto 8) <= "00";
    p_shl1_reg_1425(3 downto 0) <= "0000";
    ti_cast17_reg_1430(4) <= '0';
    shl_ln1_reg_1451(2 downto 0) <= "000";
    sub_ln107_reg_1488(1 downto 0) <= "00";
    zext_ln67_reg_1556(7 downto 5) <= "000";
    zext_ln67_1_reg_1561(1 downto 0) <= "00";
    zext_ln67_1_reg_1561(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln67_3_reg_1574(11 downto 5) <= "0000000";
    zext_ln66_reg_1579(1 downto 0) <= "00";
    zext_ln66_reg_1579(11 downto 5) <= "0000000";
    sext_ln122_reg_1646(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state31, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state2, icmp_ln31_fu_548_p2, ap_CS_fsm_state3, icmp_ln32_fu_572_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond1_fu_612_p2, ap_CS_fsm_state6, icmp_ln98_fu_651_p2, ap_CS_fsm_state7, icmp_ln99_fu_711_p2, ap_CS_fsm_state8, icmp_ln100_fu_826_p2, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln58_fu_1020_p2, ap_CS_fsm_state23, icmp_ln59_fu_1076_p2, ap_CS_fsm_state27, ap_CS_fsm_state47, icmp_ln121_fu_1195_p2, ap_CS_fsm_state48, icmp_ln122_fu_1260_p2, ap_CS_fsm_state68, exitcond6713_fu_1337_p2, icmp_ln54_fu_978_p2, icmp_ln39_fu_600_p2, icmp_ln55_fu_1004_p2, icmp_ln66_fu_1124_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln39_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln98_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln99_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln100_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln54_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln55_fu_1004_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln58_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln59_fu_1076_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln66_fu_1124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln121_fu_1195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln122_fu_1260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (((exitcond6713_fu_1337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_832_p2 <= std_logic_vector(unsigned(bx_reg_379) + unsigned(ap_const_lv5_1));
    add_ln103_1_fu_850_p2 <= std_logic_vector(unsigned(zext_ln100_fu_822_p1) + unsigned(ap_const_lv6_3E));
    add_ln103_fu_860_p2 <= std_logic_vector(signed(sext_ln103_fu_856_p1) + signed(zext_ln103_fu_846_p1));
    add_ln107_1_fu_922_p2 <= std_logic_vector(unsigned(sub_ln107_reg_1488) + unsigned(sext_ln107_2_fu_918_p1));
    add_ln107_2_fu_931_p2 <= std_logic_vector(signed(sext_ln107_3_fu_927_p1) + signed(add_ln107_reg_1470));
    add_ln107_3_fu_691_p2 <= std_logic_vector(unsigned(phi_mul_reg_356) + unsigned(zext_ln107_1_fu_687_p1));
    add_ln107_4_fu_812_p2 <= std_logic_vector(unsigned(mul_ln99_reg_1475) + unsigned(zext_ln107_2_fu_808_p1));
    add_ln107_fu_682_p2 <= std_logic_vector(unsigned(zext_ln99_fu_678_p1) + unsigned(input_ftmap));
    add_ln121_fu_1201_p2 <= std_logic_vector(unsigned(ty_reg_493) + unsigned(ap_const_lv5_1));
    add_ln122_fu_1266_p2 <= std_logic_vector(unsigned(tx_reg_504) + unsigned(ap_const_lv5_1));
    add_ln124_1_fu_1281_p2 <= std_logic_vector(unsigned(zext_ln124_3_fu_1277_p1) + unsigned(p_shl1_reg_1425));
    add_ln124_2_fu_1303_p2 <= std_logic_vector(unsigned(add_ln124_3_fu_1298_p2) + unsigned(sext_ln122_reg_1646));
    add_ln124_3_fu_1298_p2 <= std_logic_vector(unsigned(zext_ln124_4_fu_1294_p1) + unsigned(output_ftmap));
    add_ln124_4_fu_1185_p2 <= std_logic_vector(unsigned(tmp_1_fu_1177_p3) + unsigned(zext_ln124_fu_1173_p1));
    add_ln124_5_fu_1250_p2 <= std_logic_vector(unsigned(add_ln124_4_reg_1633) + unsigned(zext_ln124_5_fu_1246_p1));
    add_ln124_fu_1272_p2 <= std_logic_vector(unsigned(ti_cast17_reg_1430) + unsigned(tx_reg_504));
    add_ln31_fu_554_p2 <= std_logic_vector(unsigned(tj_fu_178) + unsigned(ap_const_lv4_1));
    add_ln32_fu_578_p2 <= std_logic_vector(unsigned(ti_reg_310) + unsigned(ap_const_lv4_1));
    add_ln39_fu_606_p2 <= std_logic_vector(unsigned(tn_reg_322) + unsigned(ap_const_lv3_1));
    add_ln54_fu_984_p2 <= std_logic_vector(unsigned(ty_1_reg_390) + unsigned(ap_const_lv5_1));
    add_ln55_fu_1010_p2 <= std_logic_vector(unsigned(tx_1_reg_402) + unsigned(ap_const_lv5_1));
    add_ln58_fu_1026_p2 <= std_logic_vector(unsigned(ky_reg_414) + unsigned(ap_const_lv3_1));
    add_ln59_fu_1082_p2 <= std_logic_vector(unsigned(kx_reg_436) + unsigned(ap_const_lv3_1));
    add_ln63_fu_1088_p2 <= std_logic_vector(unsigned(zext_ln59_1_fu_1072_p1) + unsigned(tx_1_reg_402));
    add_ln66_fu_1130_p2 <= std_logic_vector(unsigned(nin_1_reg_470) + unsigned(ap_const_lv4_1));
    add_ln67_1_fu_1062_p2 <= std_logic_vector(unsigned(shl_ln3_fu_1042_p3) + unsigned(zext_ln59_fu_1058_p1));
    add_ln67_3_fu_1144_p2 <= std_logic_vector(unsigned(add_ln67_4_fu_1139_p2) + unsigned(zext_ln67_1_reg_1561));
    add_ln67_4_fu_1139_p2 <= std_logic_vector(unsigned(zext_ln67_4_fu_1136_p1) + unsigned(conv3_weights));
    add_ln67_7_fu_1110_p2 <= std_logic_vector(unsigned(phi_mul46_reg_459) + unsigned(ap_const_lv8_15));
    add_ln98_1_fu_641_p2 <= std_logic_vector(unsigned(phi_mul_reg_356) + unsigned(ap_const_lv8_15));
    add_ln98_fu_657_p2 <= std_logic_vector(unsigned(nin_reg_345) + unsigned(ap_const_lv4_1));
    add_ln99_fu_717_p2 <= std_logic_vector(unsigned(by_reg_368) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;

    ap_ST_fsm_state49_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;

    ap_ST_fsm_state57_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;

    ap_ST_fsm_state62_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;

    ap_ST_fsm_state67_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_548_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln31_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_548_p2)
    begin
        if (((icmp_ln31_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln107_fu_956_p1 <= gmem_addr_4_read_reg_1512;
    bitcast_ln124_fu_1328_p1 <= gmem_addr_read_reg_1676;
    bitcast_ln67_fu_1169_p1 <= gmem_addr_5_read_reg_1608;
    empty_59_fu_618_p2 <= std_logic_vector(unsigned(empty_reg_334) + unsigned(ap_const_lv12_1));
    empty_60_fu_663_p2 <= std_logic_vector(unsigned(zext_ln98_fu_647_p1) + unsigned(shl_ln1_reg_1451));
    empty_61_fu_733_p2 <= std_logic_vector(signed(tmp1_cast_fu_729_p1) + signed(zext_ln32_reg_1412));
    empty_62_fu_972_p2 <= std_logic_vector(unsigned(tmp_3_fu_964_p3) + unsigned(ty_1_cast_fu_960_p1));
    empty_63_fu_994_p2 <= std_logic_vector(unsigned(empty_62_reg_1517) + unsigned(tx_1_cast_fu_990_p1));
    empty_64_fu_1032_p2 <= std_logic_vector(unsigned(zext_ln58_fu_1016_p1) + unsigned(ty_1_reg_390));
    empty_66_fu_1207_p2 <= std_logic_vector(unsigned(zext_ln121_fu_1191_p1) + unsigned(tmp_reg_1407));
    empty_68_fu_1343_p2 <= std_logic_vector(unsigned(empty_67_reg_515) + unsigned(ap_const_lv9_1));
    exitcond1_fu_612_p2 <= "1" when (empty_reg_334 = ap_const_lv12_DC8) else "0";
    exitcond6713_fu_1337_p2 <= "1" when (empty_67_reg_515 = ap_const_lv9_121) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state9, ap_CS_fsm_state31, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1354_p1 <= zext_ln67_reg_1556(5 - 1 downto 0);
    grp_fu_1354_p2 <= ap_const_lv12_15(5 - 1 downto 0);
    grp_fu_1354_p3 <= zext_ln67_3_reg_1574(5 - 1 downto 0);
    grp_fu_1363_p0 <= grp_fu_1363_p00(4 - 1 downto 0);
    grp_fu_1363_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_1_reg_470),5));
    grp_fu_1363_p2 <= ap_const_lv12_64(7 - 1 downto 0);
    grp_fu_1363_p3 <= zext_ln66_reg_1579(5 - 1 downto 0);

    grp_fu_526_ce_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state58, ap_CS_fsm_state53, ap_CS_fsm_state61, ap_CS_fsm_state46, ap_CS_fsm_state43, ap_CS_fsm_state50, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            grp_fu_526_ce <= ap_const_logic_1;
        else 
            grp_fu_526_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_526_p0_assign_proc : process(ap_CS_fsm_state58, output_fm_buffer_0_load_reg_1671, bitcast_ln124_fu_1328_p1, empty_65_reg_481, ap_CS_fsm_state43, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_526_p0 <= bitcast_ln124_fu_1328_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_526_p0 <= output_fm_buffer_0_load_reg_1671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_526_p0 <= empty_65_reg_481;
        else 
            grp_fu_526_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_526_p1_assign_proc : process(conv3_biases_0_0_val, ap_CS_fsm_state58, reg_535, mul_reg_1623, ap_CS_fsm_state43, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_526_p1 <= reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_526_p1 <= conv3_biases_0_0_val;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_526_p1 <= mul_reg_1623;
        else 
            grp_fu_526_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_597_p_ce <= grp_fu_526_ce;
    grp_fu_597_p_din0 <= grp_fu_526_p0;
    grp_fu_597_p_din1 <= grp_fu_526_p1;
    grp_fu_597_p_opcode <= ap_const_lv2_0;
    grp_fu_601_p_ce <= ap_const_logic_1;
    grp_fu_601_p_din0 <= bitcast_ln67_fu_1169_p1;
    grp_fu_601_p_din1 <= input_fm_buffer_load_reg_1613;
    icmp_ln100_fu_826_p2 <= "1" when (bx_reg_379 = ap_const_lv5_15) else "0";
    icmp_ln121_fu_1195_p2 <= "1" when (ty_reg_493 = ap_const_lv5_11) else "0";
    icmp_ln122_fu_1260_p2 <= "1" when (tx_reg_504 = ap_const_lv5_11) else "0";
    icmp_ln31_fu_548_p2 <= "1" when (tj_fu_178 = ap_const_lv4_F) else "0";
    icmp_ln32_fu_572_p2 <= "1" when (ti_reg_310 = ap_const_lv4_F) else "0";
    icmp_ln39_fu_600_p2 <= "1" when (tn_reg_322 = ap_const_lv3_4) else "0";
    icmp_ln52_1_fu_874_p2 <= "1" when (signed(add_ln103_fu_860_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln52_fu_746_p2 <= "1" when (signed(empty_61_fu_733_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln54_fu_978_p2 <= "1" when (ty_1_reg_390 = ap_const_lv5_11) else "0";
    icmp_ln55_fu_1004_p2 <= "1" when (tx_1_reg_402 = ap_const_lv5_11) else "0";
    icmp_ln58_fu_1020_p2 <= "1" when (ky_reg_414 = ap_const_lv3_5) else "0";
    icmp_ln59_fu_1076_p2 <= "1" when (kx_reg_436 = ap_const_lv3_5) else "0";
    icmp_ln66_fu_1124_p2 <= "1" when (nin_1_reg_470 = ap_const_lv4_8) else "0";
    icmp_ln98_fu_651_p2 <= "1" when (nin_reg_345 = ap_const_lv4_8) else "0";
    icmp_ln99_fu_711_p2 <= "1" when (by_reg_368 = ap_const_lv5_15) else "0";

    input_fm_buffer_address0_assign_proc : process(ap_CS_fsm_state5, input_fm_buffer_addr_1_reg_1493, input_fm_buffer_addr_2_reg_1589, ap_CS_fsm_state18, p_cast49_fu_624_p1, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_2_reg_1589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_fm_buffer_address0 <= input_fm_buffer_addr_1_reg_1493;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_fm_buffer_address0 <= p_cast49_fu_624_p1(12 - 1 downto 0);
        else 
            input_fm_buffer_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_fm_buffer_ce0 <= ap_const_logic_1;
        else 
            input_fm_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_fm_buffer_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state18, bitcast_ln107_fu_956_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_fm_buffer_d0 <= bitcast_ln107_fu_956_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_fm_buffer_d0 <= ap_const_lv32_0;
        else 
            input_fm_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_fm_buffer_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_612_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((exitcond1_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            input_fm_buffer_we0 <= ap_const_logic_1;
        else 
            input_fm_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state9, ap_CS_fsm_state31, ap_CS_fsm_state49, gmem_addr_4_reg_1506, gmem_addr_5_reg_1602, gmem_addr_reg_1664)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_1664;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                m_axi_gmem_ARADDR <= gmem_addr_5_reg_1602;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                m_axi_gmem_ARADDR <= gmem_addr_4_reg_1506;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state9, ap_CS_fsm_state31, ap_CS_fsm_state49)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_reg_1664;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state58)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state57)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (m_axi_gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_gmem_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= reg_535;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_WREADY = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln107_fu_672_p0 <= mul_ln107_fu_672_p00(5 - 1 downto 0);
    mul_ln107_fu_672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_60_fu_663_p2),23));
    mul_ln107_fu_672_p1 <= ap_const_lv23_3F804(19 - 1 downto 0);
    mul_ln99_fu_701_p0 <= mul_ln99_fu_701_p00(8 - 1 downto 0);
    mul_ln99_fu_701_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_3_fu_691_p2),12));
    mul_ln99_fu_701_p1 <= ap_const_lv12_15(6 - 1 downto 0);
    or_ln51_1_fu_888_p2 <= (tmp_5_fu_866_p3 or icmp_ln52_1_fu_874_p2);
    or_ln51_fu_768_p2 <= (tmp_2_fu_738_p3 or icmp_ln52_fu_746_p2);

    output_fm_buffer_0_address0_assign_proc : process(output_fm_buffer_0_addr_2_reg_1530, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state48, ap_CS_fsm_state68, p_cast54_fu_999_p1, zext_ln124_6_fu_1255_p1, p_cast50_fu_1349_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            output_fm_buffer_0_address0 <= p_cast50_fu_1349_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output_fm_buffer_0_address0 <= zext_ln124_6_fu_1255_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_fm_buffer_0_address0 <= output_fm_buffer_0_addr_2_reg_1530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_fm_buffer_0_address0 <= p_cast54_fu_999_p1(9 - 1 downto 0);
        else 
            output_fm_buffer_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_fm_buffer_0_ce0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_fm_buffer_0_d0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state68, add57_lcssa_lcssa19_reg_425)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            output_fm_buffer_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_fm_buffer_0_d0 <= add57_lcssa_lcssa19_reg_425;
        else 
            output_fm_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_fm_buffer_0_we0_assign_proc : process(ap_CS_fsm_state22, icmp_ln58_fu_1020_p2, ap_CS_fsm_state68, exitcond6713_fu_1337_p2)
    begin
        if ((((exitcond6713_fu_1337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((icmp_ln58_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            output_fm_buffer_0_we0 <= ap_const_logic_1;
        else 
            output_fm_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast49_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_334),64));
    p_cast50_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_67_reg_515),64));
    p_cast54_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_63_fu_994_p2),64));
    p_shl1_fu_584_p3 <= (ti_reg_310 & ap_const_lv4_0);
    select_ln51_2_fu_894_p3 <= 
        ap_const_lv10_0 when (tmp_6_fu_880_p3(0) = '1') else 
        ap_const_lv10_FE;
    select_ln51_3_fu_902_p3 <= 
        select_ln51_2_fu_894_p3 when (or_ln51_1_fu_888_p2(0) = '1') else 
        add_ln103_fu_860_p2;
    select_ln51_fu_760_p3 <= 
        ap_const_lv10_0 when (tmp_4_fu_752_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln103_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln103_1_fu_850_p2),10));

        sext_ln107_1_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_936_p4),64));

        sext_ln107_2_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln107_2_fu_910_p3),20));

        sext_ln107_3_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln107_1_fu_922_p2),64));

        sext_ln107_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln107_1_fu_790_p3),20));

        sext_ln122_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln124_fu_1236_p2),64));

        sext_ln124_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1308_p4),64));

        sext_ln67_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_1149_p4),64));

    shl_ln107_1_fu_790_p3 <= (yClamped_fu_774_p3 & ap_const_lv2_0);
    shl_ln107_2_fu_910_p3 <= (select_ln51_3_fu_902_p3 & ap_const_lv2_0);
    shl_ln124_1_fu_1224_p3 <= (empty_66_fu_1207_p2 & ap_const_lv2_0);
    shl_ln124_2_fu_1286_p3 <= (add_ln124_1_fu_1281_p2 & ap_const_lv2_0);
    shl_ln1_fu_633_p3 <= (trunc_ln41_fu_629_p1 & ap_const_lv3_0);
    shl_ln2_fu_782_p3 <= (yClamped_fu_774_p3 & ap_const_lv10_0);
    shl_ln3_fu_1042_p3 <= (ky_reg_414 & ap_const_lv4_0);
    shl_ln67_1_fu_1050_p3 <= (ky_reg_414 & ap_const_lv2_0);
    shl_ln67_2_fu_1098_p3 <= (kx_reg_436 & ap_const_lv2_0);
    shl_ln_fu_1212_p3 <= (empty_66_fu_1207_p2 & ap_const_lv10_0);
    sub_ln107_fu_802_p2 <= std_logic_vector(unsigned(shl_ln2_fu_782_p3) - unsigned(sext_ln107_fu_798_p1));
    sub_ln124_fu_1236_p2 <= std_logic_vector(unsigned(zext_ln124_1_fu_1220_p1) - unsigned(zext_ln124_2_fu_1232_p1));
    ti_cast17_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_reg_310),5));
        tmp1_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_723_p2),10));

    tmp1_fu_723_p2 <= std_logic_vector(unsigned(zext_ln99_2_fu_707_p1) + unsigned(ap_const_lv6_3E));
    tmp4_fu_838_p3 <= (ti_reg_310 & ti_reg_310);
    tmp_1_fu_1177_p3 <= (ty_reg_493 & ap_const_lv4_0);
    tmp_2_fu_738_p3 <= empty_61_fu_733_p2(9 downto 9);
    tmp_3_fu_964_p3 <= (ty_1_reg_390 & ap_const_lv4_0);
    tmp_4_fu_752_p3 <= empty_61_fu_733_p2(9 downto 9);
    tmp_5_fu_866_p3 <= add_ln103_fu_860_p2(9 downto 9);
    tmp_6_fu_880_p3 <= add_ln103_fu_860_p2(9 downto 9);
    tmp_fu_560_p3 <= (tj_fu_178 & tj_fu_178);
    trunc_ln41_fu_629_p1 <= tn_reg_322(2 - 1 downto 0);
    trunc_ln4_fu_936_p4 <= add_ln107_2_fu_931_p2(63 downto 2);
    trunc_ln5_fu_1149_p4 <= add_ln67_3_fu_1144_p2(63 downto 2);
    trunc_ln_fu_1308_p4 <= add_ln124_2_fu_1303_p2(63 downto 2);
    tx_1_cast_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_1_reg_402),9));
    ty_1_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_390),9));
    yClamped_fu_774_p3 <= 
        select_ln51_fu_760_p3 when (or_ln51_fu_768_p2(0) = '1') else 
        empty_61_fu_733_p2;
    zext_ln100_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_379),6));
    zext_ln103_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_838_p3),10));
    zext_ln107_1_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_368),8));
    zext_ln107_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bx_reg_379),12));
    zext_ln107_3_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_4_fu_812_p2),64));
    zext_ln121_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_493),8));
    zext_ln124_1_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1212_p3),19));
    zext_ln124_2_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln124_1_fu_1224_p3),19));
    zext_ln124_3_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_1272_p2),8));
    zext_ln124_4_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln124_2_fu_1286_p3),64));
    zext_ln124_5_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_reg_504),9));
    zext_ln124_6_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_5_fu_1250_p2),64));
    zext_ln124_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_reg_493),9));
    zext_ln32_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_560_p3),10));
    zext_ln58_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_414),5));
    zext_ln59_1_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_436),5));
    zext_ln59_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln67_1_fu_1050_p3),7));
    zext_ln66_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln67_2_fu_1098_p3),12));
    zext_ln67_1_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_1_fu_1062_p2),64));
    zext_ln67_3_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_1088_p2),12));
    zext_ln67_4_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1363_p4),64));
    zext_ln67_6_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1354_p4),64));
    zext_ln67_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_64_fu_1032_p2),8));
    zext_ln98_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nin_reg_345),5));
    zext_ln99_2_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(by_reg_368),6));
    zext_ln99_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln107_fu_672_p2),64));
end behav;
