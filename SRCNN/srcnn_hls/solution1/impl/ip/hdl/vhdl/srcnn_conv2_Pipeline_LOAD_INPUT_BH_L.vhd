-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_LOAD_INPUT_BH_L is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_i2_AWVALID : OUT STD_LOGIC;
    m_axi_i2_AWREADY : IN STD_LOGIC;
    m_axi_i2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WVALID : OUT STD_LOGIC;
    m_axi_i2_WREADY : IN STD_LOGIC;
    m_axi_i2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_WLAST : OUT STD_LOGIC;
    m_axi_i2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARVALID : OUT STD_LOGIC;
    m_axi_i2_ARREADY : IN STD_LOGIC;
    m_axi_i2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_i2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_i2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_i2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RVALID : IN STD_LOGIC;
    m_axi_i2_RREADY : OUT STD_LOGIC;
    m_axi_i2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_i2_RLAST : IN STD_LOGIC;
    m_axi_i2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_i2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BVALID : IN STD_LOGIC;
    m_axi_i2_BREADY : OUT STD_LOGIC;
    m_axi_i2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_i2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_i2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln79 : IN STD_LOGIC_VECTOR (18 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_we0 : OUT STD_LOGIC;
    conv2_float_255_255_float_64_1_1_float_float_255_255_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_LOAD_INPUT_BH_L is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_BF40 : STD_LOGIC_VECTOR (15 downto 0) := "1011111101000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_2FD : STD_LOGIC_VECTOR (9 downto 0) := "1011111101";
    constant ap_const_lv25_3F804 : STD_LOGIC_VECTOR (24 downto 0) := "0000000111111100000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv17_182 : STD_LOGIC_VECTOR (16 downto 0) := "00000000110000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv14_55 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal or_ln80_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_2_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op77_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln79_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i2_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i2_blk_n_AR : STD_LOGIC;
    signal first_iter_0_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_01_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln79_cast_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln79_cast_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_607_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_611_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_1_fu_287_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_reg_616_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln80_mid2_v_reg_622 : STD_LOGIC_VECTOR (61 downto 0);
    signal and_ln79_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_reg_627_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln80_2_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_reg_646 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_reg_646_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i2_addr_2_read_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_197_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_first_iter_01_phi_fu_208_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast6_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln79_1_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bh_fu_114 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln80_1_fu_507_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_118 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln80_2_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bin_fu_122 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten17_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln79_3_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_342_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_fu_269_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln79_fu_299_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln79_fu_299_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln79_fu_299_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln79_1_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_1_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_2_fu_314_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8407_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln80_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul91_fu_395_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul91_fu_395_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul91_fu_395_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln80_1_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_cast_fu_487_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln79_1_cast_fu_477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_344_fu_491_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln79_fu_470_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln80_fu_501_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln79_2_fu_497_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln80_1_cast_fu_514_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_345_fu_518_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_346_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_346_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast4_fu_534_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_341_fu_538_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_385_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul91_fu_395_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln79_fu_299_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mul_7ns_19ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component srcnn_urem_8ns_8ns_8_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component srcnn_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component srcnn_mul_11s_8ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_7ns_19ns_25_1_1_U266 : component srcnn_mul_7ns_19ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln79_fu_299_p0,
        din1 => mul_ln79_fu_299_p1,
        dout => mul_ln79_fu_299_p2);

    urem_8ns_8ns_8_12_1_U267 : component srcnn_urem_8ns_8ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln80_fu_359_p3,
        din1 => ap_const_lv8_55,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p2);

    mul_8ns_10ns_17_1_1_U268 : component srcnn_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul91_fu_395_p0,
        din1 => mul91_fu_395_p1,
        dout => mul91_fu_395_p2);

    mul_11s_8ns_14_1_1_U269 : component srcnn_mul_11s_8ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        din0 => empty_345_fu_518_p2,
        din1 => empty_346_fu_528_p1,
        dout => empty_346_fu_528_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    bh_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    bh_fu_114 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln79_reg_607_pp0_iter11_reg = ap_const_lv1_0))) then 
                    bh_fu_114 <= select_ln80_1_fu_507_p3;
                end if;
            end if; 
        end if;
    end process;

    bin_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bin_fu_122 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0))) then 
                    bin_fu_122 <= select_ln79_1_fu_287_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_01_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln79_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_01_reg_204 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_01_reg_204 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    first_iter_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln79_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_193 <= or_ln80_2_reg_641;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_193 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten17_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten17_fu_126 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0))) then 
                    indvar_flatten17_fu_126 <= add_ln79_3_fu_257_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_118 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_118 <= select_ln80_2_fu_423_p3;
                end if;
            end if; 
        end if;
    end process;

    loop_index_i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index_i_fu_110 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0))) then 
                    loop_index_i_fu_110 <= empty_fu_411_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln79_reg_627 <= and_ln79_fu_341_p2;
                icmp_ln80_reg_611 <= icmp_ln80_fu_275_p2;
                or_ln80_reg_632 <= or_ln80_fu_347_p2;
                p_cast_reg_646 <= mul91_fu_395_p2(16 downto 15);
                select_ln79_1_reg_616 <= select_ln79_1_fu_287_p3;
                sext_ln80_mid2_v_reg_622 <= add_ln79_2_fu_314_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln79_reg_627_pp0_iter10_reg <= and_ln79_reg_627_pp0_iter9_reg;
                and_ln79_reg_627_pp0_iter11_reg <= and_ln79_reg_627_pp0_iter10_reg;
                and_ln79_reg_627_pp0_iter2_reg <= and_ln79_reg_627;
                and_ln79_reg_627_pp0_iter3_reg <= and_ln79_reg_627_pp0_iter2_reg;
                and_ln79_reg_627_pp0_iter4_reg <= and_ln79_reg_627_pp0_iter3_reg;
                and_ln79_reg_627_pp0_iter5_reg <= and_ln79_reg_627_pp0_iter4_reg;
                and_ln79_reg_627_pp0_iter6_reg <= and_ln79_reg_627_pp0_iter5_reg;
                and_ln79_reg_627_pp0_iter7_reg <= and_ln79_reg_627_pp0_iter6_reg;
                and_ln79_reg_627_pp0_iter8_reg <= and_ln79_reg_627_pp0_iter7_reg;
                and_ln79_reg_627_pp0_iter9_reg <= and_ln79_reg_627_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i2_addr_2_read_reg_660 <= m_axi_i2_RDATA;
                icmp_ln79_reg_607_pp0_iter10_reg <= icmp_ln79_reg_607_pp0_iter9_reg;
                icmp_ln79_reg_607_pp0_iter11_reg <= icmp_ln79_reg_607_pp0_iter10_reg;
                icmp_ln79_reg_607_pp0_iter2_reg <= icmp_ln79_reg_607;
                icmp_ln79_reg_607_pp0_iter3_reg <= icmp_ln79_reg_607_pp0_iter2_reg;
                icmp_ln79_reg_607_pp0_iter4_reg <= icmp_ln79_reg_607_pp0_iter3_reg;
                icmp_ln79_reg_607_pp0_iter5_reg <= icmp_ln79_reg_607_pp0_iter4_reg;
                icmp_ln79_reg_607_pp0_iter6_reg <= icmp_ln79_reg_607_pp0_iter5_reg;
                icmp_ln79_reg_607_pp0_iter7_reg <= icmp_ln79_reg_607_pp0_iter6_reg;
                icmp_ln79_reg_607_pp0_iter8_reg <= icmp_ln79_reg_607_pp0_iter7_reg;
                icmp_ln79_reg_607_pp0_iter9_reg <= icmp_ln79_reg_607_pp0_iter8_reg;
                icmp_ln80_reg_611_pp0_iter10_reg <= icmp_ln80_reg_611_pp0_iter9_reg;
                icmp_ln80_reg_611_pp0_iter11_reg <= icmp_ln80_reg_611_pp0_iter10_reg;
                icmp_ln80_reg_611_pp0_iter2_reg <= icmp_ln80_reg_611;
                icmp_ln80_reg_611_pp0_iter3_reg <= icmp_ln80_reg_611_pp0_iter2_reg;
                icmp_ln80_reg_611_pp0_iter4_reg <= icmp_ln80_reg_611_pp0_iter3_reg;
                icmp_ln80_reg_611_pp0_iter5_reg <= icmp_ln80_reg_611_pp0_iter4_reg;
                icmp_ln80_reg_611_pp0_iter6_reg <= icmp_ln80_reg_611_pp0_iter5_reg;
                icmp_ln80_reg_611_pp0_iter7_reg <= icmp_ln80_reg_611_pp0_iter6_reg;
                icmp_ln80_reg_611_pp0_iter8_reg <= icmp_ln80_reg_611_pp0_iter7_reg;
                icmp_ln80_reg_611_pp0_iter9_reg <= icmp_ln80_reg_611_pp0_iter8_reg;
                p_cast_reg_646_pp0_iter10_reg <= p_cast_reg_646_pp0_iter9_reg;
                p_cast_reg_646_pp0_iter11_reg <= p_cast_reg_646_pp0_iter10_reg;
                p_cast_reg_646_pp0_iter2_reg <= p_cast_reg_646;
                p_cast_reg_646_pp0_iter3_reg <= p_cast_reg_646_pp0_iter2_reg;
                p_cast_reg_646_pp0_iter4_reg <= p_cast_reg_646_pp0_iter3_reg;
                p_cast_reg_646_pp0_iter5_reg <= p_cast_reg_646_pp0_iter4_reg;
                p_cast_reg_646_pp0_iter6_reg <= p_cast_reg_646_pp0_iter5_reg;
                p_cast_reg_646_pp0_iter7_reg <= p_cast_reg_646_pp0_iter6_reg;
                p_cast_reg_646_pp0_iter8_reg <= p_cast_reg_646_pp0_iter7_reg;
                p_cast_reg_646_pp0_iter9_reg <= p_cast_reg_646_pp0_iter8_reg;
                select_ln79_1_reg_616_pp0_iter10_reg <= select_ln79_1_reg_616_pp0_iter9_reg;
                select_ln79_1_reg_616_pp0_iter11_reg <= select_ln79_1_reg_616_pp0_iter10_reg;
                select_ln79_1_reg_616_pp0_iter2_reg <= select_ln79_1_reg_616;
                select_ln79_1_reg_616_pp0_iter3_reg <= select_ln79_1_reg_616_pp0_iter2_reg;
                select_ln79_1_reg_616_pp0_iter4_reg <= select_ln79_1_reg_616_pp0_iter3_reg;
                select_ln79_1_reg_616_pp0_iter5_reg <= select_ln79_1_reg_616_pp0_iter4_reg;
                select_ln79_1_reg_616_pp0_iter6_reg <= select_ln79_1_reg_616_pp0_iter5_reg;
                select_ln79_1_reg_616_pp0_iter7_reg <= select_ln79_1_reg_616_pp0_iter6_reg;
                select_ln79_1_reg_616_pp0_iter8_reg <= select_ln79_1_reg_616_pp0_iter7_reg;
                select_ln79_1_reg_616_pp0_iter9_reg <= select_ln79_1_reg_616_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln79_reg_607 <= icmp_ln79_fu_251_p2;
                sext_ln79_cast_reg_602 <= sext_ln79_cast_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_251_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln80_2_reg_641 <= or_ln80_2_fu_379_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln79_1_fu_309_p2 <= std_logic_vector(unsigned(zext_ln79_1_fu_305_p1) + unsigned(input_ftmap));
    add_ln79_2_fu_314_p2 <= std_logic_vector(unsigned(add_ln79_1_fu_309_p2) + unsigned(sext_ln79_cast_reg_602));
    add_ln79_3_fu_257_p2 <= std_logic_vector(unsigned(indvar_flatten17_fu_126) + unsigned(ap_const_lv16_1));
    add_ln79_fu_269_p2 <= std_logic_vector(unsigned(bin_fu_122) + unsigned(ap_const_lv7_1));
    add_ln80_1_fu_417_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_118) + unsigned(ap_const_lv10_1));
    add_ln80_fu_501_p2 <= std_logic_vector(unsigned(select_ln79_fu_470_p3) + unsigned(ap_const_lv2_1));
    and_ln79_fu_341_p2 <= (xor_ln79_fu_329_p2 and exitcond8407_fu_335_p2);
    and_ln80_fu_373_p2 <= (xor_ln80_fu_367_p2 and ap_phi_mux_first_iter_0_phi_fu_197_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, m_axi_i2_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_i2_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, m_axi_i2_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_i2_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_i2_RVALID)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (m_axi_i2_RVALID = ap_const_logic_0);
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_i2_ARREADY, ap_predicate_op77_readreq_state3)
    begin
                ap_block_state3_io <= ((m_axi_i2_ARREADY = ap_const_logic_0) and (ap_predicate_op77_readreq_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln79_fu_251_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_01_phi_fu_208_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_01_reg_204, icmp_ln79_reg_607)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln79_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_01_phi_fu_208_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_01_phi_fu_208_p4 <= first_iter_01_reg_204;
        end if; 
    end process;


    ap_phi_mux_first_iter_0_phi_fu_197_p4_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln80_2_reg_641, ap_block_pp0_stage0, first_iter_0_reg_193, icmp_ln79_reg_607)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln79_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_197_p4 <= or_ln80_2_reg_641;
        else 
            ap_phi_mux_first_iter_0_phi_fu_197_p4 <= first_iter_0_reg_193;
        end if; 
    end process;


    ap_predicate_op77_readreq_state3_assign_proc : process(or_ln80_reg_632, or_ln80_2_reg_641)
    begin
                ap_predicate_op77_readreq_state3 <= ((or_ln80_2_reg_641 = ap_const_lv1_1) and (or_ln80_reg_632 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_address0 <= p_cast6_fu_544_p1(14 - 1 downto 0);

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_d0 <= empty_342_fu_551_p1;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, p_cast_reg_646_pp0_iter11_reg)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (p_cast_reg_646_pp0_iter11_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_address0 <= p_cast6_fu_544_p1(14 - 1 downto 0);

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_d0 <= empty_342_fu_551_p1;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, p_cast_reg_646_pp0_iter11_reg)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (p_cast_reg_646_pp0_iter11_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_address0 <= p_cast6_fu_544_p1(14 - 1 downto 0);

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_d0 <= empty_342_fu_551_p1;

    conv2_float_255_255_float_64_1_1_float_float_255_255_i_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, p_cast_reg_646_pp0_iter11_reg)
    begin
        if ((not((p_cast_reg_646_pp0_iter11_reg = ap_const_lv2_0)) and not((p_cast_reg_646_pp0_iter11_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_we0 <= ap_const_logic_1;
        else 
            conv2_float_255_255_float_64_1_1_float_float_255_255_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_341_fu_538_p2 <= std_logic_vector(unsigned(empty_346_fu_528_p2) + unsigned(p_cast4_fu_534_p1));
    empty_342_fu_551_p1 <= i2_addr_2_read_reg_660;
    empty_344_fu_491_p2 <= std_logic_vector(unsigned(tmp_58_cast_fu_487_p1) - unsigned(select_ln79_1_cast_fu_477_p1));
    empty_345_fu_518_p2 <= std_logic_vector(signed(sext_ln79_2_fu_497_p1) + signed(select_ln80_1_cast_fu_514_p1));
    empty_346_fu_528_p1 <= ap_const_lv14_55(8 - 1 downto 0);
    empty_fu_411_p2 <= std_logic_vector(unsigned(select_ln80_fu_359_p3) + unsigned(ap_const_lv8_1));
    exitcond8407_fu_335_p2 <= "1" when (loop_index_i_fu_110 = ap_const_lv8_FF) else "0";

    grp_fu_385_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_385_ce <= ap_const_logic_1;
        else 
            grp_fu_385_ce <= ap_const_logic_0;
        end if; 
    end process;


    i2_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_i2_ARREADY, ap_predicate_op77_readreq_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op77_readreq_state3 = ap_const_boolean_1))) then 
            i2_blk_n_AR <= m_axi_i2_ARREADY;
        else 
            i2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    i2_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_i2_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            i2_blk_n_R <= m_axi_i2_RVALID;
        else 
            i2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln79_fu_251_p2 <= "1" when (indvar_flatten17_fu_126 = ap_const_lv16_BF40) else "0";
    icmp_ln80_fu_275_p2 <= "1" when (indvar_flatten_fu_118 = ap_const_lv10_2FD) else "0";
    m_axi_i2_ARADDR <= sext_ln79_1_fu_451_p1;
    m_axi_i2_ARBURST <= ap_const_lv2_0;
    m_axi_i2_ARCACHE <= ap_const_lv4_0;
    m_axi_i2_ARID <= ap_const_lv1_0;
    m_axi_i2_ARLEN <= ap_const_lv32_2FD;
    m_axi_i2_ARLOCK <= ap_const_lv2_0;
    m_axi_i2_ARPROT <= ap_const_lv3_0;
    m_axi_i2_ARQOS <= ap_const_lv4_0;
    m_axi_i2_ARREGION <= ap_const_lv4_0;
    m_axi_i2_ARSIZE <= ap_const_lv3_0;
    m_axi_i2_ARUSER <= ap_const_lv1_0;

    m_axi_i2_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op77_readreq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op77_readreq_state3 = ap_const_boolean_1))) then 
            m_axi_i2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_i2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_AWADDR <= ap_const_lv64_0;
    m_axi_i2_AWBURST <= ap_const_lv2_0;
    m_axi_i2_AWCACHE <= ap_const_lv4_0;
    m_axi_i2_AWID <= ap_const_lv1_0;
    m_axi_i2_AWLEN <= ap_const_lv32_0;
    m_axi_i2_AWLOCK <= ap_const_lv2_0;
    m_axi_i2_AWPROT <= ap_const_lv3_0;
    m_axi_i2_AWQOS <= ap_const_lv4_0;
    m_axi_i2_AWREGION <= ap_const_lv4_0;
    m_axi_i2_AWSIZE <= ap_const_lv3_0;
    m_axi_i2_AWUSER <= ap_const_lv1_0;
    m_axi_i2_AWVALID <= ap_const_logic_0;
    m_axi_i2_BREADY <= ap_const_logic_0;

    m_axi_i2_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_i2_RREADY <= ap_const_logic_1;
        else 
            m_axi_i2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_i2_WDATA <= ap_const_lv32_0;
    m_axi_i2_WID <= ap_const_lv1_0;
    m_axi_i2_WLAST <= ap_const_logic_0;
    m_axi_i2_WSTRB <= ap_const_lv4_0;
    m_axi_i2_WUSER <= ap_const_lv1_0;
    m_axi_i2_WVALID <= ap_const_logic_0;
    mul91_fu_395_p0 <= mul91_fu_395_p00(8 - 1 downto 0);
    mul91_fu_395_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_fu_359_p3),17));
    mul91_fu_395_p1 <= ap_const_lv17_182(10 - 1 downto 0);
    mul_ln79_fu_299_p0 <= mul_ln79_fu_299_p00(7 - 1 downto 0);
    mul_ln79_fu_299_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_1_fu_287_p3),25));
    mul_ln79_fu_299_p1 <= ap_const_lv25_3F804(19 - 1 downto 0);
    or_ln79_fu_281_p2 <= (icmp_ln80_fu_275_p2 or ap_phi_mux_first_iter_01_phi_fu_208_p4);
    or_ln80_1_fu_353_p2 <= (icmp_ln80_fu_275_p2 or and_ln79_fu_341_p2);
    or_ln80_2_fu_379_p2 <= (icmp_ln80_fu_275_p2 or and_ln80_fu_373_p2);
    or_ln80_fu_347_p2 <= (or_ln79_fu_281_p2 or and_ln79_fu_341_p2);
    p_cast4_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_385_p2),14));
    p_cast6_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_341_fu_538_p2),64));
    select_ln79_1_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_1_reg_616_pp0_iter11_reg),10));
    select_ln79_1_fu_287_p3 <= 
        add_ln79_fu_269_p2 when (icmp_ln80_fu_275_p2(0) = '1') else 
        bin_fu_122;
    select_ln79_fu_470_p3 <= 
        ap_const_lv2_0 when (icmp_ln80_reg_611_pp0_iter11_reg(0) = '1') else 
        bh_fu_114;
    select_ln80_1_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_1_fu_507_p3),11));
    select_ln80_1_fu_507_p3 <= 
        add_ln80_fu_501_p2 when (and_ln79_reg_627_pp0_iter11_reg(0) = '1') else 
        select_ln79_fu_470_p3;
    select_ln80_2_fu_423_p3 <= 
        ap_const_lv10_1 when (icmp_ln80_fu_275_p2(0) = '1') else 
        add_ln80_1_fu_417_p2;
    select_ln80_fu_359_p3 <= 
        ap_const_lv8_0 when (or_ln80_1_fu_353_p2(0) = '1') else 
        loop_index_i_fu_110;
        sext_ln79_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln80_mid2_v_reg_622),64));

        sext_ln79_2_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_344_fu_491_p2),11));

        sext_ln79_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln79),64));

    tmp_58_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_480_p3),10));
    tmp_s_fu_480_p3 <= (select_ln79_1_reg_616_pp0_iter11_reg & ap_const_lv2_0);
    xor_ln79_fu_329_p2 <= (icmp_ln80_fu_275_p2 xor ap_const_lv1_1);
    xor_ln80_fu_367_p2 <= (exitcond8407_fu_335_p2 xor ap_const_lv1_1);
    zext_ln79_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln79_fu_299_p2),64));
end behav;
